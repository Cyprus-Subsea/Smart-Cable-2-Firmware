
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e5c8  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000638  0800e7bc  0800e7bc  0001e7bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800edf4  0800edf4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800edf4  0800edf4  0001edf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800edfc  0800edfc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800edfc  0800edfc  0001edfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ee00  0800ee00  0001ee00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800ee04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  20000070  0800ee74  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000a04  2000040c  0800ee74  0002040c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f7c4  00000000  00000000  000200a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d1d  00000000  00000000  0003f86a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001860  00000000  00000000  00043588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  00044de8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d124  00000000  00000000  000464d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fd26  00000000  00000000  000735f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011194e  00000000  00000000  0009331a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a4c68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006acc  00000000  00000000  001a4cb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20000070 	.word	0x20000070
 8000210:	00000000 	.word	0x00000000
 8000214:	0800e7a4 	.word	0x0800e7a4

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	20000074 	.word	0x20000074
 8000230:	0800e7a4 	.word	0x0800e7a4

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b982 	b.w	8000560 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800027a:	4604      	mov	r4, r0
 800027c:	460f      	mov	r7, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0xa0>
 8000282:	428a      	cmp	r2, r1
 8000284:	4694      	mov	ip, r2
 8000286:	d961      	bls.n	800034c <__udivmoddi4+0xd8>
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	b143      	cbz	r3, 80002a0 <__udivmoddi4+0x2c>
 800028e:	f1c3 0120 	rsb	r1, r3, #32
 8000292:	409f      	lsls	r7, r3
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	409c      	lsls	r4, r3
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	430f      	orrs	r7, r1
 80002a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a4:	fa1f fe8c 	uxth.w	lr, ip
 80002a8:	0c22      	lsrs	r2, r4, #16
 80002aa:	fbb7 f6f1 	udiv	r6, r7, r1
 80002ae:	fb01 7716 	mls	r7, r1, r6, r7
 80002b2:	fb06 f00e 	mul.w	r0, r6, lr
 80002b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x5c>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x5a>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 8137 	bhi.w	800053c <__udivmoddi4+0x2c8>
 80002ce:	463e      	mov	r6, r7
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d8:	fb01 2210 	mls	r2, r1, r0, r2
 80002dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x86>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x84>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 811c 	bhi.w	8000530 <__udivmoddi4+0x2bc>
 80002f8:	4610      	mov	r0, r2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	2600      	movs	r6, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0x9a>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c5 4300 	strd	r4, r3, [r5]
 800030e:	4631      	mov	r1, r6
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000314:	428b      	cmp	r3, r1
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0xb8>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 80fd 	beq.w	8000518 <__udivmoddi4+0x2a4>
 800031e:	2600      	movs	r6, #0
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	4630      	mov	r0, r6
 8000326:	4631      	mov	r1, r6
 8000328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032c:	fab3 f683 	clz	r6, r3
 8000330:	2e00      	cmp	r6, #0
 8000332:	d14b      	bne.n	80003cc <__udivmoddi4+0x158>
 8000334:	428b      	cmp	r3, r1
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4282      	cmp	r2, r0
 800033c:	f240 80ef 	bls.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4630      	mov	r0, r6
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e3      	beq.n	800030e <__udivmoddi4+0x9a>
 8000346:	e9c5 4700 	strd	r4, r7, [r5]
 800034a:	e7e0      	b.n	800030e <__udivmoddi4+0x9a>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xdc>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f382 	clz	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 809d 	bne.w	8000494 <__udivmoddi4+0x220>
 800035a:	1a89      	subs	r1, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b297      	uxth	r7, r2
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f2fe 	udiv	r2, r1, lr
 800036a:	fb0e 1112 	mls	r1, lr, r2, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb07 f002 	mul.w	r0, r7, r2
 8000376:	4288      	cmp	r0, r1
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4288      	cmp	r0, r1
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80cf 	beq.w	8000536 <__udivmoddi4+0x2c2>
 8000398:	4642      	mov	r2, r8
 800039a:	1a09      	subs	r1, r1, r0
 800039c:	b2a4      	uxth	r4, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ae:	42a7      	cmp	r7, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x150>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14e>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f200 80b4 	bhi.w	800052a <__udivmoddi4+0x2b6>
 80003c2:	4608      	mov	r0, r1
 80003c4:	1be4      	subs	r4, r4, r7
 80003c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ca:	e79b      	b.n	8000304 <__udivmoddi4+0x90>
 80003cc:	f1c6 0720 	rsb	r7, r6, #32
 80003d0:	40b3      	lsls	r3, r6
 80003d2:	fa01 f406 	lsl.w	r4, r1, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	40f9      	lsrs	r1, r7
 80003dc:	40b2      	lsls	r2, r6
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ea:	431c      	orrs	r4, r3
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fa00 f306 	lsl.w	r3, r0, r6
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fa:	fb09 1118 	mls	r1, r9, r8, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb08 f00e 	mul.w	r0, r8, lr
 8000406:	4288      	cmp	r0, r1
 8000408:	d90f      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	4288      	cmp	r0, r1
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 808d 	beq.w	8000542 <__udivmoddi4+0x2ce>
 8000428:	46d0      	mov	r8, sl
 800042a:	1a09      	subs	r1, r1, r0
 800042c:	b2a4      	uxth	r4, r4
 800042e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000432:	fb09 1110 	mls	r1, r9, r0, r1
 8000436:	fb00 fe0e 	mul.w	lr, r0, lr
 800043a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043e:	458e      	cmp	lr, r1
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1de>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 34ff 	add.w	r4, r0, #4294967295
 800044a:	d201      	bcs.n	8000450 <__udivmoddi4+0x1dc>
 800044c:	458e      	cmp	lr, r1
 800044e:	d87f      	bhi.n	8000550 <__udivmoddi4+0x2dc>
 8000450:	4620      	mov	r0, r4
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	eba1 010e 	sub.w	r1, r1, lr
 800045a:	fba0 9802 	umull	r9, r8, r0, r2
 800045e:	4541      	cmp	r1, r8
 8000460:	464c      	mov	r4, r9
 8000462:	46c6      	mov	lr, r8
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x1f8>
 8000466:	d106      	bne.n	8000476 <__udivmoddi4+0x202>
 8000468:	454b      	cmp	r3, r9
 800046a:	d204      	bcs.n	8000476 <__udivmoddi4+0x202>
 800046c:	3801      	subs	r0, #1
 800046e:	ebb9 0402 	subs.w	r4, r9, r2
 8000472:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000476:	2d00      	cmp	r5, #0
 8000478:	d070      	beq.n	800055c <__udivmoddi4+0x2e8>
 800047a:	1b1a      	subs	r2, r3, r4
 800047c:	eb61 010e 	sbc.w	r1, r1, lr
 8000480:	fa22 f306 	lsr.w	r3, r2, r6
 8000484:	fa01 f707 	lsl.w	r7, r1, r7
 8000488:	40f1      	lsrs	r1, r6
 800048a:	2600      	movs	r6, #0
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	e73c      	b.n	800030e <__udivmoddi4+0x9a>
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	f1c3 0020 	rsb	r0, r3, #32
 800049c:	fa01 f203 	lsl.w	r2, r1, r3
 80004a0:	fa21 f600 	lsr.w	r6, r1, r0
 80004a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a8:	fa24 f100 	lsr.w	r1, r4, r0
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	409c      	lsls	r4, r3
 80004b2:	4311      	orrs	r1, r2
 80004b4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b8:	0c0a      	lsrs	r2, r1, #16
 80004ba:	fb0e 6610 	mls	r6, lr, r0, r6
 80004be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004c2:	fb00 f607 	mul.w	r6, r0, r7
 80004c6:	4296      	cmp	r6, r2
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x274>
 80004ca:	eb1c 0202 	adds.w	r2, ip, r2
 80004ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0901 	movcs.w	r9, #1
 80004d8:	f04f 0900 	movcc.w	r9, #0
 80004dc:	4296      	cmp	r6, r2
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x272>
 80004e0:	f1b9 0f00 	cmp.w	r9, #0
 80004e4:	d031      	beq.n	800054a <__udivmoddi4+0x2d6>
 80004e6:	4640      	mov	r0, r8
 80004e8:	1b92      	subs	r2, r2, r6
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fbb2 f6fe 	udiv	r6, r2, lr
 80004f0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f8:	fb06 f207 	mul.w	r2, r6, r7
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x29c>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f106 38ff 	add.w	r8, r6, #4294967295
 8000508:	d201      	bcs.n	800050e <__udivmoddi4+0x29a>
 800050a:	428a      	cmp	r2, r1
 800050c:	d823      	bhi.n	8000556 <__udivmoddi4+0x2e2>
 800050e:	4646      	mov	r6, r8
 8000510:	1a89      	subs	r1, r1, r2
 8000512:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000516:	e725      	b.n	8000364 <__udivmoddi4+0xf0>
 8000518:	462e      	mov	r6, r5
 800051a:	4628      	mov	r0, r5
 800051c:	e6f7      	b.n	800030e <__udivmoddi4+0x9a>
 800051e:	1a84      	subs	r4, r0, r2
 8000520:	eb61 0303 	sbc.w	r3, r1, r3
 8000524:	2001      	movs	r0, #1
 8000526:	461f      	mov	r7, r3
 8000528:	e70b      	b.n	8000342 <__udivmoddi4+0xce>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e749      	b.n	80003c4 <__udivmoddi4+0x150>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e6e1      	b.n	80002fa <__udivmoddi4+0x86>
 8000536:	3a02      	subs	r2, #2
 8000538:	4461      	add	r1, ip
 800053a:	e72e      	b.n	800039a <__udivmoddi4+0x126>
 800053c:	3e02      	subs	r6, #2
 800053e:	4462      	add	r2, ip
 8000540:	e6c6      	b.n	80002d0 <__udivmoddi4+0x5c>
 8000542:	f1a8 0802 	sub.w	r8, r8, #2
 8000546:	4461      	add	r1, ip
 8000548:	e76f      	b.n	800042a <__udivmoddi4+0x1b6>
 800054a:	3802      	subs	r0, #2
 800054c:	4462      	add	r2, ip
 800054e:	e7cb      	b.n	80004e8 <__udivmoddi4+0x274>
 8000550:	3802      	subs	r0, #2
 8000552:	4461      	add	r1, ip
 8000554:	e77d      	b.n	8000452 <__udivmoddi4+0x1de>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	e7d9      	b.n	8000510 <__udivmoddi4+0x29c>
 800055c:	462e      	mov	r6, r5
 800055e:	e6d6      	b.n	800030e <__udivmoddi4+0x9a>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <print_str>:
extern UART_HandleTypeDef huart1;

char msg_formatted[300];

void print_str(char* msg,uint32_t uint_param)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
 sprintf(msg_formatted,"%s:%u\n",msg,uint_param);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4909      	ldr	r1, [pc, #36]	; (8000598 <print_str+0x34>)
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <print_str+0x38>)
 8000576:	f00d fd89 	bl	800e08c <siprintf>
 HAL_UART_Transmit(&huart1, msg_formatted, strlen(msg_formatted),100);
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <print_str+0x38>)
 800057c:	f7ff fe5a 	bl	8000234 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	4905      	ldr	r1, [pc, #20]	; (800059c <print_str+0x38>)
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <print_str+0x3c>)
 800058a:	f006 ff2d 	bl	80073e8 <HAL_UART_Transmit>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	0800e7bc 	.word	0x0800e7bc
 800059c:	2000008c 	.word	0x2000008c
 80005a0:	200002b4 	.word	0x200002b4

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b5b0      	push	{r4, r5, r7, lr}
 80005a6:	f5ad 6daa 	sub.w	sp, sp, #1360	; 0x550
 80005aa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ac:	f000 fead 	bl	800130a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b0:	f000 f91a 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 face 	bl	8000b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b8:	f000 faa2 	bl	8000b00 <MX_DMA_Init>
  MX_ICACHE_Init();
 80005bc:	f000 f970 	bl	80008a0 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 80005c0:	f000 f97a 	bl	80008b8 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 80005c4:	f000 fa50 	bl	8000a68 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80005c8:	f000 f9b4 	bl	8000934 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 80005cc:	f000 fa2e 	bl	8000a2c <MX_SDMMC1_SD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 80005d0:	f009 f888 	bl	80096e4 <MX_FATFS_Init>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <main+0x3a>
    Error_Handler();
 80005da:	f000 fb23 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80005de:	20c8      	movs	r0, #200	; 0xc8
 80005e0:	f000 ff0a 	bl	80013f8 <HAL_Delay>
  HAL_UART_Transmit(&huart1, "Start\n", 6, 100);
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2206      	movs	r2, #6
 80005e8:	496e      	ldr	r1, [pc, #440]	; (80007a4 <main+0x200>)
 80005ea:	486f      	ldr	r0, [pc, #444]	; (80007a8 <main+0x204>)
 80005ec:	f006 fefc 	bl	80073e8 <HAL_UART_Transmit>

  char test_msg[]="qwertyuiop1234567890qwertyuiop1234567890";
 80005f0:	4b6e      	ldr	r3, [pc, #440]	; (80007ac <main+0x208>)
 80005f2:	f507 64a3 	add.w	r4, r7, #1304	; 0x518
 80005f6:	461d      	mov	r5, r3
 80005f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000600:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000604:	c403      	stmia	r4!, {r0, r1}
 8000606:	7022      	strb	r2, [r4, #0]
  char tt[100];

  FATFS fs;
  FIL fl;
  FRESULT res;
  res=f_mount(&fs,"",1);
 8000608:	f507 731f 	add.w	r3, r7, #636	; 0x27c
 800060c:	2201      	movs	r2, #1
 800060e:	4968      	ldr	r1, [pc, #416]	; (80007b0 <main+0x20c>)
 8000610:	4618      	mov	r0, r3
 8000612:	f00c fc9b 	bl	800cf4c <f_mount>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 3543 	strb.w	r3, [r7, #1347]	; 0x543
  print_str("mount", res);
 800061c:	f897 3543 	ldrb.w	r3, [r7, #1347]	; 0x543
 8000620:	4619      	mov	r1, r3
 8000622:	4864      	ldr	r0, [pc, #400]	; (80007b4 <main+0x210>)
 8000624:	f7ff ff9e 	bl	8000564 <print_str>
  uint32_t btwritten;

  if(res==FR_OK){
 8000628:	f897 3543 	ldrb.w	r3, [r7, #1347]	; 0x543
 800062c:	2b00      	cmp	r3, #0
 800062e:	d172      	bne.n	8000716 <main+0x172>
	  HAL_UART_Transmit(&huart1, "SM\n", 3,100);
 8000630:	2364      	movs	r3, #100	; 0x64
 8000632:	2203      	movs	r2, #3
 8000634:	4960      	ldr	r1, [pc, #384]	; (80007b8 <main+0x214>)
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <main+0x204>)
 8000638:	f006 fed6 	bl	80073e8 <HAL_UART_Transmit>
   if(f_open(&fl,"testfile",FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	220a      	movs	r2, #10
 8000642:	495e      	ldr	r1, [pc, #376]	; (80007bc <main+0x218>)
 8000644:	4618      	mov	r0, r3
 8000646:	f00c fcc7 	bl	800cfd8 <f_open>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d162      	bne.n	8000716 <main+0x172>
	   sprintf(tt,"Start:%u\n",HAL_GetTick());
 8000650:	f000 fec6 	bl	80013e0 <HAL_GetTick>
 8000654:	4602      	mov	r2, r0
 8000656:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 800065a:	4959      	ldr	r1, [pc, #356]	; (80007c0 <main+0x21c>)
 800065c:	4618      	mov	r0, r3
 800065e:	f00d fd15 	bl	800e08c <siprintf>
	   f_write(&fl,tt,strlen(tt),&btwritten);
 8000662:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fde4 	bl	8000234 <strlen>
 800066c:	4602      	mov	r2, r0
 800066e:	f107 031c 	add.w	r3, r7, #28
 8000672:	f207 41b4 	addw	r1, r7, #1204	; 0x4b4
 8000676:	f107 0020 	add.w	r0, r7, #32
 800067a:	f00c ff8b 	bl	800d594 <f_write>
	   for(int i=0;i<100000;i++){
 800067e:	2300      	movs	r3, #0
 8000680:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8000684:	e020      	b.n	80006c8 <main+0x124>
		   res=f_write(&fl,test_msg,40,&btwritten);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	f507 61a3 	add.w	r1, r7, #1304	; 0x518
 800068e:	f107 0020 	add.w	r0, r7, #32
 8000692:	2228      	movs	r2, #40	; 0x28
 8000694:	f00c ff7e 	bl	800d594 <f_write>
 8000698:	4603      	mov	r3, r0
 800069a:	f887 3543 	strb.w	r3, [r7, #1347]	; 0x543
		   if(res!=FR_OK){
 800069e:	f897 3543 	ldrb.w	r3, [r7, #1347]	; 0x543
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d00b      	beq.n	80006be <main+0x11a>
			 print_str("c",i);
 80006a6:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80006aa:	4619      	mov	r1, r3
 80006ac:	4845      	ldr	r0, [pc, #276]	; (80007c4 <main+0x220>)
 80006ae:	f7ff ff59 	bl	8000564 <print_str>
		     print_str("r",res);
 80006b2:	f897 3543 	ldrb.w	r3, [r7, #1347]	; 0x543
 80006b6:	4619      	mov	r1, r3
 80006b8:	4843      	ldr	r0, [pc, #268]	; (80007c8 <main+0x224>)
 80006ba:	f7ff ff53 	bl	8000564 <print_str>
	   for(int i=0;i<100000;i++){
 80006be:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80006c2:	3301      	adds	r3, #1
 80006c4:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 80006c8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80006cc:	4a3f      	ldr	r2, [pc, #252]	; (80007cc <main+0x228>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	ddd9      	ble.n	8000686 <main+0xe2>
		   }
	   }
	   sprintf(tt,"\nStop:%u\n",HAL_GetTick());
 80006d2:	f000 fe85 	bl	80013e0 <HAL_GetTick>
 80006d6:	4602      	mov	r2, r0
 80006d8:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80006dc:	493c      	ldr	r1, [pc, #240]	; (80007d0 <main+0x22c>)
 80006de:	4618      	mov	r0, r3
 80006e0:	f00d fcd4 	bl	800e08c <siprintf>
	   f_write(&fl,tt,strlen(tt),&btwritten);
 80006e4:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80006e8:	4618      	mov	r0, r3
 80006ea:	f7ff fda3 	bl	8000234 <strlen>
 80006ee:	4602      	mov	r2, r0
 80006f0:	f107 031c 	add.w	r3, r7, #28
 80006f4:	f207 41b4 	addw	r1, r7, #1204	; 0x4b4
 80006f8:	f107 0020 	add.w	r0, r7, #32
 80006fc:	f00c ff4a 	bl	800d594 <f_write>
	  f_close(&fl);
 8000700:	f107 0320 	add.w	r3, r7, #32
 8000704:	4618      	mov	r0, r3
 8000706:	f00d fa2b 	bl	800db60 <f_close>
	  HAL_UART_Transmit(&huart1, "FC\n", 3,100);
 800070a:	2364      	movs	r3, #100	; 0x64
 800070c:	2203      	movs	r2, #3
 800070e:	4931      	ldr	r1, [pc, #196]	; (80007d4 <main+0x230>)
 8000710:	4825      	ldr	r0, [pc, #148]	; (80007a8 <main+0x204>)
 8000712:	f006 fe69 	bl	80073e8 <HAL_UART_Transmit>
   }
  }
  HAL_UART_Transmit(&huart1, "RTC start\n", 10,100);
 8000716:	2364      	movs	r3, #100	; 0x64
 8000718:	220a      	movs	r2, #10
 800071a:	492f      	ldr	r1, [pc, #188]	; (80007d8 <main+0x234>)
 800071c:	4822      	ldr	r0, [pc, #136]	; (80007a8 <main+0x204>)
 800071e:	f006 fe63 	bl	80073e8 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Transmit_DMA(&huart1, "Hello\n", 6);
 8000722:	2206      	movs	r2, #6
 8000724:	492d      	ldr	r1, [pc, #180]	; (80007dc <main+0x238>)
 8000726:	4820      	ldr	r0, [pc, #128]	; (80007a8 <main+0x204>)
 8000728:	f006 feec 	bl	8007504 <HAL_UART_Transmit_DMA>


	HAL_Delay(1000);
 800072c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000730:	f000 fe62 	bl	80013f8 <HAL_Delay>
	//HAL_RTCEx_GetTimeStamp(&hrtc, &sTimeStamp, &sTimeStampDate, RTC_FORMAT_BIN);
	HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2200      	movs	r2, #0
 800073a:	4619      	mov	r1, r3
 800073c:	4828      	ldr	r0, [pc, #160]	; (80007e0 <main+0x23c>)
 800073e:	f004 ff7d 	bl	800563c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	4619      	mov	r1, r3
 8000748:	4825      	ldr	r0, [pc, #148]	; (80007e0 <main+0x23c>)
 800074a:	f005 f859 	bl	8005800 <HAL_RTC_GetDate>
	sprintf(tt,"%u:%u:%u\n",sTimeStamp.Hours,sTimeStamp.Minutes,sTimeStamp.Seconds);
 800074e:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8000752:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	461a      	mov	r2, r3
 800075a:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800075e:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	4619      	mov	r1, r3
 8000766:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 800076a:	f5a3 63a8 	sub.w	r3, r3, #1344	; 0x540
 800076e:	789b      	ldrb	r3, [r3, #2]
 8000770:	f207 40b4 	addw	r0, r7, #1204	; 0x4b4
 8000774:	9300      	str	r3, [sp, #0]
 8000776:	460b      	mov	r3, r1
 8000778:	491a      	ldr	r1, [pc, #104]	; (80007e4 <main+0x240>)
 800077a:	f00d fc87 	bl	800e08c <siprintf>
	HAL_UART_Transmit_DMA(&huart1, tt, strlen(tt));
 800077e:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff fd56 	bl	8000234 <strlen>
 8000788:	4603      	mov	r3, r0
 800078a:	b29a      	uxth	r2, r3
 800078c:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 8000790:	4619      	mov	r1, r3
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <main+0x204>)
 8000794:	f006 feb6 	bl	8007504 <HAL_UART_Transmit_DMA>
	HAL_Delay(1000);
 8000798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800079c:	f000 fe2c 	bl	80013f8 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart1, "Hello\n", 6);
 80007a0:	e7bf      	b.n	8000722 <main+0x17e>
 80007a2:	bf00      	nop
 80007a4:	0800e7c4 	.word	0x0800e7c4
 80007a8:	200002b4 	.word	0x200002b4
 80007ac:	0800e82c 	.word	0x0800e82c
 80007b0:	0800e7cc 	.word	0x0800e7cc
 80007b4:	0800e7d0 	.word	0x0800e7d0
 80007b8:	0800e7d8 	.word	0x0800e7d8
 80007bc:	0800e7dc 	.word	0x0800e7dc
 80007c0:	0800e7e8 	.word	0x0800e7e8
 80007c4:	0800e7f4 	.word	0x0800e7f4
 80007c8:	0800e7f8 	.word	0x0800e7f8
 80007cc:	0001869f 	.word	0x0001869f
 80007d0:	0800e7fc 	.word	0x0800e7fc
 80007d4:	0800e808 	.word	0x0800e808
 80007d8:	0800e80c 	.word	0x0800e80c
 80007dc:	0800e818 	.word	0x0800e818
 80007e0:	20000210 	.word	0x20000210
 80007e4:	0800e820 	.word	0x0800e820

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b098      	sub	sp, #96	; 0x60
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0318 	add.w	r3, r7, #24
 80007f2:	2248      	movs	r2, #72	; 0x48
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f00d fb50 	bl	800de9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	2200      	movs	r2, #0
 8000800:	601a      	str	r2, [r3, #0]
 8000802:	605a      	str	r2, [r3, #4]
 8000804:	609a      	str	r2, [r3, #8]
 8000806:	60da      	str	r2, [r3, #12]
 8000808:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800080a:	2000      	movs	r0, #0
 800080c:	f001 ff52 	bl	80026b4 <HAL_PWREx_ControlVoltageScaling>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000816:	f000 fa05 	bl	8000c24 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800081a:	f001 ff2d 	bl	8002678 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <SystemClock_Config+0xb4>)
 8000820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000824:	4a1d      	ldr	r2, [pc, #116]	; (800089c <SystemClock_Config+0xb4>)
 8000826:	f023 0318 	bic.w	r3, r3, #24
 800082a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800082e:	2305      	movs	r3, #5
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000832:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000836:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000838:	2381      	movs	r3, #129	; 0x81
 800083a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000840:	2303      	movs	r3, #3
 8000842:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 17;
 8000848:	2311      	movs	r3, #17
 800084a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV17;
 800084c:	2311      	movs	r3, #17
 800084e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0318 	add.w	r3, r7, #24
 800085c:	4618      	mov	r0, r3
 800085e:	f001 ffb9 	bl	80027d4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000868:	f000 f9dc 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2303      	movs	r3, #3
 8000872:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2104      	movs	r1, #4
 8000884:	4618      	mov	r0, r3
 8000886:	f002 fc7b 	bl	8003180 <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000890:	f000 f9c8 	bl	8000c24 <Error_Handler>
  }
}
 8000894:	bf00      	nop
 8000896:	3760      	adds	r7, #96	; 0x60
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000

080008a0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 80008a4:	f001 fc0a 	bl	80020bc <HAL_ICACHE_Enable>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 80008ae:	f000 f9b9 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
	...

080008b8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80008bc:	4b1b      	ldr	r3, [pc, #108]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008be:	4a1c      	ldr	r2, [pc, #112]	; (8000930 <MX_OCTOSPI1_Init+0x78>)
 80008c0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80008c8:	4b18      	ldr	r3, [pc, #96]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80008d4:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008d8:	2220      	movs	r2, #32
 80008da:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80008dc:	4b13      	ldr	r3, [pc, #76]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008de:	2201      	movs	r2, #1
 80008e0:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80008e2:	4b12      	ldr	r3, [pc, #72]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008f6:	2201      	movs	r2, #1
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000900:	4b0a      	ldr	r3, [pc, #40]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000906:	4b09      	ldr	r3, [pc, #36]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800090c:	4b07      	ldr	r3, [pc, #28]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 800090e:	2208      	movs	r2, #8
 8000910:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000912:	4b06      	ldr	r3, [pc, #24]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	; (800092c <MX_OCTOSPI1_Init+0x74>)
 800091a:	f001 fbdf 	bl	80020dc <HAL_OSPI_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000924:	f000 f97e 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001b8 	.word	0x200001b8
 8000930:	44021000 	.word	0x44021000

08000934 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b08c      	sub	sp, #48	; 0x30
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 800093a:	f107 0318 	add.w	r3, r7, #24
 800093e:	2200      	movs	r2, #0
 8000940:	601a      	str	r2, [r3, #0]
 8000942:	605a      	str	r2, [r3, #4]
 8000944:	609a      	str	r2, [r3, #8]
 8000946:	60da      	str	r2, [r3, #12]
 8000948:	611a      	str	r2, [r3, #16]
 800094a:	615a      	str	r2, [r3, #20]
  RTC_TimeTypeDef sTime = {0};
 800094c:	1d3b      	adds	r3, r7, #4
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
 8000956:	60da      	str	r2, [r3, #12]
 8000958:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800095a:	2300      	movs	r3, #0
 800095c:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800095e:	4b31      	ldr	r3, [pc, #196]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <MX_RTC_Init+0xf4>)
 8000962:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000964:	4b2f      	ldr	r3, [pc, #188]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000966:	2200      	movs	r2, #0
 8000968:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800096a:	4b2e      	ldr	r3, [pc, #184]	; (8000a24 <MX_RTC_Init+0xf0>)
 800096c:	227f      	movs	r2, #127	; 0x7f
 800096e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000970:	4b2c      	ldr	r3, [pc, #176]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000976:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800097c:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <MX_RTC_Init+0xf0>)
 800097e:	2200      	movs	r2, #0
 8000980:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000982:	4b28      	ldr	r3, [pc, #160]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000988:	4b26      	ldr	r3, [pc, #152]	; (8000a24 <MX_RTC_Init+0xf0>)
 800098a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800098e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000990:	4b24      	ldr	r3, [pc, #144]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000992:	2200      	movs	r2, #0
 8000994:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000996:	4823      	ldr	r0, [pc, #140]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000998:	f004 fd42 	bl	8005420 <HAL_RTC_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_RTC_Init+0x72>
  {
    Error_Handler();
 80009a2:	f000 f93f 	bl	8000c24 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61bb      	str	r3, [r7, #24]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 80009aa:	2300      	movs	r3, #0
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	62bb      	str	r3, [r7, #40]	; 0x28
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 80009b6:	f107 0318 	add.w	r3, r7, #24
 80009ba:	4619      	mov	r1, r3
 80009bc:	4819      	ldr	r0, [pc, #100]	; (8000a24 <MX_RTC_Init+0xf0>)
 80009be:	f005 f83f 	bl	8005a40 <HAL_RTCEx_PrivilegeModeSet>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_RTC_Init+0x98>
  {
    Error_Handler();
 80009c8:	f000 f92c 	bl	8000c24 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009d8:	2300      	movs	r3, #0
 80009da:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80009e0:	1d3b      	adds	r3, r7, #4
 80009e2:	2200      	movs	r2, #0
 80009e4:	4619      	mov	r1, r3
 80009e6:	480f      	ldr	r0, [pc, #60]	; (8000a24 <MX_RTC_Init+0xf0>)
 80009e8:	f004 fd92 	bl	8005510 <HAL_RTC_SetTime>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80009f2:	f000 f917 	bl	8000c24 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80009f6:	2301      	movs	r3, #1
 80009f8:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80009fa:	2301      	movs	r3, #1
 80009fc:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80009fe:	2301      	movs	r3, #1
 8000a00:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 8000a02:	2300      	movs	r3, #0
 8000a04:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8000a06:	463b      	mov	r3, r7
 8000a08:	2200      	movs	r2, #0
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4805      	ldr	r0, [pc, #20]	; (8000a24 <MX_RTC_Init+0xf0>)
 8000a0e:	f004 fe71 	bl	80056f4 <HAL_RTC_SetDate>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_RTC_Init+0xe8>
  {
    Error_Handler();
 8000a18:	f000 f904 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3730      	adds	r7, #48	; 0x30
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000210 	.word	0x20000210
 8000a28:	40002800 	.word	0x40002800

08000a2c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000a30:	4b0b      	ldr	r3, [pc, #44]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a32:	4a0c      	ldr	r2, [pc, #48]	; (8000a64 <MX_SDMMC1_SD_Init+0x38>)
 8000a34:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a44:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a48:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a4a:	4b05      	ldr	r3, [pc, #20]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <MX_SDMMC1_SD_Init+0x34>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */


  /* USER CODE END SDMMC1_Init 2 */

}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	20000238 	.word	0x20000238
 8000a64:	420c8000 	.word	0x420c8000

08000a68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a6c:	4b22      	ldr	r3, [pc, #136]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a6e:	4a23      	ldr	r2, [pc, #140]	; (8000afc <MX_USART1_UART_Init+0x94>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a9e:	4b16      	ldr	r3, [pc, #88]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aaa:	4b13      	ldr	r3, [pc, #76]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ab0:	4811      	ldr	r0, [pc, #68]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ab2:	f006 fc49 	bl	8007348 <HAL_UART_Init>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000abc:	f000 f8b2 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ac4:	f007 ff79 	bl	80089ba <HAL_UARTEx_SetTxFifoThreshold>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000ace:	f000 f8a9 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	4808      	ldr	r0, [pc, #32]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ad6:	f007 ffae 	bl	8008a36 <HAL_UARTEx_SetRxFifoThreshold>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000ae0:	f000 f8a0 	bl	8000c24 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000ae4:	4804      	ldr	r0, [pc, #16]	; (8000af8 <MX_USART1_UART_Init+0x90>)
 8000ae6:	f007 ff2f 	bl	8008948 <HAL_UARTEx_DisableFifoMode>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000af0:	f000 f898 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200002b4 	.word	0x200002b4
 8000afc:	40013800 	.word	0x40013800

08000b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	6493      	str	r3, [r2, #72]	; 0x48
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6493      	str	r3, [r2, #72]	; 0x48
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <MX_DMA_Init+0x50>)
 8000b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	2100      	movs	r1, #0
 8000b3a:	201d      	movs	r0, #29
 8000b3c:	f000 fd5b 	bl	80015f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b40:	201d      	movs	r0, #29
 8000b42:	f000 fd72 	bl	800162a <HAL_NVIC_EnableIRQ>

}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b087      	sub	sp, #28
 8000b58:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b5a:	4b21      	ldr	r3, [pc, #132]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a20      	ldr	r2, [pc, #128]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b60:	f043 0304 	orr.w	r3, r3, #4
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b1e      	ldr	r3, [pc, #120]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0304 	and.w	r3, r3, #4
 8000b6e:	617b      	str	r3, [r7, #20]
 8000b70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b72:	4b1b      	ldr	r3, [pc, #108]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a1a      	ldr	r2, [pc, #104]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b86:	613b      	str	r3, [r7, #16]
 8000b88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b90:	f043 0310 	orr.w	r3, r3, #16
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0310 	and.w	r3, r3, #16
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000bc0:	f043 0308 	orr.w	r3, r3, #8
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <MX_GPIO_Init+0x8c>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0308 	and.w	r3, r3, #8
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000bd2:	bf00      	nop
 8000bd4:	371c      	adds	r7, #28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	40021000 	.word	0x40021000

08000be4 <HAL_SD_TxCpltCallback>:
/* USER CODE BEGIN 4 */
uint32_t sd_dma_rx_semaphore;
uint32_t sd_dma_tx_semaphore;

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	sd_dma_tx_semaphore=1;
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_SD_TxCpltCallback+0x1c>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	601a      	str	r2, [r3, #0]
}
 8000bf2:	bf00      	nop
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr
 8000bfe:	bf00      	nop
 8000c00:	200003b4 	.word	0x200003b4

08000c04 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	sd_dma_rx_semaphore=1;
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <HAL_SD_RxCpltCallback+0x1c>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	601a      	str	r2, [r3, #0]

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	200003b0 	.word	0x200003b0

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, "err", 3,100);
 8000c28:	2364      	movs	r3, #100	; 0x64
 8000c2a:	2203      	movs	r2, #3
 8000c2c:	4903      	ldr	r1, [pc, #12]	; (8000c3c <Error_Handler+0x18>)
 8000c2e:	4804      	ldr	r0, [pc, #16]	; (8000c40 <Error_Handler+0x1c>)
 8000c30:	f006 fbda 	bl	80073e8 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c34:	b672      	cpsid	i
}
 8000c36:	bf00      	nop
  __disable_irq();
  while (1)
 8000c38:	e7fe      	b.n	8000c38 <Error_Handler+0x14>
 8000c3a:	bf00      	nop
 8000c3c:	0800e858 	.word	0x0800e858
 8000c40:	200002b4 	.word	0x200002b4

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4a:	4b0f      	ldr	r3, [pc, #60]	; (8000c88 <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	4a0e      	ldr	r2, [pc, #56]	; (8000c88 <HAL_MspInit+0x44>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6613      	str	r3, [r2, #96]	; 0x60
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_MspInit+0x44>)
 8000c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	4a08      	ldr	r2, [pc, #32]	; (8000c88 <HAL_MspInit+0x44>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_MspInit+0x44>)
 8000c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c7a:	f001 fd77 	bl	800276c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	3708      	adds	r7, #8
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b0ae      	sub	sp, #184	; 0xb8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c98:	2200      	movs	r2, #0
 8000c9a:	601a      	str	r2, [r3, #0]
 8000c9c:	605a      	str	r2, [r3, #4]
 8000c9e:	609a      	str	r2, [r3, #8]
 8000ca0:	60da      	str	r2, [r3, #12]
 8000ca2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca4:	f107 0310 	add.w	r3, r7, #16
 8000ca8:	2294      	movs	r2, #148	; 0x94
 8000caa:	2100      	movs	r1, #0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f00d f8f5 	bl	800de9c <memset>
  if(hospi->Instance==OCTOSPI1)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a26      	ldr	r2, [pc, #152]	; (8000d50 <HAL_OSPI_MspInit+0xc4>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d145      	bne.n	8000d48 <HAL_OSPI_MspInit+0xbc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8000cbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f002 fd3b 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8000cd8:	f7ff ffa4 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ce0:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ce6:	6513      	str	r3, [r2, #80]	; 0x50
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000cea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cf4:	4b17      	ldr	r3, [pc, #92]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf8:	4a16      	ldr	r2, [pc, #88]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d00:	4b14      	ldr	r3, [pc, #80]	; (8000d54 <HAL_OSPI_MspInit+0xc8>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60bb      	str	r3, [r7, #8]
 8000d0a:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPI1_IO0
    PE13     ------> OCTOSPI1_IO1
    PE14     ------> OCTOSPI1_IO2
    PE15     ------> OCTOSPI1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8000d0c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d20:	2303      	movs	r3, #3
 8000d22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8000d26:	230a      	movs	r3, #10
 8000d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d30:	4619      	mov	r1, r3
 8000d32:	4809      	ldr	r0, [pc, #36]	; (8000d58 <HAL_OSPI_MspInit+0xcc>)
 8000d34:	f001 f842 	bl	8001dbc <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	204c      	movs	r0, #76	; 0x4c
 8000d3e:	f000 fc5a 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 8000d42:	204c      	movs	r0, #76	; 0x4c
 8000d44:	f000 fc71 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8000d48:	bf00      	nop
 8000d4a:	37b8      	adds	r7, #184	; 0xb8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	44021000 	.word	0x44021000
 8000d54:	40021000 	.word	0x40021000
 8000d58:	42021000 	.word	0x42021000

08000d5c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b0a8      	sub	sp, #160	; 0xa0
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d64:	f107 030c 	add.w	r3, r7, #12
 8000d68:	2294      	movs	r2, #148	; 0x94
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00d f895 	bl	800de9c <memset>
  if(hrtc->Instance==RTC)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a16      	ldr	r2, [pc, #88]	; (8000dd0 <HAL_RTC_MspInit+0x74>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d124      	bne.n	8000dc6 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000d82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fcda 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000d9a:	f7ff ff43 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_RTC_MspInit+0x78>)
 8000da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000da4:	4a0b      	ldr	r2, [pc, #44]	; (8000dd4 <HAL_RTC_MspInit+0x78>)
 8000da6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000daa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_RTC_MspInit+0x78>)
 8000db0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_RTC_MspInit+0x78>)
 8000db4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000db8:	6593      	str	r3, [r2, #88]	; 0x58
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_RTC_MspInit+0x78>)
 8000dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	37a0      	adds	r7, #160	; 0xa0
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40002800 	.word	0x40002800
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0b0      	sub	sp, #192	; 0xc0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0318 	add.w	r3, r7, #24
 8000df4:	2294      	movs	r2, #148	; 0x94
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f00d f84f 	bl	800de9c <memset>
  if(hsd->Instance==SDMMC1)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a37      	ldr	r2, [pc, #220]	; (8000ee0 <HAL_SD_MspInit+0x108>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d167      	bne.n	8000ed8 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8000e08:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000e0c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 8000e0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e16:	f107 0318 	add.w	r3, r7, #24
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fc94 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 8000e26:	f7ff fefd 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000e2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e30:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e36:	4b2b      	ldr	r3, [pc, #172]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	4b28      	ldr	r3, [pc, #160]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e46:	4a27      	ldr	r2, [pc, #156]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	613b      	str	r3, [r7, #16]
 8000e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e5a:	4b22      	ldr	r3, [pc, #136]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5e:	4a21      	ldr	r2, [pc, #132]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e60:	f043 0308 	orr.w	r3, r3, #8
 8000e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e66:	4b1f      	ldr	r3, [pc, #124]	; (8000ee4 <HAL_SD_MspInit+0x10c>)
 8000e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e72:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e86:	2303      	movs	r3, #3
 8000e88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e92:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e96:	4619      	mov	r1, r3
 8000e98:	4813      	ldr	r0, [pc, #76]	; (8000ee8 <HAL_SD_MspInit+0x110>)
 8000e9a:	f000 ff8f 	bl	8001dbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9e:	2304      	movs	r3, #4
 8000ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000eb6:	230c      	movs	r3, #12
 8000eb8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ebc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480a      	ldr	r0, [pc, #40]	; (8000eec <HAL_SD_MspInit+0x114>)
 8000ec4:	f000 ff7a 	bl	8001dbc <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2100      	movs	r1, #0
 8000ecc:	204e      	movs	r0, #78	; 0x4e
 8000ece:	f000 fb92 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8000ed2:	204e      	movs	r0, #78	; 0x4e
 8000ed4:	f000 fba9 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000ed8:	bf00      	nop
 8000eda:	37c0      	adds	r7, #192	; 0xc0
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	420c8000 	.word	0x420c8000
 8000ee4:	40021000 	.word	0x40021000
 8000ee8:	42020800 	.word	0x42020800
 8000eec:	42020c00 	.word	0x42020c00

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0ae      	sub	sp, #184	; 0xb8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2294      	movs	r2, #148	; 0x94
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f00c ffc3 	bl	800de9c <memset>
  if(huart->Instance==USART1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a3e      	ldr	r2, [pc, #248]	; (8001014 <HAL_UART_MspInit+0x124>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d175      	bne.n	800100c <HAL_UART_MspInit+0x11c>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f24:	2300      	movs	r3, #0
 8000f26:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fc0b 	bl	8003748 <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f38:	f7ff fe74 	bl	8000c24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3c:	4b36      	ldr	r3, [pc, #216]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f40:	4a35      	ldr	r2, [pc, #212]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f46:	6613      	str	r3, [r2, #96]	; 0x60
 8000f48:	4b33      	ldr	r3, [pc, #204]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f50:	60fb      	str	r3, [r7, #12]
 8000f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f54:	4b30      	ldr	r3, [pc, #192]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f58:	4a2f      	ldr	r2, [pc, #188]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_UART_MspInit+0x128>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	60bb      	str	r3, [r7, #8]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f6c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f70:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f86:	2307      	movs	r3, #7
 8000f88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f90:	4619      	mov	r1, r3
 8000f92:	4822      	ldr	r0, [pc, #136]	; (800101c <HAL_UART_MspInit+0x12c>)
 8000f94:	f000 ff12 	bl	8001dbc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000f98:	4b21      	ldr	r3, [pc, #132]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000f9a:	4a22      	ldr	r2, [pc, #136]	; (8001024 <HAL_UART_MspInit+0x134>)
 8000f9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000f9e:	4b20      	ldr	r3, [pc, #128]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fa0:	221a      	movs	r2, #26
 8000fa2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fa6:	2210      	movs	r2, #16
 8000fa8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000faa:	4b1d      	ldr	r3, [pc, #116]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fb2:	2280      	movs	r2, #128	; 0x80
 8000fb4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fb6:	4b1a      	ldr	r3, [pc, #104]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fbc:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000fc2:	4b17      	ldr	r3, [pc, #92]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fc8:	4b15      	ldr	r3, [pc, #84]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000fce:	4814      	ldr	r0, [pc, #80]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fd0:	f000 fb46 	bl	8001660 <HAL_DMA_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8000fda:	f7ff fe23 	bl	8000c24 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000fde:	2110      	movs	r1, #16
 8000fe0:	480f      	ldr	r0, [pc, #60]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000fe2:	f000 fe1b 	bl	8001c1c <HAL_DMA_ConfigChannelAttributes>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8000fec:	f7ff fe1a 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000ff4:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <HAL_UART_MspInit+0x130>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2100      	movs	r1, #0
 8001000:	203d      	movs	r0, #61	; 0x3d
 8001002:	f000 faf8 	bl	80015f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001006:	203d      	movs	r0, #61	; 0x3d
 8001008:	f000 fb0f 	bl	800162a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800100c:	bf00      	nop
 800100e:	37b8      	adds	r7, #184	; 0xb8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40013800 	.word	0x40013800
 8001018:	40021000 	.word	0x40021000
 800101c:	42020000 	.word	0x42020000
 8001020:	20000348 	.word	0x20000348
 8001024:	40020008 	.word	0x40020008

08001028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800102c:	e7fe      	b.n	800102c <NMI_Handler+0x4>

0800102e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <MemManage_Handler+0x4>

0800103a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <BusFault_Handler+0x4>

08001040 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <UsageFault_Handler+0x4>

08001046 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr

08001054 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001062:	b480      	push	{r7}
 8001064:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr

08001070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001074:	f000 f9a0 	bl	80013b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}

0800107c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001080:	4802      	ldr	r0, [pc, #8]	; (800108c <DMA1_Channel1_IRQHandler+0x10>)
 8001082:	f000 fccb 	bl	8001a1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001086:	bf00      	nop
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000348 	.word	0x20000348

08001090 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001094:	4802      	ldr	r0, [pc, #8]	; (80010a0 <USART1_IRQHandler+0x10>)
 8001096:	f006 fab5 	bl	8007604 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800109a:	bf00      	nop
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002b4 	.word	0x200002b4

080010a4 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 80010a8:	4802      	ldr	r0, [pc, #8]	; (80010b4 <OCTOSPI1_IRQHandler+0x10>)
 80010aa:	f001 f8d1 	bl	8002250 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200001b8 	.word	0x200001b8

080010b8 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80010bc:	4802      	ldr	r0, [pc, #8]	; (80010c8 <SDMMC1_IRQHandler+0x10>)
 80010be:	f004 ff53 	bl	8005f68 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000238 	.word	0x20000238

080010cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b086      	sub	sp, #24
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d4:	4a14      	ldr	r2, [pc, #80]	; (8001128 <_sbrk+0x5c>)
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <_sbrk+0x60>)
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010dc:	697b      	ldr	r3, [r7, #20]
 80010de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <_sbrk+0x64>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d102      	bne.n	80010ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <_sbrk+0x64>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	; (8001134 <_sbrk+0x68>)
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ee:	4b10      	ldr	r3, [pc, #64]	; (8001130 <_sbrk+0x64>)
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4413      	add	r3, r2
 80010f6:	693a      	ldr	r2, [r7, #16]
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d207      	bcs.n	800110c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010fc:	f00c fe94 	bl	800de28 <__errno>
 8001100:	4603      	mov	r3, r0
 8001102:	220c      	movs	r2, #12
 8001104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001106:	f04f 33ff 	mov.w	r3, #4294967295
 800110a:	e009      	b.n	8001120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <_sbrk+0x64>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001112:	4b07      	ldr	r3, [pc, #28]	; (8001130 <_sbrk+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4413      	add	r3, r2
 800111a:	4a05      	ldr	r2, [pc, #20]	; (8001130 <_sbrk+0x64>)
 800111c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800111e:	68fb      	ldr	r3, [r7, #12]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3718      	adds	r7, #24
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	20030000 	.word	0x20030000
 800112c:	00000800 	.word	0x00000800
 8001130:	200003b8 	.word	0x200003b8
 8001134:	20000410 	.word	0x20000410

08001138 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <SystemInit+0x20>)
 800113e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001142:	4a05      	ldr	r2, [pc, #20]	; (8001158 <SystemInit+0x20>)
 8001144:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001148:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001162:	4b4f      	ldr	r3, [pc, #316]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	2b00      	cmp	r3, #0
 800116c:	d107      	bne.n	800117e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800116e:	4b4c      	ldr	r3, [pc, #304]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 030f 	and.w	r3, r3, #15
 800117a:	617b      	str	r3, [r7, #20]
 800117c:	e005      	b.n	800118a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800117e:	4b48      	ldr	r3, [pc, #288]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	091b      	lsrs	r3, r3, #4
 8001184:	f003 030f 	and.w	r3, r3, #15
 8001188:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 800118a:	4a46      	ldr	r2, [pc, #280]	; (80012a4 <SystemCoreClockUpdate+0x148>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001192:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001194:	4b42      	ldr	r3, [pc, #264]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b0c      	cmp	r3, #12
 800119e:	d866      	bhi.n	800126e <SystemCoreClockUpdate+0x112>
 80011a0:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <SystemCoreClockUpdate+0x4c>)
 80011a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a6:	bf00      	nop
 80011a8:	080011dd 	.word	0x080011dd
 80011ac:	0800126f 	.word	0x0800126f
 80011b0:	0800126f 	.word	0x0800126f
 80011b4:	0800126f 	.word	0x0800126f
 80011b8:	080011e5 	.word	0x080011e5
 80011bc:	0800126f 	.word	0x0800126f
 80011c0:	0800126f 	.word	0x0800126f
 80011c4:	0800126f 	.word	0x0800126f
 80011c8:	080011ed 	.word	0x080011ed
 80011cc:	0800126f 	.word	0x0800126f
 80011d0:	0800126f 	.word	0x0800126f
 80011d4:	0800126f 	.word	0x0800126f
 80011d8:	080011f5 	.word	0x080011f5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80011dc:	4a32      	ldr	r2, [pc, #200]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 80011de:	697b      	ldr	r3, [r7, #20]
 80011e0:	6013      	str	r3, [r2, #0]
      break;
 80011e2:	e048      	b.n	8001276 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011e4:	4b30      	ldr	r3, [pc, #192]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 80011e6:	4a31      	ldr	r2, [pc, #196]	; (80012ac <SystemCoreClockUpdate+0x150>)
 80011e8:	601a      	str	r2, [r3, #0]
      break;
 80011ea:	e044      	b.n	8001276 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011ec:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 80011ee:	4a30      	ldr	r2, [pc, #192]	; (80012b0 <SystemCoreClockUpdate+0x154>)
 80011f0:	601a      	str	r2, [r3, #0]
      break;
 80011f2:	e040      	b.n	8001276 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80011f4:	4b2a      	ldr	r3, [pc, #168]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80011fe:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	091b      	lsrs	r3, r3, #4
 8001204:	f003 030f 	and.w	r3, r3, #15
 8001208:	3301      	adds	r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	2b02      	cmp	r3, #2
 8001210:	d003      	beq.n	800121a <SystemCoreClockUpdate+0xbe>
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2b03      	cmp	r3, #3
 8001216:	d006      	beq.n	8001226 <SystemCoreClockUpdate+0xca>
 8001218:	e00b      	b.n	8001232 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 800121a:	4a24      	ldr	r2, [pc, #144]	; (80012ac <SystemCoreClockUpdate+0x150>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001222:	613b      	str	r3, [r7, #16]
          break;
 8001224:	e00b      	b.n	800123e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <SystemCoreClockUpdate+0x154>)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	fbb2 f3f3 	udiv	r3, r2, r3
 800122e:	613b      	str	r3, [r7, #16]
          break;
 8001230:	e005      	b.n	800123e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001232:	697a      	ldr	r2, [r7, #20]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	613b      	str	r3, [r7, #16]
          break;
 800123c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 800123e:	4b18      	ldr	r3, [pc, #96]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	0a1b      	lsrs	r3, r3, #8
 8001244:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	fb02 f303 	mul.w	r3, r2, r3
 800124e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001250:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	0e5b      	lsrs	r3, r3, #25
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	3301      	adds	r3, #1
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	fbb2 f3f3 	udiv	r3, r2, r3
 8001268:	4a0f      	ldr	r2, [pc, #60]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 800126a:	6013      	str	r3, [r2, #0]
      break;
 800126c:	e003      	b.n	8001276 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800126e:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	6013      	str	r3, [r2, #0]
      break;
 8001274:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001276:	4b0a      	ldr	r3, [pc, #40]	; (80012a0 <SystemCoreClockUpdate+0x144>)
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	091b      	lsrs	r3, r3, #4
 800127c:	f003 030f 	and.w	r3, r3, #15
 8001280:	4a0c      	ldr	r2, [pc, #48]	; (80012b4 <SystemCoreClockUpdate+0x158>)
 8001282:	5cd3      	ldrb	r3, [r2, r3]
 8001284:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	fa22 f303 	lsr.w	r3, r2, r3
 8001290:	4a05      	ldr	r2, [pc, #20]	; (80012a8 <SystemCoreClockUpdate+0x14c>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	371c      	adds	r7, #28
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr
 80012a0:	40021000 	.word	0x40021000
 80012a4:	0800e904 	.word	0x0800e904
 80012a8:	20000000 	.word	0x20000000
 80012ac:	00f42400 	.word	0x00f42400
 80012b0:	00989680 	.word	0x00989680
 80012b4:	0800e8ec 	.word	0x0800e8ec

080012b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80012b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012bc:	f7ff ff3c 	bl	8001138 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80012c0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80012c2:	e003      	b.n	80012cc <LoopCopyDataInit>

080012c4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80012c4:	4b0b      	ldr	r3, [pc, #44]	; (80012f4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80012c6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80012c8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80012ca:	3104      	adds	r1, #4

080012cc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80012cc:	480a      	ldr	r0, [pc, #40]	; (80012f8 <LoopForever+0xa>)
	ldr	r3, =_edata
 80012ce:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <LoopForever+0xe>)
	adds	r2, r0, r1
 80012d0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80012d2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80012d4:	d3f6      	bcc.n	80012c4 <CopyDataInit>
	ldr	r2, =_sbss
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <LoopForever+0x12>)
	b	LoopFillZerobss
 80012d8:	e002      	b.n	80012e0 <LoopFillZerobss>

080012da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80012da:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80012dc:	f842 3b04 	str.w	r3, [r2], #4

080012e0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LoopForever+0x16>)
	cmp	r2, r3
 80012e2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80012e4:	d3f9      	bcc.n	80012da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80012e6:	f00c fda5 	bl	800de34 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ea:	f7ff f95b 	bl	80005a4 <main>

080012ee <LoopForever>:

LoopForever:
    b LoopForever
 80012ee:	e7fe      	b.n	80012ee <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80012f0:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80012f4:	0800ee04 	.word	0x0800ee04
	ldr	r0, =_sdata
 80012f8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80012fc:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001300:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001304:	2000040c 	.word	0x2000040c

08001308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001308:	e7fe      	b.n	8001308 <ADC1_2_IRQHandler>

0800130a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800130a:	b580      	push	{r7, lr}
 800130c:	b082      	sub	sp, #8
 800130e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001310:	2300      	movs	r3, #0
 8001312:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001314:	2004      	movs	r0, #4
 8001316:	f000 f963 	bl	80015e0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 800131a:	f7ff ff1f 	bl	800115c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800131e:	2007      	movs	r0, #7
 8001320:	f000 f80e 	bl	8001340 <HAL_InitTick>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d002      	beq.n	8001330 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 800132a:	2301      	movs	r3, #1
 800132c:	71fb      	strb	r3, [r7, #7]
 800132e:	e001      	b.n	8001334 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001330:	f7ff fc88 	bl	8000c44 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001334:	79fb      	ldrb	r3, [r7, #7]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
	...

08001340 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_InitTick+0x6c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d023      	beq.n	800139c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001354:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_InitTick+0x70>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b14      	ldr	r3, [pc, #80]	; (80013ac <HAL_InitTick+0x6c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f000 f96b 	bl	8001646 <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d10f      	bne.n	8001396 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b07      	cmp	r3, #7
 800137a:	d809      	bhi.n	8001390 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 f937 	bl	80015f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001388:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <HAL_InitTick+0x74>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
 800138e:	e007      	b.n	80013a0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e004      	b.n	80013a0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	73fb      	strb	r3, [r7, #15]
 800139a:	e001      	b.n	80013a0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800139c:	2301      	movs	r3, #1
 800139e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20000008 	.word	0x20000008
 80013b0:	20000000 	.word	0x20000000
 80013b4:	20000004 	.word	0x20000004

080013b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013bc:	4b06      	ldr	r3, [pc, #24]	; (80013d8 <HAL_IncTick+0x20>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	461a      	mov	r2, r3
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <HAL_IncTick+0x24>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4413      	add	r3, r2
 80013c8:	4a04      	ldr	r2, [pc, #16]	; (80013dc <HAL_IncTick+0x24>)
 80013ca:	6013      	str	r3, [r2, #0]
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	20000008 	.word	0x20000008
 80013dc:	200003bc 	.word	0x200003bc

080013e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return uwTick;
 80013e4:	4b03      	ldr	r3, [pc, #12]	; (80013f4 <HAL_GetTick+0x14>)
 80013e6:	681b      	ldr	r3, [r3, #0]
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	200003bc 	.word	0x200003bc

080013f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001400:	f7ff ffee 	bl	80013e0 <HAL_GetTick>
 8001404:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001410:	d005      	beq.n	800141e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001412:	4b0a      	ldr	r3, [pc, #40]	; (800143c <HAL_Delay+0x44>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	461a      	mov	r2, r3
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4413      	add	r3, r2
 800141c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800141e:	bf00      	nop
 8001420:	f7ff ffde 	bl	80013e0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	429a      	cmp	r2, r3
 800142e:	d8f7      	bhi.n	8001420 <HAL_Delay+0x28>
  {
  }
}
 8001430:	bf00      	nop
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000008 	.word	0x20000008

08001440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001450:	4b0c      	ldr	r3, [pc, #48]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001456:	68ba      	ldr	r2, [r7, #8]
 8001458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800145c:	4013      	ands	r3, r2
 800145e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800146c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001472:	4a04      	ldr	r2, [pc, #16]	; (8001484 <__NVIC_SetPriorityGrouping+0x44>)
 8001474:	68bb      	ldr	r3, [r7, #8]
 8001476:	60d3      	str	r3, [r2, #12]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <__NVIC_GetPriorityGrouping+0x18>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	f003 0307 	and.w	r3, r3, #7
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	e000ed00 	.word	0xe000ed00

080014a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	db0b      	blt.n	80014ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f003 021f 	and.w	r2, r3, #31
 80014bc:	4907      	ldr	r1, [pc, #28]	; (80014dc <__NVIC_EnableIRQ+0x38>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	095b      	lsrs	r3, r3, #5
 80014c4:	2001      	movs	r0, #1
 80014c6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000e100 	.word	0xe000e100

080014e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	6039      	str	r1, [r7, #0]
 80014ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	db0a      	blt.n	800150a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	490c      	ldr	r1, [pc, #48]	; (800152c <__NVIC_SetPriority+0x4c>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	0152      	lsls	r2, r2, #5
 8001500:	b2d2      	uxtb	r2, r2
 8001502:	440b      	add	r3, r1
 8001504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001508:	e00a      	b.n	8001520 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	b2da      	uxtb	r2, r3
 800150e:	4908      	ldr	r1, [pc, #32]	; (8001530 <__NVIC_SetPriority+0x50>)
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	f003 030f 	and.w	r3, r3, #15
 8001516:	3b04      	subs	r3, #4
 8001518:	0152      	lsls	r2, r2, #5
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	440b      	add	r3, r1
 800151e:	761a      	strb	r2, [r3, #24]
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	e000e100 	.word	0xe000e100
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001534:	b480      	push	{r7}
 8001536:	b089      	sub	sp, #36	; 0x24
 8001538:	af00      	add	r7, sp, #0
 800153a:	60f8      	str	r0, [r7, #12]
 800153c:	60b9      	str	r1, [r7, #8]
 800153e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	f003 0307 	and.w	r3, r3, #7
 8001546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	f1c3 0307 	rsb	r3, r3, #7
 800154e:	2b03      	cmp	r3, #3
 8001550:	bf28      	it	cs
 8001552:	2303      	movcs	r3, #3
 8001554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	3303      	adds	r3, #3
 800155a:	2b06      	cmp	r3, #6
 800155c:	d902      	bls.n	8001564 <NVIC_EncodePriority+0x30>
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	3b04      	subs	r3, #4
 8001562:	e000      	b.n	8001566 <NVIC_EncodePriority+0x32>
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	f04f 32ff 	mov.w	r2, #4294967295
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43da      	mvns	r2, r3
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800157c:	f04f 31ff 	mov.w	r1, #4294967295
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	fa01 f303 	lsl.w	r3, r1, r3
 8001586:	43d9      	mvns	r1, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800158c:	4313      	orrs	r3, r2
         );
}
 800158e:	4618      	mov	r0, r3
 8001590:	3724      	adds	r7, #36	; 0x24
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
	...

0800159c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015ac:	d301      	bcc.n	80015b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00f      	b.n	80015d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b2:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <SysTick_Config+0x40>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ba:	2107      	movs	r1, #7
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f7ff ff8e 	bl	80014e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x40>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x40>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f7ff ff29 	bl	8001440 <__NVIC_SetPriorityGrouping>
}
 80015ee:	bf00      	nop
 80015f0:	3708      	adds	r7, #8
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b086      	sub	sp, #24
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	4603      	mov	r3, r0
 80015fe:	60b9      	str	r1, [r7, #8]
 8001600:	607a      	str	r2, [r7, #4]
 8001602:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001604:	f7ff ff40 	bl	8001488 <__NVIC_GetPriorityGrouping>
 8001608:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	68b9      	ldr	r1, [r7, #8]
 800160e:	6978      	ldr	r0, [r7, #20]
 8001610:	f7ff ff90 	bl	8001534 <NVIC_EncodePriority>
 8001614:	4602      	mov	r2, r0
 8001616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161a:	4611      	mov	r1, r2
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff ff5f 	bl	80014e0 <__NVIC_SetPriority>
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff33 	bl	80014a4 <__NVIC_EnableIRQ>
}
 800163e:	bf00      	nop
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ffa4 	bl	800159c <SysTick_Config>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	3708      	adds	r7, #8
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e08d      	b.n	800178e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	461a      	mov	r2, r3
 8001678:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_DMA_Init+0x138>)
 800167a:	429a      	cmp	r2, r3
 800167c:	d80f      	bhi.n	800169e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	461a      	mov	r2, r3
 8001684:	4b45      	ldr	r3, [pc, #276]	; (800179c <HAL_DMA_Init+0x13c>)
 8001686:	4413      	add	r3, r2
 8001688:	4a45      	ldr	r2, [pc, #276]	; (80017a0 <HAL_DMA_Init+0x140>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	091b      	lsrs	r3, r3, #4
 8001690:	009a      	lsls	r2, r3, #2
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a42      	ldr	r2, [pc, #264]	; (80017a4 <HAL_DMA_Init+0x144>)
 800169a:	649a      	str	r2, [r3, #72]	; 0x48
 800169c:	e00e      	b.n	80016bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	461a      	mov	r2, r3
 80016a4:	4b40      	ldr	r3, [pc, #256]	; (80017a8 <HAL_DMA_Init+0x148>)
 80016a6:	4413      	add	r3, r2
 80016a8:	4a3d      	ldr	r2, [pc, #244]	; (80017a0 <HAL_DMA_Init+0x140>)
 80016aa:	fba2 2303 	umull	r2, r3, r2, r3
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	009a      	lsls	r2, r3, #2
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4a3c      	ldr	r2, [pc, #240]	; (80017ac <HAL_DMA_Init+0x14c>)
 80016ba:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2202      	movs	r2, #2
 80016c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 80016d2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80016d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	691b      	ldr	r3, [r3, #16]
 80016e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	699b      	ldr	r3, [r3, #24]
 80016f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a1b      	ldr	r3, [r3, #32]
 80016fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001700:	68fa      	ldr	r2, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 faf2 	bl	8001cf8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800171c:	d102      	bne.n	8001724 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800172c:	b2d2      	uxtb	r2, r2
 800172e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001738:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d010      	beq.n	8001764 <HAL_DMA_Init+0x104>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b04      	cmp	r3, #4
 8001748:	d80c      	bhi.n	8001764 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 fb12 	bl	8001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001760:	605a      	str	r2, [r3, #4]
 8001762:	e008      	b.n	8001776 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2201      	movs	r2, #1
 8001780:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3710      	adds	r7, #16
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40020407 	.word	0x40020407
 800179c:	bffdfff8 	.word	0xbffdfff8
 80017a0:	cccccccd 	.word	0xcccccccd
 80017a4:	40020000 	.word	0x40020000
 80017a8:	bffdfbf8 	.word	0xbffdfbf8
 80017ac:	40020400 	.word	0x40020400

080017b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	60f8      	str	r0, [r7, #12]
 80017b8:	60b9      	str	r1, [r7, #8]
 80017ba:	607a      	str	r2, [r7, #4]
 80017bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_DMA_Start_IT+0x20>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e066      	b.n	800189e <HAL_DMA_Start_IT+0xee>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d155      	bne.n	8001890 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f022 0201 	bic.w	r2, r2, #1
 8001800:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	68b9      	ldr	r1, [r7, #8]
 8001808:	68f8      	ldr	r0, [r7, #12]
 800180a:	f000 fa37 	bl	8001c7c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	2b00      	cmp	r3, #0
 8001814:	d008      	beq.n	8001828 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f042 020e 	orr.w	r2, r2, #14
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00f      	b.n	8001848 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f022 0204 	bic.w	r2, r2, #4
 8001836:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f042 020a 	orr.w	r2, r2, #10
 8001846:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d007      	beq.n	8001866 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001860:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001864:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800186a:	2b00      	cmp	r3, #0
 800186c:	d007      	beq.n	800187e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800187c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f042 0201 	orr.w	r2, r2, #1
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	e005      	b.n	800189c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001898:	2302      	movs	r3, #2
 800189a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800189c:	7dfb      	ldrb	r3, [r7, #23]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018a6:	b480      	push	{r7}
 80018a8:	b085      	sub	sp, #20
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d008      	beq.n	80018d0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2204      	movs	r2, #4
 80018c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	e040      	b.n	8001952 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f022 020e 	bic.w	r2, r2, #14
 80018de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0201 	bic.w	r2, r2, #1
 80018fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001904:	f003 021c 	and.w	r2, r3, #28
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190c:	2101      	movs	r1, #1
 800190e:	fa01 f202 	lsl.w	r2, r1, r2
 8001912:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800191c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	2b00      	cmp	r3, #0
 8001924:	d00c      	beq.n	8001940 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800193e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2201      	movs	r2, #1
 8001944:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2200      	movs	r2, #0
 800194c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001950:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001952:	4618      	mov	r0, r3
 8001954:	3714      	adds	r7, #20
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr

0800195e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b084      	sub	sp, #16
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b02      	cmp	r3, #2
 8001974:	d005      	beq.n	8001982 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2204      	movs	r2, #4
 800197a:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e047      	b.n	8001a12 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	681a      	ldr	r2, [r3, #0]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 020e 	bic.w	r2, r2, #14
 8001990:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f022 0201 	bic.w	r2, r2, #1
 80019a0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019b0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	f003 021c 	and.w	r2, r3, #28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019be:	2101      	movs	r1, #1
 80019c0:	fa01 f202 	lsl.w	r2, r1, r2
 80019c4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80019ce:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00c      	beq.n	80019f2 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80019f0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	4798      	blx	r3
    }
  }
  return status;
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	f003 031c 	and.w	r3, r3, #28
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	409a      	lsls	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4013      	ands	r3, r2
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d053      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd4>
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d04e      	beq.n	8001af0 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d024      	beq.n	8001aaa <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a64:	f003 021c 	and.w	r2, r3, #28
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	2104      	movs	r1, #4
 8001a6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a72:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d109      	bne.n	8001a96 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 80c0 	beq.w	8001c0c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001a94:	e0ba      	b.n	8001c0c <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80b6 	beq.w	8001c0c <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001aa8:	e0b0      	b.n	8001c0c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 0320 	and.w	r3, r3, #32
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d107      	bne.n	8001ac8 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0204 	bic.w	r2, r2, #4
 8001ac6:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 021c 	and.w	r2, r3, #28
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2104      	movs	r1, #4
 8001ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8001ada:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8093 	beq.w	8001c0c <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001aee:	e08d      	b.n	8001c0c <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	f003 031c 	and.w	r3, r3, #28
 8001af8:	2202      	movs	r2, #2
 8001afa:	409a      	lsls	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	4013      	ands	r3, r2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d04e      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x186>
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d049      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d018      	beq.n	8001b4e <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d108      	bne.n	8001b3c <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d06e      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001b3a:	e069      	b.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d065      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001b4c:	e060      	b.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0320 	and.w	r3, r3, #32
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d10b      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 020a 	bic.w	r2, r2, #10
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	f003 021c 	and.w	r2, r3, #28
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	2102      	movs	r1, #2
 8001b82:	fa01 f202 	lsl.w	r2, r1, r2
 8001b86:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03b      	beq.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001ba0:	e036      	b.n	8001c10 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba6:	f003 031c 	and.w	r3, r3, #28
 8001baa:	2208      	movs	r2, #8
 8001bac:	409a      	lsls	r2, r3
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d02e      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1f8>
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d029      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 020e 	bic.w	r2, r2, #14
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 021c 	and.w	r2, r3, #28
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bdc:	2101      	movs	r1, #1
 8001bde:	fa01 f202 	lsl.w	r2, r1, r2
 8001be2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2201      	movs	r2, #1
 8001bee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d008      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001c0a:	e002      	b.n	8001c12 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001c0c:	bf00      	nop
 8001c0e:	e000      	b.n	8001c12 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8001c10:	bf00      	nop
  return;
 8001c12:	bf00      	nop
 8001c14:	bf00      	nop
}
 8001c16:	3710      	adds	r7, #16
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d103      	bne.n	8001c38 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	72fb      	strb	r3, [r7, #11]
    return status;
 8001c34:	7afb      	ldrb	r3, [r7, #11]
 8001c36:	e01b      	b.n	8001c70 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f003 0310 	and.w	r3, r3, #16
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d00d      	beq.n	8001c66 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d004      	beq.n	8001c5e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	e003      	b.n	8001c66 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001c64:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	601a      	str	r2, [r3, #0]

  return status;
 8001c6e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b085      	sub	sp, #20
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	60f8      	str	r0, [r7, #12]
 8001c84:	60b9      	str	r1, [r7, #8]
 8001c86:	607a      	str	r2, [r7, #4]
 8001c88:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001c92:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d004      	beq.n	8001ca6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca0:	68fa      	ldr	r2, [r7, #12]
 8001ca2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001ca4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001caa:	f003 021c 	and.w	r2, r3, #28
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	2b10      	cmp	r3, #16
 8001cc8:	d108      	bne.n	8001cdc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 8001cda:	e007      	b.n	8001cec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68ba      	ldr	r2, [r7, #8]
 8001ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	60da      	str	r2, [r3, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	461a      	mov	r2, r3
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d80a      	bhi.n	8001d22 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d10:	089b      	lsrs	r3, r3, #2
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001d18:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8001d20:	e007      	b.n	8001d32 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	009a      	lsls	r2, r3, #2
 8001d2a:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d2c:	4413      	add	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	b2db      	uxtb	r3, r3
 8001d38:	3b08      	subs	r3, #8
 8001d3a:	4a0c      	ldr	r2, [pc, #48]	; (8001d6c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a0a      	ldr	r2, [pc, #40]	; (8001d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d48:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2201      	movs	r2, #1
 8001d52:	409a      	lsls	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d58:	bf00      	nop
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	40020407 	.word	0x40020407
 8001d68:	40020820 	.word	0x40020820
 8001d6c:	cccccccd 	.word	0xcccccccd
 8001d70:	40020880 	.word	0x40020880

08001d74 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001d84:	68fa      	ldr	r2, [r7, #12]
 8001d86:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001d88:	4413      	add	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a08      	ldr	r2, [pc, #32]	; (8001db8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001d96:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	2201      	movs	r2, #1
 8001da2:	409a      	lsls	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	1000823f 	.word	0x1000823f
 8001db8:	40020940 	.word	0x40020940

08001dbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b087      	sub	sp, #28
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001dca:	e158      	b.n	800207e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2101      	movs	r1, #1
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	f000 814a 	beq.w	8002078 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f003 0303 	and.w	r3, r3, #3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d005      	beq.n	8001dfc <HAL_GPIO_Init+0x40>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d130      	bne.n	8001e5e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	2203      	movs	r2, #3
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4013      	ands	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e32:	2201      	movs	r2, #1
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	091b      	lsrs	r3, r3, #4
 8001e48:	f003 0201 	and.w	r2, r3, #1
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d017      	beq.n	8001e9a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	693a      	ldr	r2, [r7, #16]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	689a      	ldr	r2, [r3, #8]
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d123      	bne.n	8001eee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	08da      	lsrs	r2, r3, #3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	3208      	adds	r2, #8
 8001eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	009b      	lsls	r3, r3, #2
 8001ebc:	220f      	movs	r2, #15
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	693a      	ldr	r2, [r7, #16]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	691a      	ldr	r2, [r3, #16]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 0307 	and.w	r3, r3, #7
 8001ed4:	009b      	lsls	r3, r3, #2
 8001ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	08da      	lsrs	r2, r3, #3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3208      	adds	r2, #8
 8001ee8:	6939      	ldr	r1, [r7, #16]
 8001eea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	2203      	movs	r2, #3
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43db      	mvns	r3, r3
 8001f00:	693a      	ldr	r2, [r7, #16]
 8001f02:	4013      	ands	r3, r2
 8001f04:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	f003 0203 	and.w	r2, r3, #3
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	693a      	ldr	r2, [r7, #16]
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 80a4 	beq.w	8002078 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8001f30:	4a5a      	ldr	r2, [pc, #360]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	089b      	lsrs	r3, r3, #2
 8001f36:	3318      	adds	r3, #24
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	f003 0303 	and.w	r3, r3, #3
 8001f44:	00db      	lsls	r3, r3, #3
 8001f46:	220f      	movs	r2, #15
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	4013      	ands	r3, r2
 8001f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a52      	ldr	r2, [pc, #328]	; (80020a0 <HAL_GPIO_Init+0x2e4>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d025      	beq.n	8001fa8 <HAL_GPIO_Init+0x1ec>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	4a51      	ldr	r2, [pc, #324]	; (80020a4 <HAL_GPIO_Init+0x2e8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d01f      	beq.n	8001fa4 <HAL_GPIO_Init+0x1e8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a50      	ldr	r2, [pc, #320]	; (80020a8 <HAL_GPIO_Init+0x2ec>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d019      	beq.n	8001fa0 <HAL_GPIO_Init+0x1e4>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	4a4f      	ldr	r2, [pc, #316]	; (80020ac <HAL_GPIO_Init+0x2f0>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_GPIO_Init+0x1e0>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <HAL_GPIO_Init+0x2f4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00d      	beq.n	8001f98 <HAL_GPIO_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_GPIO_Init+0x2f8>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d007      	beq.n	8001f94 <HAL_GPIO_Init+0x1d8>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a4c      	ldr	r2, [pc, #304]	; (80020b8 <HAL_GPIO_Init+0x2fc>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d101      	bne.n	8001f90 <HAL_GPIO_Init+0x1d4>
 8001f8c:	2306      	movs	r3, #6
 8001f8e:	e00c      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f90:	2307      	movs	r3, #7
 8001f92:	e00a      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f94:	2305      	movs	r3, #5
 8001f96:	e008      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f98:	2304      	movs	r3, #4
 8001f9a:	e006      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e004      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	e002      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_GPIO_Init+0x1ee>
 8001fa8:	2300      	movs	r3, #0
 8001faa:	697a      	ldr	r2, [r7, #20]
 8001fac:	f002 0203 	and.w	r2, r2, #3
 8001fb0:	00d2      	lsls	r2, r2, #3
 8001fb2:	4093      	lsls	r3, r2
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8001fba:	4938      	ldr	r1, [pc, #224]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3318      	adds	r3, #24
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fc8:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	693a      	ldr	r2, [r7, #16]
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fec:	4a2b      	ldr	r2, [pc, #172]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001ff2:	4b2a      	ldr	r3, [pc, #168]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	43db      	mvns	r3, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4013      	ands	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800200e:	693a      	ldr	r2, [r7, #16]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	4313      	orrs	r3, r2
 8002014:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002016:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_GPIO_Init+0x2e0>)
 800201e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002042:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 800204a:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_GPIO_Init+0x2e0>)
 800204c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002050:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	43db      	mvns	r3, r3
 8002056:	693a      	ldr	r2, [r7, #16]
 8002058:	4013      	ands	r3, r2
 800205a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	4313      	orrs	r3, r2
 800206e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002070:	4a0a      	ldr	r2, [pc, #40]	; (800209c <HAL_GPIO_Init+0x2e0>)
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	3301      	adds	r3, #1
 800207c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	697b      	ldr	r3, [r7, #20]
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	f47f ae9f 	bne.w	8001dcc <HAL_GPIO_Init+0x10>
  }
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	4002f400 	.word	0x4002f400
 80020a0:	42020000 	.word	0x42020000
 80020a4:	42020400 	.word	0x42020400
 80020a8:	42020800 	.word	0x42020800
 80020ac:	42020c00 	.word	0x42020c00
 80020b0:	42021000 	.word	0x42021000
 80020b4:	42021400 	.word	0x42021400
 80020b8:	42021800 	.word	0x42021800

080020bc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a04      	ldr	r2, [pc, #16]	; (80020d8 <HAL_ICACHE_Enable+0x1c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	40030400 	.word	0x40030400

080020dc <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 80020e8:	f7ff f97a 	bl	80013e0 <HAL_GetTick>
 80020ec:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d102      	bne.n	80020fa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	73fb      	strb	r3, [r7, #15]
 80020f8:	e0a2      	b.n	8002240 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002104:	2b00      	cmp	r3, #0
 8002106:	f040 809b 	bne.w	8002240 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fdbe 	bl	8000c8c <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002110:	f241 3188 	movw	r1, #5000	; 0x1388
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa2d 	bl	8002574 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	4b4a      	ldr	r3, [pc, #296]	; (800224c <HAL_OSPI_Init+0x170>)
 8002122:	4013      	ands	r3, r2
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	68d1      	ldr	r1, [r2, #12]
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6912      	ldr	r2, [r2, #16]
 800212c:	3a01      	subs	r2, #1
 800212e:	0412      	lsls	r2, r2, #16
 8002130:	4311      	orrs	r1, r2
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	6952      	ldr	r2, [r2, #20]
 8002136:	3a01      	subs	r2, #1
 8002138:	0212      	lsls	r2, r2, #8
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002140:	4311      	orrs	r1, r2
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	69d2      	ldr	r2, [r2, #28]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6a1a      	ldr	r2, [r3, #32]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	430a      	orrs	r2, r1
 8002164:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	0412      	lsls	r2, r2, #16
 8002170:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217a:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	3b01      	subs	r3, #1
 800218c:	021a      	lsls	r2, r3, #8
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800219a:	9300      	str	r3, [sp, #0]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2200      	movs	r2, #0
 80021a0:	2120      	movs	r1, #32
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f000 fa31 	bl	800260a <OSPI_WaitFlagStateUntilTimeout>
 80021a8:	4603      	mov	r3, r0
 80021aa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d146      	bne.n	8002240 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c0:	1e5a      	subs	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80021e8:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f042 0201 	orr.w	r2, r2, #1
 800220e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d107      	bne.n	8002228 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	689a      	ldr	r2, [r3, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0202 	orr.w	r2, r2, #2
 8002226:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002230:	d103      	bne.n	800223a <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2201      	movs	r2, #1
 8002236:	64da      	str	r2, [r3, #76]	; 0x4c
 8002238:	e002      	b.n	8002240 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2202      	movs	r2, #2
 800223e:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8002240:	7bfb      	ldrb	r3, [r7, #15]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	f8e0f8f4 	.word	0xf8e0f8f4

08002250 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	3350      	adds	r3, #80	; 0x50
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6a1b      	ldr	r3, [r3, #32]
 8002266:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002274:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	f003 0304 	and.w	r3, r3, #4
 800227c:	2b00      	cmp	r3, #0
 800227e:	d03a      	beq.n	80022f6 <HAL_OSPI_IRQHandler+0xa6>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d035      	beq.n	80022f6 <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 800228a:	68bb      	ldr	r3, [r7, #8]
 800228c:	2b18      	cmp	r3, #24
 800228e:	d10f      	bne.n	80022b0 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a8:	1e5a      	subs	r2, r3, #1
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	645a      	str	r2, [r3, #68]	; 0x44
 80022ae:	e012      	b.n	80022d6 <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	2b28      	cmp	r3, #40	; 0x28
 80022b4:	d10f      	bne.n	80022d6 <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	697a      	ldr	r2, [r7, #20]
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	b2d2      	uxtb	r2, r2
 80022c0:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d0:	1e5a      	subs	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d107      	bne.n	80022ee <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022ec:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f000 f904 	bl	80024fc <HAL_OSPI_FifoThresholdCallback>
 80022f4:	e0e7      	b.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d067      	beq.n	80023d0 <HAL_OSPI_IRQHandler+0x180>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d062      	beq.n	80023d0 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	2b28      	cmp	r3, #40	; 0x28
 800230e:	d131      	bne.n	8002374 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002314:	2b00      	cmp	r3, #0
 8002316:	d015      	beq.n	8002344 <HAL_OSPI_IRQHandler+0xf4>
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 800231e:	2b00      	cmp	r3, #0
 8002320:	d010      	beq.n	8002344 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	7812      	ldrb	r2, [r2, #0]
 800232a:	b2d2      	uxtb	r2, r2
 800232c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	63da      	str	r2, [r3, #60]	; 0x3c
        hospi->XferCount--;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800233c:	1e5a      	subs	r2, r3, #1
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8002342:	e0bd      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	2b00      	cmp	r3, #0
 800234a:	f040 80b9 	bne.w	80024c0 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 8002364:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2202      	movs	r2, #2
 800236a:	64da      	str	r2, [r3, #76]	; 0x4c

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f8d9 	bl	8002524 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8002372:	e0a5      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2202      	movs	r2, #2
 800237a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 800238a:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2202      	movs	r2, #2
 8002390:	64da      	str	r2, [r3, #76]	; 0x4c

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b18      	cmp	r3, #24
 8002396:	d103      	bne.n	80023a0 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 f8cd 	bl	8002538 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800239e:	e08f      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	2b08      	cmp	r3, #8
 80023a4:	d103      	bne.n	80023ae <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80023a6:	6878      	ldr	r0, [r7, #4]
 80023a8:	f000 f8b2 	bl	8002510 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80023ac:	e088      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023b4:	f040 8084 	bne.w	80024c0 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d103      	bne.n	80023c8 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f891 	bl	80024e8 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80023c6:	e07b      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f000 f883 	bl	80024d4 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80023ce:	e077      	b.n	80024c0 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d01e      	beq.n	8002418 <HAL_OSPI_IRQHandler+0x1c8>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d019      	beq.n	8002418 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2208      	movs	r2, #8
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d00a      	beq.n	8002410 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8002408:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 f89b 	bl	800254c <HAL_OSPI_StatusMatchCallback>
 8002416:	e056      	b.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d03c      	beq.n	800249c <HAL_OSPI_IRQHandler+0x24c>
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002428:	2b00      	cmp	r3, #0
 800242a:	d037      	beq.n	800249c <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2201      	movs	r2, #1
 8002432:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8002442:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01a      	beq.n	800248e <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f022 0204 	bic.w	r2, r2, #4
 8002466:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800246c:	4a18      	ldr	r2, [pc, #96]	; (80024d0 <HAL_OSPI_IRQHandler+0x280>)
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff fa72 	bl	800195e <HAL_DMA_Abort_IT>
 800247a:	4603      	mov	r3, r0
 800247c:	2b00      	cmp	r3, #0
 800247e:	d021      	beq.n	80024c4 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2202      	movs	r2, #2
 8002484:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 f824 	bl	80024d4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800248c:	e01a      	b.n	80024c4 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2202      	movs	r2, #2
 8002492:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 f81d 	bl	80024d4 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800249a:	e013      	b.n	80024c4 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f003 0310 	and.w	r3, r3, #16
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00a      	beq.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	2210      	movs	r2, #16
 80024b6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f000 f851 	bl	8002560 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80024be:	e002      	b.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80024c4:	bf00      	nop
}
 80024c6:	bf00      	nop
 80024c8:	3718      	adds	r7, #24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	08002593 	.word	0x08002593

080024d4 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80024dc:	bf00      	nop
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8002518:	bf00      	nop
 800251a:	370c      	adds	r7, #12
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr

08002524 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b084      	sub	sp, #16
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259e:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ae:	d122      	bne.n	80025f6 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	f003 0320 	and.w	r3, r3, #32
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d014      	beq.n	80025e8 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2202      	movs	r2, #2
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80025d4:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0202 	orr.w	r2, r2, #2
 80025e4:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 80025e6:	e00c      	b.n	8002602 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2202      	movs	r2, #2
 80025ec:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_OSPI_AbortCpltCallback(hospi);
 80025ee:	68f8      	ldr	r0, [r7, #12]
 80025f0:	f7ff ff7a 	bl	80024e8 <HAL_OSPI_AbortCpltCallback>
}
 80025f4:	e005      	b.n	8002602 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2202      	movs	r2, #2
 80025fa:	64da      	str	r2, [r3, #76]	; 0x4c
    HAL_OSPI_ErrorCallback(hospi);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ff69 	bl	80024d4 <HAL_OSPI_ErrorCallback>
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b084      	sub	sp, #16
 800260e:	af00      	add	r7, sp, #0
 8002610:	60f8      	str	r0, [r7, #12]
 8002612:	60b9      	str	r1, [r7, #8]
 8002614:	603b      	str	r3, [r7, #0]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800261a:	e01a      	b.n	8002652 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002622:	d016      	beq.n	8002652 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002624:	f7fe fedc 	bl	80013e0 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	429a      	cmp	r2, r3
 8002632:	d302      	bcc.n	800263a <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10b      	bne.n	8002652 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002640:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002646:	f043 0201 	orr.w	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e00e      	b.n	8002670 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	6a1a      	ldr	r2, [r3, #32]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4013      	ands	r3, r2
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	429a      	cmp	r2, r3
 800266c:	d1d6      	bne.n	800261c <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a04      	ldr	r2, [pc, #16]	; (8002694 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002686:	6013      	str	r3, [r2, #0]
}
 8002688:	bf00      	nop
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40007000 	.word	0x40007000

08002698 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800269c:	4b04      	ldr	r3, [pc, #16]	; (80026b0 <HAL_PWREx_GetVoltageRange+0x18>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	40007000 	.word	0x40007000

080026b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80026bc:	4b27      	ldr	r3, [pc, #156]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80026c4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80026c6:	f000 f861 	bl	800278c <HAL_PWREx_SMPS_GetEffectiveMode>
 80026ca:	4603      	mov	r3, r0
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d101      	bne.n	80026d6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e03e      	b.n	8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80026d6:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026e2:	d101      	bne.n	80026e8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e035      	b.n	8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d101      	bne.n	80026f4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80026f0:	2300      	movs	r3, #0
 80026f2:	e02f      	b.n	8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80026fc:	4917      	ldr	r1, [pc, #92]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002704:	4b16      	ldr	r3, [pc, #88]	; (8002760 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	095b      	lsrs	r3, r3, #5
 800270a:	4a16      	ldr	r2, [pc, #88]	; (8002764 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	09db      	lsrs	r3, r3, #7
 8002712:	2232      	movs	r2, #50	; 0x32
 8002714:	fb02 f303 	mul.w	r3, r2, r3
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	3301      	adds	r3, #1
 8002722:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002724:	e002      	b.n	800272c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3b01      	subs	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800272e:	695b      	ldr	r3, [r3, #20]
 8002730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002734:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002738:	d102      	bne.n	8002740 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d1f2      	bne.n	8002726 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800274c:	d101      	bne.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e000      	b.n	8002754 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40007000 	.word	0x40007000
 8002760:	20000000 	.word	0x20000000
 8002764:	0a7c5ac5 	.word	0x0a7c5ac5
 8002768:	cccccccd 	.word	0xcccccccd

0800276c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002770:	4b05      	ldr	r3, [pc, #20]	; (8002788 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	4a04      	ldr	r2, [pc, #16]	; (8002788 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800277a:	6093      	str	r3, [r2, #8]
}
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40007000 	.word	0x40007000

0800278c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002792:	4b0f      	ldr	r3, [pc, #60]	; (80027d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80027a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027a6:	607b      	str	r3, [r7, #4]
 80027a8:	e00a      	b.n	80027c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80027b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027b8:	607b      	str	r3, [r7, #4]
 80027ba:	e001      	b.n	80027c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80027bc:	2300      	movs	r3, #0
 80027be:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80027c0:	687b      	ldr	r3, [r7, #4]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40007000 	.word	0x40007000

080027d4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b088      	sub	sp, #32
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d102      	bne.n	80027e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	f000 bcc2 	b.w	800316c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e8:	4b99      	ldr	r3, [pc, #612]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	f003 030c 	and.w	r3, r3, #12
 80027f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f2:	4b97      	ldr	r3, [pc, #604]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0310 	and.w	r3, r3, #16
 8002804:	2b00      	cmp	r3, #0
 8002806:	f000 80e9 	beq.w	80029dc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d006      	beq.n	800281e <HAL_RCC_OscConfig+0x4a>
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	2b0c      	cmp	r3, #12
 8002814:	f040 8083 	bne.w	800291e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d17f      	bne.n	800291e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800281e:	4b8c      	ldr	r3, [pc, #560]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_RCC_OscConfig+0x64>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d102      	bne.n	8002838 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	f000 bc9a 	b.w	800316c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800283c:	4b84      	ldr	r3, [pc, #528]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_RCC_OscConfig+0x7e>
 8002848:	4b81      	ldr	r3, [pc, #516]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002850:	e005      	b.n	800285e <HAL_RCC_OscConfig+0x8a>
 8002852:	4b7f      	ldr	r3, [pc, #508]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800285e:	4293      	cmp	r3, r2
 8002860:	d224      	bcs.n	80028ac <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fe9c 	bl	80035a4 <RCC_SetFlashLatencyFromMSIRange>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d002      	beq.n	8002878 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f000 bc7a 	b.w	800316c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4b75      	ldr	r3, [pc, #468]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a74      	ldr	r2, [pc, #464]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b72      	ldr	r3, [pc, #456]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	496f      	ldr	r1, [pc, #444]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4b6e      	ldr	r3, [pc, #440]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	496a      	ldr	r1, [pc, #424]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e026      	b.n	80028fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ac:	4b68      	ldr	r3, [pc, #416]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a67      	ldr	r2, [pc, #412]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b65      	ldr	r3, [pc, #404]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c4:	4962      	ldr	r1, [pc, #392]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6a1b      	ldr	r3, [r3, #32]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	495d      	ldr	r1, [pc, #372]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10a      	bne.n	80028fa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe5b 	bl	80035a4 <RCC_SetFlashLatencyFromMSIRange>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d002      	beq.n	80028fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	f000 bc39 	b.w	800316c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80028fa:	f000 fe17 	bl	800352c <HAL_RCC_GetHCLKFreq>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a54      	ldr	r2, [pc, #336]	; (8002a54 <HAL_RCC_OscConfig+0x280>)
 8002902:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002904:	4b54      	ldr	r3, [pc, #336]	; (8002a58 <HAL_RCC_OscConfig+0x284>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe fd19 	bl	8001340 <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8002912:	7bfb      	ldrb	r3, [r7, #15]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d060      	beq.n	80029da <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8002918:	7bfb      	ldrb	r3, [r7, #15]
 800291a:	f000 bc27 	b.w	800316c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d039      	beq.n	800299a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002926:	4b4a      	ldr	r3, [pc, #296]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002932:	f7fe fd55 	bl	80013e0 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002938:	e00f      	b.n	800295a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293a:	f7fe fd51 	bl	80013e0 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d908      	bls.n	800295a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002948:	4b41      	ldr	r3, [pc, #260]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0302 	and.w	r3, r3, #2
 8002950:	2b00      	cmp	r3, #0
 8002952:	d102      	bne.n	800295a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	f000 bc09 	b.w	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295a:	4b3d      	ldr	r3, [pc, #244]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0e9      	beq.n	800293a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002966:	4b3a      	ldr	r3, [pc, #232]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a39      	ldr	r2, [pc, #228]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800296c:	f043 0308 	orr.w	r3, r3, #8
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297e:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002980:	4313      	orrs	r3, r2
 8002982:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002984:	4b32      	ldr	r3, [pc, #200]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a1b      	ldr	r3, [r3, #32]
 8002990:	021b      	lsls	r3, r3, #8
 8002992:	492f      	ldr	r1, [pc, #188]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002994:	4313      	orrs	r3, r2
 8002996:	604b      	str	r3, [r1, #4]
 8002998:	e020      	b.n	80029dc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800299a:	4b2d      	ldr	r3, [pc, #180]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029a0:	f023 0301 	bic.w	r3, r3, #1
 80029a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fd1b 	bl	80013e0 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029ac:	e00e      	b.n	80029cc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029ae:	f7fe fd17 	bl	80013e0 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d907      	bls.n	80029cc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029bc:	4b24      	ldr	r3, [pc, #144]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e3cf      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029cc:	4b20      	ldr	r3, [pc, #128]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0302 	and.w	r3, r3, #2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1ea      	bne.n	80029ae <HAL_RCC_OscConfig+0x1da>
 80029d8:	e000      	b.n	80029dc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d07e      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	2b08      	cmp	r3, #8
 80029ec:	d005      	beq.n	80029fa <HAL_RCC_OscConfig+0x226>
 80029ee:	69bb      	ldr	r3, [r7, #24]
 80029f0:	2b0c      	cmp	r3, #12
 80029f2:	d10e      	bne.n	8002a12 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b03      	cmp	r3, #3
 80029f8:	d10b      	bne.n	8002a12 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d06e      	beq.n	8002ae4 <HAL_RCC_OscConfig+0x310>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d16a      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e3ac      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d106      	bne.n	8002a2a <HAL_RCC_OscConfig+0x256>
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a0b      	ldr	r2, [pc, #44]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a26:	6013      	str	r3, [r2, #0]
 8002a28:	e024      	b.n	8002a74 <HAL_RCC_OscConfig+0x2a0>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a32:	d113      	bne.n	8002a5c <HAL_RCC_OscConfig+0x288>
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a05      	ldr	r2, [pc, #20]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a3e:	6013      	str	r3, [r2, #0]
 8002a40:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a02      	ldr	r2, [pc, #8]	; (8002a50 <HAL_RCC_OscConfig+0x27c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e012      	b.n	8002a74 <HAL_RCC_OscConfig+0x2a0>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	20000000 	.word	0x20000000
 8002a58:	20000004 	.word	0x20000004
 8002a5c:	4b8b      	ldr	r3, [pc, #556]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a8a      	ldr	r2, [pc, #552]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a66:	6013      	str	r3, [r2, #0]
 8002a68:	4b88      	ldr	r3, [pc, #544]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a87      	ldr	r2, [pc, #540]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d019      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7c:	f7fe fcb0 	bl	80013e0 <HAL_GetTick>
 8002a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a82:	e00e      	b.n	8002aa2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a84:	f7fe fcac 	bl	80013e0 <HAL_GetTick>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	2b64      	cmp	r3, #100	; 0x64
 8002a90:	d907      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4b7e      	ldr	r3, [pc, #504]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e364      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002aa2:	4b7a      	ldr	r3, [pc, #488]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0ea      	beq.n	8002a84 <HAL_RCC_OscConfig+0x2b0>
 8002aae:	e01a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab0:	f7fe fc96 	bl	80013e0 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ab6:	e00e      	b.n	8002ad6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab8:	f7fe fc92 	bl	80013e0 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b64      	cmp	r3, #100	; 0x64
 8002ac4:	d907      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ac6:	4b71      	ldr	r3, [pc, #452]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d001      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e34a      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ad6:	4b6d      	ldr	r3, [pc, #436]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1ea      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x2e4>
 8002ae2:	e000      	b.n	8002ae6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d06c      	beq.n	8002bcc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002af2:	69bb      	ldr	r3, [r7, #24]
 8002af4:	2b04      	cmp	r3, #4
 8002af6:	d005      	beq.n	8002b04 <HAL_RCC_OscConfig+0x330>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	2b0c      	cmp	r3, #12
 8002afc:	d119      	bne.n	8002b32 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d116      	bne.n	8002b32 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b04:	4b61      	ldr	r3, [pc, #388]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_OscConfig+0x348>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d101      	bne.n	8002b1c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e327      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1c:	4b5b      	ldr	r3, [pc, #364]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	061b      	lsls	r3, r3, #24
 8002b2a:	4958      	ldr	r1, [pc, #352]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b30:	e04c      	b.n	8002bcc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d029      	beq.n	8002b8e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b3a:	4b54      	ldr	r3, [pc, #336]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a53      	ldr	r2, [pc, #332]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b46:	f7fe fc4b 	bl	80013e0 <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b4c:	e00e      	b.n	8002b6c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b4e:	f7fe fc47 	bl	80013e0 <HAL_GetTick>
 8002b52:	4602      	mov	r2, r0
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	1ad3      	subs	r3, r2, r3
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d907      	bls.n	8002b6c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b5c:	4b4b      	ldr	r3, [pc, #300]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d101      	bne.n	8002b6c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e2ff      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b6c:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ea      	beq.n	8002b4e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b78:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	061b      	lsls	r3, r3, #24
 8002b86:	4941      	ldr	r1, [pc, #260]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
 8002b8c:	e01e      	b.n	8002bcc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a3e      	ldr	r2, [pc, #248]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002b94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b9a:	f7fe fc21 	bl	80013e0 <HAL_GetTick>
 8002b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ba2:	f7fe fc1d 	bl	80013e0 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bb0:	4b36      	ldr	r3, [pc, #216]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e2d5      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002bc0:	4b32      	ldr	r3, [pc, #200]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0308 	and.w	r3, r3, #8
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d062      	beq.n	8002c9e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	695b      	ldr	r3, [r3, #20]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d038      	beq.n	8002c52 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d108      	bne.n	8002bfa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002be8:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bee:	4a27      	ldr	r2, [pc, #156]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bf0:	f023 0310 	bic.w	r3, r3, #16
 8002bf4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002bf8:	e007      	b.n	8002c0a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8002bfa:	4b24      	ldr	r3, [pc, #144]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002bfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c00:	4a22      	ldr	r2, [pc, #136]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c02:	f043 0310 	orr.w	r3, r3, #16
 8002c06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c10:	4a1e      	ldr	r2, [pc, #120]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c12:	f043 0301 	orr.w	r3, r3, #1
 8002c16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1a:	f7fe fbe1 	bl	80013e0 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c20:	e00f      	b.n	8002c42 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c22:	f7fe fbdd 	bl	80013e0 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b07      	cmp	r3, #7
 8002c2e:	d908      	bls.n	8002c42 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c30:	4b16      	ldr	r3, [pc, #88]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e294      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c48:	f003 0302 	and.w	r3, r3, #2
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0e8      	beq.n	8002c22 <HAL_RCC_OscConfig+0x44e>
 8002c50:	e025      	b.n	8002c9e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c58:	4a0c      	ldr	r2, [pc, #48]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c62:	f7fe fbbd 	bl	80013e0 <HAL_GetTick>
 8002c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c68:	e012      	b.n	8002c90 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c6a:	f7fe fbb9 	bl	80013e0 <HAL_GetTick>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	1ad3      	subs	r3, r2, r3
 8002c74:	2b07      	cmp	r3, #7
 8002c76:	d90b      	bls.n	8002c90 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c78:	4b04      	ldr	r3, [pc, #16]	; (8002c8c <HAL_RCC_OscConfig+0x4b8>)
 8002c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d004      	beq.n	8002c90 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e270      	b.n	800316c <HAL_RCC_OscConfig+0x998>
 8002c8a:	bf00      	nop
 8002c8c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c90:	4ba8      	ldr	r3, [pc, #672]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002c92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1e5      	bne.n	8002c6a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	f000 812d 	beq.w	8002f06 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cac:	2300      	movs	r3, #0
 8002cae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cb0:	4ba0      	ldr	r3, [pc, #640]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cbc:	4b9d      	ldr	r3, [pc, #628]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cc0:	4a9c      	ldr	r2, [pc, #624]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002cc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cc6:	6593      	str	r3, [r2, #88]	; 0x58
 8002cc8:	4b9a      	ldr	r3, [pc, #616]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ccc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cd8:	4b97      	ldr	r3, [pc, #604]	; (8002f38 <HAL_RCC_OscConfig+0x764>)
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d11e      	bne.n	8002d22 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ce4:	4b94      	ldr	r3, [pc, #592]	; (8002f38 <HAL_RCC_OscConfig+0x764>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a93      	ldr	r2, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x764>)
 8002cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe fb76 	bl	80013e0 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002cf6:	e00e      	b.n	8002d16 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cf8:	f7fe fb72 	bl	80013e0 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d907      	bls.n	8002d16 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d06:	4b8c      	ldr	r3, [pc, #560]	; (8002f38 <HAL_RCC_OscConfig+0x764>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e22a      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d16:	4b88      	ldr	r3, [pc, #544]	; (8002f38 <HAL_RCC_OscConfig+0x764>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0ea      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d01f      	beq.n	8002d6e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d010      	beq.n	8002d5c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d3a:	4b7e      	ldr	r3, [pc, #504]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d40:	4a7c      	ldr	r2, [pc, #496]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d42:	f043 0304 	orr.w	r3, r3, #4
 8002d46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d4a:	4b7a      	ldr	r3, [pc, #488]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d50:	4a78      	ldr	r2, [pc, #480]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d52:	f043 0301 	orr.w	r3, r3, #1
 8002d56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d5a:	e018      	b.n	8002d8e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d5c:	4b75      	ldr	r3, [pc, #468]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d62:	4a74      	ldr	r2, [pc, #464]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d64:	f043 0301 	orr.w	r3, r3, #1
 8002d68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002d6c:	e00f      	b.n	8002d8e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002d6e:	4b71      	ldr	r3, [pc, #452]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d74:	4a6f      	ldr	r2, [pc, #444]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d76:	f023 0301 	bic.w	r3, r3, #1
 8002d7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002d7e:	4b6d      	ldr	r3, [pc, #436]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d84:	4a6b      	ldr	r2, [pc, #428]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002d86:	f023 0304 	bic.w	r3, r3, #4
 8002d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d068      	beq.n	8002e68 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d96:	f7fe fb23 	bl	80013e0 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d9c:	e011      	b.n	8002dc2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d9e:	f7fe fb1f 	bl	80013e0 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d908      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002db0:	4b60      	ldr	r3, [pc, #384]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d101      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e1d4      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dc2:	4b5c      	ldr	r3, [pc, #368]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002dc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0e6      	beq.n	8002d9e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ddc:	4b55      	ldr	r3, [pc, #340]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	4a54      	ldr	r2, [pc, #336]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002dec:	e011      	b.n	8002e12 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dee:	f7fe faf7 	bl	80013e0 <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d908      	bls.n	8002e12 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e00:	4b4c      	ldr	r3, [pc, #304]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e1ac      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002e12:	4b48      	ldr	r3, [pc, #288]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d0e6      	beq.n	8002dee <HAL_RCC_OscConfig+0x61a>
 8002e20:	e068      	b.n	8002ef4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002e22:	4b44      	ldr	r3, [pc, #272]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e28:	4a42      	ldr	r2, [pc, #264]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e32:	e011      	b.n	8002e58 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe fad4 	bl	80013e0 <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d908      	bls.n	8002e58 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e46:	4b3b      	ldr	r3, [pc, #236]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8002e54:	2303      	movs	r3, #3
 8002e56:	e189      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002e58:	4b36      	ldr	r3, [pc, #216]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1e6      	bne.n	8002e34 <HAL_RCC_OscConfig+0x660>
 8002e66:	e045      	b.n	8002ef4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e68:	f7fe faba 	bl	80013e0 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e6e:	e011      	b.n	8002e94 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e70:	f7fe fab6 	bl	80013e0 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d908      	bls.n	8002e94 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e82:	4b2c      	ldr	r3, [pc, #176]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d001      	beq.n	8002e94 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e16b      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e94:	4b27      	ldr	r3, [pc, #156]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1e6      	bne.n	8002e70 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d021      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002eb0:	4b20      	ldr	r3, [pc, #128]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	4a1f      	ldr	r2, [pc, #124]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002eb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ebc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ec0:	e011      	b.n	8002ee6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ec2:	f7fe fa8d 	bl	80013e0 <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1ad3      	subs	r3, r2, r3
 8002ecc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d908      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ed4:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e142      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002ee6:	4b13      	ldr	r3, [pc, #76]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1e6      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ef4:	7ffb      	ldrb	r3, [r7, #31]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d105      	bne.n	8002f06 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	4a0d      	ldr	r2, [pc, #52]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0320 	and.w	r3, r3, #32
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d04f      	beq.n	8002fb2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d028      	beq.n	8002f6c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f1a:	4b06      	ldr	r3, [pc, #24]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002f1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f20:	4a04      	ldr	r2, [pc, #16]	; (8002f34 <HAL_RCC_OscConfig+0x760>)
 8002f22:	f043 0301 	orr.w	r3, r3, #1
 8002f26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f2a:	f7fe fa59 	bl	80013e0 <HAL_GetTick>
 8002f2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f30:	e014      	b.n	8002f5c <HAL_RCC_OscConfig+0x788>
 8002f32:	bf00      	nop
 8002f34:	40021000 	.word	0x40021000
 8002f38:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f3c:	f7fe fa50 	bl	80013e0 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d908      	bls.n	8002f5c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f4a:	4b8a      	ldr	r3, [pc, #552]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002f4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e107      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f5c:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002f5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0e8      	beq.n	8002f3c <HAL_RCC_OscConfig+0x768>
 8002f6a:	e022      	b.n	8002fb2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f6c:	4b81      	ldr	r3, [pc, #516]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f72:	4a80      	ldr	r2, [pc, #512]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002f74:	f023 0301 	bic.w	r3, r3, #1
 8002f78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fa30 	bl	80013e0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f82:	e00f      	b.n	8002fa4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f84:	f7fe fa2c 	bl	80013e0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d908      	bls.n	8002fa4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f92:	4b78      	ldr	r3, [pc, #480]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e0e3      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002fa4:	4b73      	ldr	r3, [pc, #460]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002fa6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e8      	bne.n	8002f84 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80d7 	beq.w	800316a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fbc:	4b6d      	ldr	r3, [pc, #436]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f003 030c 	and.w	r3, r3, #12
 8002fc4:	2b0c      	cmp	r3, #12
 8002fc6:	f000 8091 	beq.w	80030ec <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d166      	bne.n	80030a0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fd2:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fde:	f7fe f9ff 	bl	80013e0 <HAL_GetTick>
 8002fe2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002fe4:	e00e      	b.n	8003004 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fe6:	f7fe f9fb 	bl	80013e0 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d907      	bls.n	8003004 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ff4:	4b5f      	ldr	r3, [pc, #380]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e0b3      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003004:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1ea      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <HAL_RCC_OscConfig+0x9a4>)
 8003016:	4013      	ands	r3, r2
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003020:	3a01      	subs	r2, #1
 8003022:	0112      	lsls	r2, r2, #4
 8003024:	4311      	orrs	r1, r2
 8003026:	687a      	ldr	r2, [r7, #4]
 8003028:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800302a:	0212      	lsls	r2, r2, #8
 800302c:	4311      	orrs	r1, r2
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003032:	0852      	lsrs	r2, r2, #1
 8003034:	3a01      	subs	r2, #1
 8003036:	0552      	lsls	r2, r2, #21
 8003038:	4311      	orrs	r1, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800303e:	0852      	lsrs	r2, r2, #1
 8003040:	3a01      	subs	r2, #1
 8003042:	0652      	lsls	r2, r2, #25
 8003044:	4311      	orrs	r1, r2
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800304a:	06d2      	lsls	r2, r2, #27
 800304c:	430a      	orrs	r2, r1
 800304e:	4949      	ldr	r1, [pc, #292]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003050:	4313      	orrs	r3, r2
 8003052:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003054:	4b47      	ldr	r3, [pc, #284]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a46      	ldr	r2, [pc, #280]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 800305a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800305e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003060:	4b44      	ldr	r3, [pc, #272]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	4a43      	ldr	r2, [pc, #268]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003066:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800306a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe f9b8 	bl	80013e0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003072:	e00e      	b.n	8003092 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003074:	f7fe f9b4 	bl	80013e0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b02      	cmp	r3, #2
 8003080:	d907      	bls.n	8003092 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e06c      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003092:	4b38      	ldr	r3, [pc, #224]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d0ea      	beq.n	8003074 <HAL_RCC_OscConfig+0x8a0>
 800309e:	e064      	b.n	800316a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a0:	4b34      	ldr	r3, [pc, #208]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a33      	ldr	r2, [pc, #204]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ac:	f7fe f998 	bl	80013e0 <HAL_GetTick>
 80030b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030b2:	e00e      	b.n	80030d2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030b4:	f7fe f994 	bl	80013e0 <HAL_GetTick>
 80030b8:	4602      	mov	r2, r0
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	1ad3      	subs	r3, r2, r3
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d907      	bls.n	80030d2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030c2:	4b2c      	ldr	r3, [pc, #176]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04c      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80030d2:	4b28      	ldr	r3, [pc, #160]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ea      	bne.n	80030b4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80030de:	4b25      	ldr	r3, [pc, #148]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	4924      	ldr	r1, [pc, #144]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_OscConfig+0x9a8>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
 80030ea:	e03e      	b.n	800316a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e039      	b.n	800316c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80030f8:	4b1e      	ldr	r3, [pc, #120]	; (8003174 <HAL_RCC_OscConfig+0x9a0>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f003 0203 	and.w	r2, r3, #3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003108:	429a      	cmp	r2, r3
 800310a:	d12c      	bne.n	8003166 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003116:	3b01      	subs	r3, #1
 8003118:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d123      	bne.n	8003166 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003128:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11b      	bne.n	8003166 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003138:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800313a:	429a      	cmp	r2, r3
 800313c:	d113      	bne.n	8003166 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003148:	085b      	lsrs	r3, r3, #1
 800314a:	3b01      	subs	r3, #1
 800314c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800314e:	429a      	cmp	r2, r3
 8003150:	d109      	bne.n	8003166 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315c:	085b      	lsrs	r3, r3, #1
 800315e:	3b01      	subs	r3, #1
 8003160:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d001      	beq.n	800316a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e000      	b.n	800316c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800316a:	2300      	movs	r3, #0
}
 800316c:	4618      	mov	r0, r3
 800316e:	3720      	adds	r7, #32
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40021000 	.word	0x40021000
 8003178:	019f800c 	.word	0x019f800c
 800317c:	feeefffc 	.word	0xfeeefffc

08003180 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
 8003188:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	e11c      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003198:	4b90      	ldr	r3, [pc, #576]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d910      	bls.n	80031c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a6:	4b8d      	ldr	r3, [pc, #564]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f023 020f 	bic.w	r2, r3, #15
 80031ae:	498b      	ldr	r1, [pc, #556]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b6:	4b89      	ldr	r3, [pc, #548]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 030f 	and.w	r3, r3, #15
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d001      	beq.n	80031c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e104      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d010      	beq.n	80031f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4b81      	ldr	r3, [pc, #516]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d908      	bls.n	80031f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031e4:	4b7e      	ldr	r3, [pc, #504]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	497b      	ldr	r1, [pc, #492]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f000 8085 	beq.w	800330e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d11f      	bne.n	800324c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800320c:	4b74      	ldr	r3, [pc, #464]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0da      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800321c:	f000 fa26 	bl	800366c <RCC_GetSysClockFreqFromPLLSource>
 8003220:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	4a6f      	ldr	r2, [pc, #444]	; (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d947      	bls.n	80032ba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d141      	bne.n	80032ba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003236:	4b6a      	ldr	r3, [pc, #424]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800323e:	4a68      	ldr	r2, [pc, #416]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003244:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	e036      	b.n	80032ba <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	2b02      	cmp	r3, #2
 8003252:	d107      	bne.n	8003264 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325c:	2b00      	cmp	r3, #0
 800325e:	d115      	bne.n	800328c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b6      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d107      	bne.n	800327c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800326c:	4b5c      	ldr	r3, [pc, #368]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0302 	and.w	r3, r3, #2
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e0aa      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800327c:	4b58      	ldr	r3, [pc, #352]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d101      	bne.n	800328c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0a2      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800328c:	f000 f8b0 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	4a53      	ldr	r2, [pc, #332]	; (80033e4 <HAL_RCC_ClockConfig+0x264>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d90f      	bls.n	80032ba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800329a:	4b51      	ldr	r3, [pc, #324]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d109      	bne.n	80032ba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80032a6:	4b4e      	ldr	r3, [pc, #312]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032ae:	4a4c      	ldr	r2, [pc, #304]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80032ba:	4b49      	ldr	r3, [pc, #292]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f023 0203 	bic.w	r2, r3, #3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4946      	ldr	r1, [pc, #280]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032cc:	f7fe f888 	bl	80013e0 <HAL_GetTick>
 80032d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d2:	e013      	b.n	80032fc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d4:	f7fe f884 	bl	80013e0 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d90a      	bls.n	80032fc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032e6:	4b3e      	ldr	r3, [pc, #248]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 020c 	and.w	r2, r3, #12
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e06a      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	4b38      	ldr	r3, [pc, #224]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80032fe:	689b      	ldr	r3, [r3, #8]
 8003300:	f003 020c 	and.w	r2, r3, #12
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	429a      	cmp	r2, r3
 800330c:	d1e2      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d105      	bne.n	8003320 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003314:	4b32      	ldr	r3, [pc, #200]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a31      	ldr	r2, [pc, #196]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800331a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800331e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d010      	beq.n	800334e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	4b2b      	ldr	r3, [pc, #172]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003338:	429a      	cmp	r2, r3
 800333a:	d208      	bcs.n	800334e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800333c:	4b28      	ldr	r3, [pc, #160]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4925      	ldr	r1, [pc, #148]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800334a:	4313      	orrs	r3, r2
 800334c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800334e:	4b23      	ldr	r3, [pc, #140]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 030f 	and.w	r3, r3, #15
 8003356:	683a      	ldr	r2, [r7, #0]
 8003358:	429a      	cmp	r2, r3
 800335a:	d210      	bcs.n	800337e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800335c:	4b1f      	ldr	r3, [pc, #124]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f023 020f 	bic.w	r2, r3, #15
 8003364:	491d      	ldr	r1, [pc, #116]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <HAL_RCC_ClockConfig+0x25c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d001      	beq.n	800337e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e029      	b.n	80033d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0304 	and.w	r3, r3, #4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d008      	beq.n	800339c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	4912      	ldr	r1, [pc, #72]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 8003398:	4313      	orrs	r3, r2
 800339a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0308 	and.w	r3, r3, #8
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d009      	beq.n	80033bc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	691b      	ldr	r3, [r3, #16]
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	490a      	ldr	r1, [pc, #40]	; (80033e0 <HAL_RCC_ClockConfig+0x260>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80033bc:	f000 f8b6 	bl	800352c <HAL_RCC_GetHCLKFreq>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <HAL_RCC_ClockConfig+0x268>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80033c6:	4b09      	ldr	r3, [pc, #36]	; (80033ec <HAL_RCC_ClockConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f7fd ffb8 	bl	8001340 <HAL_InitTick>
 80033d0:	4603      	mov	r3, r0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40022000 	.word	0x40022000
 80033e0:	40021000 	.word	0x40021000
 80033e4:	04c4b400 	.word	0x04c4b400
 80033e8:	20000000 	.word	0x20000000
 80033ec:	20000004 	.word	0x20000004

080033f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033fe:	4b47      	ldr	r3, [pc, #284]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f003 030c 	and.w	r3, r3, #12
 8003406:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003408:	4b44      	ldr	r3, [pc, #272]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	f003 0303 	and.w	r3, r3, #3
 8003410:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0x34>
 8003418:	693b      	ldr	r3, [r7, #16]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d121      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b01      	cmp	r3, #1
 8003422:	d11e      	bne.n	8003462 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003424:	4b3d      	ldr	r3, [pc, #244]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0308 	and.w	r3, r3, #8
 800342c:	2b00      	cmp	r3, #0
 800342e:	d107      	bne.n	8003440 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003430:	4b3a      	ldr	r3, [pc, #232]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003436:	0a1b      	lsrs	r3, r3, #8
 8003438:	f003 030f 	and.w	r3, r3, #15
 800343c:	61fb      	str	r3, [r7, #28]
 800343e:	e005      	b.n	800344c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003440:	4b36      	ldr	r3, [pc, #216]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	091b      	lsrs	r3, r3, #4
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 800344c:	4a34      	ldr	r2, [pc, #208]	; (8003520 <HAL_RCC_GetSysClockFreq+0x130>)
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003454:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10d      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	2b04      	cmp	r3, #4
 8003466:	d102      	bne.n	800346e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003468:	4b2e      	ldr	r3, [pc, #184]	; (8003524 <HAL_RCC_GetSysClockFreq+0x134>)
 800346a:	61bb      	str	r3, [r7, #24]
 800346c:	e004      	b.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	2b08      	cmp	r3, #8
 8003472:	d101      	bne.n	8003478 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003474:	4b2c      	ldr	r3, [pc, #176]	; (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 8003476:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d146      	bne.n	800350c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800347e:	4b27      	ldr	r3, [pc, #156]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	f003 0303 	and.w	r3, r3, #3
 8003486:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003488:	4b24      	ldr	r3, [pc, #144]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	091b      	lsrs	r3, r3, #4
 800348e:	f003 030f 	and.w	r3, r3, #15
 8003492:	3301      	adds	r3, #1
 8003494:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d003      	beq.n	80034a4 <HAL_RCC_GetSysClockFreq+0xb4>
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b03      	cmp	r3, #3
 80034a0:	d00d      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0xce>
 80034a2:	e019      	b.n	80034d8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034a4:	4a1f      	ldr	r2, [pc, #124]	; (8003524 <HAL_RCC_GetSysClockFreq+0x134>)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	4a1b      	ldr	r2, [pc, #108]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 80034ae:	68d2      	ldr	r2, [r2, #12]
 80034b0:	0a12      	lsrs	r2, r2, #8
 80034b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034b6:	fb02 f303 	mul.w	r3, r2, r3
 80034ba:	617b      	str	r3, [r7, #20]
        break;
 80034bc:	e019      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034be:	4a1a      	ldr	r2, [pc, #104]	; (8003528 <HAL_RCC_GetSysClockFreq+0x138>)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034c6:	4a15      	ldr	r2, [pc, #84]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 80034c8:	68d2      	ldr	r2, [r2, #12]
 80034ca:	0a12      	lsrs	r2, r2, #8
 80034cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034d0:	fb02 f303 	mul.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
        break;
 80034d6:	e00c      	b.n	80034f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e0:	4a0e      	ldr	r2, [pc, #56]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 80034e2:	68d2      	ldr	r2, [r2, #12]
 80034e4:	0a12      	lsrs	r2, r2, #8
 80034e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034ea:	fb02 f303 	mul.w	r3, r2, r3
 80034ee:	617b      	str	r3, [r7, #20]
        break;
 80034f0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80034f2:	4b0a      	ldr	r3, [pc, #40]	; (800351c <HAL_RCC_GetSysClockFreq+0x12c>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	0e5b      	lsrs	r3, r3, #25
 80034f8:	f003 0303 	and.w	r3, r3, #3
 80034fc:	3301      	adds	r3, #1
 80034fe:	005b      	lsls	r3, r3, #1
 8003500:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	fbb2 f3f3 	udiv	r3, r2, r3
 800350a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800350c:	69bb      	ldr	r3, [r7, #24]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3724      	adds	r7, #36	; 0x24
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr
 800351a:	bf00      	nop
 800351c:	40021000 	.word	0x40021000
 8003520:	0800e904 	.word	0x0800e904
 8003524:	00f42400 	.word	0x00f42400
 8003528:	00989680 	.word	0x00989680

0800352c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003530:	f7ff ff5e 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8003534:	4602      	mov	r2, r0
 8003536:	4b05      	ldr	r3, [pc, #20]	; (800354c <HAL_RCC_GetHCLKFreq+0x20>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	091b      	lsrs	r3, r3, #4
 800353c:	f003 030f 	and.w	r3, r3, #15
 8003540:	4903      	ldr	r1, [pc, #12]	; (8003550 <HAL_RCC_GetHCLKFreq+0x24>)
 8003542:	5ccb      	ldrb	r3, [r1, r3]
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003548:	4618      	mov	r0, r3
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000
 8003550:	0800e8ec 	.word	0x0800e8ec

08003554 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003558:	f7ff ffe8 	bl	800352c <HAL_RCC_GetHCLKFreq>
 800355c:	4602      	mov	r2, r0
 800355e:	4b05      	ldr	r3, [pc, #20]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	f003 0307 	and.w	r3, r3, #7
 8003568:	4903      	ldr	r1, [pc, #12]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x24>)
 800356a:	5ccb      	ldrb	r3, [r1, r3]
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40021000 	.word	0x40021000
 8003578:	0800e8fc 	.word	0x0800e8fc

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003580:	f7ff ffd4 	bl	800352c <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b05      	ldr	r3, [pc, #20]	; (800359c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	0adb      	lsrs	r3, r3, #11
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4903      	ldr	r1, [pc, #12]	; (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003598:	4618      	mov	r0, r3
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40021000 	.word	0x40021000
 80035a0:	0800e8fc 	.word	0x0800e8fc

080035a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b086      	sub	sp, #24
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80035ac:	2300      	movs	r3, #0
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80035b0:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d003      	beq.n	80035c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80035bc:	f7ff f86c 	bl	8002698 <HAL_PWREx_GetVoltageRange>
 80035c0:	6138      	str	r0, [r7, #16]
 80035c2:	e014      	b.n	80035ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80035c4:	4b27      	ldr	r3, [pc, #156]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035c8:	4a26      	ldr	r2, [pc, #152]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6593      	str	r3, [r2, #88]	; 0x58
 80035d0:	4b24      	ldr	r3, [pc, #144]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035d8:	60fb      	str	r3, [r7, #12]
 80035da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80035dc:	f7ff f85c 	bl	8002698 <HAL_PWREx_GetVoltageRange>
 80035e0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035e6:	4a1f      	ldr	r2, [pc, #124]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d003      	beq.n	80035fc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035fa:	d10b      	bne.n	8003614 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2b80      	cmp	r3, #128	; 0x80
 8003600:	d919      	bls.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2ba0      	cmp	r3, #160	; 0xa0
 8003606:	d902      	bls.n	800360e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003608:	2302      	movs	r3, #2
 800360a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800360c:	e013      	b.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800360e:	2301      	movs	r3, #1
 8003610:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003612:	e010      	b.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d902      	bls.n	8003620 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800361a:	2303      	movs	r3, #3
 800361c:	617b      	str	r3, [r7, #20]
 800361e:	e00a      	b.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d102      	bne.n	800362c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003626:	2302      	movs	r3, #2
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	e004      	b.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b70      	cmp	r3, #112	; 0x70
 8003630:	d101      	bne.n	8003636 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003632:	2301      	movs	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 020f 	bic.w	r2, r3, #15
 800363e:	490a      	ldr	r1, [pc, #40]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4313      	orrs	r3, r2
 8003644:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003646:	4b08      	ldr	r3, [pc, #32]	; (8003668 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 030f 	and.w	r3, r3, #15
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40021000 	.word	0x40021000
 8003668:	40022000 	.word	0x40022000

0800366c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003672:	4b31      	ldr	r3, [pc, #196]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	f003 0303 	and.w	r3, r3, #3
 800367a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800367c:	4b2e      	ldr	r3, [pc, #184]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	091b      	lsrs	r3, r3, #4
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	3301      	adds	r3, #1
 8003688:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2b03      	cmp	r3, #3
 800368e:	d015      	beq.n	80036bc <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d839      	bhi.n	800370a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d01c      	beq.n	80036d6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d133      	bne.n	800370a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036a2:	4a26      	ldr	r2, [pc, #152]	; (800373c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036aa:	4a23      	ldr	r2, [pc, #140]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	0a12      	lsrs	r2, r2, #8
 80036b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036b4:	fb02 f303 	mul.w	r3, r2, r3
 80036b8:	613b      	str	r3, [r7, #16]
      break;
 80036ba:	e029      	b.n	8003710 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036bc:	4a20      	ldr	r2, [pc, #128]	; (8003740 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a1c      	ldr	r2, [pc, #112]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036c6:	68d2      	ldr	r2, [r2, #12]
 80036c8:	0a12      	lsrs	r2, r2, #8
 80036ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	613b      	str	r3, [r7, #16]
      break;
 80036d4:	e01c      	b.n	8003710 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80036d6:	4b18      	ldr	r3, [pc, #96]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d107      	bne.n	80036f2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e005      	b.n	80036fe <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	091b      	lsrs	r3, r3, #4
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80036fe:	4a11      	ldr	r2, [pc, #68]	; (8003744 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003706:	613b      	str	r3, [r7, #16]
        break;
 8003708:	e002      	b.n	8003710 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	613b      	str	r3, [r7, #16]
      break;
 800370e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	0e5b      	lsrs	r3, r3, #25
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	3301      	adds	r3, #1
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	fbb2 f3f3 	udiv	r3, r2, r3
 8003728:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800372a:	683b      	ldr	r3, [r7, #0]
}
 800372c:	4618      	mov	r0, r3
 800372e:	371c      	adds	r7, #28
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	40021000 	.word	0x40021000
 800373c:	00f42400 	.word	0x00f42400
 8003740:	00989680 	.word	0x00989680
 8003744:	0800e904 	.word	0x0800e904

08003748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003750:	2300      	movs	r3, #0
 8003752:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003754:	2300      	movs	r3, #0
 8003756:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003760:	2b00      	cmp	r3, #0
 8003762:	d040      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003768:	2b80      	cmp	r3, #128	; 0x80
 800376a:	d02a      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800376c:	2b80      	cmp	r3, #128	; 0x80
 800376e:	d825      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d026      	beq.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003774:	2b60      	cmp	r3, #96	; 0x60
 8003776:	d821      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003778:	2b40      	cmp	r3, #64	; 0x40
 800377a:	d006      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x42>
 800377c:	2b40      	cmp	r3, #64	; 0x40
 800377e:	d81d      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003784:	2b20      	cmp	r3, #32
 8003786:	d010      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003788:	e018      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800378a:	4b8f      	ldr	r3, [pc, #572]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	4a8e      	ldr	r2, [pc, #568]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003794:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003796:	e015      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3304      	adds	r3, #4
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 faf8 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80037a8:	e00c      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3320      	adds	r3, #32
 80037ae:	2100      	movs	r1, #0
 80037b0:	4618      	mov	r0, r3
 80037b2:	f001 fbd5 	bl	8004f60 <RCCEx_PLLSAI2_Config>
 80037b6:	4603      	mov	r3, r0
 80037b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80037ba:	e003      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	77fb      	strb	r3, [r7, #31]
        break;
 80037c0:	e000      	b.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80037c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c4:	7ffb      	ldrb	r3, [r7, #31]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d10b      	bne.n	80037e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037ca:	4b7f      	ldr	r3, [pc, #508]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d8:	497b      	ldr	r1, [pc, #492]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80037e0:	e001      	b.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e2:	7ffb      	ldrb	r3, [r7, #31]
 80037e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d047      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037fa:	d030      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80037fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003800:	d82a      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d02a      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380c:	d824      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d008      	beq.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003818:	d81e      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d010      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003824:	e018      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003826:	4b68      	ldr	r3, [pc, #416]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	4a67      	ldr	r2, [pc, #412]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800382c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003830:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3304      	adds	r3, #4
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f001 faaa 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003840:	4603      	mov	r3, r0
 8003842:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003844:	e00c      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3320      	adds	r3, #32
 800384a:	2100      	movs	r1, #0
 800384c:	4618      	mov	r0, r3
 800384e:	f001 fb87 	bl	8004f60 <RCCEx_PLLSAI2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003856:	e003      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
        break;
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	7ffb      	ldrb	r3, [r7, #31]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10b      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003866:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003868:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800386c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	4954      	ldr	r1, [pc, #336]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003876:	4313      	orrs	r3, r2
 8003878:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800387c:	e001      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387e:	7ffb      	ldrb	r3, [r7, #31]
 8003880:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388a:	2b00      	cmp	r3, #0
 800388c:	f000 80ab 	beq.w	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003890:	2300      	movs	r3, #0
 8003892:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003896:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003898:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d10d      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038a0:	4b49      	ldr	r3, [pc, #292]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a4:	4a48      	ldr	r2, [pc, #288]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038aa:	6593      	str	r3, [r2, #88]	; 0x58
 80038ac:	4b46      	ldr	r3, [pc, #280]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038b4:	60fb      	str	r3, [r7, #12]
 80038b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80038b8:	2301      	movs	r3, #1
 80038ba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80038bc:	4b43      	ldr	r3, [pc, #268]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a42      	ldr	r2, [pc, #264]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80038c8:	f7fd fd8a 	bl	80013e0 <HAL_GetTick>
 80038cc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ce:	e00f      	b.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038d0:	f7fd fd86 	bl	80013e0 <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d908      	bls.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038de:	4b3b      	ldr	r3, [pc, #236]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80038ee:	e006      	b.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038f0:	4b36      	ldr	r3, [pc, #216]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d0e9      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80038fc:	e000      	b.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80038fe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8003900:	7ffb      	ldrb	r3, [r7, #31]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d164      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003906:	4b30      	ldr	r3, [pc, #192]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003910:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d01f      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	429a      	cmp	r2, r3
 8003922:	d019      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003924:	4b28      	ldr	r3, [pc, #160]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800392e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	4a24      	ldr	r2, [pc, #144]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800393c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003940:	4b21      	ldr	r3, [pc, #132]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003948:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003950:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b00      	cmp	r3, #0
 8003960:	d01f      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003962:	f7fd fd3d 	bl	80013e0 <HAL_GetTick>
 8003966:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003968:	e012      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800396a:	f7fd fd39 	bl	80013e0 <HAL_GetTick>
 800396e:	4602      	mov	r2, r0
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	1ad3      	subs	r3, r2, r3
 8003974:	f241 3288 	movw	r2, #5000	; 0x1388
 8003978:	4293      	cmp	r3, r2
 800397a:	d909      	bls.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800397c:	4b12      	ldr	r3, [pc, #72]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800397e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10a      	bne.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 800398e:	e007      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003990:	4b0d      	ldr	r3, [pc, #52]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	2b00      	cmp	r3, #0
 800399c:	d0e5      	beq.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x222>
 800399e:	e000      	b.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80039a0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80039a2:	7ffb      	ldrb	r3, [r7, #31]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10c      	bne.n	80039c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039a8:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80039c0:	e008      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80039c2:	7ffb      	ldrb	r3, [r7, #31]
 80039c4:	77bb      	strb	r3, [r7, #30]
 80039c6:	e005      	b.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	7ffb      	ldrb	r3, [r7, #31]
 80039d2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80039d4:	7dfb      	ldrb	r3, [r7, #23]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d105      	bne.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039da:	4b9c      	ldr	r3, [pc, #624]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039de:	4a9b      	ldr	r2, [pc, #620]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039f2:	4b96      	ldr	r3, [pc, #600]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f023 0203 	bic.w	r2, r3, #3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a00:	4992      	ldr	r1, [pc, #584]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0302 	and.w	r3, r3, #2
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00a      	beq.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a14:	4b8d      	ldr	r3, [pc, #564]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a1a:	f023 020c 	bic.w	r2, r3, #12
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a22:	498a      	ldr	r1, [pc, #552]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0304 	and.w	r3, r3, #4
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003a36:	4b85      	ldr	r3, [pc, #532]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a44:	4981      	ldr	r1, [pc, #516]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d00a      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a58:	4b7c      	ldr	r3, [pc, #496]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a66:	4979      	ldr	r1, [pc, #484]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d00a      	beq.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a7a:	4b74      	ldr	r3, [pc, #464]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a88:	4970      	ldr	r1, [pc, #448]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d00a      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a9c:	4b6b      	ldr	r3, [pc, #428]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aaa:	4968      	ldr	r1, [pc, #416]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00a      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ac4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003acc:	495f      	ldr	r1, [pc, #380]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003ae0:	4b5a      	ldr	r3, [pc, #360]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aee:	4957      	ldr	r1, [pc, #348]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003af0:	4313      	orrs	r3, r2
 8003af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00a      	beq.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003b02:	4b52      	ldr	r3, [pc, #328]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b10:	494e      	ldr	r1, [pc, #312]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d031      	beq.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b2c:	d00e      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8003b2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b32:	d814      	bhi.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8003b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b3c:	d10f      	bne.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b3e:	4b43      	ldr	r3, [pc, #268]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	4a42      	ldr	r2, [pc, #264]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b48:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003b4a:	e00c      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	3304      	adds	r3, #4
 8003b50:	2100      	movs	r1, #0
 8003b52:	4618      	mov	r0, r3
 8003b54:	f001 f91e 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8003b5c:	e003      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	77fb      	strb	r3, [r7, #31]
        break;
 8003b62:	e000      	b.n	8003b66 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8003b64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b66:	7ffb      	ldrb	r3, [r7, #31]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d10b      	bne.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b6c:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7a:	4934      	ldr	r1, [pc, #208]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003b82:	e001      	b.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b84:	7ffb      	ldrb	r3, [r7, #31]
 8003b86:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d00a      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b94:	4b2d      	ldr	r3, [pc, #180]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	492a      	ldr	r1, [pc, #168]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00a      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bb6:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bc4:	4921      	ldr	r1, [pc, #132]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00a      	beq.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bd8:	4b1c      	ldr	r3, [pc, #112]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be6:	4919      	ldr	r1, [pc, #100]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d00a      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bfa:	4b14      	ldr	r3, [pc, #80]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003bfc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c00:	f023 0203 	bic.w	r2, r3, #3
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	4910      	ldr	r1, [pc, #64]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d02b      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003c3a:	d109      	bne.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c3c:	4b03      	ldr	r3, [pc, #12]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4a02      	ldr	r2, [pc, #8]	; (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8003c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c46:	60d3      	str	r3, [r2, #12]
 8003c48:	e014      	b.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003c58:	d10c      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	3304      	adds	r3, #4
 8003c5e:	2101      	movs	r1, #1
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 f897 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003c66:	4603      	mov	r3, r0
 8003c68:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8003c70:	7ffb      	ldrb	r3, [r7, #31]
 8003c72:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d04a      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c84:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c88:	d108      	bne.n	8003c9c <HAL_RCCEx_PeriphCLKConfig+0x554>
 8003c8a:	4b70      	ldr	r3, [pc, #448]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c90:	4a6e      	ldr	r2, [pc, #440]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c96:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003c9a:	e012      	b.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8003c9c:	4b6b      	ldr	r3, [pc, #428]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003caa:	4968      	ldr	r1, [pc, #416]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003cb2:	4b66      	ldr	r3, [pc, #408]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cb4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cb8:	4a64      	ldr	r2, [pc, #400]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cbe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003cca:	d10d      	bne.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f001 f85e 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003cdc:	7ffb      	ldrb	r3, [r7, #31]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d019      	beq.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8003ce2:	7ffb      	ldrb	r3, [r7, #31]
 8003ce4:	77bb      	strb	r3, [r7, #30]
 8003ce6:	e016      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf0:	d106      	bne.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf2:	4b56      	ldr	r3, [pc, #344]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	4a55      	ldr	r2, [pc, #340]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cfc:	60d3      	str	r3, [r2, #12]
 8003cfe:	e00a      	b.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d08:	d105      	bne.n	8003d16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003d0a:	4b50      	ldr	r3, [pc, #320]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	4a4f      	ldr	r2, [pc, #316]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d14:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d028      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003d22:	4b4a      	ldr	r3, [pc, #296]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d30:	4946      	ldr	r1, [pc, #280]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d42:	4b42      	ldr	r3, [pc, #264]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	4a41      	ldr	r2, [pc, #260]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d4c:	60d3      	str	r3, [r2, #12]
 8003d4e:	e011      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	3304      	adds	r3, #4
 8003d5e:	2101      	movs	r1, #1
 8003d60:	4618      	mov	r0, r3
 8003d62:	f001 f817 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003d66:	4603      	mov	r3, r0
 8003d68:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003d6a:	7ffb      	ldrb	r3, [r7, #31]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d001      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8003d70:	7ffb      	ldrb	r3, [r7, #31]
 8003d72:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d01e      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d80:	4b32      	ldr	r3, [pc, #200]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d90:	492e      	ldr	r1, [pc, #184]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003da2:	d10c      	bne.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	2102      	movs	r1, #2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f000 fff2 	bl	8004d94 <RCCEx_PLLSAI1_Config>
 8003db0:	4603      	mov	r3, r0
 8003db2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8003dba:	7ffb      	ldrb	r3, [r7, #31]
 8003dbc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00b      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003dca:	4b20      	ldr	r3, [pc, #128]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003dcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dd0:	f023 0204 	bic.w	r2, r3, #4
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003dda:	491c      	ldr	r1, [pc, #112]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003df0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003df4:	f023 0218 	bic.w	r2, r3, #24
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dfe:	4913      	ldr	r1, [pc, #76]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e00:	4313      	orrs	r3, r2
 8003e02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d017      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003e12:	4b0e      	ldr	r3, [pc, #56]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e22:	490a      	ldr	r1, [pc, #40]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e34:	d105      	bne.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8003e3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003e42:	7fbb      	ldrb	r3, [r7, #30]
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3720      	adds	r7, #32
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	40021000 	.word	0x40021000

08003e50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e62:	d13e      	bne.n	8003ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003e64:	4b45      	ldr	r3, [pc, #276]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e76:	d028      	beq.n	8003eca <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e7e:	f200 8773 	bhi.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e88:	d005      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e90:	d00e      	beq.n	8003eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8003e92:	f000 bf69 	b.w	8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e96:	4b39      	ldr	r3, [pc, #228]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	f040 8763 	bne.w	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8003ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eaa:	61fb      	str	r3, [r7, #28]
        break;
 8003eac:	f000 bf5e 	b.w	8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003eb0:	4b32      	ldr	r3, [pc, #200]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003eb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003eb6:	f003 0302 	and.w	r3, r3, #2
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	f040 8758 	bne.w	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 8003ec0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8003ec4:	61fb      	str	r3, [r7, #28]
        break;
 8003ec6:	f000 bf53 	b.w	8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003eca:	4b2c      	ldr	r3, [pc, #176]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed6:	f040 874d 	bne.w	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8003eda:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8003edc:	61fb      	str	r3, [r7, #28]
        break;
 8003ede:	f000 bf49 	b.w	8004d74 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ee2:	4b26      	ldr	r3, [pc, #152]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	f003 0303 	and.w	r3, r3, #3
 8003eea:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	2b03      	cmp	r3, #3
 8003ef0:	d036      	beq.n	8003f60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	2b03      	cmp	r3, #3
 8003ef6:	d84b      	bhi.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d003      	beq.n	8003f06 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	2b02      	cmp	r3, #2
 8003f02:	d020      	beq.n	8003f46 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003f04:	e044      	b.n	8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003f06:	4b1d      	ldr	r3, [pc, #116]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b02      	cmp	r3, #2
 8003f10:	d116      	bne.n	8003f40 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003f12:	4b1a      	ldr	r3, [pc, #104]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0308 	and.w	r3, r3, #8
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d005      	beq.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003f1e:	4b17      	ldr	r3, [pc, #92]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	091b      	lsrs	r3, r3, #4
 8003f24:	f003 030f 	and.w	r3, r3, #15
 8003f28:	e005      	b.n	8003f36 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003f2a:	4b14      	ldr	r3, [pc, #80]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f30:	0a1b      	lsrs	r3, r3, #8
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	4a13      	ldr	r2, [pc, #76]	; (8003f84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8003f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f3c:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8003f3e:	e02a      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61bb      	str	r3, [r7, #24]
        break;
 8003f44:	e027      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f46:	4b0d      	ldr	r3, [pc, #52]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f52:	d102      	bne.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 8003f56:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8003f58:	e01d      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61bb      	str	r3, [r7, #24]
        break;
 8003f5e:	e01a      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003f60:	4b06      	ldr	r3, [pc, #24]	; (8003f7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f6c:	d102      	bne.n	8003f74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 8003f6e:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 8003f70:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8003f72:	e010      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61bb      	str	r3, [r7, #24]
        break;
 8003f78:	e00d      	b.n	8003f96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f7a:	bf00      	nop
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	0004c4b4 	.word	0x0004c4b4
 8003f84:	0800e904 	.word	0x0800e904
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	00989680 	.word	0x00989680
      default:
        /* No source */
        pllvco = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	61bb      	str	r3, [r7, #24]
        break;
 8003f94:	bf00      	nop
    }

    switch (PeriphClk)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f9c:	f000 8659 	beq.w	8004c52 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fa6:	f200 86e7 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb0:	f000 8605 	beq.w	8004bbe <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fba:	f200 86dd 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fc4:	f000 8468 	beq.w	8004898 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fce:	f200 86d3 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd8:	f000 8530 	beq.w	8004a3c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fe2:	f200 86c9 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fec:	f000 8180 	beq.w	80042f0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ff6:	f200 86bf 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004000:	f000 80c2 	beq.w	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800400a:	f200 86b5 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004014:	f000 842f 	beq.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800401e:	f200 86ab 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004028:	f000 83e7 	beq.w	80047fa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004032:	f200 86a1 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800403c:	f000 80a4 	beq.w	8004188 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004046:	f200 8697 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	f000 8092 	beq.w	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	f200 868d 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004064:	f000 8080 	beq.w	8004168 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800406e:	f200 8683 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004078:	f000 8553 	beq.w	8004b22 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	f200 8679 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800408c:	f000 84ff 	beq.w	8004a8e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004096:	f200 866f 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040a0:	f000 84a0 	beq.w	80049e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040aa:	f200 8665 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b80      	cmp	r3, #128	; 0x80
 80040b2:	f000 846b 	beq.w	800498c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2b80      	cmp	r3, #128	; 0x80
 80040ba:	f200 865d 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d84b      	bhi.n	800415c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 8656 	beq.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3b01      	subs	r3, #1
 80040d0:	2b1f      	cmp	r3, #31
 80040d2:	f200 8651 	bhi.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80040d6:	a201      	add	r2, pc, #4	; (adr r2, 80040dc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80040d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040dc:	080044f5 	.word	0x080044f5
 80040e0:	08004569 	.word	0x08004569
 80040e4:	08004d79 	.word	0x08004d79
 80040e8:	080045fb 	.word	0x080045fb
 80040ec:	08004d79 	.word	0x08004d79
 80040f0:	08004d79 	.word	0x08004d79
 80040f4:	08004d79 	.word	0x08004d79
 80040f8:	08004673 	.word	0x08004673
 80040fc:	08004d79 	.word	0x08004d79
 8004100:	08004d79 	.word	0x08004d79
 8004104:	08004d79 	.word	0x08004d79
 8004108:	08004d79 	.word	0x08004d79
 800410c:	08004d79 	.word	0x08004d79
 8004110:	08004d79 	.word	0x08004d79
 8004114:	08004d79 	.word	0x08004d79
 8004118:	080046f7 	.word	0x080046f7
 800411c:	08004d79 	.word	0x08004d79
 8004120:	08004d79 	.word	0x08004d79
 8004124:	08004d79 	.word	0x08004d79
 8004128:	08004d79 	.word	0x08004d79
 800412c:	08004d79 	.word	0x08004d79
 8004130:	08004d79 	.word	0x08004d79
 8004134:	08004d79 	.word	0x08004d79
 8004138:	08004d79 	.word	0x08004d79
 800413c:	08004d79 	.word	0x08004d79
 8004140:	08004d79 	.word	0x08004d79
 8004144:	08004d79 	.word	0x08004d79
 8004148:	08004d79 	.word	0x08004d79
 800414c:	08004d79 	.word	0x08004d79
 8004150:	08004d79 	.word	0x08004d79
 8004154:	08004d79 	.word	0x08004d79
 8004158:	08004779 	.word	0x08004779
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b40      	cmp	r3, #64	; 0x40
 8004160:	f000 83e8 	beq.w	8004934 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 8004164:	f000 be08 	b.w	8004d78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004168:	69b9      	ldr	r1, [r7, #24]
 800416a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800416e:	f001 f857 	bl	8005220 <RCCEx_GetSAIxPeriphCLKFreq>
 8004172:	61f8      	str	r0, [r7, #28]
        break;
 8004174:	f000 be03 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004178:	69b9      	ldr	r1, [r7, #24]
 800417a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800417e:	f001 f84f 	bl	8005220 <RCCEx_GetSAIxPeriphCLKFreq>
 8004182:	61f8      	str	r0, [r7, #28]
        break;
 8004184:	f000 bdfb 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8004188:	4b9c      	ldr	r3, [pc, #624]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800418a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800418e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004192:	60fb      	str	r3, [r7, #12]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800419a:	d015      	beq.n	80041c8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80041a2:	f200 8096 	bhi.w	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041ac:	d02a      	beq.n	8004204 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041b4:	f200 808d 	bhi.w	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d07f      	beq.n	80042be <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041c4:	d04b      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80041c6:	e084      	b.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80041c8:	4b8c      	ldr	r3, [pc, #560]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	f040 8081 	bne.w	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80041d6:	4b89      	ldr	r3, [pc, #548]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80041e2:	4b86      	ldr	r3, [pc, #536]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	091b      	lsrs	r3, r3, #4
 80041e8:	f003 030f 	and.w	r3, r3, #15
 80041ec:	e005      	b.n	80041fa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80041ee:	4b83      	ldr	r3, [pc, #524]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80041f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041f4:	0a1b      	lsrs	r3, r3, #8
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	4a81      	ldr	r2, [pc, #516]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80041fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004200:	61fb      	str	r3, [r7, #28]
            break;
 8004202:	e069      	b.n	80042d8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004204:	4b7d      	ldr	r3, [pc, #500]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800420c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004210:	d165      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004212:	4b7a      	ldr	r3, [pc, #488]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421e:	d15e      	bne.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004220:	4b76      	ldr	r3, [pc, #472]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	091b      	lsrs	r3, r3, #4
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	3301      	adds	r3, #1
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004232:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004234:	4b71      	ldr	r3, [pc, #452]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	0a1b      	lsrs	r3, r3, #8
 800423a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800423e:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	fb03 f202 	mul.w	r2, r3, r2
 8004248:	4b6c      	ldr	r3, [pc, #432]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	0d5b      	lsrs	r3, r3, #21
 800424e:	f003 0303 	and.w	r3, r3, #3
 8004252:	3301      	adds	r3, #1
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	fbb2 f3f3 	udiv	r3, r2, r3
 800425a:	61fb      	str	r3, [r7, #28]
            break;
 800425c:	e03f      	b.n	80042de <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800426a:	d13b      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 800426c:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004274:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004278:	d134      	bne.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800427a:	f000 ff1d 	bl	80050b8 <RCCEx_PLLSAI1_GetVCOFreq>
 800427e:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004280:	4b5e      	ldr	r3, [pc, #376]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f003 030f 	and.w	r3, r3, #15
 800428a:	3301      	adds	r3, #1
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004292:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004294:	4b59      	ldr	r3, [pc, #356]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004296:	691b      	ldr	r3, [r3, #16]
 8004298:	0a1b      	lsrs	r3, r3, #8
 800429a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800429e:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	68ba      	ldr	r2, [r7, #8]
 80042a4:	fb03 f202 	mul.w	r2, r3, r2
 80042a8:	4b54      	ldr	r3, [pc, #336]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	0d5b      	lsrs	r3, r3, #21
 80042ae:	f003 0303 	and.w	r3, r3, #3
 80042b2:	3301      	adds	r3, #1
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ba:	61fb      	str	r3, [r7, #28]
            break;
 80042bc:	e012      	b.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80042be:	4b4f      	ldr	r3, [pc, #316]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80042c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042c4:	f003 0302 	and.w	r3, r3, #2
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d10e      	bne.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 80042cc:	4b4d      	ldr	r3, [pc, #308]	; (8004404 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80042ce:	61fb      	str	r3, [r7, #28]
            break;
 80042d0:	e00b      	b.n	80042ea <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 80042d2:	bf00      	nop
 80042d4:	f000 bd53 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80042d8:	bf00      	nop
 80042da:	f000 bd50 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80042de:	bf00      	nop
 80042e0:	f000 bd4d 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80042e4:	bf00      	nop
 80042e6:	f000 bd4a 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80042ea:	bf00      	nop
        break;
 80042ec:	f000 bd47 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 80042f0:	4b42      	ldr	r3, [pc, #264]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80042f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fe:	d13d      	bne.n	800437c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004300:	4b3e      	ldr	r3, [pc, #248]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004308:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800430c:	f040 8536 	bne.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8004310:	4b3a      	ldr	r3, [pc, #232]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431c:	f040 852e 	bne.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004320:	4b36      	ldr	r3, [pc, #216]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	091b      	lsrs	r3, r3, #4
 8004326:	f003 030f 	and.w	r3, r3, #15
 800432a:	3301      	adds	r3, #1
 800432c:	69ba      	ldr	r2, [r7, #24]
 800432e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004332:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004334:	4b31      	ldr	r3, [pc, #196]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800433e:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8004340:	4b2e      	ldr	r3, [pc, #184]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	0edb      	lsrs	r3, r3, #27
 8004346:	f003 031f 	and.w	r3, r3, #31
 800434a:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d10a      	bne.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004352:	4b2a      	ldr	r3, [pc, #168]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d002      	beq.n	8004364 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 800435e:	2311      	movs	r3, #17
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e001      	b.n	8004368 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8004364:	2307      	movs	r3, #7
 8004366:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	fb03 f202 	mul.w	r2, r3, r2
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fbb2 f3f3 	udiv	r3, r2, r3
 8004376:	61fb      	str	r3, [r7, #28]
        break;
 8004378:	f000 bd00 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 800437c:	4b1f      	ldr	r3, [pc, #124]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800437e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004382:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800438e:	d016      	beq.n	80043be <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004396:	f200 809e 	bhi.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a0:	d032      	beq.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043a8:	f200 8095 	bhi.w	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	f000 8087 	beq.w	80044c2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043ba:	d052      	beq.n	8004462 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 80043bc:	e08b      	b.n	80044d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80043be:	4b0f      	ldr	r3, [pc, #60]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	f040 8088 	bne.w	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80043cc:	4b0b      	ldr	r3, [pc, #44]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d005      	beq.n	80043e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 80043d8:	4b08      	ldr	r3, [pc, #32]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	e005      	b.n	80043f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80043e4:	4b05      	ldr	r3, [pc, #20]	; (80043fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80043e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ea:	0a1b      	lsrs	r3, r3, #8
 80043ec:	f003 030f 	and.w	r3, r3, #15
 80043f0:	4a03      	ldr	r2, [pc, #12]	; (8004400 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80043f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043f6:	61fb      	str	r3, [r7, #28]
              break;
 80043f8:	e070      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80043fa:	bf00      	nop
 80043fc:	40021000 	.word	0x40021000
 8004400:	0800e904 	.word	0x0800e904
 8004404:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004408:	4baa      	ldr	r3, [pc, #680]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004410:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004414:	d165      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004416:	4ba7      	ldr	r3, [pc, #668]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800441e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004422:	d15e      	bne.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004424:	4ba3      	ldr	r3, [pc, #652]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	091b      	lsrs	r3, r3, #4
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	3301      	adds	r3, #1
 8004430:	69ba      	ldr	r2, [r7, #24]
 8004432:	fbb2 f3f3 	udiv	r3, r2, r3
 8004436:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004438:	4b9e      	ldr	r3, [pc, #632]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004442:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	fb03 f202 	mul.w	r2, r3, r2
 800444c:	4b99      	ldr	r3, [pc, #612]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	0d5b      	lsrs	r3, r3, #21
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	3301      	adds	r3, #1
 8004458:	005b      	lsls	r3, r3, #1
 800445a:	fbb2 f3f3 	udiv	r3, r2, r3
 800445e:	61fb      	str	r3, [r7, #28]
              break;
 8004460:	e03f      	b.n	80044e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004462:	4b94      	ldr	r3, [pc, #592]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800446a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800446e:	d13b      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004470:	4b90      	ldr	r3, [pc, #576]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004472:	691b      	ldr	r3, [r3, #16]
 8004474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004478:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447c:	d134      	bne.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800447e:	f000 fe1b 	bl	80050b8 <RCCEx_PLLSAI1_GetVCOFreq>
 8004482:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004484:	4b8b      	ldr	r3, [pc, #556]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	091b      	lsrs	r3, r3, #4
 800448a:	f003 030f 	and.w	r3, r3, #15
 800448e:	3301      	adds	r3, #1
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004498:	4b86      	ldr	r3, [pc, #536]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	0a1b      	lsrs	r3, r3, #8
 800449e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044a2:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	fb03 f202 	mul.w	r2, r3, r2
 80044ac:	4b81      	ldr	r3, [pc, #516]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	0d5b      	lsrs	r3, r3, #21
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	3301      	adds	r3, #1
 80044b8:	005b      	lsls	r3, r3, #1
 80044ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80044be:	61fb      	str	r3, [r7, #28]
              break;
 80044c0:	e012      	b.n	80044e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80044c2:	4b7c      	ldr	r3, [pc, #496]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80044c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d10e      	bne.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 80044d0:	4b79      	ldr	r3, [pc, #484]	; (80046b8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 80044d2:	61fb      	str	r3, [r7, #28]
              break;
 80044d4:	e00b      	b.n	80044ee <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 80044d6:	bf00      	nop
 80044d8:	f000 bc50 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80044dc:	bf00      	nop
 80044de:	f000 bc4d 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80044e2:	bf00      	nop
 80044e4:	f000 bc4a 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80044e8:	bf00      	nop
 80044ea:	f000 bc47 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80044ee:	bf00      	nop
        break;
 80044f0:	f000 bc44 	b.w	8004d7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80044f4:	4b6f      	ldr	r3, [pc, #444]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80044f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	60fb      	str	r3, [r7, #12]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	2b03      	cmp	r3, #3
 8004504:	d827      	bhi.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8004506:	a201      	add	r2, pc, #4	; (adr r2, 800450c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8004508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800450c:	0800451d 	.word	0x0800451d
 8004510:	08004525 	.word	0x08004525
 8004514:	0800452d 	.word	0x0800452d
 8004518:	08004541 	.word	0x08004541
            frequency = HAL_RCC_GetPCLK2Freq();
 800451c:	f7ff f82e 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8004520:	61f8      	str	r0, [r7, #28]
            break;
 8004522:	e01f      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8004524:	f7fe ff64 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004528:	61f8      	str	r0, [r7, #28]
            break;
 800452a:	e01b      	b.n	8004564 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800452c:	4b61      	ldr	r3, [pc, #388]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004538:	d110      	bne.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 800453a:	4b60      	ldr	r3, [pc, #384]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800453c:	61fb      	str	r3, [r7, #28]
            break;
 800453e:	e00d      	b.n	800455c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004540:	4b5c      	ldr	r3, [pc, #368]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004546:	f003 0302 	and.w	r3, r3, #2
 800454a:	2b02      	cmp	r3, #2
 800454c:	d109      	bne.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 800454e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004552:	61fb      	str	r3, [r7, #28]
            break;
 8004554:	e005      	b.n	8004562 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8004556:	bf00      	nop
 8004558:	f000 bc11 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800455c:	bf00      	nop
 800455e:	f000 bc0e 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004562:	bf00      	nop
        break;
 8004564:	f000 bc0b 	b.w	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004568:	4b52      	ldr	r3, [pc, #328]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800456a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b0c      	cmp	r3, #12
 8004578:	d839      	bhi.n	80045ee <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045b5 	.word	0x080045b5
 8004584:	080045ef 	.word	0x080045ef
 8004588:	080045ef 	.word	0x080045ef
 800458c:	080045ef 	.word	0x080045ef
 8004590:	080045bd 	.word	0x080045bd
 8004594:	080045ef 	.word	0x080045ef
 8004598:	080045ef 	.word	0x080045ef
 800459c:	080045ef 	.word	0x080045ef
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045ef 	.word	0x080045ef
 80045a8:	080045ef 	.word	0x080045ef
 80045ac:	080045ef 	.word	0x080045ef
 80045b0:	080045d9 	.word	0x080045d9
            frequency = HAL_RCC_GetPCLK1Freq();
 80045b4:	f7fe ffce 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80045b8:	61f8      	str	r0, [r7, #28]
            break;
 80045ba:	e01d      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 80045bc:	f7fe ff18 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80045c0:	61f8      	str	r0, [r7, #28]
            break;
 80045c2:	e019      	b.n	80045f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80045c4:	4b3b      	ldr	r3, [pc, #236]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d10f      	bne.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 80045d2:	4b3a      	ldr	r3, [pc, #232]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80045d4:	61fb      	str	r3, [r7, #28]
            break;
 80045d6:	e00c      	b.n	80045f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80045d8:	4b36      	ldr	r3, [pc, #216]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80045da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045de:	f003 0302 	and.w	r3, r3, #2
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d107      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 80045e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ea:	61fb      	str	r3, [r7, #28]
            break;
 80045ec:	e003      	b.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 80045ee:	bf00      	nop
 80045f0:	e3c5      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80045f2:	bf00      	nop
 80045f4:	e3c3      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80045f6:	bf00      	nop
        break;
 80045f8:	e3c1      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80045fa:	4b2e      	ldr	r3, [pc, #184]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80045fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004600:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004604:	60fb      	str	r3, [r7, #12]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2b30      	cmp	r3, #48	; 0x30
 800460a:	d021      	beq.n	8004650 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2b30      	cmp	r3, #48	; 0x30
 8004610:	d829      	bhi.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2b20      	cmp	r3, #32
 8004616:	d011      	beq.n	800463c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b20      	cmp	r3, #32
 800461c:	d823      	bhi.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d003      	beq.n	800462c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2b10      	cmp	r3, #16
 8004628:	d004      	beq.n	8004634 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 800462a:	e01c      	b.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 800462c:	f7fe ff92 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004630:	61f8      	str	r0, [r7, #28]
            break;
 8004632:	e01d      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8004634:	f7fe fedc 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004638:	61f8      	str	r0, [r7, #28]
            break;
 800463a:	e019      	b.n	8004670 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800463c:	4b1d      	ldr	r3, [pc, #116]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004648:	d10f      	bne.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 800464a:	4b1c      	ldr	r3, [pc, #112]	; (80046bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 800464c:	61fb      	str	r3, [r7, #28]
            break;
 800464e:	e00c      	b.n	800466a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004650:	4b18      	ldr	r3, [pc, #96]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004656:	f003 0302 	and.w	r3, r3, #2
 800465a:	2b02      	cmp	r3, #2
 800465c:	d107      	bne.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 800465e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004662:	61fb      	str	r3, [r7, #28]
            break;
 8004664:	e003      	b.n	800466e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8004666:	bf00      	nop
 8004668:	e389      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800466a:	bf00      	nop
 800466c:	e387      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800466e:	bf00      	nop
        break;
 8004670:	e385      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004672:	4b10      	ldr	r3, [pc, #64]	; (80046b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8004674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004678:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2bc0      	cmp	r3, #192	; 0xc0
 8004682:	d027      	beq.n	80046d4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2bc0      	cmp	r3, #192	; 0xc0
 8004688:	d82f      	bhi.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d017      	beq.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2b80      	cmp	r3, #128	; 0x80
 8004694:	d829      	bhi.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d003      	beq.n	80046a4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b40      	cmp	r3, #64	; 0x40
 80046a0:	d004      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 80046a2:	e022      	b.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7fe ff56 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80046a8:	61f8      	str	r0, [r7, #28]
            break;
 80046aa:	e023      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 80046ac:	f7fe fea0 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80046b0:	61f8      	str	r0, [r7, #28]
            break;
 80046b2:	e01f      	b.n	80046f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 80046b4:	40021000 	.word	0x40021000
 80046b8:	02dc6c00 	.word	0x02dc6c00
 80046bc:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046c0:	4b99      	ldr	r3, [pc, #612]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046cc:	d10f      	bne.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 80046ce:	4b97      	ldr	r3, [pc, #604]	; (800492c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80046d0:	61fb      	str	r3, [r7, #28]
            break;
 80046d2:	e00c      	b.n	80046ee <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80046d4:	4b94      	ldr	r3, [pc, #592]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80046d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046da:	f003 0302 	and.w	r3, r3, #2
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d107      	bne.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 80046e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046e6:	61fb      	str	r3, [r7, #28]
            break;
 80046e8:	e003      	b.n	80046f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 80046ea:	bf00      	nop
 80046ec:	e347      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80046ee:	bf00      	nop
 80046f0:	e345      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80046f2:	bf00      	nop
        break;
 80046f4:	e343      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80046f6:	4b8c      	ldr	r3, [pc, #560]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004708:	d025      	beq.n	8004756 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004710:	d82c      	bhi.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004718:	d013      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004720:	d824      	bhi.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d004      	beq.n	8004732 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800472e:	d004      	beq.n	800473a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8004730:	e01c      	b.n	800476c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004732:	f7fe ff0f 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004736:	61f8      	str	r0, [r7, #28]
            break;
 8004738:	e01d      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 800473a:	f7fe fe59 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800473e:	61f8      	str	r0, [r7, #28]
            break;
 8004740:	e019      	b.n	8004776 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004742:	4b79      	ldr	r3, [pc, #484]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800474a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800474e:	d10f      	bne.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8004750:	4b76      	ldr	r3, [pc, #472]	; (800492c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004752:	61fb      	str	r3, [r7, #28]
            break;
 8004754:	e00c      	b.n	8004770 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004756:	4b74      	ldr	r3, [pc, #464]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b02      	cmp	r3, #2
 8004762:	d107      	bne.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8004764:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004768:	61fb      	str	r3, [r7, #28]
            break;
 800476a:	e003      	b.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 800476c:	bf00      	nop
 800476e:	e306      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004770:	bf00      	nop
 8004772:	e304      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004774:	bf00      	nop
        break;
 8004776:	e302      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8004778:	4b6b      	ldr	r3, [pc, #428]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800477e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800478a:	d025      	beq.n	80047d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004792:	d82c      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800479a:	d013      	beq.n	80047c4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a2:	d824      	bhi.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d004      	beq.n	80047b4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047b0:	d004      	beq.n	80047bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 80047b2:	e01c      	b.n	80047ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80047b4:	f7fe fece 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80047b8:	61f8      	str	r0, [r7, #28]
            break;
 80047ba:	e01d      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 80047bc:	f7fe fe18 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80047c0:	61f8      	str	r0, [r7, #28]
            break;
 80047c2:	e019      	b.n	80047f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047c4:	4b58      	ldr	r3, [pc, #352]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047d0:	d10f      	bne.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 80047d2:	4b56      	ldr	r3, [pc, #344]	; (800492c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80047d4:	61fb      	str	r3, [r7, #28]
            break;
 80047d6:	e00c      	b.n	80047f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80047d8:	4b53      	ldr	r3, [pc, #332]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b02      	cmp	r3, #2
 80047e4:	d107      	bne.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 80047e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ea:	61fb      	str	r3, [r7, #28]
            break;
 80047ec:	e003      	b.n	80047f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 80047ee:	bf00      	nop
 80047f0:	e2c5      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80047f2:	bf00      	nop
 80047f4:	e2c3      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80047f6:	bf00      	nop
        break;
 80047f8:	e2c1      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80047fa:	4b4b      	ldr	r3, [pc, #300]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004804:	60fb      	str	r3, [r7, #12]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800480c:	d007      	beq.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004814:	d12b      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8004816:	f7fe fdeb 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800481a:	61f8      	str	r0, [r7, #28]
            break;
 800481c:	e02a      	b.n	8004874 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 800481e:	4b42      	ldr	r3, [pc, #264]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d023      	beq.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800482a:	f000 fc45 	bl	80050b8 <RCCEx_PLLSAI1_GetVCOFreq>
 800482e:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004830:	4b3d      	ldr	r3, [pc, #244]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	091b      	lsrs	r3, r3, #4
 8004836:	f003 030f 	and.w	r3, r3, #15
 800483a:	3301      	adds	r3, #1
 800483c:	69ba      	ldr	r2, [r7, #24]
 800483e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004842:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004844:	4b38      	ldr	r3, [pc, #224]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004846:	691b      	ldr	r3, [r3, #16]
 8004848:	0a1b      	lsrs	r3, r3, #8
 800484a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800484e:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	fb03 f202 	mul.w	r2, r3, r2
 8004858:	4b33      	ldr	r3, [pc, #204]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800485a:	691b      	ldr	r3, [r3, #16]
 800485c:	0e5b      	lsrs	r3, r3, #25
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	3301      	adds	r3, #1
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	fbb2 f3f3 	udiv	r3, r2, r3
 800486a:	61fb      	str	r3, [r7, #28]
            break;
 800486c:	e001      	b.n	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 800486e:	bf00      	nop
 8004870:	e285      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004872:	bf00      	nop
        break;
 8004874:	e283      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004876:	4b2c      	ldr	r3, [pc, #176]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800487c:	f003 0304 	and.w	r3, r3, #4
 8004880:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004888:	f7fe fe78 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 800488c:	61f8      	str	r0, [r7, #28]
        break;
 800488e:	e276      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8004890:	f7fe fdae 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004894:	61f8      	str	r0, [r7, #28]
        break;
 8004896:	e272      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8004898:	4b23      	ldr	r3, [pc, #140]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489e:	f003 0318 	and.w	r3, r3, #24
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b10      	cmp	r3, #16
 80048a8:	d010      	beq.n	80048cc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d834      	bhi.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d003      	beq.n	80048be <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	2b08      	cmp	r3, #8
 80048ba:	d024      	beq.n	8004906 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 80048bc:	e02d      	b.n	800491a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80048be:	69b9      	ldr	r1, [r7, #24]
 80048c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80048c4:	f000 fcac 	bl	8005220 <RCCEx_GetSAIxPeriphCLKFreq>
 80048c8:	61f8      	str	r0, [r7, #28]
            break;
 80048ca:	e02b      	b.n	8004924 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80048cc:	4b16      	ldr	r3, [pc, #88]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d122      	bne.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80048d8:	4b13      	ldr	r3, [pc, #76]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 80048e4:	4b10      	ldr	r3, [pc, #64]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	e005      	b.n	80048fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 80048f0:	4b0d      	ldr	r3, [pc, #52]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80048f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	4a0c      	ldr	r2, [pc, #48]	; (8004930 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80048fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004902:	61fb      	str	r3, [r7, #28]
            break;
 8004904:	e00b      	b.n	800491e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800490e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004912:	d106      	bne.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8004916:	61fb      	str	r3, [r7, #28]
            break;
 8004918:	e003      	b.n	8004922 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 800491a:	bf00      	nop
 800491c:	e22f      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800491e:	bf00      	nop
 8004920:	e22d      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004922:	bf00      	nop
        break;
 8004924:	e22b      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8004926:	bf00      	nop
 8004928:	40021000 	.word	0x40021000
 800492c:	00f42400 	.word	0x00f42400
 8004930:	0800e904 	.word	0x0800e904
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004934:	4b96      	ldr	r3, [pc, #600]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800493e:	60fb      	str	r3, [r7, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004946:	d013      	beq.n	8004970 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800494e:	d819      	bhi.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d004      	beq.n	8004960 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800495c:	d004      	beq.n	8004968 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 800495e:	e011      	b.n	8004984 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004960:	f7fe fdf8 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004964:	61f8      	str	r0, [r7, #28]
            break;
 8004966:	e010      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8004968:	f7fe fd42 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 800496c:	61f8      	str	r0, [r7, #28]
            break;
 800496e:	e00c      	b.n	800498a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004970:	4b87      	ldr	r3, [pc, #540]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800497c:	d104      	bne.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 800497e:	4b85      	ldr	r3, [pc, #532]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004980:	61fb      	str	r3, [r7, #28]
            break;
 8004982:	e001      	b.n	8004988 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8004984:	bf00      	nop
 8004986:	e1fa      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004988:	bf00      	nop
        break;
 800498a:	e1f8      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800498c:	4b80      	ldr	r3, [pc, #512]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800499e:	d013      	beq.n	80049c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d819      	bhi.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d004      	beq.n	80049b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b4:	d004      	beq.n	80049c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 80049b6:	e011      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80049b8:	f7fe fdcc 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80049bc:	61f8      	str	r0, [r7, #28]
            break;
 80049be:	e010      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 80049c0:	f7fe fd16 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 80049c4:	61f8      	str	r0, [r7, #28]
            break;
 80049c6:	e00c      	b.n	80049e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80049c8:	4b71      	ldr	r3, [pc, #452]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049d4:	d104      	bne.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 80049d6:	4b6f      	ldr	r3, [pc, #444]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80049d8:	61fb      	str	r3, [r7, #28]
            break;
 80049da:	e001      	b.n	80049e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 80049dc:	bf00      	nop
 80049de:	e1ce      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80049e0:	bf00      	nop
        break;
 80049e2:	e1cc      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80049e4:	4b6a      	ldr	r3, [pc, #424]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80049e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	d013      	beq.n	8004a20 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049fe:	d819      	bhi.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d004      	beq.n	8004a10 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d004      	beq.n	8004a18 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8004a0e:	e011      	b.n	8004a34 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7fe fda0 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004a14:	61f8      	str	r0, [r7, #28]
            break;
 8004a16:	e010      	b.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8004a18:	f7fe fcea 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004a1c:	61f8      	str	r0, [r7, #28]
            break;
 8004a1e:	e00c      	b.n	8004a3a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a20:	4b5b      	ldr	r3, [pc, #364]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a2c:	d104      	bne.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8004a2e:	4b59      	ldr	r3, [pc, #356]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004a30:	61fb      	str	r3, [r7, #28]
            break;
 8004a32:	e001      	b.n	8004a38 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8004a34:	bf00      	nop
 8004a36:	e1a2      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004a38:	bf00      	nop
        break;
 8004a3a:	e1a0      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8004a3c:	4b54      	ldr	r3, [pc, #336]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a42:	f003 0303 	and.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	2b02      	cmp	r3, #2
 8004a4c:	d011      	beq.n	8004a72 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d818      	bhi.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d004      	beq.n	8004a6a <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8004a60:	e011      	b.n	8004a86 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004a62:	f7fe fd77 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004a66:	61f8      	str	r0, [r7, #28]
            break;
 8004a68:	e010      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8004a6a:	f7fe fcc1 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8004a6e:	61f8      	str	r0, [r7, #28]
            break;
 8004a70:	e00c      	b.n	8004a8c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a72:	4b47      	ldr	r3, [pc, #284]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a7e:	d104      	bne.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8004a80:	4b44      	ldr	r3, [pc, #272]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004a82:	61fb      	str	r3, [r7, #28]
            break;
 8004a84:	e001      	b.n	8004a8a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8004a86:	bf00      	nop
 8004a88:	e179      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004a8a:	bf00      	nop
        break;
 8004a8c:	e177      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004a8e:	4b40      	ldr	r3, [pc, #256]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a94:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004aa0:	d02c      	beq.n	8004afc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004aa8:	d833      	bhi.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ab0:	d01a      	beq.n	8004ae8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ab8:	d82b      	bhi.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d004      	beq.n	8004aca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac6:	d004      	beq.n	8004ad2 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8004ac8:	e023      	b.n	8004b12 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004aca:	f7fe fd43 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004ace:	61f8      	str	r0, [r7, #28]
            break;
 8004ad0:	e026      	b.n	8004b20 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004ad2:	4b2f      	ldr	r3, [pc, #188]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004ad4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ad8:	f003 0302 	and.w	r3, r3, #2
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d11a      	bne.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8004ae0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004ae4:	61fb      	str	r3, [r7, #28]
            break;
 8004ae6:	e016      	b.n	8004b16 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ae8:	4b29      	ldr	r3, [pc, #164]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d111      	bne.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8004af6:	4b27      	ldr	r3, [pc, #156]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004af8:	61fb      	str	r3, [r7, #28]
            break;
 8004afa:	e00e      	b.n	8004b1a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004afc:	4b24      	ldr	r3, [pc, #144]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d109      	bne.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8004b0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b0e:	61fb      	str	r3, [r7, #28]
            break;
 8004b10:	e005      	b.n	8004b1e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 8004b12:	bf00      	nop
 8004b14:	e133      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004b16:	bf00      	nop
 8004b18:	e131      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004b1a:	bf00      	nop
 8004b1c:	e12f      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004b1e:	bf00      	nop
        break;
 8004b20:	e12d      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8004b22:	4b1b      	ldr	r3, [pc, #108]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8004b2c:	60fb      	str	r3, [r7, #12]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b34:	d030      	beq.n	8004b98 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b3c:	d837      	bhi.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b44:	d01a      	beq.n	8004b7c <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b4c:	d82f      	bhi.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b5a:	d004      	beq.n	8004b66 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8004b5c:	e027      	b.n	8004bae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004b5e:	f7fe fcf9 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004b62:	61f8      	str	r0, [r7, #28]
            break;
 8004b64:	e02a      	b.n	8004bbc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004b66:	4b0a      	ldr	r3, [pc, #40]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b6c:	f003 0302 	and.w	r3, r3, #2
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d11e      	bne.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8004b74:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004b78:	61fb      	str	r3, [r7, #28]
            break;
 8004b7a:	e01a      	b.n	8004bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004b7c:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b88:	d115      	bne.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8004b8a:	4b02      	ldr	r3, [pc, #8]	; (8004b94 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8004b8c:	61fb      	str	r3, [r7, #28]
            break;
 8004b8e:	e012      	b.n	8004bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8004b90:	40021000 	.word	0x40021000
 8004b94:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004b98:	4b7b      	ldr	r3, [pc, #492]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d109      	bne.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8004ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004baa:	61fb      	str	r3, [r7, #28]
            break;
 8004bac:	e005      	b.n	8004bba <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8004bae:	bf00      	nop
 8004bb0:	e0e5      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004bb2:	bf00      	nop
 8004bb4:	e0e3      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004bb6:	bf00      	nop
 8004bb8:	e0e1      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004bba:	bf00      	nop
        break;
 8004bbc:	e0df      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8004bbe:	4b72      	ldr	r3, [pc, #456]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004bc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bd0:	d02c      	beq.n	8004c2c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004bd8:	d833      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be0:	d01a      	beq.n	8004c18 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004be8:	d82b      	bhi.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d004      	beq.n	8004bfa <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bf6:	d004      	beq.n	8004c02 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8004bf8:	e023      	b.n	8004c42 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8004bfa:	f7fe fcab 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8004bfe:	61f8      	str	r0, [r7, #28]
            break;
 8004c00:	e026      	b.n	8004c50 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004c02:	4b61      	ldr	r3, [pc, #388]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d11a      	bne.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 8004c10:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8004c14:	61fb      	str	r3, [r7, #28]
            break;
 8004c16:	e016      	b.n	8004c46 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004c18:	4b5b      	ldr	r3, [pc, #364]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c24:	d111      	bne.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 8004c26:	4b59      	ldr	r3, [pc, #356]	; (8004d8c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8004c28:	61fb      	str	r3, [r7, #28]
            break;
 8004c2a:	e00e      	b.n	8004c4a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004c2c:	4b56      	ldr	r3, [pc, #344]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b02      	cmp	r3, #2
 8004c38:	d109      	bne.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8004c3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3e:	61fb      	str	r3, [r7, #28]
            break;
 8004c40:	e005      	b.n	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 8004c42:	bf00      	nop
 8004c44:	e09b      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004c46:	bf00      	nop
 8004c48:	e099      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004c4a:	bf00      	nop
 8004c4c:	e097      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004c4e:	bf00      	nop
        break;
 8004c50:	e095      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8004c52:	4b4d      	ldr	r3, [pc, #308]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c58:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c64:	d042      	beq.n	8004cec <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c6c:	d874      	bhi.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d004      	beq.n	8004c7e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c7a:	d00a      	beq.n	8004c92 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8004c7c:	e06c      	b.n	8004d58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004c7e:	4b42      	ldr	r3, [pc, #264]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c8a:	d167      	bne.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8004c8c:	4b40      	ldr	r3, [pc, #256]	; (8004d90 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 8004c8e:	61fb      	str	r3, [r7, #28]
            break;
 8004c90:	e064      	b.n	8004d5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004c92:	4b3d      	ldr	r3, [pc, #244]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c9e:	d15f      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004ca0:	4b39      	ldr	r3, [pc, #228]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ca8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cac:	d158      	bne.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cae:	4b36      	ldr	r3, [pc, #216]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	091b      	lsrs	r3, r3, #4
 8004cb4:	f003 030f 	and.w	r3, r3, #15
 8004cb8:	3301      	adds	r3, #1
 8004cba:	69ba      	ldr	r2, [r7, #24]
 8004cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc0:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004cc2:	4b31      	ldr	r3, [pc, #196]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	0a1b      	lsrs	r3, r3, #8
 8004cc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ccc:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	68ba      	ldr	r2, [r7, #8]
 8004cd2:	fb03 f202 	mul.w	r2, r3, r2
 8004cd6:	4b2c      	ldr	r3, [pc, #176]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	0d5b      	lsrs	r3, r3, #21
 8004cdc:	f003 0303 	and.w	r3, r3, #3
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	005b      	lsls	r3, r3, #1
 8004ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce8:	61fb      	str	r3, [r7, #28]
            break;
 8004cea:	e039      	b.n	8004d60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8004cec:	4b26      	ldr	r3, [pc, #152]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d035      	beq.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8004cf8:	f000 f9de 	bl	80050b8 <RCCEx_PLLSAI1_GetVCOFreq>
 8004cfc:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8004cfe:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	3301      	adds	r3, #1
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d10:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d12:	4b1d      	ldr	r3, [pc, #116]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	0a1b      	lsrs	r3, r3, #8
 8004d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d1c:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8004d1e:	4b1a      	ldr	r3, [pc, #104]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	0edb      	lsrs	r3, r3, #27
 8004d24:	f003 031f 	and.w	r3, r3, #31
 8004d28:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d10a      	bne.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004d30:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d002      	beq.n	8004d42 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8004d3c:	2311      	movs	r3, #17
 8004d3e:	617b      	str	r3, [r7, #20]
 8004d40:	e001      	b.n	8004d46 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 8004d42:	2307      	movs	r3, #7
 8004d44:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	fb03 f202 	mul.w	r2, r3, r2
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d54:	61fb      	str	r3, [r7, #28]
            break;
 8004d56:	e005      	b.n	8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8004d58:	bf00      	nop
 8004d5a:	e010      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004d5c:	bf00      	nop
 8004d5e:	e00e      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004d60:	bf00      	nop
 8004d62:	e00c      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8004d64:	bf00      	nop
        break;
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d68:	bf00      	nop
 8004d6a:	e008      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d6c:	bf00      	nop
 8004d6e:	e006      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d70:	bf00      	nop
 8004d72:	e004      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d74:	bf00      	nop
 8004d76:	e002      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d78:	bf00      	nop
 8004d7a:	e000      	b.n	8004d7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8004d7c:	bf00      	nop
    }
  }

  return (frequency);
 8004d7e:	69fb      	ldr	r3, [r7, #28]
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3720      	adds	r7, #32
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	00989680 	.word	0x00989680

08004d94 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b084      	sub	sp, #16
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d018      	beq.n	8004ddc <RCCEx_PLLSAI1_Config+0x48>
 8004daa:	2b03      	cmp	r3, #3
 8004dac:	d81f      	bhi.n	8004dee <RCCEx_PLLSAI1_Config+0x5a>
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d002      	beq.n	8004db8 <RCCEx_PLLSAI1_Config+0x24>
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d009      	beq.n	8004dca <RCCEx_PLLSAI1_Config+0x36>
 8004db6:	e01a      	b.n	8004dee <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004db8:	4b65      	ldr	r3, [pc, #404]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 0302 	and.w	r3, r3, #2
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d117      	bne.n	8004df4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e014      	b.n	8004df4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004dca:	4b61      	ldr	r3, [pc, #388]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d110      	bne.n	8004df8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dda:	e00d      	b.n	8004df8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004ddc:	4b5c      	ldr	r3, [pc, #368]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d109      	bne.n	8004dfc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dec:	e006      	b.n	8004dfc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	73fb      	strb	r3, [r7, #15]
      break;
 8004df2:	e004      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004df4:	bf00      	nop
 8004df6:	e002      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004df8:	bf00      	nop
 8004dfa:	e000      	b.n	8004dfe <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8004dfc:	bf00      	nop
  }

  if (status == HAL_OK)
 8004dfe:	7bfb      	ldrb	r3, [r7, #15]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f040 809f 	bne.w	8004f44 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004e06:	4b52      	ldr	r3, [pc, #328]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a51      	ldr	r2, [pc, #324]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e0c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004e10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e12:	f7fc fae5 	bl	80013e0 <HAL_GetTick>
 8004e16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e18:	e00f      	b.n	8004e3a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e1a:	f7fc fae1 	bl	80013e0 <HAL_GetTick>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	1ad3      	subs	r3, r2, r3
 8004e24:	2b02      	cmp	r3, #2
 8004e26:	d908      	bls.n	8004e3a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e28:	4b49      	ldr	r3, [pc, #292]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d009      	beq.n	8004e48 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004e38:	e006      	b.n	8004e48 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e3a:	4b45      	ldr	r3, [pc, #276]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e9      	bne.n	8004e1a <RCCEx_PLLSAI1_Config+0x86>
 8004e46:	e000      	b.n	8004e4a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004e48:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d179      	bne.n	8004f44 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d116      	bne.n	8004e84 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e56:	4b3e      	ldr	r3, [pc, #248]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	4b3e      	ldr	r3, [pc, #248]	; (8004f54 <RCCEx_PLLSAI1_Config+0x1c0>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6892      	ldr	r2, [r2, #8]
 8004e62:	0211      	lsls	r1, r2, #8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	68d2      	ldr	r2, [r2, #12]
 8004e68:	06d2      	lsls	r2, r2, #27
 8004e6a:	4311      	orrs	r1, r2
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	6852      	ldr	r2, [r2, #4]
 8004e70:	3a01      	subs	r2, #1
 8004e72:	0112      	lsls	r2, r2, #4
 8004e74:	4311      	orrs	r1, r2
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	6812      	ldr	r2, [r2, #0]
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	4934      	ldr	r1, [pc, #208]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	610b      	str	r3, [r1, #16]
 8004e82:	e033      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d118      	bne.n	8004ebc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e8a:	4b31      	ldr	r3, [pc, #196]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004e8c:	691a      	ldr	r2, [r3, #16]
 8004e8e:	4b32      	ldr	r3, [pc, #200]	; (8004f58 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	687a      	ldr	r2, [r7, #4]
 8004e94:	6892      	ldr	r2, [r2, #8]
 8004e96:	0211      	lsls	r1, r2, #8
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6912      	ldr	r2, [r2, #16]
 8004e9c:	0852      	lsrs	r2, r2, #1
 8004e9e:	3a01      	subs	r2, #1
 8004ea0:	0552      	lsls	r2, r2, #21
 8004ea2:	4311      	orrs	r1, r2
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	6852      	ldr	r2, [r2, #4]
 8004ea8:	3a01      	subs	r2, #1
 8004eaa:	0112      	lsls	r2, r2, #4
 8004eac:	4311      	orrs	r1, r2
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	6812      	ldr	r2, [r2, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	4926      	ldr	r1, [pc, #152]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	610b      	str	r3, [r1, #16]
 8004eba:	e017      	b.n	8004eec <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ebc:	4b24      	ldr	r3, [pc, #144]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ebe:	691a      	ldr	r2, [r3, #16]
 8004ec0:	4b26      	ldr	r3, [pc, #152]	; (8004f5c <RCCEx_PLLSAI1_Config+0x1c8>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	6892      	ldr	r2, [r2, #8]
 8004ec8:	0211      	lsls	r1, r2, #8
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	6952      	ldr	r2, [r2, #20]
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	3a01      	subs	r2, #1
 8004ed2:	0652      	lsls	r2, r2, #25
 8004ed4:	4311      	orrs	r1, r2
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	6852      	ldr	r2, [r2, #4]
 8004eda:	3a01      	subs	r2, #1
 8004edc:	0112      	lsls	r2, r2, #4
 8004ede:	4311      	orrs	r1, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6812      	ldr	r2, [r2, #0]
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	491a      	ldr	r1, [pc, #104]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a17      	ldr	r2, [pc, #92]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004ef2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef8:	f7fc fa72 	bl	80013e0 <HAL_GetTick>
 8004efc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004efe:	e00f      	b.n	8004f20 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f00:	f7fc fa6e 	bl	80013e0 <HAL_GetTick>
 8004f04:	4602      	mov	r2, r0
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	1ad3      	subs	r3, r2, r3
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d908      	bls.n	8004f20 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004f1e:	e006      	b.n	8004f2e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d0e9      	beq.n	8004f00 <RCCEx_PLLSAI1_Config+0x16c>
 8004f2c:	e000      	b.n	8004f30 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004f2e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d106      	bne.n	8004f44 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8004f36:	4b06      	ldr	r3, [pc, #24]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f38:	691a      	ldr	r2, [r3, #16]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	699b      	ldr	r3, [r3, #24]
 8004f3e:	4904      	ldr	r1, [pc, #16]	; (8004f50 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	40021000 	.word	0x40021000
 8004f54:	07ff800c 	.word	0x07ff800c
 8004f58:	ff9f800c 	.word	0xff9f800c
 8004f5c:	f9ff800c 	.word	0xf9ff800c

08004f60 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d018      	beq.n	8004fa8 <RCCEx_PLLSAI2_Config+0x48>
 8004f76:	2b03      	cmp	r3, #3
 8004f78:	d81f      	bhi.n	8004fba <RCCEx_PLLSAI2_Config+0x5a>
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d002      	beq.n	8004f84 <RCCEx_PLLSAI2_Config+0x24>
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d009      	beq.n	8004f96 <RCCEx_PLLSAI2_Config+0x36>
 8004f82:	e01a      	b.n	8004fba <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f84:	4b4a      	ldr	r3, [pc, #296]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d117      	bne.n	8004fc0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f94:	e014      	b.n	8004fc0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f96:	4b46      	ldr	r3, [pc, #280]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d110      	bne.n	8004fc4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fa6:	e00d      	b.n	8004fc4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004fa8:	4b41      	ldr	r3, [pc, #260]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fb8:	e006      	b.n	8004fc8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8004fba:	2301      	movs	r3, #1
 8004fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004fbe:	e004      	b.n	8004fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004fc0:	bf00      	nop
 8004fc2:	e002      	b.n	8004fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004fc4:	bf00      	nop
 8004fc6:	e000      	b.n	8004fca <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8004fc8:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fca:	7bfb      	ldrb	r3, [r7, #15]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d169      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004fd0:	4b37      	ldr	r3, [pc, #220]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a36      	ldr	r2, [pc, #216]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fdc:	f7fc fa00 	bl	80013e0 <HAL_GetTick>
 8004fe0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004fe2:	e00f      	b.n	8005004 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004fe4:	f7fc f9fc 	bl	80013e0 <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d908      	bls.n	8005004 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ff2:	4b2f      	ldr	r3, [pc, #188]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d009      	beq.n	8005012 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8004ffe:	2303      	movs	r3, #3
 8005000:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005002:	e006      	b.n	8005012 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005004:	4b2a      	ldr	r3, [pc, #168]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e9      	bne.n	8004fe4 <RCCEx_PLLSAI2_Config+0x84>
 8005010:	e000      	b.n	8005014 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8005012:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d144      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d115      	bne.n	800504c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005020:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005022:	695a      	ldr	r2, [r3, #20]
 8005024:	4b23      	ldr	r3, [pc, #140]	; (80050b4 <RCCEx_PLLSAI2_Config+0x154>)
 8005026:	4013      	ands	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6892      	ldr	r2, [r2, #8]
 800502c:	0211      	lsls	r1, r2, #8
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	68d2      	ldr	r2, [r2, #12]
 8005032:	06d2      	lsls	r2, r2, #27
 8005034:	4311      	orrs	r1, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6852      	ldr	r2, [r2, #4]
 800503a:	3a01      	subs	r2, #1
 800503c:	0112      	lsls	r2, r2, #4
 800503e:	4311      	orrs	r1, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6812      	ldr	r2, [r2, #0]
 8005044:	430a      	orrs	r2, r1
 8005046:	491a      	ldr	r1, [pc, #104]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005048:	4313      	orrs	r3, r2
 800504a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800504c:	4b18      	ldr	r3, [pc, #96]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005058:	f7fc f9c2 	bl	80013e0 <HAL_GetTick>
 800505c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800505e:	e00f      	b.n	8005080 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005060:	f7fc f9be 	bl	80013e0 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d908      	bls.n	8005080 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800506e:	4b10      	ldr	r3, [pc, #64]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d109      	bne.n	800508e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 800507a:	2303      	movs	r3, #3
 800507c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 800507e:	e006      	b.n	800508e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d0e9      	beq.n	8005060 <RCCEx_PLLSAI2_Config+0x100>
 800508c:	e000      	b.n	8005090 <RCCEx_PLLSAI2_Config+0x130>
          break;
 800508e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d106      	bne.n	80050a4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8005096:	4b06      	ldr	r3, [pc, #24]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 8005098:	695a      	ldr	r2, [r3, #20]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	4904      	ldr	r1, [pc, #16]	; (80050b0 <RCCEx_PLLSAI2_Config+0x150>)
 80050a0:	4313      	orrs	r3, r2
 80050a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80050a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3710      	adds	r7, #16
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	07ff800c 	.word	0x07ff800c

080050b8 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80050c2:	4b26      	ldr	r3, [pc, #152]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0303 	and.w	r3, r3, #3
 80050ca:	2b03      	cmp	r3, #3
 80050cc:	d02d      	beq.n	800512a <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d835      	bhi.n	800513e <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d002      	beq.n	80050dc <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 80050d6:	2b02      	cmp	r3, #2
 80050d8:	d01d      	beq.n	8005116 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80050da:	e030      	b.n	800513e <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80050dc:	4b1f      	ldr	r3, [pc, #124]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d12c      	bne.n	8005142 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80050e8:	4b1c      	ldr	r3, [pc, #112]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80050f4:	4b19      	ldr	r3, [pc, #100]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	e005      	b.n	800510c <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8005100:	4b16      	ldr	r3, [pc, #88]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005102:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005106:	0a1b      	lsrs	r3, r3, #8
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	4a14      	ldr	r2, [pc, #80]	; (8005160 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 800510e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005112:	607b      	str	r3, [r7, #4]
      break;
 8005114:	e015      	b.n	8005142 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800511e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005122:	d110      	bne.n	8005146 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8005124:	4b0f      	ldr	r3, [pc, #60]	; (8005164 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8005126:	607b      	str	r3, [r7, #4]
      break;
 8005128:	e00d      	b.n	8005146 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005132:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005136:	d108      	bne.n	800514a <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 800513a:	607b      	str	r3, [r7, #4]
      break;
 800513c:	e005      	b.n	800514a <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 800513e:	bf00      	nop
 8005140:	e004      	b.n	800514c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8005142:	bf00      	nop
 8005144:	e002      	b.n	800514c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8005146:	bf00      	nop
 8005148:	e000      	b.n	800514c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800514a:	bf00      	nop
  }

  return pllvco;
 800514c:	687b      	ldr	r3, [r7, #4]
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	0800e904 	.word	0x0800e904
 8005164:	00f42400 	.word	0x00f42400
 8005168:	00989680 	.word	0x00989680

0800516c <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8005176:	4b26      	ldr	r3, [pc, #152]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0303 	and.w	r3, r3, #3
 800517e:	2b03      	cmp	r3, #3
 8005180:	d02d      	beq.n	80051de <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 8005182:	2b03      	cmp	r3, #3
 8005184:	d835      	bhi.n	80051f2 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8005186:	2b01      	cmp	r3, #1
 8005188:	d002      	beq.n	8005190 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 800518a:	2b02      	cmp	r3, #2
 800518c:	d01d      	beq.n	80051ca <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800518e:	e030      	b.n	80051f2 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005190:	4b1f      	ldr	r3, [pc, #124]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d12c      	bne.n	80051f6 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800519c:	4b1c      	ldr	r3, [pc, #112]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d005      	beq.n	80051b4 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80051a8:	4b19      	ldr	r3, [pc, #100]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	091b      	lsrs	r3, r3, #4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	e005      	b.n	80051c0 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	0a1b      	lsrs	r3, r3, #8
 80051bc:	f003 030f 	and.w	r3, r3, #15
 80051c0:	4a14      	ldr	r2, [pc, #80]	; (8005214 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80051c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80051c6:	607b      	str	r3, [r7, #4]
      break;
 80051c8:	e015      	b.n	80051f6 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051d6:	d110      	bne.n	80051fa <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80051d8:	4b0f      	ldr	r3, [pc, #60]	; (8005218 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 80051da:	607b      	str	r3, [r7, #4]
      break;
 80051dc:	e00d      	b.n	80051fa <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80051de:	4b0c      	ldr	r3, [pc, #48]	; (8005210 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051ea:	d108      	bne.n	80051fe <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80051ec:	4b0b      	ldr	r3, [pc, #44]	; (800521c <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 80051ee:	607b      	str	r3, [r7, #4]
      break;
 80051f0:	e005      	b.n	80051fe <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 80051f2:	bf00      	nop
 80051f4:	e004      	b.n	8005200 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80051f6:	bf00      	nop
 80051f8:	e002      	b.n	8005200 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80051fa:	bf00      	nop
 80051fc:	e000      	b.n	8005200 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80051fe:	bf00      	nop
  }

  return pllvco;
 8005200:	687b      	ldr	r3, [r7, #4]
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
 8005214:	0800e904 	.word	0x0800e904
 8005218:	00f42400 	.word	0x00f42400
 800521c:	00989680 	.word	0x00989680

08005220 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b088      	sub	sp, #32
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
 8005228:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005234:	d10c      	bne.n	8005250 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005236:	4b78      	ldr	r3, [pc, #480]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800523c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8005240:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	2b60      	cmp	r3, #96	; 0x60
 8005246:	d110      	bne.n	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8005248:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800524c:	61fb      	str	r3, [r7, #28]
 800524e:	e00c      	b.n	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005250:	4b71      	ldr	r3, [pc, #452]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005252:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800525a:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005262:	d102      	bne.n	800526a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8005264:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005268:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 800526a:	69fb      	ldr	r3, [r7, #28]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f040 80cd 	bne.w	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b40      	cmp	r3, #64	; 0x40
 800527a:	d003      	beq.n	8005284 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005282:	d13b      	bne.n	80052fc <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005284:	4b64      	ldr	r3, [pc, #400]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800528c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005290:	f040 80bb 	bne.w	800540a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8005294:	4b60      	ldr	r3, [pc, #384]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 80b4 	beq.w	800540a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80052a2:	4b5d      	ldr	r3, [pc, #372]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	091b      	lsrs	r3, r3, #4
 80052a8:	f003 030f 	and.w	r3, r3, #15
 80052ac:	3301      	adds	r3, #1
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b4:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80052b6:	4b58      	ldr	r3, [pc, #352]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80052b8:	68db      	ldr	r3, [r3, #12]
 80052ba:	0a1b      	lsrs	r3, r3, #8
 80052bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052c0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80052c2:	4b55      	ldr	r3, [pc, #340]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	0edb      	lsrs	r3, r3, #27
 80052c8:	f003 031f 	and.w	r3, r3, #31
 80052cc:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 80052e0:	2311      	movs	r3, #17
 80052e2:	617b      	str	r3, [r7, #20]
 80052e4:	e001      	b.n	80052ea <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 80052e6:	2307      	movs	r3, #7
 80052e8:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	fb03 f202 	mul.w	r2, r3, r2
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052f8:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80052fa:	e086      	b.n	800540a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d003      	beq.n	800530a <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005308:	d109      	bne.n	800531e <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800530a:	4b43      	ldr	r3, [pc, #268]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005312:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005316:	d179      	bne.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8005318:	4b40      	ldr	r3, [pc, #256]	; (800541c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800531a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800531c:	e076      	b.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d135      	bne.n	8005390 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8005324:	4b3c      	ldr	r3, [pc, #240]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d06d      	beq.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005330:	f7ff fec2 	bl	80050b8 <RCCEx_PLLSAI1_GetVCOFreq>
 8005334:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005336:	4b38      	ldr	r3, [pc, #224]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	091b      	lsrs	r3, r3, #4
 800533c:	f003 030f 	and.w	r3, r3, #15
 8005340:	3301      	adds	r3, #1
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	fbb2 f3f3 	udiv	r3, r2, r3
 8005348:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800534a:	4b33      	ldr	r3, [pc, #204]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800534c:	691b      	ldr	r3, [r3, #16]
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005354:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8005356:	4b30      	ldr	r3, [pc, #192]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	0edb      	lsrs	r3, r3, #27
 800535c:	f003 031f 	and.w	r3, r3, #31
 8005360:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d10a      	bne.n	800537e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8005368:	4b2b      	ldr	r3, [pc, #172]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005370:	2b00      	cmp	r3, #0
 8005372:	d002      	beq.n	800537a <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8005374:	2311      	movs	r3, #17
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	e001      	b.n	800537e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 800537a:	2307      	movs	r3, #7
 800537c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	fb03 f202 	mul.w	r2, r3, r2
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	fbb2 f3f3 	udiv	r3, r2, r3
 800538c:	61fb      	str	r3, [r7, #28]
 800538e:	e03d      	b.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b20      	cmp	r3, #32
 8005394:	d003      	beq.n	800539e <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800539c:	d136      	bne.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 800539e:	4b1e      	ldr	r3, [pc, #120]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d030      	beq.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80053aa:	f7ff fedf 	bl	800516c <RCCEx_PLLSAI2_GetVCOFreq>
 80053ae:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80053b0:	4b19      	ldr	r3, [pc, #100]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80053b2:	695b      	ldr	r3, [r3, #20]
 80053b4:	091b      	lsrs	r3, r3, #4
 80053b6:	f003 030f 	and.w	r3, r3, #15
 80053ba:	3301      	adds	r3, #1
 80053bc:	693a      	ldr	r2, [r7, #16]
 80053be:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c2:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80053c4:	4b14      	ldr	r3, [pc, #80]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ce:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80053d0:	4b11      	ldr	r3, [pc, #68]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80053d2:	695b      	ldr	r3, [r3, #20]
 80053d4:	0edb      	lsrs	r3, r3, #27
 80053d6:	f003 031f 	and.w	r3, r3, #31
 80053da:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10a      	bne.n	80053f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80053e2:	4b0d      	ldr	r3, [pc, #52]	; (8005418 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80053ee:	2311      	movs	r3, #17
 80053f0:	617b      	str	r3, [r7, #20]
 80053f2:	e001      	b.n	80053f8 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80053f4:	2307      	movs	r3, #7
 80053f6:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	fb03 f202 	mul.w	r2, r3, r2
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	fbb2 f3f3 	udiv	r3, r2, r3
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	e000      	b.n	800540c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800540a:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 800540c:	69fb      	ldr	r3, [r7, #28]
}
 800540e:	4618      	mov	r0, r3
 8005410:	3720      	adds	r7, #32
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop
 8005418:	40021000 	.word	0x40021000
 800541c:	00f42400 	.word	0x00f42400

08005420 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d066      	beq.n	8005500 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b00      	cmp	r3, #0
 800543c:	d106      	bne.n	800544c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	f7fb fc88 	bl	8000d5c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2202      	movs	r2, #2
 8005450:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f003 0310 	and.w	r3, r3, #16
 800545e:	2b10      	cmp	r3, #16
 8005460:	d045      	beq.n	80054ee <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005462:	4b2a      	ldr	r3, [pc, #168]	; (800550c <HAL_RTC_Init+0xec>)
 8005464:	22ca      	movs	r2, #202	; 0xca
 8005466:	625a      	str	r2, [r3, #36]	; 0x24
 8005468:	4b28      	ldr	r3, [pc, #160]	; (800550c <HAL_RTC_Init+0xec>)
 800546a:	2253      	movs	r2, #83	; 0x53
 800546c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 fa38 	bl	80058e4 <RTC_EnterInitMode>
 8005474:	4603      	mov	r3, r0
 8005476:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d121      	bne.n	80054c2 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800547e:	4b23      	ldr	r3, [pc, #140]	; (800550c <HAL_RTC_Init+0xec>)
 8005480:	699b      	ldr	r3, [r3, #24]
 8005482:	4a22      	ldr	r2, [pc, #136]	; (800550c <HAL_RTC_Init+0xec>)
 8005484:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8005488:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800548c:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800548e:	4b1f      	ldr	r3, [pc, #124]	; (800550c <HAL_RTC_Init+0xec>)
 8005490:	699a      	ldr	r2, [r3, #24]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6859      	ldr	r1, [r3, #4]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	4319      	orrs	r1, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699b      	ldr	r3, [r3, #24]
 80054a0:	430b      	orrs	r3, r1
 80054a2:	491a      	ldr	r1, [pc, #104]	; (800550c <HAL_RTC_Init+0xec>)
 80054a4:	4313      	orrs	r3, r2
 80054a6:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68da      	ldr	r2, [r3, #12]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	041b      	lsls	r3, r3, #16
 80054b2:	4916      	ldr	r1, [pc, #88]	; (800550c <HAL_RTC_Init+0xec>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 fa47 	bl	800594c <RTC_ExitInitMode>
 80054be:	4603      	mov	r3, r0
 80054c0:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d10e      	bne.n	80054e6 <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 80054c8:	4b10      	ldr	r3, [pc, #64]	; (800550c <HAL_RTC_Init+0xec>)
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6a19      	ldr	r1, [r3, #32]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	69db      	ldr	r3, [r3, #28]
 80054d8:	4319      	orrs	r1, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	695b      	ldr	r3, [r3, #20]
 80054de:	430b      	orrs	r3, r1
 80054e0:	490a      	ldr	r1, [pc, #40]	; (800550c <HAL_RTC_Init+0xec>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e6:	4b09      	ldr	r3, [pc, #36]	; (800550c <HAL_RTC_Init+0xec>)
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
 80054ec:	e001      	b.n	80054f2 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80054f2:	7bfb      	ldrb	r3, [r7, #15]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d103      	bne.n	8005500 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8005500:	7bfb      	ldrb	r3, [r7, #15]
}
 8005502:	4618      	mov	r0, r3
 8005504:	3710      	adds	r7, #16
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	40002800 	.word	0x40002800

08005510 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_RTC_SetTime+0x1a>
 8005526:	2302      	movs	r3, #2
 8005528:	e081      	b.n	800562e <HAL_RTC_SetTime+0x11e>
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2201      	movs	r2, #1
 800552e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2202      	movs	r2, #2
 8005536:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800553a:	4b3f      	ldr	r3, [pc, #252]	; (8005638 <HAL_RTC_SetTime+0x128>)
 800553c:	22ca      	movs	r2, #202	; 0xca
 800553e:	625a      	str	r2, [r3, #36]	; 0x24
 8005540:	4b3d      	ldr	r3, [pc, #244]	; (8005638 <HAL_RTC_SetTime+0x128>)
 8005542:	2253      	movs	r2, #83	; 0x53
 8005544:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005546:	68f8      	ldr	r0, [r7, #12]
 8005548:	f000 f9cc 	bl	80058e4 <RTC_EnterInitMode>
 800554c:	4603      	mov	r3, r0
 800554e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005550:	7cfb      	ldrb	r3, [r7, #19]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d15c      	bne.n	8005610 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d125      	bne.n	80055a8 <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800555c:	4b36      	ldr	r3, [pc, #216]	; (8005638 <HAL_RTC_SetTime+0x128>)
 800555e:	699b      	ldr	r3, [r3, #24]
 8005560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005564:	2b00      	cmp	r3, #0
 8005566:	d102      	bne.n	800556e <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	2200      	movs	r2, #0
 800556c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f000 fa28 	bl	80059c8 <RTC_ByteToBcd2>
 8005578:	4603      	mov	r3, r0
 800557a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	785b      	ldrb	r3, [r3, #1]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fa21 	bl	80059c8 <RTC_ByteToBcd2>
 8005586:	4603      	mov	r3, r0
 8005588:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800558a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	789b      	ldrb	r3, [r3, #2]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa19 	bl	80059c8 <RTC_ByteToBcd2>
 8005596:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005598:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	78db      	ldrb	r3, [r3, #3]
 80055a0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055a2:	4313      	orrs	r3, r2
 80055a4:	617b      	str	r3, [r7, #20]
 80055a6:	e017      	b.n	80055d8 <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80055a8:	4b23      	ldr	r3, [pc, #140]	; (8005638 <HAL_RTC_SetTime+0x128>)
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d102      	bne.n	80055ba <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	2200      	movs	r2, #0
 80055b8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055c6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80055cc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055d4:	4313      	orrs	r3, r2
 80055d6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <HAL_RTC_SetTime+0x128>)
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80055e0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80055e4:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <HAL_RTC_SetTime+0x128>)
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	4a13      	ldr	r2, [pc, #76]	; (8005638 <HAL_RTC_SetTime+0x128>)
 80055ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80055f0:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 80055f2:	4b11      	ldr	r3, [pc, #68]	; (8005638 <HAL_RTC_SetTime+0x128>)
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	68d9      	ldr	r1, [r3, #12]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	430b      	orrs	r3, r1
 8005600:	490d      	ldr	r1, [pc, #52]	; (8005638 <HAL_RTC_SetTime+0x128>)
 8005602:	4313      	orrs	r3, r2
 8005604:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 f9a0 	bl	800594c <RTC_ExitInitMode>
 800560c:	4603      	mov	r3, r0
 800560e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RTC_SetTime+0x128>)
 8005612:	22ff      	movs	r2, #255	; 0xff
 8005614:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005616:	7cfb      	ldrb	r3, [r7, #19]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d103      	bne.n	8005624 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2200      	movs	r2, #0
 8005628:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800562c:	7cfb      	ldrb	r3, [r7, #19]
}
 800562e:	4618      	mov	r0, r3
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	bd90      	pop	{r4, r7, pc}
 8005636:	bf00      	nop
 8005638:	40002800 	.word	0x40002800

0800563c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8005648:	4b29      	ldr	r3, [pc, #164]	; (80056f0 <HAL_RTC_GetTime+0xb4>)
 800564a:	689a      	ldr	r2, [r3, #8]
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8005650:	4b27      	ldr	r3, [pc, #156]	; (80056f0 <HAL_RTC_GetTime+0xb4>)
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 800565c:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RTC_GetTime+0xb4>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005664:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005668:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	0c1b      	lsrs	r3, r3, #16
 800566e:	b2db      	uxtb	r3, r3
 8005670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005674:	b2da      	uxtb	r2, r3
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005684:	b2da      	uxtb	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005692:	b2da      	uxtb	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	0d9b      	lsrs	r3, r3, #22
 800569c:	b2db      	uxtb	r3, r3
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d11a      	bne.n	80056e4 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 f9a8 	bl	8005a08 <RTC_Bcd2ToByte>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	785b      	ldrb	r3, [r3, #1]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 f99f 	bl	8005a08 <RTC_Bcd2ToByte>
 80056ca:	4603      	mov	r3, r0
 80056cc:	461a      	mov	r2, r3
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	789b      	ldrb	r3, [r3, #2]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 f996 	bl	8005a08 <RTC_Bcd2ToByte>
 80056dc:	4603      	mov	r3, r0
 80056de:	461a      	mov	r2, r3
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3718      	adds	r7, #24
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	40002800 	.word	0x40002800

080056f4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_RTC_SetDate+0x1a>
 800570a:	2302      	movs	r3, #2
 800570c:	e071      	b.n	80057f2 <HAL_RTC_SetDate+0xfe>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2202      	movs	r2, #2
 800571a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d10e      	bne.n	8005742 <HAL_RTC_SetDate+0x4e>
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	785b      	ldrb	r3, [r3, #1]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	2b00      	cmp	r3, #0
 800572e:	d008      	beq.n	8005742 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	f023 0310 	bic.w	r3, r3, #16
 8005738:	b2db      	uxtb	r3, r3
 800573a:	330a      	adds	r3, #10
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11c      	bne.n	8005782 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	78db      	ldrb	r3, [r3, #3]
 800574c:	4618      	mov	r0, r3
 800574e:	f000 f93b 	bl	80059c8 <RTC_ByteToBcd2>
 8005752:	4603      	mov	r3, r0
 8005754:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	785b      	ldrb	r3, [r3, #1]
 800575a:	4618      	mov	r0, r3
 800575c:	f000 f934 	bl	80059c8 <RTC_ByteToBcd2>
 8005760:	4603      	mov	r3, r0
 8005762:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005764:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	789b      	ldrb	r3, [r3, #2]
 800576a:	4618      	mov	r0, r3
 800576c:	f000 f92c 	bl	80059c8 <RTC_ByteToBcd2>
 8005770:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005772:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800577c:	4313      	orrs	r3, r2
 800577e:	617b      	str	r3, [r7, #20]
 8005780:	e00e      	b.n	80057a0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	78db      	ldrb	r3, [r3, #3]
 8005786:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	785b      	ldrb	r3, [r3, #1]
 800578c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800578e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005794:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800579c:	4313      	orrs	r3, r2
 800579e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80057a0:	4b16      	ldr	r3, [pc, #88]	; (80057fc <HAL_RTC_SetDate+0x108>)
 80057a2:	22ca      	movs	r2, #202	; 0xca
 80057a4:	625a      	str	r2, [r3, #36]	; 0x24
 80057a6:	4b15      	ldr	r3, [pc, #84]	; (80057fc <HAL_RTC_SetDate+0x108>)
 80057a8:	2253      	movs	r2, #83	; 0x53
 80057aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 f899 	bl	80058e4 <RTC_EnterInitMode>
 80057b2:	4603      	mov	r3, r0
 80057b4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80057b6:	7cfb      	ldrb	r3, [r7, #19]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d10b      	bne.n	80057d4 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 80057bc:	4a0f      	ldr	r2, [pc, #60]	; (80057fc <HAL_RTC_SetDate+0x108>)
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057c4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057c8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80057ca:	68f8      	ldr	r0, [r7, #12]
 80057cc:	f000 f8be 	bl	800594c <RTC_ExitInitMode>
 80057d0:	4603      	mov	r3, r0
 80057d2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80057d4:	4b09      	ldr	r3, [pc, #36]	; (80057fc <HAL_RTC_SetDate+0x108>)
 80057d6:	22ff      	movs	r2, #255	; 0xff
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80057da:	7cfb      	ldrb	r3, [r7, #19]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d103      	bne.n	80057e8 <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	371c      	adds	r7, #28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd90      	pop	{r4, r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40002800 	.word	0x40002800

08005800 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 800580c:	4b22      	ldr	r3, [pc, #136]	; (8005898 <HAL_RTC_GetDate+0x98>)
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005814:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005818:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	0c1b      	lsrs	r3, r3, #16
 800581e:	b2da      	uxtb	r2, r3
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	0a1b      	lsrs	r3, r3, #8
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f003 031f 	and.w	r3, r3, #31
 800582e:	b2da      	uxtb	r2, r3
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800583c:	b2da      	uxtb	r2, r3
 800583e:	68bb      	ldr	r3, [r7, #8]
 8005840:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	0b5b      	lsrs	r3, r3, #13
 8005846:	b2db      	uxtb	r3, r3
 8005848:	f003 0307 	and.w	r3, r3, #7
 800584c:	b2da      	uxtb	r2, r3
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d11a      	bne.n	800588e <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	78db      	ldrb	r3, [r3, #3]
 800585c:	4618      	mov	r0, r3
 800585e:	f000 f8d3 	bl	8005a08 <RTC_Bcd2ToByte>
 8005862:	4603      	mov	r3, r0
 8005864:	461a      	mov	r2, r3
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	785b      	ldrb	r3, [r3, #1]
 800586e:	4618      	mov	r0, r3
 8005870:	f000 f8ca 	bl	8005a08 <RTC_Bcd2ToByte>
 8005874:	4603      	mov	r3, r0
 8005876:	461a      	mov	r2, r3
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	789b      	ldrb	r3, [r3, #2]
 8005880:	4618      	mov	r0, r3
 8005882:	f000 f8c1 	bl	8005a08 <RTC_Bcd2ToByte>
 8005886:	4603      	mov	r3, r0
 8005888:	461a      	mov	r2, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3718      	adds	r7, #24
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40002800 	.word	0x40002800

0800589c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80058a4:	4b0d      	ldr	r3, [pc, #52]	; (80058dc <HAL_RTC_WaitForSynchro+0x40>)
 80058a6:	4a0e      	ldr	r2, [pc, #56]	; (80058e0 <HAL_RTC_WaitForSynchro+0x44>)
 80058a8:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80058aa:	f7fb fd99 	bl	80013e0 <HAL_GetTick>
 80058ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80058b0:	e009      	b.n	80058c6 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80058b2:	f7fb fd95 	bl	80013e0 <HAL_GetTick>
 80058b6:	4602      	mov	r2, r0
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058c0:	d901      	bls.n	80058c6 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e006      	b.n	80058d4 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80058c6:	4b05      	ldr	r3, [pc, #20]	; (80058dc <HAL_RTC_WaitForSynchro+0x40>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d0ef      	beq.n	80058b2 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40002800 	.word	0x40002800
 80058e0:	0001005c 	.word	0x0001005c

080058e4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80058ec:	2300      	movs	r3, #0
 80058ee:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80058f0:	4b15      	ldr	r3, [pc, #84]	; (8005948 <RTC_EnterInitMode+0x64>)
 80058f2:	68db      	ldr	r3, [r3, #12]
 80058f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d120      	bne.n	800593e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80058fc:	4b12      	ldr	r3, [pc, #72]	; (8005948 <RTC_EnterInitMode+0x64>)
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	4a11      	ldr	r2, [pc, #68]	; (8005948 <RTC_EnterInitMode+0x64>)
 8005902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005906:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8005908:	f7fb fd6a 	bl	80013e0 <HAL_GetTick>
 800590c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800590e:	e00d      	b.n	800592c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8005910:	f7fb fd66 	bl	80013e0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800591e:	d905      	bls.n	800592c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2203      	movs	r2, #3
 8005928:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800592c:	4b06      	ldr	r3, [pc, #24]	; (8005948 <RTC_EnterInitMode+0x64>)
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <RTC_EnterInitMode+0x5a>
 8005938:	7bfb      	ldrb	r3, [r7, #15]
 800593a:	2b03      	cmp	r3, #3
 800593c:	d1e8      	bne.n	8005910 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800593e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005940:	4618      	mov	r0, r3
 8005942:	3710      	adds	r7, #16
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	40002800 	.word	0x40002800

0800594c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b084      	sub	sp, #16
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005954:	2300      	movs	r3, #0
 8005956:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <RTC_ExitInitMode+0x78>)
 800595a:	68db      	ldr	r3, [r3, #12]
 800595c:	4a19      	ldr	r2, [pc, #100]	; (80059c4 <RTC_ExitInitMode+0x78>)
 800595e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005962:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005964:	4b17      	ldr	r3, [pc, #92]	; (80059c4 <RTC_ExitInitMode+0x78>)
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10c      	bne.n	800598a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f7ff ff93 	bl	800589c <HAL_RTC_WaitForSynchro>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d01e      	beq.n	80059ba <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2203      	movs	r2, #3
 8005980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	73fb      	strb	r3, [r7, #15]
 8005988:	e017      	b.n	80059ba <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800598a:	4b0e      	ldr	r3, [pc, #56]	; (80059c4 <RTC_ExitInitMode+0x78>)
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	4a0d      	ldr	r2, [pc, #52]	; (80059c4 <RTC_ExitInitMode+0x78>)
 8005990:	f023 0320 	bic.w	r3, r3, #32
 8005994:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7ff ff80 	bl	800589c <HAL_RTC_WaitForSynchro>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d005      	beq.n	80059ae <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2203      	movs	r2, #3
 80059a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80059ae:	4b05      	ldr	r3, [pc, #20]	; (80059c4 <RTC_ExitInitMode+0x78>)
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	4a04      	ldr	r2, [pc, #16]	; (80059c4 <RTC_ExitInitMode+0x78>)
 80059b4:	f043 0320 	orr.w	r3, r3, #32
 80059b8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80059ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80059bc:	4618      	mov	r0, r3
 80059be:	3710      	adds	r7, #16
 80059c0:	46bd      	mov	sp, r7
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	40002800 	.word	0x40002800

080059c8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	4603      	mov	r3, r0
 80059d0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80059d2:	2300      	movs	r3, #0
 80059d4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80059d6:	79fb      	ldrb	r3, [r7, #7]
 80059d8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80059da:	e005      	b.n	80059e8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	3301      	adds	r3, #1
 80059e0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80059e2:	7afb      	ldrb	r3, [r7, #11]
 80059e4:	3b0a      	subs	r3, #10
 80059e6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80059e8:	7afb      	ldrb	r3, [r7, #11]
 80059ea:	2b09      	cmp	r3, #9
 80059ec:	d8f6      	bhi.n	80059dc <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	011b      	lsls	r3, r3, #4
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	7afb      	ldrb	r3, [r7, #11]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	b2db      	uxtb	r3, r3
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	3714      	adds	r7, #20
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b085      	sub	sp, #20
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	4603      	mov	r3, r0
 8005a10:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8005a12:	79fb      	ldrb	r3, [r7, #7]
 8005a14:	091b      	lsrs	r3, r3, #4
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	461a      	mov	r2, r3
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	009b      	lsls	r3, r3, #2
 8005a1e:	4413      	add	r3, r2
 8005a20:	005b      	lsls	r3, r3, #1
 8005a22:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	b2da      	uxtb	r2, r3
 8005a28:	79fb      	ldrb	r3, [r7, #7]
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	4413      	add	r3, r2
 8005a32:	b2db      	uxtb	r3, r3
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3714      	adds	r7, #20
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	490f      	ldr	r1, [pc, #60]	; (8005a90 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	490c      	ldr	r1, [pc, #48]	; (8005a94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8005a66:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	6919      	ldr	r1, [r3, #16]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	430b      	orrs	r3, r1
 8005a7a:	4906      	ldr	r1, [pc, #24]	; (8005a94 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8005a80:	2300      	movs	r3, #0
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	370c      	adds	r7, #12
 8005a86:	46bd      	mov	sp, r7
 8005a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	40002800 	.word	0x40002800
 8005a94:	40003400 	.word	0x40003400

08005a98 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b08a      	sub	sp, #40	; 0x28
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e075      	b.n	8005b96 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d105      	bne.n	8005ac2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f7fb f98b 	bl	8000dd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2204      	movs	r2, #4
 8005ac6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f868 	bl	8005ba0 <HAL_SD_InitCard>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e05d      	b.n	8005b96 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8005ada:	f107 0308 	add.w	r3, r7, #8
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fda5 	bl	8006630 <HAL_SD_GetCardStatus>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d001      	beq.n	8005af0 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e052      	b.n	8005b96 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8005af0:	7e3b      	ldrb	r3, [r7, #24]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8005af6:	7e7b      	ldrb	r3, [r7, #25]
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b01      	cmp	r3, #1
 8005b02:	d10a      	bne.n	8005b1a <HAL_SD_Init+0x82>
 8005b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d102      	bne.n	8005b10 <HAL_SD_Init+0x78>
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d004      	beq.n	8005b1a <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b16:	659a      	str	r2, [r3, #88]	; 0x58
 8005b18:	e00b      	b.n	8005b32 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	2b01      	cmp	r3, #1
 8005b20:	d104      	bne.n	8005b2c <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b28:	659a      	str	r2, [r3, #88]	; 0x58
 8005b2a:	e002      	b.n	8005b32 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fe63 	bl	8006804 <HAL_SD_ConfigWideBusOperation>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	e026      	b.n	8005b96 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8005b48:	f7fb fc4a 	bl	80013e0 <HAL_GetTick>
 8005b4c:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b4e:	e011      	b.n	8005b74 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005b50:	f7fb fc46 	bl	80013e0 <HAL_GetTick>
 8005b54:	4602      	mov	r2, r0
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d109      	bne.n	8005b74 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005b66:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8005b70:	2303      	movs	r3, #3
 8005b72:	e010      	b.n	8005b96 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 ff55 	bl	8006a24 <HAL_SD_GetCardState>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d1e7      	bne.n	8005b50 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3728      	adds	r7, #40	; 0x28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005ba0:	b590      	push	{r4, r7, lr}
 8005ba2:	b08d      	sub	sp, #52	; 0x34
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8005bac:	2300      	movs	r3, #0
 8005bae:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8005bb8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005bbc:	f7fe f948 	bl	8003e50 <HAL_RCCEx_GetPeriphCLKFreq>
 8005bc0:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8005bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d109      	bne.n	8005bdc <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005bd6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e06a      	b.n	8005cb2 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	4a36      	ldr	r2, [pc, #216]	; (8005cbc <HAL_SD_InitCard+0x11c>)
 8005be2:	fba2 2303 	umull	r2, r3, r2, r3
 8005be6:	091b      	lsrs	r3, r3, #4
 8005be8:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681c      	ldr	r4, [r3, #0]
 8005bee:	466a      	mov	r2, sp
 8005bf0:	f107 0318 	add.w	r3, r7, #24
 8005bf4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8005bf8:	e882 0003 	stmia.w	r2, {r0, r1}
 8005bfc:	f107 030c 	add.w	r3, r7, #12
 8005c00:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005c02:	4620      	mov	r0, r4
 8005c04:	f002 ffa4 	bl	8008b50 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f002 ffe7 	bl	8008be0 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005c12:	69fb      	ldr	r3, [r7, #28]
 8005c14:	005b      	lsls	r3, r3, #1
 8005c16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005c1e:	4a28      	ldr	r2, [pc, #160]	; (8005cc0 <HAL_SD_InitCard+0x120>)
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c26:	3301      	adds	r3, #1
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fb fbe5 	bl	80013f8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 ffe6 	bl	8006c00 <SD_PowerON>
 8005c34:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c36:	6a3b      	ldr	r3, [r7, #32]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00b      	beq.n	8005c54 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e02e      	b.n	8005cb2 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 ff05 	bl	8006a64 <SD_InitCard>
 8005c5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c5c:	6a3b      	ldr	r3, [r7, #32]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c6e:	6a3b      	ldr	r3, [r7, #32]
 8005c70:	431a      	orrs	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e01b      	b.n	8005cb2 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c82:	4618      	mov	r0, r3
 8005c84:	f003 f842 	bl	8008d0c <SDMMC_CmdBlockLength>
 8005c88:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	6a3b      	ldr	r3, [r7, #32]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a0b      	ldr	r2, [pc, #44]	; (8005cc4 <HAL_SD_InitCard+0x124>)
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e000      	b.n	8005cb2 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8005cb0:	2300      	movs	r3, #0
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	372c      	adds	r7, #44	; 0x2c
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd90      	pop	{r4, r7, pc}
 8005cba:	bf00      	nop
 8005cbc:	014f8b59 	.word	0x014f8b59
 8005cc0:	00012110 	.word	0x00012110
 8005cc4:	1fe00fff 	.word	0x1fe00fff

08005cc8 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08c      	sub	sp, #48	; 0x30
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	607a      	str	r2, [r7, #4]
 8005cd4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d107      	bne.n	8005cf0 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e08d      	b.n	8005e0c <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	f040 8086 	bne.w	8005e0a <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2200      	movs	r2, #0
 8005d02:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	441a      	add	r2, r3
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d907      	bls.n	8005d22 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d16:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005d1e:	2301      	movs	r3, #1
 8005d20:	e074      	b.n	8005e0c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2203      	movs	r2, #3
 8005d26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	68ba      	ldr	r2, [r7, #8]
 8005d36:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	025a      	lsls	r2, r3, #9
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d002      	beq.n	8005d4e <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8005d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4a:	025b      	lsls	r3, r3, #9
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	025b      	lsls	r3, r3, #9
 8005d58:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005d5a:	2390      	movs	r3, #144	; 0x90
 8005d5c:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8005d5e:	2302      	movs	r3, #2
 8005d60:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005d62:	2300      	movs	r3, #0
 8005d64:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f107 0210 	add.w	r2, r7, #16
 8005d72:	4611      	mov	r1, r2
 8005d74:	4618      	mov	r0, r3
 8005d76:	f002 ff9d 	bl	8008cb4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68ba      	ldr	r2, [r7, #8]
 8005d90:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	2201      	movs	r2, #1
 8005d98:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d90a      	bls.n	8005db6 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	2282      	movs	r2, #130	; 0x82
 8005da4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dac:	4618      	mov	r0, r3
 8005dae:	f002 fff3 	bl	8008d98 <SDMMC_CmdReadMultiBlock>
 8005db2:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005db4:	e009      	b.n	8005dca <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2281      	movs	r2, #129	; 0x81
 8005dba:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f002 ffc5 	bl	8008d52 <SDMMC_CmdReadSingleBlock>
 8005dc8:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d012      	beq.n	8005df6 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a0f      	ldr	r2, [pc, #60]	; (8005e14 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8005dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dde:	431a      	orrs	r2, r3
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2200      	movs	r2, #0
 8005df0:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e00a      	b.n	8005e0c <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8005e04:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e000      	b.n	8005e0c <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
  }
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3730      	adds	r7, #48	; 0x30
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	1fe00fff 	.word	0x1fe00fff

08005e18 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08c      	sub	sp, #48	; 0x30
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d107      	bne.n	8005e40 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e34:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e08d      	b.n	8005f5c <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	f040 8086 	bne.w	8005f5a <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2200      	movs	r2, #0
 8005e52:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	441a      	add	r2, r3
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d907      	bls.n	8005e72 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e66:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005e6e:	2301      	movs	r3, #1
 8005e70:	e074      	b.n	8005f5c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2203      	movs	r2, #3
 8005e76:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	025a      	lsls	r2, r3, #9
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d002      	beq.n	8005e9e <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8005e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e9a:	025b      	lsls	r3, r3, #9
 8005e9c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea2:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	025b      	lsls	r3, r3, #9
 8005ea8:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8005eaa:	2390      	movs	r3, #144	; 0x90
 8005eac:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8005eae:	2300      	movs	r3, #0
 8005eb0:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f107 0210 	add.w	r2, r7, #16
 8005ec2:	4611      	mov	r1, r2
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f002 fef5 	bl	8008cb4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68da      	ldr	r2, [r3, #12]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ed8:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68ba      	ldr	r2, [r7, #8]
 8005ee0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d90a      	bls.n	8005f06 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	22a0      	movs	r2, #160	; 0xa0
 8005ef4:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005efc:	4618      	mov	r0, r3
 8005efe:	f002 ff91 	bl	8008e24 <SDMMC_CmdWriteMultiBlock>
 8005f02:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005f04:	e009      	b.n	8005f1a <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2290      	movs	r2, #144	; 0x90
 8005f0a:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f12:	4618      	mov	r0, r3
 8005f14:	f002 ff63 	bl	8008dde <SDMMC_CmdWriteSingleBlock>
 8005f18:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8005f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d012      	beq.n	8005f46 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a0f      	ldr	r2, [pc, #60]	; (8005f64 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8005f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f2e:	431a      	orrs	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e00a      	b.n	8005f5c <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8005f54:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f56:	2300      	movs	r3, #0
 8005f58:	e000      	b.n	8005f5c <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3730      	adds	r7, #48	; 0x30
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	1fe00fff 	.word	0x1fe00fff

08005f68 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b084      	sub	sp, #16
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f74:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_SD_IRQHandler+0x2e>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f003 0308 	and.w	r3, r3, #8
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d003      	beq.n	8005f96 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f001 f922 	bl	80071d8 <SD_Read_IT>
 8005f94:	e199      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f000 80ae 	beq.w	8006102 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005fae:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	6812      	ldr	r2, [r2, #0]
 8005fba:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8005fbe:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8005fc2:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005fd2:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68da      	ldr	r2, [r3, #12]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fe2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d038      	beq.n	8006060 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f003 0302 	and.w	r3, r3, #2
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d104      	bne.n	8006002 <HAL_SD_IRQHandler+0x9a>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d011      	beq.n	8006026 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	4618      	mov	r0, r3
 8006008:	f002 ff30 	bl	8008e6c <SDMMC_CmdStopTransfer>
 800600c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f957 	bl	80062d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a90      	ldr	r2, [pc, #576]	; (800626c <HAL_SD_IRQHandler+0x304>)
 800602c:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2200      	movs	r2, #0
 800603a:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	f003 0301 	and.w	r3, r3, #1
 8006042:	2b00      	cmp	r3, #0
 8006044:	d104      	bne.n	8006050 <HAL_SD_IRQHandler+0xe8>
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f003 0302 	and.w	r3, r3, #2
 800604c:	2b00      	cmp	r3, #0
 800604e:	d003      	beq.n	8006058 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f7fa fdd7 	bl	8000c04 <HAL_SD_RxCpltCallback>
 8006056:	e138      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f7fa fdc3 	bl	8000be4 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800605e:	e134      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 812f 	beq.w	80062ca <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	2200      	movs	r2, #0
 8006072:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	2200      	movs	r2, #0
 800607a:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2200      	movs	r2, #0
 8006082:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f003 0302 	and.w	r3, r3, #2
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <HAL_SD_IRQHandler+0x130>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f003 0320 	and.w	r3, r3, #32
 8006094:	2b00      	cmp	r3, #0
 8006096:	d011      	beq.n	80060bc <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f002 fee5 	bl	8008e6c <SDMMC_CmdStopTransfer>
 80060a2:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80060a4:	68bb      	ldr	r3, [r7, #8]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060ae:	68bb      	ldr	r3, [r7, #8]
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f90c 	bl	80062d4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2201      	movs	r2, #1
 80060c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f003 0310 	and.w	r3, r3, #16
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d104      	bne.n	80060de <HAL_SD_IRQHandler+0x176>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d002      	beq.n	80060e4 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fa fd80 	bl	8000be4 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d105      	bne.n	80060fa <HAL_SD_IRQHandler+0x192>
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 80e8 	beq.w	80062ca <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fa fd82 	bl	8000c04 <HAL_SD_RxCpltCallback>
}
 8006100:	e0e3      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d008      	beq.n	8006122 <HAL_SD_IRQHandler+0x1ba>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 f8a2 	bl	8007264 <SD_Write_IT>
 8006120:	e0d3      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006128:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800612c:	2b00      	cmp	r3, #0
 800612e:	f000 809f 	beq.w	8006270 <HAL_SD_IRQHandler+0x308>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006138:	f003 0302 	and.w	r3, r3, #2
 800613c:	2b00      	cmp	r3, #0
 800613e:	d005      	beq.n	800614c <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006144:	f043 0202 	orr.w	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006152:	f003 0308 	and.w	r3, r3, #8
 8006156:	2b00      	cmp	r3, #0
 8006158:	d005      	beq.n	8006166 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800615e:	f043 0208 	orr.w	r2, r3, #8
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800616c:	f003 0320 	and.w	r3, r3, #32
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006178:	f043 0220 	orr.w	r2, r3, #32
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006186:	f003 0310 	and.w	r3, r3, #16
 800618a:	2b00      	cmp	r3, #0
 800618c:	d005      	beq.n	800619a <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006192:	f043 0210 	orr.w	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a33      	ldr	r2, [pc, #204]	; (800626c <HAL_SD_IRQHandler+0x304>)
 80061a0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80061b0:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68da      	ldr	r2, [r3, #12]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061c0:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80061e0:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f002 fe40 	bl	8008e6c <SDMMC_CmdStopTransfer>
 80061ec:	4602      	mov	r2, r0
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061f2:	431a      	orrs	r2, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	68da      	ldr	r2, [r3, #12]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006206:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006210:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f003 0308 	and.w	r3, r3, #8
 8006218:	2b00      	cmp	r3, #0
 800621a:	d00a      	beq.n	8006232 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f852 	bl	80062d4 <HAL_SD_ErrorCallback>
}
 8006230:	e04b      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006238:	2b00      	cmp	r3, #0
 800623a:	d046      	beq.n	80062ca <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006240:	2b00      	cmp	r3, #0
 8006242:	d042      	beq.n	80062ca <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006252:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f000 f835 	bl	80062d4 <HAL_SD_ErrorCallback>
}
 800626a:	e02e      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
 800626c:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800627a:	2b00      	cmp	r3, #0
 800627c:	d025      	beq.n	80062ca <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006286:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628e:	f003 0304 	and.w	r3, r3, #4
 8006292:	2b00      	cmp	r3, #0
 8006294:	d10c      	bne.n	80062b0 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d003      	beq.n	80062a8 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f001 f847 	bl	8007334 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80062a6:	e010      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 f82f 	bl	800730c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 80062ae:	e00c      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f001 f830 	bl	8007320 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 80062c0:	e003      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f001 f818 	bl	80072f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 80062c8:	e7ff      	b.n	80062ca <HAL_SD_IRQHandler+0x362>
 80062ca:	bf00      	nop
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop

080062d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
 80062f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062f6:	0f9b      	lsrs	r3, r3, #30
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006302:	0e9b      	lsrs	r3, r3, #26
 8006304:	b2db      	uxtb	r3, r3
 8006306:	f003 030f 	and.w	r3, r3, #15
 800630a:	b2da      	uxtb	r2, r3
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006314:	0e1b      	lsrs	r3, r3, #24
 8006316:	b2db      	uxtb	r3, r3
 8006318:	f003 0303 	and.w	r3, r3, #3
 800631c:	b2da      	uxtb	r2, r3
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006326:	0c1b      	lsrs	r3, r3, #16
 8006328:	b2da      	uxtb	r2, r3
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006332:	0a1b      	lsrs	r3, r3, #8
 8006334:	b2da      	uxtb	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800633e:	b2da      	uxtb	r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006348:	0d1b      	lsrs	r3, r3, #20
 800634a:	b29a      	uxth	r2, r3
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006354:	0c1b      	lsrs	r3, r3, #16
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f003 030f 	and.w	r3, r3, #15
 800635c:	b2da      	uxtb	r2, r3
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006366:	0bdb      	lsrs	r3, r3, #15
 8006368:	b2db      	uxtb	r3, r3
 800636a:	f003 0301 	and.w	r3, r3, #1
 800636e:	b2da      	uxtb	r2, r3
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006378:	0b9b      	lsrs	r3, r3, #14
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	b2da      	uxtb	r2, r3
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638a:	0b5b      	lsrs	r3, r3, #13
 800638c:	b2db      	uxtb	r3, r3
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	b2da      	uxtb	r2, r3
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800639c:	0b1b      	lsrs	r3, r3, #12
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	f003 0301 	and.w	r3, r3, #1
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	2200      	movs	r2, #0
 80063ae:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d163      	bne.n	8006480 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063bc:	009a      	lsls	r2, r3, #2
 80063be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80063c2:	4013      	ands	r3, r2
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80063c8:	0f92      	lsrs	r2, r2, #30
 80063ca:	431a      	orrs	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063d4:	0edb      	lsrs	r3, r3, #27
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	f003 0307 	and.w	r3, r3, #7
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063e6:	0e1b      	lsrs	r3, r3, #24
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	f003 0307 	and.w	r3, r3, #7
 80063ee:	b2da      	uxtb	r2, r3
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063f8:	0d5b      	lsrs	r3, r3, #21
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	f003 0307 	and.w	r3, r3, #7
 8006400:	b2da      	uxtb	r2, r3
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800640a:	0c9b      	lsrs	r3, r3, #18
 800640c:	b2db      	uxtb	r3, r3
 800640e:	f003 0307 	and.w	r3, r3, #7
 8006412:	b2da      	uxtb	r2, r3
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800641c:	0bdb      	lsrs	r3, r3, #15
 800641e:	b2db      	uxtb	r3, r3
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	b2da      	uxtb	r2, r3
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	1c5a      	adds	r2, r3, #1
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	7e1b      	ldrb	r3, [r3, #24]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	f003 0307 	and.w	r3, r3, #7
 800643e:	3302      	adds	r3, #2
 8006440:	2201      	movs	r2, #1
 8006442:	fa02 f303 	lsl.w	r3, r2, r3
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800644a:	fb03 f202 	mul.w	r2, r3, r2
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	7a1b      	ldrb	r3, [r3, #8]
 8006456:	b2db      	uxtb	r3, r3
 8006458:	f003 030f 	and.w	r3, r3, #15
 800645c:	2201      	movs	r2, #1
 800645e:	409a      	lsls	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006468:	687a      	ldr	r2, [r7, #4]
 800646a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800646c:	0a52      	lsrs	r2, r2, #9
 800646e:	fb03 f202 	mul.w	r2, r3, r2
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f44f 7200 	mov.w	r2, #512	; 0x200
 800647c:	655a      	str	r2, [r3, #84]	; 0x54
 800647e:	e031      	b.n	80064e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006484:	2b01      	cmp	r3, #1
 8006486:	d11d      	bne.n	80064c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800648c:	041b      	lsls	r3, r3, #16
 800648e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006496:	0c1b      	lsrs	r3, r3, #16
 8006498:	431a      	orrs	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	3301      	adds	r3, #1
 80064a4:	029a      	lsls	r2, r3, #10
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	655a      	str	r2, [r3, #84]	; 0x54
 80064c2:	e00f      	b.n	80064e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a58      	ldr	r2, [pc, #352]	; (800662c <HAL_SD_GetCardCSD+0x344>)
 80064ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e09d      	b.n	8006620 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064e8:	0b9b      	lsrs	r3, r3, #14
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	b2da      	uxtb	r2, r3
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80064fa:	09db      	lsrs	r3, r3, #7
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006502:	b2da      	uxtb	r2, r3
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800650c:	b2db      	uxtb	r3, r3
 800650e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006512:	b2da      	uxtb	r2, r3
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800651c:	0fdb      	lsrs	r3, r3, #31
 800651e:	b2da      	uxtb	r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006528:	0f5b      	lsrs	r3, r3, #29
 800652a:	b2db      	uxtb	r3, r3
 800652c:	f003 0303 	and.w	r3, r3, #3
 8006530:	b2da      	uxtb	r2, r3
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800653a:	0e9b      	lsrs	r3, r3, #26
 800653c:	b2db      	uxtb	r3, r3
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	b2da      	uxtb	r2, r3
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800654c:	0d9b      	lsrs	r3, r3, #22
 800654e:	b2db      	uxtb	r3, r3
 8006550:	f003 030f 	and.w	r3, r3, #15
 8006554:	b2da      	uxtb	r2, r3
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800655e:	0d5b      	lsrs	r3, r3, #21
 8006560:	b2db      	uxtb	r3, r3
 8006562:	f003 0301 	and.w	r3, r3, #1
 8006566:	b2da      	uxtb	r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2200      	movs	r2, #0
 8006572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800657a:	0c1b      	lsrs	r3, r3, #16
 800657c:	b2db      	uxtb	r3, r3
 800657e:	f003 0301 	and.w	r3, r3, #1
 8006582:	b2da      	uxtb	r2, r3
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800658e:	0bdb      	lsrs	r3, r3, #15
 8006590:	b2db      	uxtb	r3, r3
 8006592:	f003 0301 	and.w	r3, r3, #1
 8006596:	b2da      	uxtb	r2, r3
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065a2:	0b9b      	lsrs	r3, r3, #14
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	f003 0301 	and.w	r3, r3, #1
 80065aa:	b2da      	uxtb	r2, r3
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065b6:	0b5b      	lsrs	r3, r3, #13
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	b2da      	uxtb	r2, r3
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065ca:	0b1b      	lsrs	r3, r3, #12
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	f003 0301 	and.w	r3, r3, #1
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065de:	0a9b      	lsrs	r3, r3, #10
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	f003 0303 	and.w	r3, r3, #3
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80065f2:	0a1b      	lsrs	r3, r3, #8
 80065f4:	b2db      	uxtb	r3, r3
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006606:	085b      	lsrs	r3, r3, #1
 8006608:	b2db      	uxtb	r3, r3
 800660a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800660e:	b2da      	uxtb	r2, r3
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	2201      	movs	r2, #1
 800661a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800661e:	2300      	movs	r3, #0
}
 8006620:	4618      	mov	r0, r3
 8006622:	370c      	adds	r7, #12
 8006624:	46bd      	mov	sp, r7
 8006626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662a:	4770      	bx	lr
 800662c:	1fe00fff 	.word	0x1fe00fff

08006630 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b094      	sub	sp, #80	; 0x50
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b03      	cmp	r3, #3
 800664a:	d101      	bne.n	8006650 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e0a7      	b.n	80067a0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 fb60 	bl	8006d1c <SD_SendSDStatus>
 800665c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800665e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a4f      	ldr	r2, [pc, #316]	; (80067a8 <HAL_SD_GetCardStatus+0x178>)
 800666a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006670:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006672:	431a      	orrs	r2, r3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8006686:	e070      	b.n	800676a <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	099b      	lsrs	r3, r3, #6
 800668c:	b2db      	uxtb	r3, r3
 800668e:	f003 0303 	and.w	r3, r3, #3
 8006692:	b2da      	uxtb	r2, r3
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	095b      	lsrs	r3, r3, #5
 800669c:	b2db      	uxtb	r3, r3
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	0a1b      	lsrs	r3, r3, #8
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80066b2:	b29a      	uxth	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	0e1b      	lsrs	r3, r3, #24
 80066b8:	b29b      	uxth	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b29a      	uxth	r2, r3
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	061a      	lsls	r2, r3, #24
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	021b      	lsls	r3, r3, #8
 80066ca:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066ce:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	0a1b      	lsrs	r3, r3, #8
 80066d4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80066d8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	0e1b      	lsrs	r3, r3, #24
 80066de:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	0a1b      	lsrs	r3, r3, #8
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	0d1b      	lsrs	r3, r3, #20
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	b2da      	uxtb	r2, r3
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	0c1b      	lsrs	r3, r3, #16
 800670a:	b29b      	uxth	r3, r3
 800670c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006710:	b29a      	uxth	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	b29b      	uxth	r3, r3
 8006716:	b2db      	uxtb	r3, r3
 8006718:	b29b      	uxth	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b29a      	uxth	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	0a9b      	lsrs	r3, r3, #10
 8006726:	b2db      	uxtb	r3, r3
 8006728:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800672c:	b2da      	uxtb	r2, r3
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	0a1b      	lsrs	r3, r3, #8
 8006736:	b2db      	uxtb	r3, r3
 8006738:	f003 0303 	and.w	r3, r3, #3
 800673c:	b2da      	uxtb	r2, r3
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	091b      	lsrs	r3, r3, #4
 8006746:	b2db      	uxtb	r3, r3
 8006748:	f003 030f 	and.w	r3, r3, #15
 800674c:	b2da      	uxtb	r2, r3
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	b2db      	uxtb	r3, r3
 8006756:	f003 030f 	and.w	r3, r3, #15
 800675a:	b2da      	uxtb	r2, r3
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	0e1b      	lsrs	r3, r3, #24
 8006764:	b2da      	uxtb	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006772:	4618      	mov	r0, r3
 8006774:	f002 faca 	bl	8008d0c <SDMMC_CmdBlockLength>
 8006778:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677c:	2b00      	cmp	r3, #0
 800677e:	d00d      	beq.n	800679c <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a08      	ldr	r2, [pc, #32]	; (80067a8 <HAL_SD_GetCardStatus+0x178>)
 8006786:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800678c:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2201      	movs	r2, #1
 8006792:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 800679c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3750      	adds	r7, #80	; 0x50
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	1fe00fff 	.word	0x1fe00fff

080067ac <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	370c      	adds	r7, #12
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr

08006804 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8006804:	b590      	push	{r4, r7, lr}
 8006806:	b08d      	sub	sp, #52	; 0x34
 8006808:	af02      	add	r7, sp, #8
 800680a:	6078      	str	r0, [r7, #4]
 800680c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2203      	movs	r2, #3
 8006818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006820:	2b03      	cmp	r3, #3
 8006822:	d02e      	beq.n	8006882 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800682a:	d106      	bne.n	800683a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006830:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	635a      	str	r2, [r3, #52]	; 0x34
 8006838:	e029      	b.n	800688e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006840:	d10a      	bne.n	8006858 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fb62 	bl	8006f0c <SD_WideBus_Enable>
 8006848:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	431a      	orrs	r2, r3
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	635a      	str	r2, [r3, #52]	; 0x34
 8006856:	e01a      	b.n	800688e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d10a      	bne.n	8006874 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 fb9f 	bl	8006fa2 <SD_WideBus_Disable>
 8006864:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800686a:	6a3b      	ldr	r3, [r7, #32]
 800686c:	431a      	orrs	r2, r3
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	635a      	str	r2, [r3, #52]	; 0x34
 8006872:	e00c      	b.n	800688e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006878:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	635a      	str	r2, [r3, #52]	; 0x34
 8006880:	e005      	b.n	800688e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006886:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006892:	2b00      	cmp	r3, #0
 8006894:	d007      	beq.n	80068a6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a5e      	ldr	r2, [pc, #376]	; (8006a14 <HAL_SD_ConfigWideBusOperation+0x210>)
 800689c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80068a4:	e094      	b.n	80069d0 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80068a6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80068aa:	f7fd fad1 	bl	8003e50 <HAL_RCCEx_GetPeriphCLKFreq>
 80068ae:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8083 	beq.w	80069be <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689b      	ldr	r3, [r3, #8]
 80068c2:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	4950      	ldr	r1, [pc, #320]	; (8006a18 <HAL_SD_ConfigWideBusOperation+0x214>)
 80068d6:	fba1 1303 	umull	r1, r3, r1, r3
 80068da:	0e1b      	lsrs	r3, r3, #24
 80068dc:	429a      	cmp	r2, r3
 80068de:	d303      	bcc.n	80068e8 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	695b      	ldr	r3, [r3, #20]
 80068e4:	61bb      	str	r3, [r7, #24]
 80068e6:	e05a      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068f0:	d103      	bne.n	80068fa <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e051      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006902:	d126      	bne.n	8006952 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10e      	bne.n	800692a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	4a43      	ldr	r2, [pc, #268]	; (8006a1c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d906      	bls.n	8006922 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	4a40      	ldr	r2, [pc, #256]	; (8006a18 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	0e5b      	lsrs	r3, r3, #25
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e03d      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e039      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	695b      	ldr	r3, [r3, #20]
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	69fa      	ldr	r2, [r7, #28]
 8006932:	fbb2 f3f3 	udiv	r3, r2, r3
 8006936:	4a39      	ldr	r2, [pc, #228]	; (8006a1c <HAL_SD_ConfigWideBusOperation+0x218>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d906      	bls.n	800694a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800693c:	69fb      	ldr	r3, [r7, #28]
 800693e:	4a36      	ldr	r2, [pc, #216]	; (8006a18 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006940:	fba2 2303 	umull	r2, r3, r2, r3
 8006944:	0e5b      	lsrs	r3, r3, #25
 8006946:	61bb      	str	r3, [r7, #24]
 8006948:	e029      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	61bb      	str	r3, [r7, #24]
 8006950:	e025      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	695b      	ldr	r3, [r3, #20]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10e      	bne.n	8006978 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	4a30      	ldr	r2, [pc, #192]	; (8006a20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d906      	bls.n	8006970 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4a2c      	ldr	r2, [pc, #176]	; (8006a18 <HAL_SD_ConfigWideBusOperation+0x214>)
 8006966:	fba2 2303 	umull	r2, r3, r2, r3
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	61bb      	str	r3, [r7, #24]
 800696e:	e016      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	61bb      	str	r3, [r7, #24]
 8006976:	e012      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	695b      	ldr	r3, [r3, #20]
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	69fa      	ldr	r2, [r7, #28]
 8006980:	fbb2 f3f3 	udiv	r3, r2, r3
 8006984:	4a26      	ldr	r2, [pc, #152]	; (8006a20 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d906      	bls.n	8006998 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	4a22      	ldr	r2, [pc, #136]	; (8006a18 <HAL_SD_ConfigWideBusOperation+0x214>)
 800698e:	fba2 2303 	umull	r2, r3, r2, r3
 8006992:	0e1b      	lsrs	r3, r3, #24
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e002      	b.n	800699e <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681c      	ldr	r4, [r3, #0]
 80069a2:	466a      	mov	r2, sp
 80069a4:	f107 0314 	add.w	r3, r7, #20
 80069a8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80069ac:	e882 0003 	stmia.w	r2, {r0, r1}
 80069b0:	f107 0308 	add.w	r3, r7, #8
 80069b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069b6:	4620      	mov	r0, r4
 80069b8:	f002 f8ca 	bl	8008b50 <SDMMC_Init>
 80069bc:	e008      	b.n	80069d0 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80069d8:	4618      	mov	r0, r3
 80069da:	f002 f997 	bl	8008d0c <SDMMC_CmdBlockLength>
 80069de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d00c      	beq.n	8006a00 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a0a      	ldr	r2, [pc, #40]	; (8006a14 <HAL_SD_ConfigWideBusOperation+0x210>)
 80069ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f2:	6a3b      	ldr	r3, [r7, #32]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8006a08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	372c      	adds	r7, #44	; 0x2c
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd90      	pop	{r4, r7, pc}
 8006a14:	1fe00fff 	.word	0x1fe00fff
 8006a18:	55e63b89 	.word	0x55e63b89
 8006a1c:	02faf080 	.word	0x02faf080
 8006a20:	017d7840 	.word	0x017d7840

08006a24 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006a30:	f107 030c 	add.w	r3, r7, #12
 8006a34:	4619      	mov	r1, r3
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fa40 	bl	8006ebc <SD_SendStatus>
 8006a3c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	0a5b      	lsrs	r3, r3, #9
 8006a54:	f003 030f 	and.w	r3, r3, #15
 8006a58:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8006a5a:	693b      	ldr	r3, [r7, #16]
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3718      	adds	r7, #24
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b090      	sub	sp, #64	; 0x40
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8006a70:	f7fa fcb6 	bl	80013e0 <HAL_GetTick>
 8006a74:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f002 f8c1 	bl	8008c02 <SDMMC_GetPowerState>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d102      	bne.n	8006a8c <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006a86:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006a8a:	e0b5      	b.n	8006bf8 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	2b03      	cmp	r3, #3
 8006a92:	d02e      	beq.n	8006af2 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f002 fb0c 	bl	80090b6 <SDMMC_CmdSendCID>
 8006a9e:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <SD_InitCard+0x46>
    {
      return errorstate;
 8006aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa8:	e0a6      	b.n	8006bf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f002 f8ec 	bl	8008c8e <SDMMC_GetResponse>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	2104      	movs	r1, #4
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f002 f8e3 	bl	8008c8e <SDMMC_GetResponse>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f002 f8da 	bl	8008c8e <SDMMC_GetResponse>
 8006ada:	4602      	mov	r2, r0
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	210c      	movs	r1, #12
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f002 f8d1 	bl	8008c8e <SDMMC_GetResponse>
 8006aec:	4602      	mov	r2, r0
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d01d      	beq.n	8006b36 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8006afa:	e019      	b.n	8006b30 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f107 020a 	add.w	r2, r7, #10
 8006b04:	4611      	mov	r1, r2
 8006b06:	4618      	mov	r0, r3
 8006b08:	f002 fb14 	bl	8009134 <SDMMC_CmdSetRelAdd>
 8006b0c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8006b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <SD_InitCard+0xb4>
      {
        return errorstate;
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	e06f      	b.n	8006bf8 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8006b18:	f7fa fc62 	bl	80013e0 <HAL_GetTick>
 8006b1c:	4602      	mov	r2, r0
 8006b1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	f241 3287 	movw	r2, #4999	; 0x1387
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d902      	bls.n	8006b30 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8006b2a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b2e:	e063      	b.n	8006bf8 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8006b30:	897b      	ldrh	r3, [r7, #10]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d0e2      	beq.n	8006afc <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d036      	beq.n	8006bac <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006b3e:	897b      	ldrh	r3, [r7, #10]
 8006b40:	461a      	mov	r2, r3
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	041b      	lsls	r3, r3, #16
 8006b50:	4619      	mov	r1, r3
 8006b52:	4610      	mov	r0, r2
 8006b54:	f002 face 	bl	80090f4 <SDMMC_CmdSendCSD>
 8006b58:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8006b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d001      	beq.n	8006b64 <SD_InitCard+0x100>
    {
      return errorstate;
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	e049      	b.n	8006bf8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2100      	movs	r1, #0
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f002 f88f 	bl	8008c8e <SDMMC_GetResponse>
 8006b70:	4602      	mov	r2, r0
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2104      	movs	r1, #4
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f002 f886 	bl	8008c8e <SDMMC_GetResponse>
 8006b82:	4602      	mov	r2, r0
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2108      	movs	r1, #8
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f002 f87d 	bl	8008c8e <SDMMC_GetResponse>
 8006b94:	4602      	mov	r2, r0
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	210c      	movs	r1, #12
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f002 f874 	bl	8008c8e <SDMMC_GetResponse>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2104      	movs	r1, #4
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f002 f86b 	bl	8008c8e <SDMMC_GetResponse>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	0d1a      	lsrs	r2, r3, #20
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006bc0:	f107 030c 	add.w	r3, r7, #12
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7ff fb8e 	bl	80062e8 <HAL_SD_GetCardCSD>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006bd2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006bd6:	e00f      	b.n	8006bf8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681a      	ldr	r2, [r3, #0]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be0:	041b      	lsls	r3, r3, #16
 8006be2:	4619      	mov	r1, r3
 8006be4:	4610      	mov	r0, r2
 8006be6:	f002 f97d 	bl	8008ee4 <SDMMC_CmdSelDesel>
 8006bea:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d001      	beq.n	8006bf6 <SD_InitCard+0x192>
  {
    return errorstate;
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	e000      	b.n	8006bf8 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3740      	adds	r7, #64	; 0x40
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8006c10:	2300      	movs	r3, #0
 8006c12:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f002 f986 	bl	8008f2a <SDMMC_CmdGoIdleState>
 8006c1e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <SD_PowerON+0x2a>
  {
    return errorstate;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	e072      	b.n	8006d10 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f002 f999 	bl	8008f66 <SDMMC_CmdOperCond>
 8006c34:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c3c:	d10d      	bne.n	8006c5a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4618      	mov	r0, r3
 8006c4a:	f002 f96e 	bl	8008f2a <SDMMC_CmdGoIdleState>
 8006c4e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d004      	beq.n	8006c60 <SD_PowerON+0x60>
    {
      return errorstate;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	e05a      	b.n	8006d10 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	d137      	bne.n	8006cd8 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	2100      	movs	r1, #0
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f002 f999 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8006c74:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d02d      	beq.n	8006cd8 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006c7c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006c80:	e046      	b.n	8006d10 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	2100      	movs	r1, #0
 8006c88:	4618      	mov	r0, r3
 8006c8a:	f002 f98c 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8006c8e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <SD_PowerON+0x9a>
    {
      return errorstate;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	e03a      	b.n	8006d10 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	491e      	ldr	r1, [pc, #120]	; (8006d18 <SD_PowerON+0x118>)
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f002 f9a3 	bl	8008fec <SDMMC_CmdAppOperCommand>
 8006ca6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d002      	beq.n	8006cb4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006cae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006cb2:	e02d      	b.n	8006d10 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2100      	movs	r1, #0
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f001 ffe7 	bl	8008c8e <SDMMC_GetResponse>
 8006cc0:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	0fdb      	lsrs	r3, r3, #31
 8006cc6:	2b01      	cmp	r3, #1
 8006cc8:	d101      	bne.n	8006cce <SD_PowerON+0xce>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <SD_PowerON+0xd0>
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]

    count++;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d802      	bhi.n	8006ce8 <SD_PowerON+0xe8>
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d0cc      	beq.n	8006c82 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d902      	bls.n	8006cf8 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8006cf2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cf6:	e00b      	b.n	8006d10 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d002      	beq.n	8006d0e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8006d0e:	2300      	movs	r3, #0
}
 8006d10:	4618      	mov	r0, r3
 8006d12:	3718      	adds	r7, #24
 8006d14:	46bd      	mov	sp, r7
 8006d16:	bd80      	pop	{r7, pc}
 8006d18:	c1100000 	.word	0xc1100000

08006d1c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b08c      	sub	sp, #48	; 0x30
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006d26:	f7fa fb5b 	bl	80013e0 <HAL_GetTick>
 8006d2a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	2100      	movs	r1, #0
 8006d36:	4618      	mov	r0, r3
 8006d38:	f001 ffa9 	bl	8008c8e <SDMMC_GetResponse>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d46:	d102      	bne.n	8006d4e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006d48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006d4c:	e0b0      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	2140      	movs	r1, #64	; 0x40
 8006d54:	4618      	mov	r0, r3
 8006d56:	f001 ffd9 	bl	8008d0c <SDMMC_CmdBlockLength>
 8006d5a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d005      	beq.n	8006d6e <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d6a:	6a3b      	ldr	r3, [r7, #32]
 8006d6c:	e0a0      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	4619      	mov	r1, r3
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	f002 f913 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8006d80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d005      	beq.n	8006d94 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006d90:	6a3b      	ldr	r3, [r7, #32]
 8006d92:	e08d      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006d94:	f04f 33ff 	mov.w	r3, #4294967295
 8006d98:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8006d9a:	2340      	movs	r3, #64	; 0x40
 8006d9c:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8006d9e:	2360      	movs	r3, #96	; 0x60
 8006da0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006da2:	2302      	movs	r3, #2
 8006da4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8006daa:	2301      	movs	r3, #1
 8006dac:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f107 0208 	add.w	r2, r7, #8
 8006db6:	4611      	mov	r1, r2
 8006db8:	4618      	mov	r0, r3
 8006dba:	f001 ff7b 	bl	8008cb4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f002 f9fb 	bl	80091be <SDMMC_CmdStatusRegister>
 8006dc8:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d02b      	beq.n	8006e28 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8006dd8:	6a3b      	ldr	r3, [r7, #32]
 8006dda:	e069      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d013      	beq.n	8006e12 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8006dea:	2300      	movs	r3, #0
 8006dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dee:	e00d      	b.n	8006e0c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f001 fed5 	bl	8008ba4 <SDMMC_ReadFIFO>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dfe:	601a      	str	r2, [r3, #0]
        pData++;
 8006e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e02:	3304      	adds	r3, #4
 8006e04:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8006e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e08:	3301      	adds	r3, #1
 8006e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0e:	2b07      	cmp	r3, #7
 8006e10:	d9ee      	bls.n	8006df0 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e12:	f7fa fae5 	bl	80013e0 <HAL_GetTick>
 8006e16:	4602      	mov	r2, r0
 8006e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e20:	d102      	bne.n	8006e28 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e22:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e26:	e043      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d0d2      	beq.n	8006ddc <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d001      	beq.n	8006e48 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006e44:	2308      	movs	r3, #8
 8006e46:	e033      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e4e:	f003 0302 	and.w	r3, r3, #2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e56:	2302      	movs	r3, #2
 8006e58:	e02a      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d017      	beq.n	8006e98 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8006e68:	2320      	movs	r3, #32
 8006e6a:	e021      	b.n	8006eb0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4618      	mov	r0, r3
 8006e72:	f001 fe97 	bl	8008ba4 <SDMMC_ReadFIFO>
 8006e76:	4602      	mov	r2, r0
 8006e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7a:	601a      	str	r2, [r3, #0]
    pData++;
 8006e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e7e:	3304      	adds	r3, #4
 8006e80:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006e82:	f7fa faad 	bl	80013e0 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e90:	d102      	bne.n	8006e98 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006e92:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e96:	e00b      	b.n	8006eb0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e2      	bne.n	8006e6c <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a03      	ldr	r2, [pc, #12]	; (8006eb8 <SD_SendSDStatus+0x19c>)
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8006eae:	2300      	movs	r3, #0
}
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	3730      	adds	r7, #48	; 0x30
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}
 8006eb8:	18000f3a 	.word	0x18000f3a

08006ebc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b084      	sub	sp, #16
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d102      	bne.n	8006ed2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006ecc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ed0:	e018      	b.n	8006f04 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eda:	041b      	lsls	r3, r3, #16
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f002 f94a 	bl	8009178 <SDMMC_CmdSendStatus>
 8006ee4:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d001      	beq.n	8006ef0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	e009      	b.n	8006f04 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	2100      	movs	r1, #0
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f001 fec9 	bl	8008c8e <SDMMC_GetResponse>
 8006efc:	4602      	mov	r2, r0
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b086      	sub	sp, #24
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]
 8006f18:	2300      	movs	r3, #0
 8006f1a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	2100      	movs	r1, #0
 8006f22:	4618      	mov	r0, r3
 8006f24:	f001 feb3 	bl	8008c8e <SDMMC_GetResponse>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006f32:	d102      	bne.n	8006f3a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006f34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f38:	e02f      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006f3a:	f107 030c 	add.w	r3, r7, #12
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 f879 	bl	8007038 <SD_FindSCR>
 8006f46:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	e023      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01c      	beq.n	8006f96 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f64:	041b      	lsls	r3, r3, #16
 8006f66:	4619      	mov	r1, r3
 8006f68:	4610      	mov	r0, r2
 8006f6a:	f002 f81c 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8006f6e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d001      	beq.n	8006f7a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	e00f      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	2102      	movs	r1, #2
 8006f80:	4618      	mov	r0, r3
 8006f82:	f002 f853 	bl	800902c <SDMMC_CmdBusWidth>
 8006f86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d001      	beq.n	8006f92 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	e003      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e001      	b.n	8006f9a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006f96:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b086      	sub	sp, #24
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8006faa:	2300      	movs	r3, #0
 8006fac:	60fb      	str	r3, [r7, #12]
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	2100      	movs	r1, #0
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f001 fe68 	bl	8008c8e <SDMMC_GetResponse>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc8:	d102      	bne.n	8006fd0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fce:	e02f      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006fd0:	f107 030c 	add.w	r3, r7, #12
 8006fd4:	4619      	mov	r1, r3
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f82e 	bl	8007038 <SD_FindSCR>
 8006fdc:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d001      	beq.n	8006fe8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	e023      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d01c      	beq.n	800702c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	041b      	lsls	r3, r3, #16
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	4610      	mov	r0, r2
 8007000:	f001 ffd1 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8007004:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	e00f      	b.n	8007030 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	2100      	movs	r1, #0
 8007016:	4618      	mov	r0, r3
 8007018:	f002 f808 	bl	800902c <SDMMC_CmdBusWidth>
 800701c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d001      	beq.n	8007028 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	e003      	b.n	8007030 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007028:	2300      	movs	r3, #0
 800702a:	e001      	b.n	8007030 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800702c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b08e      	sub	sp, #56	; 0x38
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007042:	f7fa f9cd 	bl	80013e0 <HAL_GetTick>
 8007046:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007048:	2300      	movs	r3, #0
 800704a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800704c:	2300      	movs	r3, #0
 800704e:	60bb      	str	r3, [r7, #8]
 8007050:	2300      	movs	r3, #0
 8007052:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2108      	movs	r1, #8
 800705e:	4618      	mov	r0, r3
 8007060:	f001 fe54 	bl	8008d0c <SDMMC_CmdBlockLength>
 8007064:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <SD_FindSCR+0x38>
  {
    return errorstate;
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	e0ad      	b.n	80071cc <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007078:	041b      	lsls	r3, r3, #16
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f001 ff92 	bl	8008fa6 <SDMMC_CmdAppCommand>
 8007082:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8007084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007086:	2b00      	cmp	r3, #0
 8007088:	d001      	beq.n	800708e <SD_FindSCR+0x56>
  {
    return errorstate;
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	e09e      	b.n	80071cc <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800708e:	f04f 33ff 	mov.w	r3, #4294967295
 8007092:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007094:	2308      	movs	r3, #8
 8007096:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8007098:	2330      	movs	r3, #48	; 0x30
 800709a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800709c:	2302      	movs	r3, #2
 800709e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80070a0:	2300      	movs	r3, #0
 80070a2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80070a4:	2301      	movs	r3, #1
 80070a6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f107 0210 	add.w	r2, r7, #16
 80070b0:	4611      	mov	r1, r2
 80070b2:	4618      	mov	r0, r3
 80070b4:	f001 fdfe 	bl	8008cb4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4618      	mov	r0, r3
 80070be:	f001 ffd8 	bl	8009072 <SDMMC_CmdSendSCR>
 80070c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80070c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d027      	beq.n	800711a <SD_FindSCR+0xe2>
  {
    return errorstate;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	e07e      	b.n	80071cc <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d113      	bne.n	8007104 <SD_FindSCR+0xcc>
 80070dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d110      	bne.n	8007104 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4618      	mov	r0, r3
 80070e8:	f001 fd5c 	bl	8008ba4 <SDMMC_ReadFIFO>
 80070ec:	4603      	mov	r3, r0
 80070ee:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4618      	mov	r0, r3
 80070f6:	f001 fd55 	bl	8008ba4 <SDMMC_ReadFIFO>
 80070fa:	4603      	mov	r3, r0
 80070fc:	60fb      	str	r3, [r7, #12]
      index++;
 80070fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007100:	3301      	adds	r3, #1
 8007102:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007104:	f7fa f96c 	bl	80013e0 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007112:	d102      	bne.n	800711a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007114:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007118:	e058      	b.n	80071cc <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007120:	f240 532a 	movw	r3, #1322	; 0x52a
 8007124:	4013      	ands	r3, r2
 8007126:	2b00      	cmp	r3, #0
 8007128:	d0d1      	beq.n	80070ce <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d005      	beq.n	8007144 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2208      	movs	r2, #8
 800713e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007140:	2308      	movs	r3, #8
 8007142:	e043      	b.n	80071cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714a:	f003 0302 	and.w	r3, r3, #2
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2202      	movs	r2, #2
 8007158:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800715a:	2302      	movs	r3, #2
 800715c:	e036      	b.n	80071cc <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	f003 0320 	and.w	r3, r3, #32
 8007168:	2b00      	cmp	r3, #0
 800716a:	d005      	beq.n	8007178 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2220      	movs	r2, #32
 8007172:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007174:	2320      	movs	r3, #32
 8007176:	e029      	b.n	80071cc <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a15      	ldr	r2, [pc, #84]	; (80071d4 <SD_FindSCR+0x19c>)
 800717e:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	061a      	lsls	r2, r3, #24
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	021b      	lsls	r3, r3, #8
 8007188:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800718c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	0a1b      	lsrs	r3, r3, #8
 8007192:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8007196:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	0e1b      	lsrs	r3, r3, #24
 800719c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800719e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a0:	601a      	str	r2, [r3, #0]
    scr++;
 80071a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a4:	3304      	adds	r3, #4
 80071a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	061a      	lsls	r2, r3, #24
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80071b4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	0a1b      	lsrs	r3, r3, #8
 80071ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071be:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	0e1b      	lsrs	r3, r3, #24
 80071c4:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80071c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071c8:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3738      	adds	r7, #56	; 0x38
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	18000f3a 	.word	0x18000f3a

080071d8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b086      	sub	sp, #24
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071e4:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ea:	2b1f      	cmp	r3, #31
 80071ec:	d936      	bls.n	800725c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80071ee:	2300      	movs	r3, #0
 80071f0:	617b      	str	r3, [r7, #20]
 80071f2:	e027      	b.n	8007244 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f001 fcd3 	bl	8008ba4 <SDMMC_ReadFIFO>
 80071fe:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	b2da      	uxtb	r2, r3
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	3301      	adds	r3, #1
 800720c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	0a1b      	lsrs	r3, r3, #8
 8007212:	b2da      	uxtb	r2, r3
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	3301      	adds	r3, #1
 800721c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	0c1b      	lsrs	r3, r3, #16
 8007222:	b2da      	uxtb	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	3301      	adds	r3, #1
 800722c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	0e1b      	lsrs	r3, r3, #24
 8007232:	b2da      	uxtb	r2, r3
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	3301      	adds	r3, #1
 800723c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	3301      	adds	r3, #1
 8007242:	617b      	str	r3, [r7, #20]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	2b07      	cmp	r3, #7
 8007248:	d9d4      	bls.n	80071f4 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	693a      	ldr	r2, [r7, #16]
 800724e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007254:	f1a3 0220 	sub.w	r2, r3, #32
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800725c:	bf00      	nop
 800725e:	3718      	adds	r7, #24
 8007260:	46bd      	mov	sp, r7
 8007262:	bd80      	pop	{r7, pc}

08007264 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b086      	sub	sp, #24
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	2b1f      	cmp	r3, #31
 8007278:	d93a      	bls.n	80072f0 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 800727a:	2300      	movs	r3, #0
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	e02b      	b.n	80072d8 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	3301      	adds	r3, #1
 800728a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	021a      	lsls	r2, r3, #8
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
      tmp++;
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3301      	adds	r3, #1
 800729c:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	041a      	lsls	r2, r3, #16
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	3301      	adds	r3, #1
 80072ae:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	061a      	lsls	r2, r3, #24
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]
      tmp++;
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	3301      	adds	r3, #1
 80072c0:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f107 020c 	add.w	r2, r7, #12
 80072ca:	4611      	mov	r1, r2
 80072cc:	4618      	mov	r0, r3
 80072ce:	f001 fc76 	bl	8008bbe <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	3301      	adds	r3, #1
 80072d6:	617b      	str	r3, [r7, #20]
 80072d8:	697b      	ldr	r3, [r7, #20]
 80072da:	2b07      	cmp	r3, #7
 80072dc:	d9d0      	bls.n	8007280 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	693a      	ldr	r2, [r7, #16]
 80072e2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6a1b      	ldr	r3, [r3, #32]
 80072e8:	f1a3 0220 	sub.w	r2, r3, #32
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	621a      	str	r2, [r3, #32]
  }
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}

080072f8 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8007314:	bf00      	nop
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8007320:	b480      	push	{r7}
 8007322:	b083      	sub	sp, #12
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8007328:	bf00      	nop
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr

08007334 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8007334:	b480      	push	{r7}
 8007336:	b083      	sub	sp, #12
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800733c:	bf00      	nop
 800733e:	370c      	adds	r7, #12
 8007340:	46bd      	mov	sp, r7
 8007342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007346:	4770      	bx	lr

08007348 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e042      	b.n	80073e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	2b00      	cmp	r3, #0
 8007362:	d106      	bne.n	8007372 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2200      	movs	r2, #0
 8007368:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7f9 fdbf 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2224      	movs	r2, #36	; 0x24
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f022 0201 	bic.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fc88 	bl	8007ca0 <UART_SetConfig>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d101      	bne.n	800739a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007396:	2301      	movs	r3, #1
 8007398:	e022      	b.n	80073e0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 ff7c 	bl	80082a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	685a      	ldr	r2, [r3, #4]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80073b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	689a      	ldr	r2, [r3, #8]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80073c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f042 0201 	orr.w	r2, r2, #1
 80073d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f001 f803 	bl	80083e4 <UART_CheckIdleState>
 80073de:	4603      	mov	r3, r0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3708      	adds	r7, #8
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b08a      	sub	sp, #40	; 0x28
 80073ec:	af02      	add	r7, sp, #8
 80073ee:	60f8      	str	r0, [r7, #12]
 80073f0:	60b9      	str	r1, [r7, #8]
 80073f2:	603b      	str	r3, [r7, #0]
 80073f4:	4613      	mov	r3, r2
 80073f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073fe:	2b20      	cmp	r3, #32
 8007400:	d17b      	bne.n	80074fa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_UART_Transmit+0x26>
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e074      	b.n	80074fc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2200      	movs	r2, #0
 8007416:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2221      	movs	r2, #33	; 0x21
 800741e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007422:	f7f9 ffdd 	bl	80013e0 <HAL_GetTick>
 8007426:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	88fa      	ldrh	r2, [r7, #6]
 800742c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	88fa      	ldrh	r2, [r7, #6]
 8007434:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007440:	d108      	bne.n	8007454 <HAL_UART_Transmit+0x6c>
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d104      	bne.n	8007454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800744a:	2300      	movs	r3, #0
 800744c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	61bb      	str	r3, [r7, #24]
 8007452:	e003      	b.n	800745c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007458:	2300      	movs	r3, #0
 800745a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800745c:	e030      	b.n	80074c0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	697b      	ldr	r3, [r7, #20]
 8007464:	2200      	movs	r2, #0
 8007466:	2180      	movs	r1, #128	; 0x80
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f001 f865 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800746e:	4603      	mov	r3, r0
 8007470:	2b00      	cmp	r3, #0
 8007472:	d005      	beq.n	8007480 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2220      	movs	r2, #32
 8007478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800747c:	2303      	movs	r3, #3
 800747e:	e03d      	b.n	80074fc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10b      	bne.n	800749e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	881b      	ldrh	r3, [r3, #0]
 800748a:	461a      	mov	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007496:	69bb      	ldr	r3, [r7, #24]
 8007498:	3302      	adds	r3, #2
 800749a:	61bb      	str	r3, [r7, #24]
 800749c:	e007      	b.n	80074ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	781a      	ldrb	r2, [r3, #0]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	3301      	adds	r3, #1
 80074ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	3b01      	subs	r3, #1
 80074b8:	b29a      	uxth	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d1c8      	bne.n	800745e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	9300      	str	r3, [sp, #0]
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	2200      	movs	r2, #0
 80074d4:	2140      	movs	r1, #64	; 0x40
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f001 f82e 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d005      	beq.n	80074ee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e006      	b.n	80074fc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2220      	movs	r2, #32
 80074f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80074f6:	2300      	movs	r3, #0
 80074f8:	e000      	b.n	80074fc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80074fa:	2302      	movs	r3, #2
  }
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3720      	adds	r7, #32
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b08a      	sub	sp, #40	; 0x28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	4613      	mov	r3, r2
 8007510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007518:	2b20      	cmp	r3, #32
 800751a:	d167      	bne.n	80075ec <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d002      	beq.n	8007528 <HAL_UART_Transmit_DMA+0x24>
 8007522:	88fb      	ldrh	r3, [r7, #6]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007528:	2301      	movs	r3, #1
 800752a:	e060      	b.n	80075ee <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	88fa      	ldrh	r2, [r7, #6]
 800753e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2221      	movs	r2, #33	; 0x21
 800754e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007556:	2b00      	cmp	r3, #0
 8007558:	d028      	beq.n	80075ac <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800755e:	4a26      	ldr	r2, [pc, #152]	; (80075f8 <HAL_UART_Transmit_DMA+0xf4>)
 8007560:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007566:	4a25      	ldr	r2, [pc, #148]	; (80075fc <HAL_UART_Transmit_DMA+0xf8>)
 8007568:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800756e:	4a24      	ldr	r2, [pc, #144]	; (8007600 <HAL_UART_Transmit_DMA+0xfc>)
 8007570:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007576:	2200      	movs	r2, #0
 8007578:	641a      	str	r2, [r3, #64]	; 0x40

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007582:	4619      	mov	r1, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	3328      	adds	r3, #40	; 0x28
 800758a:	461a      	mov	r2, r3
 800758c:	88fb      	ldrh	r3, [r7, #6]
 800758e:	f7fa f90f 	bl	80017b0 <HAL_DMA_Start_IT>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2210      	movs	r2, #16
 800759c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2220      	movs	r2, #32
 80075a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e020      	b.n	80075ee <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2240      	movs	r2, #64	; 0x40
 80075b2:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	3308      	adds	r3, #8
 80075ba:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	e853 3f00 	ldrex	r3, [r3]
 80075c2:	613b      	str	r3, [r7, #16]
   return(result);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075ca:	627b      	str	r3, [r7, #36]	; 0x24
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3308      	adds	r3, #8
 80075d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d4:	623a      	str	r2, [r7, #32]
 80075d6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075d8:	69f9      	ldr	r1, [r7, #28]
 80075da:	6a3a      	ldr	r2, [r7, #32]
 80075dc:	e841 2300 	strex	r3, r2, [r1]
 80075e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1e5      	bne.n	80075b4 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80075e8:	2300      	movs	r3, #0
 80075ea:	e000      	b.n	80075ee <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80075ec:	2302      	movs	r3, #2
  }
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3728      	adds	r7, #40	; 0x28
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}
 80075f6:	bf00      	nop
 80075f8:	08008755 	.word	0x08008755
 80075fc:	080087ef 	.word	0x080087ef
 8007600:	0800880b 	.word	0x0800880b

08007604 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b0ba      	sub	sp, #232	; 0xe8
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	69db      	ldr	r3, [r3, #28]
 8007612:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800762a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800762e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007632:	4013      	ands	r3, r2
 8007634:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007638:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d11b      	bne.n	8007678 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007640:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007644:	f003 0320 	and.w	r3, r3, #32
 8007648:	2b00      	cmp	r3, #0
 800764a:	d015      	beq.n	8007678 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800764c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007650:	f003 0320 	and.w	r3, r3, #32
 8007654:	2b00      	cmp	r3, #0
 8007656:	d105      	bne.n	8007664 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800765c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 82e3 	beq.w	8007c34 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	4798      	blx	r3
      }
      return;
 8007676:	e2dd      	b.n	8007c34 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007678:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8123 	beq.w	80078c8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007682:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007686:	4b8d      	ldr	r3, [pc, #564]	; (80078bc <HAL_UART_IRQHandler+0x2b8>)
 8007688:	4013      	ands	r3, r2
 800768a:	2b00      	cmp	r3, #0
 800768c:	d106      	bne.n	800769c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800768e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007692:	4b8b      	ldr	r3, [pc, #556]	; (80078c0 <HAL_UART_IRQHandler+0x2bc>)
 8007694:	4013      	ands	r3, r2
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8116 	beq.w	80078c8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076a0:	f003 0301 	and.w	r3, r3, #1
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d011      	beq.n	80076cc <HAL_UART_IRQHandler+0xc8>
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d00b      	beq.n	80076cc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2201      	movs	r2, #1
 80076ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f043 0201 	orr.w	r2, r3, #1
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076d0:	f003 0302 	and.w	r3, r3, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d011      	beq.n	80076fc <HAL_UART_IRQHandler+0xf8>
 80076d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80076dc:	f003 0301 	and.w	r3, r3, #1
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00b      	beq.n	80076fc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	2202      	movs	r2, #2
 80076ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076f2:	f043 0204 	orr.w	r2, r3, #4
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d011      	beq.n	800772c <HAL_UART_IRQHandler+0x128>
 8007708:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800770c:	f003 0301 	and.w	r3, r3, #1
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00b      	beq.n	800772c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	2204      	movs	r2, #4
 800771a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007722:	f043 0202 	orr.w	r2, r3, #2
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800772c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007730:	f003 0308 	and.w	r3, r3, #8
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773c:	f003 0320 	and.w	r3, r3, #32
 8007740:	2b00      	cmp	r3, #0
 8007742:	d105      	bne.n	8007750 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007744:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007748:	4b5c      	ldr	r3, [pc, #368]	; (80078bc <HAL_UART_IRQHandler+0x2b8>)
 800774a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800774c:	2b00      	cmp	r3, #0
 800774e:	d00b      	beq.n	8007768 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	2208      	movs	r2, #8
 8007756:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800775e:	f043 0208 	orr.w	r2, r3, #8
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007768:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800776c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007770:	2b00      	cmp	r3, #0
 8007772:	d012      	beq.n	800779a <HAL_UART_IRQHandler+0x196>
 8007774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00c      	beq.n	800779a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007788:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007790:	f043 0220 	orr.w	r2, r3, #32
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	f000 8249 	beq.w	8007c38 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077aa:	f003 0320 	and.w	r3, r3, #32
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d013      	beq.n	80077da <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077b6:	f003 0320 	and.w	r3, r3, #32
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d105      	bne.n	80077ca <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d003      	beq.n	80077da <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d005      	beq.n	80077fe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80077f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d054      	beq.n	80078a8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 ff42 	bl	8008688 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800780e:	2b40      	cmp	r3, #64	; 0x40
 8007810:	d146      	bne.n	80078a0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	3308      	adds	r3, #8
 8007818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800781c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007820:	e853 3f00 	ldrex	r3, [r3]
 8007824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800782c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	3308      	adds	r3, #8
 800783a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800783e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800784a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800784e:	e841 2300 	strex	r3, r2, [r1]
 8007852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d1d9      	bne.n	8007812 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007864:	2b00      	cmp	r3, #0
 8007866:	d017      	beq.n	8007898 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <HAL_UART_IRQHandler+0x2c0>)
 8007870:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007878:	4618      	mov	r0, r3
 800787a:	f7fa f870 	bl	800195e <HAL_DMA_Abort_IT>
 800787e:	4603      	mov	r3, r0
 8007880:	2b00      	cmp	r3, #0
 8007882:	d019      	beq.n	80078b8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800788a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788c:	687a      	ldr	r2, [r7, #4]
 800788e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8007892:	4610      	mov	r0, r2
 8007894:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007896:	e00f      	b.n	80078b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007898:	6878      	ldr	r0, [r7, #4]
 800789a:	f000 f9eb 	bl	8007c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800789e:	e00b      	b.n	80078b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	f000 f9e7 	bl	8007c74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a6:	e007      	b.n	80078b8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 f9e3 	bl	8007c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	2200      	movs	r2, #0
 80078b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80078b6:	e1bf      	b.n	8007c38 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b8:	bf00      	nop
    return;
 80078ba:	e1bd      	b.n	8007c38 <HAL_UART_IRQHandler+0x634>
 80078bc:	10000001 	.word	0x10000001
 80078c0:	04000120 	.word	0x04000120
 80078c4:	0800888b 	.word	0x0800888b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	f040 8153 	bne.w	8007b78 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d6:	f003 0310 	and.w	r3, r3, #16
 80078da:	2b00      	cmp	r3, #0
 80078dc:	f000 814c 	beq.w	8007b78 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e4:	f003 0310 	and.w	r3, r3, #16
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	f000 8145 	beq.w	8007b78 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	2210      	movs	r2, #16
 80078f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007900:	2b40      	cmp	r3, #64	; 0x40
 8007902:	f040 80bb 	bne.w	8007a7c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 818f 	beq.w	8007c3c <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007924:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007928:	429a      	cmp	r2, r3
 800792a:	f080 8187 	bcs.w	8007c3c <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007934:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f003 0320 	and.w	r3, r3, #32
 8007946:	2b00      	cmp	r3, #0
 8007948:	f040 8087 	bne.w	8007a5a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007960:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	461a      	mov	r2, r3
 8007972:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007976:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800797a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007982:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800798e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1da      	bne.n	800794c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3308      	adds	r3, #8
 800799c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079a0:	e853 3f00 	ldrex	r3, [r3]
 80079a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	3308      	adds	r3, #8
 80079b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079c6:	e841 2300 	strex	r3, r2, [r1]
 80079ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1e1      	bne.n	8007996 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	3308      	adds	r3, #8
 80079d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	3308      	adds	r3, #8
 80079f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80079f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80079f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80079fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a04:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e3      	bne.n	80079d2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a20:	e853 3f00 	ldrex	r3, [r3]
 8007a24:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a28:	f023 0310 	bic.w	r3, r3, #16
 8007a2c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	461a      	mov	r2, r3
 8007a36:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a3a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a3c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a40:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a42:	e841 2300 	strex	r3, r2, [r1]
 8007a46:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d1e4      	bne.n	8007a18 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7f9 ff26 	bl	80018a6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2202      	movs	r2, #2
 8007a5e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a6c:	b29b      	uxth	r3, r3
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f000 f907 	bl	8007c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a7a:	e0df      	b.n	8007c3c <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a88:	b29b      	uxth	r3, r3
 8007a8a:	1ad3      	subs	r3, r2, r3
 8007a8c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f000 80d1 	beq.w	8007c40 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007a9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 80cc 	beq.w	8007c40 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ab8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007abc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	461a      	mov	r2, r3
 8007ac6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007aca:	647b      	str	r3, [r7, #68]	; 0x44
 8007acc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ad0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ad8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e4      	bne.n	8007aa8 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	623b      	str	r3, [r7, #32]
   return(result);
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007af4:	f023 0301 	bic.w	r3, r3, #1
 8007af8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	3308      	adds	r3, #8
 8007b02:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b06:	633a      	str	r2, [r7, #48]	; 0x30
 8007b08:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e1      	bne.n	8007ade <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b34:	693b      	ldr	r3, [r7, #16]
 8007b36:	e853 3f00 	ldrex	r3, [r3]
 8007b3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f023 0310 	bic.w	r3, r3, #16
 8007b42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b50:	61fb      	str	r3, [r7, #28]
 8007b52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b54:	69b9      	ldr	r1, [r7, #24]
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	e841 2300 	strex	r3, r2, [r1]
 8007b5c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d1e4      	bne.n	8007b2e <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2202      	movs	r2, #2
 8007b68:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b6a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 f889 	bl	8007c88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b76:	e063      	b.n	8007c40 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d00e      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x59e>
 8007b84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d008      	beq.n	8007ba2 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b98:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 feb6 	bl	800890c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ba0:	e051      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007ba2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d014      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d008      	beq.n	8007bd8 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d03a      	beq.n	8007c44 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	4798      	blx	r3
    }
    return;
 8007bd6:	e035      	b.n	8007c44 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d009      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x5f4>
 8007be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f000 fe60 	bl	80088b6 <UART_EndTransmit_IT>
    return;
 8007bf6:	e026      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bfc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d009      	beq.n	8007c18 <HAL_UART_IRQHandler+0x614>
 8007c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d003      	beq.n	8007c18 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fe8f 	bl	8008934 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c16:	e016      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d010      	beq.n	8007c46 <HAL_UART_IRQHandler+0x642>
 8007c24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	da0c      	bge.n	8007c46 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f000 fe77 	bl	8008920 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c32:	e008      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
      return;
 8007c34:	bf00      	nop
 8007c36:	e006      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
    return;
 8007c38:	bf00      	nop
 8007c3a:	e004      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
      return;
 8007c3c:	bf00      	nop
 8007c3e:	e002      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
      return;
 8007c40:	bf00      	nop
 8007c42:	e000      	b.n	8007c46 <HAL_UART_IRQHandler+0x642>
    return;
 8007c44:	bf00      	nop
  }
}
 8007c46:	37e8      	adds	r7, #232	; 0xe8
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b083      	sub	sp, #12
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c54:	bf00      	nop
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr

08007c60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b083      	sub	sp, #12
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr

08007c74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c74:	b480      	push	{r7}
 8007c76:	b083      	sub	sp, #12
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
 8007c90:	460b      	mov	r3, r1
 8007c92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca4:	b08c      	sub	sp, #48	; 0x30
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007caa:	2300      	movs	r3, #0
 8007cac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	689a      	ldr	r2, [r3, #8]
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	691b      	ldr	r3, [r3, #16]
 8007cb8:	431a      	orrs	r2, r3
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	69db      	ldr	r3, [r3, #28]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cc8:	697b      	ldr	r3, [r7, #20]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4baa      	ldr	r3, [pc, #680]	; (8007f78 <UART_SetConfig+0x2d8>)
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	697a      	ldr	r2, [r7, #20]
 8007cd4:	6812      	ldr	r2, [r2, #0]
 8007cd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd8:	430b      	orrs	r3, r1
 8007cda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	685b      	ldr	r3, [r3, #4]
 8007ce2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	68da      	ldr	r2, [r3, #12]
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	430a      	orrs	r2, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	699b      	ldr	r3, [r3, #24]
 8007cf6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a9f      	ldr	r2, [pc, #636]	; (8007f7c <UART_SetConfig+0x2dc>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d004      	beq.n	8007d0c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6a1b      	ldr	r3, [r3, #32]
 8007d06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d16:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d1a:	697a      	ldr	r2, [r7, #20]
 8007d1c:	6812      	ldr	r2, [r2, #0]
 8007d1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d20:	430b      	orrs	r3, r1
 8007d22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d2a:	f023 010f 	bic.w	r1, r3, #15
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4a90      	ldr	r2, [pc, #576]	; (8007f80 <UART_SetConfig+0x2e0>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d125      	bne.n	8007d90 <UART_SetConfig+0xf0>
 8007d44:	4b8f      	ldr	r3, [pc, #572]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4a:	f003 0303 	and.w	r3, r3, #3
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d81a      	bhi.n	8007d88 <UART_SetConfig+0xe8>
 8007d52:	a201      	add	r2, pc, #4	; (adr r2, 8007d58 <UART_SetConfig+0xb8>)
 8007d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d81 	.word	0x08007d81
 8007d68:	2301      	movs	r3, #1
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e116      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007d70:	2302      	movs	r3, #2
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e112      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007d78:	2304      	movs	r3, #4
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e10e      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007d80:	2308      	movs	r3, #8
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e10a      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007d88:	2310      	movs	r3, #16
 8007d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d8e:	e106      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7c      	ldr	r2, [pc, #496]	; (8007f88 <UART_SetConfig+0x2e8>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d138      	bne.n	8007e0c <UART_SetConfig+0x16c>
 8007d9a:	4b7a      	ldr	r3, [pc, #488]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007da0:	f003 030c 	and.w	r3, r3, #12
 8007da4:	2b0c      	cmp	r3, #12
 8007da6:	d82d      	bhi.n	8007e04 <UART_SetConfig+0x164>
 8007da8:	a201      	add	r2, pc, #4	; (adr r2, 8007db0 <UART_SetConfig+0x110>)
 8007daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dae:	bf00      	nop
 8007db0:	08007de5 	.word	0x08007de5
 8007db4:	08007e05 	.word	0x08007e05
 8007db8:	08007e05 	.word	0x08007e05
 8007dbc:	08007e05 	.word	0x08007e05
 8007dc0:	08007df5 	.word	0x08007df5
 8007dc4:	08007e05 	.word	0x08007e05
 8007dc8:	08007e05 	.word	0x08007e05
 8007dcc:	08007e05 	.word	0x08007e05
 8007dd0:	08007ded 	.word	0x08007ded
 8007dd4:	08007e05 	.word	0x08007e05
 8007dd8:	08007e05 	.word	0x08007e05
 8007ddc:	08007e05 	.word	0x08007e05
 8007de0:	08007dfd 	.word	0x08007dfd
 8007de4:	2300      	movs	r3, #0
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e0d8      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007dec:	2302      	movs	r3, #2
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e0d4      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007df4:	2304      	movs	r3, #4
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	e0d0      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007dfc:	2308      	movs	r3, #8
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e02:	e0cc      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e04:	2310      	movs	r3, #16
 8007e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e0a:	e0c8      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a5e      	ldr	r2, [pc, #376]	; (8007f8c <UART_SetConfig+0x2ec>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d125      	bne.n	8007e62 <UART_SetConfig+0x1c2>
 8007e16:	4b5b      	ldr	r3, [pc, #364]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007e18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e1c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e20:	2b30      	cmp	r3, #48	; 0x30
 8007e22:	d016      	beq.n	8007e52 <UART_SetConfig+0x1b2>
 8007e24:	2b30      	cmp	r3, #48	; 0x30
 8007e26:	d818      	bhi.n	8007e5a <UART_SetConfig+0x1ba>
 8007e28:	2b20      	cmp	r3, #32
 8007e2a:	d00a      	beq.n	8007e42 <UART_SetConfig+0x1a2>
 8007e2c:	2b20      	cmp	r3, #32
 8007e2e:	d814      	bhi.n	8007e5a <UART_SetConfig+0x1ba>
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d002      	beq.n	8007e3a <UART_SetConfig+0x19a>
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	d008      	beq.n	8007e4a <UART_SetConfig+0x1aa>
 8007e38:	e00f      	b.n	8007e5a <UART_SetConfig+0x1ba>
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e40:	e0ad      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e42:	2302      	movs	r3, #2
 8007e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e48:	e0a9      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e4a:	2304      	movs	r3, #4
 8007e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e50:	e0a5      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e52:	2308      	movs	r3, #8
 8007e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e58:	e0a1      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e5a:	2310      	movs	r3, #16
 8007e5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e60:	e09d      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a4a      	ldr	r2, [pc, #296]	; (8007f90 <UART_SetConfig+0x2f0>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d125      	bne.n	8007eb8 <UART_SetConfig+0x218>
 8007e6c:	4b45      	ldr	r3, [pc, #276]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e76:	2bc0      	cmp	r3, #192	; 0xc0
 8007e78:	d016      	beq.n	8007ea8 <UART_SetConfig+0x208>
 8007e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8007e7c:	d818      	bhi.n	8007eb0 <UART_SetConfig+0x210>
 8007e7e:	2b80      	cmp	r3, #128	; 0x80
 8007e80:	d00a      	beq.n	8007e98 <UART_SetConfig+0x1f8>
 8007e82:	2b80      	cmp	r3, #128	; 0x80
 8007e84:	d814      	bhi.n	8007eb0 <UART_SetConfig+0x210>
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d002      	beq.n	8007e90 <UART_SetConfig+0x1f0>
 8007e8a:	2b40      	cmp	r3, #64	; 0x40
 8007e8c:	d008      	beq.n	8007ea0 <UART_SetConfig+0x200>
 8007e8e:	e00f      	b.n	8007eb0 <UART_SetConfig+0x210>
 8007e90:	2300      	movs	r3, #0
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e96:	e082      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007e98:	2302      	movs	r3, #2
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e07e      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007ea0:	2304      	movs	r3, #4
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e07a      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007ea8:	2308      	movs	r3, #8
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eae:	e076      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007eb0:	2310      	movs	r3, #16
 8007eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eb6:	e072      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a35      	ldr	r2, [pc, #212]	; (8007f94 <UART_SetConfig+0x2f4>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d12a      	bne.n	8007f18 <UART_SetConfig+0x278>
 8007ec2:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed0:	d01a      	beq.n	8007f08 <UART_SetConfig+0x268>
 8007ed2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ed6:	d81b      	bhi.n	8007f10 <UART_SetConfig+0x270>
 8007ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007edc:	d00c      	beq.n	8007ef8 <UART_SetConfig+0x258>
 8007ede:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ee2:	d815      	bhi.n	8007f10 <UART_SetConfig+0x270>
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <UART_SetConfig+0x250>
 8007ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007eec:	d008      	beq.n	8007f00 <UART_SetConfig+0x260>
 8007eee:	e00f      	b.n	8007f10 <UART_SetConfig+0x270>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e052      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007ef8:	2302      	movs	r3, #2
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e04e      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f00:	2304      	movs	r3, #4
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e04a      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f08:	2308      	movs	r3, #8
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	e046      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f10:	2310      	movs	r3, #16
 8007f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f16:	e042      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4a17      	ldr	r2, [pc, #92]	; (8007f7c <UART_SetConfig+0x2dc>)
 8007f1e:	4293      	cmp	r3, r2
 8007f20:	d13a      	bne.n	8007f98 <UART_SetConfig+0x2f8>
 8007f22:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <UART_SetConfig+0x2e4>)
 8007f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f2c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f30:	d01a      	beq.n	8007f68 <UART_SetConfig+0x2c8>
 8007f32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f36:	d81b      	bhi.n	8007f70 <UART_SetConfig+0x2d0>
 8007f38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f3c:	d00c      	beq.n	8007f58 <UART_SetConfig+0x2b8>
 8007f3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f42:	d815      	bhi.n	8007f70 <UART_SetConfig+0x2d0>
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <UART_SetConfig+0x2b0>
 8007f48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4c:	d008      	beq.n	8007f60 <UART_SetConfig+0x2c0>
 8007f4e:	e00f      	b.n	8007f70 <UART_SetConfig+0x2d0>
 8007f50:	2300      	movs	r3, #0
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f56:	e022      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f58:	2302      	movs	r3, #2
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5e:	e01e      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f66:	e01a      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6e:	e016      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f76:	e012      	b.n	8007f9e <UART_SetConfig+0x2fe>
 8007f78:	cfff69f3 	.word	0xcfff69f3
 8007f7c:	40008000 	.word	0x40008000
 8007f80:	40013800 	.word	0x40013800
 8007f84:	40021000 	.word	0x40021000
 8007f88:	40004400 	.word	0x40004400
 8007f8c:	40004800 	.word	0x40004800
 8007f90:	40004c00 	.word	0x40004c00
 8007f94:	40005000 	.word	0x40005000
 8007f98:	2310      	movs	r3, #16
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	4ab0      	ldr	r2, [pc, #704]	; (8008264 <UART_SetConfig+0x5c4>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	f040 809b 	bne.w	80080e0 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007faa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d827      	bhi.n	8008002 <UART_SetConfig+0x362>
 8007fb2:	a201      	add	r2, pc, #4	; (adr r2, 8007fb8 <UART_SetConfig+0x318>)
 8007fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	08008003 	.word	0x08008003
 8007fc8:	08007ff3 	.word	0x08007ff3
 8007fcc:	08008003 	.word	0x08008003
 8007fd0:	08008003 	.word	0x08008003
 8007fd4:	08008003 	.word	0x08008003
 8007fd8:	08007ffb 	.word	0x08007ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fdc:	f7fb faba 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8007fe0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe2:	e014      	b.n	800800e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007fe4:	f7fb faca 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8007fe8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fea:	e010      	b.n	800800e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fec:	4b9e      	ldr	r3, [pc, #632]	; (8008268 <UART_SetConfig+0x5c8>)
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e00d      	b.n	800800e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff2:	f7fb f9fd 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8007ff6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007ff8:	e009      	b.n	800800e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007ffe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008000:	e005      	b.n	800800e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008002:	2300      	movs	r3, #0
 8008004:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800800c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	f000 8130 	beq.w	8008276 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	4a94      	ldr	r2, [pc, #592]	; (800826c <UART_SetConfig+0x5cc>)
 800801c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008020:	461a      	mov	r2, r3
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	fbb3 f3f2 	udiv	r3, r3, r2
 8008028:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	685a      	ldr	r2, [r3, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	005b      	lsls	r3, r3, #1
 8008032:	4413      	add	r3, r2
 8008034:	69ba      	ldr	r2, [r7, #24]
 8008036:	429a      	cmp	r2, r3
 8008038:	d305      	bcc.n	8008046 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008040:	69ba      	ldr	r2, [r7, #24]
 8008042:	429a      	cmp	r2, r3
 8008044:	d903      	bls.n	800804e <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800804c:	e113      	b.n	8008276 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800804e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008050:	2200      	movs	r2, #0
 8008052:	60bb      	str	r3, [r7, #8]
 8008054:	60fa      	str	r2, [r7, #12]
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800805a:	4a84      	ldr	r2, [pc, #528]	; (800826c <UART_SetConfig+0x5cc>)
 800805c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008060:	b29b      	uxth	r3, r3
 8008062:	2200      	movs	r2, #0
 8008064:	603b      	str	r3, [r7, #0]
 8008066:	607a      	str	r2, [r7, #4]
 8008068:	e9d7 2300 	ldrd	r2, r3, [r7]
 800806c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008070:	f7f8 f8e8 	bl	8000244 <__aeabi_uldivmod>
 8008074:	4602      	mov	r2, r0
 8008076:	460b      	mov	r3, r1
 8008078:	4610      	mov	r0, r2
 800807a:	4619      	mov	r1, r3
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	020b      	lsls	r3, r1, #8
 8008086:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800808a:	0202      	lsls	r2, r0, #8
 800808c:	6979      	ldr	r1, [r7, #20]
 800808e:	6849      	ldr	r1, [r1, #4]
 8008090:	0849      	lsrs	r1, r1, #1
 8008092:	2000      	movs	r0, #0
 8008094:	460c      	mov	r4, r1
 8008096:	4605      	mov	r5, r0
 8008098:	eb12 0804 	adds.w	r8, r2, r4
 800809c:	eb43 0905 	adc.w	r9, r3, r5
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	685b      	ldr	r3, [r3, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	469a      	mov	sl, r3
 80080a8:	4693      	mov	fp, r2
 80080aa:	4652      	mov	r2, sl
 80080ac:	465b      	mov	r3, fp
 80080ae:	4640      	mov	r0, r8
 80080b0:	4649      	mov	r1, r9
 80080b2:	f7f8 f8c7 	bl	8000244 <__aeabi_uldivmod>
 80080b6:	4602      	mov	r2, r0
 80080b8:	460b      	mov	r3, r1
 80080ba:	4613      	mov	r3, r2
 80080bc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080c4:	d308      	bcc.n	80080d8 <UART_SetConfig+0x438>
 80080c6:	6a3b      	ldr	r3, [r7, #32]
 80080c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080cc:	d204      	bcs.n	80080d8 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80080ce:	697b      	ldr	r3, [r7, #20]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	6a3a      	ldr	r2, [r7, #32]
 80080d4:	60da      	str	r2, [r3, #12]
 80080d6:	e0ce      	b.n	8008276 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80080d8:	2301      	movs	r3, #1
 80080da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080de:	e0ca      	b.n	8008276 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080e0:	697b      	ldr	r3, [r7, #20]
 80080e2:	69db      	ldr	r3, [r3, #28]
 80080e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e8:	d166      	bne.n	80081b8 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80080ea:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080ee:	2b08      	cmp	r3, #8
 80080f0:	d827      	bhi.n	8008142 <UART_SetConfig+0x4a2>
 80080f2:	a201      	add	r2, pc, #4	; (adr r2, 80080f8 <UART_SetConfig+0x458>)
 80080f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f8:	0800811d 	.word	0x0800811d
 80080fc:	08008125 	.word	0x08008125
 8008100:	0800812d 	.word	0x0800812d
 8008104:	08008143 	.word	0x08008143
 8008108:	08008133 	.word	0x08008133
 800810c:	08008143 	.word	0x08008143
 8008110:	08008143 	.word	0x08008143
 8008114:	08008143 	.word	0x08008143
 8008118:	0800813b 	.word	0x0800813b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800811c:	f7fb fa1a 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 8008120:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008122:	e014      	b.n	800814e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008124:	f7fb fa2a 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8008128:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800812a:	e010      	b.n	800814e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800812c:	4b4e      	ldr	r3, [pc, #312]	; (8008268 <UART_SetConfig+0x5c8>)
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008130:	e00d      	b.n	800814e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008132:	f7fb f95d 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8008136:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008138:	e009      	b.n	800814e <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800813a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800813e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008140:	e005      	b.n	800814e <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800814c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800814e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008150:	2b00      	cmp	r3, #0
 8008152:	f000 8090 	beq.w	8008276 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800815a:	4a44      	ldr	r2, [pc, #272]	; (800826c <UART_SetConfig+0x5cc>)
 800815c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008160:	461a      	mov	r2, r3
 8008162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008164:	fbb3 f3f2 	udiv	r3, r3, r2
 8008168:	005a      	lsls	r2, r3, #1
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	085b      	lsrs	r3, r3, #1
 8008170:	441a      	add	r2, r3
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	fbb2 f3f3 	udiv	r3, r2, r3
 800817a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800817c:	6a3b      	ldr	r3, [r7, #32]
 800817e:	2b0f      	cmp	r3, #15
 8008180:	d916      	bls.n	80081b0 <UART_SetConfig+0x510>
 8008182:	6a3b      	ldr	r3, [r7, #32]
 8008184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008188:	d212      	bcs.n	80081b0 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800818a:	6a3b      	ldr	r3, [r7, #32]
 800818c:	b29b      	uxth	r3, r3
 800818e:	f023 030f 	bic.w	r3, r3, #15
 8008192:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	085b      	lsrs	r3, r3, #1
 8008198:	b29b      	uxth	r3, r3
 800819a:	f003 0307 	and.w	r3, r3, #7
 800819e:	b29a      	uxth	r2, r3
 80081a0:	8bfb      	ldrh	r3, [r7, #30]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	8bfa      	ldrh	r2, [r7, #30]
 80081ac:	60da      	str	r2, [r3, #12]
 80081ae:	e062      	b.n	8008276 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 80081b0:	2301      	movs	r3, #1
 80081b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081b6:	e05e      	b.n	8008276 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081bc:	2b08      	cmp	r3, #8
 80081be:	d828      	bhi.n	8008212 <UART_SetConfig+0x572>
 80081c0:	a201      	add	r2, pc, #4	; (adr r2, 80081c8 <UART_SetConfig+0x528>)
 80081c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c6:	bf00      	nop
 80081c8:	080081ed 	.word	0x080081ed
 80081cc:	080081f5 	.word	0x080081f5
 80081d0:	080081fd 	.word	0x080081fd
 80081d4:	08008213 	.word	0x08008213
 80081d8:	08008203 	.word	0x08008203
 80081dc:	08008213 	.word	0x08008213
 80081e0:	08008213 	.word	0x08008213
 80081e4:	08008213 	.word	0x08008213
 80081e8:	0800820b 	.word	0x0800820b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ec:	f7fb f9b2 	bl	8003554 <HAL_RCC_GetPCLK1Freq>
 80081f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f2:	e014      	b.n	800821e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081f4:	f7fb f9c2 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 80081f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081fa:	e010      	b.n	800821e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081fc:	4b1a      	ldr	r3, [pc, #104]	; (8008268 <UART_SetConfig+0x5c8>)
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008200:	e00d      	b.n	800821e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008202:	f7fb f8f5 	bl	80033f0 <HAL_RCC_GetSysClockFreq>
 8008206:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008208:	e009      	b.n	800821e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800820a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800820e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008210:	e005      	b.n	800821e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8008212:	2300      	movs	r3, #0
 8008214:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008216:	2301      	movs	r3, #1
 8008218:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800821c:	bf00      	nop
    }

    if (pclk != 0U)
 800821e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008220:	2b00      	cmp	r3, #0
 8008222:	d028      	beq.n	8008276 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008228:	4a10      	ldr	r2, [pc, #64]	; (800826c <UART_SetConfig+0x5cc>)
 800822a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800822e:	461a      	mov	r2, r3
 8008230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008232:	fbb3 f2f2 	udiv	r2, r3, r2
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	085b      	lsrs	r3, r3, #1
 800823c:	441a      	add	r2, r3
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	fbb2 f3f3 	udiv	r3, r2, r3
 8008246:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b0f      	cmp	r3, #15
 800824c:	d910      	bls.n	8008270 <UART_SetConfig+0x5d0>
 800824e:	6a3b      	ldr	r3, [r7, #32]
 8008250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008254:	d20c      	bcs.n	8008270 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008256:	6a3b      	ldr	r3, [r7, #32]
 8008258:	b29a      	uxth	r2, r3
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	60da      	str	r2, [r3, #12]
 8008260:	e009      	b.n	8008276 <UART_SetConfig+0x5d6>
 8008262:	bf00      	nop
 8008264:	40008000 	.word	0x40008000
 8008268:	00f42400 	.word	0x00f42400
 800826c:	0800e944 	.word	0x0800e944
      }
      else
      {
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2201      	movs	r2, #1
 800827a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2201      	movs	r2, #1
 8008282:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008286:	697b      	ldr	r3, [r7, #20]
 8008288:	2200      	movs	r2, #0
 800828a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8008292:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008296:	4618      	mov	r0, r3
 8008298:	3730      	adds	r7, #48	; 0x30
 800829a:	46bd      	mov	sp, r7
 800829c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080082a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ac:	f003 0301 	and.w	r3, r3, #1
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00a      	beq.n	80082ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	685b      	ldr	r3, [r3, #4]
 80082ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	430a      	orrs	r2, r1
 80082c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ce:	f003 0302 	and.w	r3, r3, #2
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d00a      	beq.n	80082ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	430a      	orrs	r2, r1
 80082ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082f0:	f003 0304 	and.w	r3, r3, #4
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d00a      	beq.n	800830e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	430a      	orrs	r2, r1
 800830c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008312:	f003 0308 	and.w	r3, r3, #8
 8008316:	2b00      	cmp	r3, #0
 8008318:	d00a      	beq.n	8008330 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	430a      	orrs	r2, r1
 800832e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00a      	beq.n	8008352 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	430a      	orrs	r2, r1
 8008350:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	f003 0320 	and.w	r3, r3, #32
 800835a:	2b00      	cmp	r3, #0
 800835c:	d00a      	beq.n	8008374 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	430a      	orrs	r2, r1
 8008372:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008378:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800837c:	2b00      	cmp	r3, #0
 800837e:	d01a      	beq.n	80083b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	430a      	orrs	r2, r1
 8008394:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800839a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800839e:	d10a      	bne.n	80083b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00a      	beq.n	80083d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	430a      	orrs	r2, r1
 80083d6:	605a      	str	r2, [r3, #4]
  }
}
 80083d8:	bf00      	nop
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr

080083e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b098      	sub	sp, #96	; 0x60
 80083e8:	af02      	add	r7, sp, #8
 80083ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083f4:	f7f8 fff4 	bl	80013e0 <HAL_GetTick>
 80083f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f003 0308 	and.w	r3, r3, #8
 8008404:	2b08      	cmp	r3, #8
 8008406:	d12f      	bne.n	8008468 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800840c:	9300      	str	r3, [sp, #0]
 800840e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008410:	2200      	movs	r2, #0
 8008412:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008416:	6878      	ldr	r0, [r7, #4]
 8008418:	f000 f88e 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800841c:	4603      	mov	r3, r0
 800841e:	2b00      	cmp	r3, #0
 8008420:	d022      	beq.n	8008468 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008432:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008436:	653b      	str	r3, [r7, #80]	; 0x50
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	461a      	mov	r2, r3
 800843e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008440:	647b      	str	r3, [r7, #68]	; 0x44
 8008442:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008444:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008446:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008448:	e841 2300 	strex	r3, r2, [r1]
 800844c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800844e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1e6      	bne.n	8008422 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2200      	movs	r2, #0
 8008460:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008464:	2303      	movs	r3, #3
 8008466:	e063      	b.n	8008530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f003 0304 	and.w	r3, r3, #4
 8008472:	2b04      	cmp	r3, #4
 8008474:	d149      	bne.n	800850a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008476:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800847a:	9300      	str	r3, [sp, #0]
 800847c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800847e:	2200      	movs	r2, #0
 8008480:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f000 f857 	bl	8008538 <UART_WaitOnFlagUntilTimeout>
 800848a:	4603      	mov	r3, r0
 800848c:	2b00      	cmp	r3, #0
 800848e:	d03c      	beq.n	800850a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	e853 3f00 	ldrex	r3, [r3]
 800849c:	623b      	str	r3, [r7, #32]
   return(result);
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ae:	633b      	str	r3, [r7, #48]	; 0x30
 80084b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80084b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b6:	e841 2300 	strex	r3, r2, [r1]
 80084ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80084bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d1e6      	bne.n	8008490 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	3308      	adds	r3, #8
 80084c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	e853 3f00 	ldrex	r3, [r3]
 80084d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f023 0301 	bic.w	r3, r3, #1
 80084d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	3308      	adds	r3, #8
 80084e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084e2:	61fa      	str	r2, [r7, #28]
 80084e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e6:	69b9      	ldr	r1, [r7, #24]
 80084e8:	69fa      	ldr	r2, [r7, #28]
 80084ea:	e841 2300 	strex	r3, r2, [r1]
 80084ee:	617b      	str	r3, [r7, #20]
   return(result);
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d1e5      	bne.n	80084c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	2220      	movs	r2, #32
 80084fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008506:	2303      	movs	r3, #3
 8008508:	e012      	b.n	8008530 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2220      	movs	r2, #32
 8008516:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3758      	adds	r7, #88	; 0x58
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	60f8      	str	r0, [r7, #12]
 8008540:	60b9      	str	r1, [r7, #8]
 8008542:	603b      	str	r3, [r7, #0]
 8008544:	4613      	mov	r3, r2
 8008546:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008548:	e049      	b.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800854a:	69bb      	ldr	r3, [r7, #24]
 800854c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008550:	d045      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008552:	f7f8 ff45 	bl	80013e0 <HAL_GetTick>
 8008556:	4602      	mov	r2, r0
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	1ad3      	subs	r3, r2, r3
 800855c:	69ba      	ldr	r2, [r7, #24]
 800855e:	429a      	cmp	r2, r3
 8008560:	d302      	bcc.n	8008568 <UART_WaitOnFlagUntilTimeout+0x30>
 8008562:	69bb      	ldr	r3, [r7, #24]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008568:	2303      	movs	r3, #3
 800856a:	e048      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0304 	and.w	r3, r3, #4
 8008576:	2b00      	cmp	r3, #0
 8008578:	d031      	beq.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	69db      	ldr	r3, [r3, #28]
 8008580:	f003 0308 	and.w	r3, r3, #8
 8008584:	2b08      	cmp	r3, #8
 8008586:	d110      	bne.n	80085aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2208      	movs	r2, #8
 800858e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f000 f879 	bl	8008688 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2208      	movs	r2, #8
 800859a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	e029      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085b8:	d111      	bne.n	80085de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f85f 	bl	8008688 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80085da:	2303      	movs	r3, #3
 80085dc:	e00f      	b.n	80085fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69da      	ldr	r2, [r3, #28]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	4013      	ands	r3, r2
 80085e8:	68ba      	ldr	r2, [r7, #8]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	bf0c      	ite	eq
 80085ee:	2301      	moveq	r3, #1
 80085f0:	2300      	movne	r3, #0
 80085f2:	b2db      	uxtb	r3, r3
 80085f4:	461a      	mov	r2, r3
 80085f6:	79fb      	ldrb	r3, [r7, #7]
 80085f8:	429a      	cmp	r2, r3
 80085fa:	d0a6      	beq.n	800854a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085fc:	2300      	movs	r3, #0
}
 80085fe:	4618      	mov	r0, r3
 8008600:	3710      	adds	r7, #16
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}

08008606 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008606:	b480      	push	{r7}
 8008608:	b08f      	sub	sp, #60	; 0x3c
 800860a:	af00      	add	r7, sp, #0
 800860c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008614:	6a3b      	ldr	r3, [r7, #32]
 8008616:	e853 3f00 	ldrex	r3, [r3]
 800861a:	61fb      	str	r3, [r7, #28]
   return(result);
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008622:	637b      	str	r3, [r7, #52]	; 0x34
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	461a      	mov	r2, r3
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800862e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008632:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008634:	e841 2300 	strex	r3, r2, [r1]
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863c:	2b00      	cmp	r3, #0
 800863e:	d1e6      	bne.n	800860e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	3308      	adds	r3, #8
 8008646:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	e853 3f00 	ldrex	r3, [r3]
 800864e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008656:	633b      	str	r3, [r7, #48]	; 0x30
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008660:	61ba      	str	r2, [r7, #24]
 8008662:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008664:	6979      	ldr	r1, [r7, #20]
 8008666:	69ba      	ldr	r2, [r7, #24]
 8008668:	e841 2300 	strex	r3, r2, [r1]
 800866c:	613b      	str	r3, [r7, #16]
   return(result);
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d1e5      	bne.n	8008640 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2220      	movs	r2, #32
 8008678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800867c:	bf00      	nop
 800867e:	373c      	adds	r7, #60	; 0x3c
 8008680:	46bd      	mov	sp, r7
 8008682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008686:	4770      	bx	lr

08008688 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008688:	b480      	push	{r7}
 800868a:	b095      	sub	sp, #84	; 0x54
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008698:	e853 3f00 	ldrex	r3, [r3]
 800869c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800869e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ae:	643b      	str	r3, [r7, #64]	; 0x40
 80086b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086b6:	e841 2300 	strex	r3, r2, [r1]
 80086ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d1e6      	bne.n	8008690 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	3308      	adds	r3, #8
 80086c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ca:	6a3b      	ldr	r3, [r7, #32]
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80086ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e3      	bne.n	80086c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d118      	bne.n	8008734 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	e853 3f00 	ldrex	r3, [r3]
 800870e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	f023 0310 	bic.w	r3, r3, #16
 8008716:	647b      	str	r3, [r7, #68]	; 0x44
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	461a      	mov	r2, r3
 800871e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008720:	61bb      	str	r3, [r7, #24]
 8008722:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008724:	6979      	ldr	r1, [r7, #20]
 8008726:	69ba      	ldr	r2, [r7, #24]
 8008728:	e841 2300 	strex	r3, r2, [r1]
 800872c:	613b      	str	r3, [r7, #16]
   return(result);
 800872e:	693b      	ldr	r3, [r7, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d1e6      	bne.n	8008702 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2200      	movs	r2, #0
 8008746:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008748:	bf00      	nop
 800874a:	3754      	adds	r7, #84	; 0x54
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b090      	sub	sp, #64	; 0x40
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008760:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d137      	bne.n	80087e0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008772:	2200      	movs	r2, #0
 8008774:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	e853 3f00 	ldrex	r3, [r3]
 8008786:	623b      	str	r3, [r7, #32]
   return(result);
 8008788:	6a3b      	ldr	r3, [r7, #32]
 800878a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800878e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	3308      	adds	r3, #8
 8008796:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008798:	633a      	str	r2, [r7, #48]	; 0x30
 800879a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800879e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087a0:	e841 2300 	strex	r3, r2, [r1]
 80087a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80087a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e5      	bne.n	8008778 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	e853 3f00 	ldrex	r3, [r3]
 80087b8:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087c0:	637b      	str	r3, [r7, #52]	; 0x34
 80087c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	461a      	mov	r2, r3
 80087c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ca:	61fb      	str	r3, [r7, #28]
 80087cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ce:	69b9      	ldr	r1, [r7, #24]
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	e841 2300 	strex	r3, r2, [r1]
 80087d6:	617b      	str	r3, [r7, #20]
   return(result);
 80087d8:	697b      	ldr	r3, [r7, #20]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1e6      	bne.n	80087ac <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087de:	e002      	b.n	80087e6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80087e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80087e2:	f7ff fa33 	bl	8007c4c <HAL_UART_TxCpltCallback>
}
 80087e6:	bf00      	nop
 80087e8:	3740      	adds	r7, #64	; 0x40
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087fa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80087fc:	68f8      	ldr	r0, [r7, #12]
 80087fe:	f7ff fa2f 	bl	8007c60 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008802:	bf00      	nop
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800881e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008820:	697b      	ldr	r3, [r7, #20]
 8008822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008826:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008828:	697b      	ldr	r3, [r7, #20]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008832:	2b80      	cmp	r3, #128	; 0x80
 8008834:	d109      	bne.n	800884a <UART_DMAError+0x40>
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	2b21      	cmp	r3, #33	; 0x21
 800883a:	d106      	bne.n	800884a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	2200      	movs	r2, #0
 8008840:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8008844:	6978      	ldr	r0, [r7, #20]
 8008846:	f7ff fede 	bl	8008606 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800884a:	697b      	ldr	r3, [r7, #20]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008854:	2b40      	cmp	r3, #64	; 0x40
 8008856:	d109      	bne.n	800886c <UART_DMAError+0x62>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2b22      	cmp	r3, #34	; 0x22
 800885c:	d106      	bne.n	800886c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2200      	movs	r2, #0
 8008862:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8008866:	6978      	ldr	r0, [r7, #20]
 8008868:	f7ff ff0e 	bl	8008688 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800886c:	697b      	ldr	r3, [r7, #20]
 800886e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008872:	f043 0210 	orr.w	r2, r3, #16
 8008876:	697b      	ldr	r3, [r7, #20]
 8008878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800887c:	6978      	ldr	r0, [r7, #20]
 800887e:	f7ff f9f9 	bl	8007c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008882:	bf00      	nop
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b084      	sub	sp, #16
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008896:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2200      	movs	r2, #0
 80088a4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	f7ff f9e3 	bl	8007c74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b088      	sub	sp, #32
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088d2:	61fb      	str	r3, [r7, #28]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	461a      	mov	r2, r3
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	61bb      	str	r3, [r7, #24]
 80088de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e0:	6979      	ldr	r1, [r7, #20]
 80088e2:	69ba      	ldr	r2, [r7, #24]
 80088e4:	e841 2300 	strex	r3, r2, [r1]
 80088e8:	613b      	str	r3, [r7, #16]
   return(result);
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d1e6      	bne.n	80088be <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f7ff f9a4 	bl	8007c4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008904:	bf00      	nop
 8008906:	3720      	adds	r7, #32
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800893c:	bf00      	nop
 800893e:	370c      	adds	r7, #12
 8008940:	46bd      	mov	sp, r7
 8008942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008946:	4770      	bx	lr

08008948 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008948:	b480      	push	{r7}
 800894a:	b085      	sub	sp, #20
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008956:	2b01      	cmp	r3, #1
 8008958:	d101      	bne.n	800895e <HAL_UARTEx_DisableFifoMode+0x16>
 800895a:	2302      	movs	r3, #2
 800895c:	e027      	b.n	80089ae <HAL_UARTEx_DisableFifoMode+0x66>
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	2201      	movs	r2, #1
 8008962:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2224      	movs	r2, #36	; 0x24
 800896a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	681a      	ldr	r2, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0201 	bic.w	r2, r2, #1
 8008984:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800898c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	68fa      	ldr	r2, [r7, #12]
 800899a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3714      	adds	r7, #20
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr

080089ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089ba:	b580      	push	{r7, lr}
 80089bc:	b084      	sub	sp, #16
 80089be:	af00      	add	r7, sp, #0
 80089c0:	6078      	str	r0, [r7, #4]
 80089c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d101      	bne.n	80089d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80089ce:	2302      	movs	r3, #2
 80089d0:	e02d      	b.n	8008a2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2201      	movs	r2, #1
 80089d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2224      	movs	r2, #36	; 0x24
 80089de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	681a      	ldr	r2, [r3, #0]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 0201 	bic.w	r2, r2, #1
 80089f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	689b      	ldr	r3, [r3, #8]
 8008a00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	430a      	orrs	r2, r1
 8008a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 f850 	bl	8008ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68fa      	ldr	r2, [r7, #12]
 8008a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2220      	movs	r2, #32
 8008a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008a2c:	2300      	movs	r3, #0
}
 8008a2e:	4618      	mov	r0, r3
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
 8008a3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d101      	bne.n	8008a4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008a4a:	2302      	movs	r3, #2
 8008a4c:	e02d      	b.n	8008aaa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2224      	movs	r2, #36	; 0x24
 8008a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681a      	ldr	r2, [r3, #0]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f022 0201 	bic.w	r2, r2, #1
 8008a74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	683a      	ldr	r2, [r7, #0]
 8008a86:	430a      	orrs	r2, r1
 8008a88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f812 	bl	8008ab4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68fa      	ldr	r2, [r7, #12]
 8008a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2220      	movs	r2, #32
 8008a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
	...

08008ab4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b085      	sub	sp, #20
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d108      	bne.n	8008ad6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008ad4:	e031      	b.n	8008b3a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008ad6:	2308      	movs	r3, #8
 8008ad8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008ada:	2308      	movs	r3, #8
 8008adc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	0e5b      	lsrs	r3, r3, #25
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	f003 0307 	and.w	r3, r3, #7
 8008aec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	0f5b      	lsrs	r3, r3, #29
 8008af6:	b2db      	uxtb	r3, r3
 8008af8:	f003 0307 	and.w	r3, r3, #7
 8008afc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008afe:	7bbb      	ldrb	r3, [r7, #14]
 8008b00:	7b3a      	ldrb	r2, [r7, #12]
 8008b02:	4911      	ldr	r1, [pc, #68]	; (8008b48 <UARTEx_SetNbDataToProcess+0x94>)
 8008b04:	5c8a      	ldrb	r2, [r1, r2]
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b0a:	7b3a      	ldrb	r2, [r7, #12]
 8008b0c:	490f      	ldr	r1, [pc, #60]	; (8008b4c <UARTEx_SetNbDataToProcess+0x98>)
 8008b0e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b14:	b29a      	uxth	r2, r3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b1c:	7bfb      	ldrb	r3, [r7, #15]
 8008b1e:	7b7a      	ldrb	r2, [r7, #13]
 8008b20:	4909      	ldr	r1, [pc, #36]	; (8008b48 <UARTEx_SetNbDataToProcess+0x94>)
 8008b22:	5c8a      	ldrb	r2, [r1, r2]
 8008b24:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b28:	7b7a      	ldrb	r2, [r7, #13]
 8008b2a:	4908      	ldr	r1, [pc, #32]	; (8008b4c <UARTEx_SetNbDataToProcess+0x98>)
 8008b2c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b2e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008b32:	b29a      	uxth	r2, r3
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008b3a:	bf00      	nop
 8008b3c:	3714      	adds	r7, #20
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b44:	4770      	bx	lr
 8008b46:	bf00      	nop
 8008b48:	0800e95c 	.word	0x0800e95c
 8008b4c:	0800e964 	.word	0x0800e964

08008b50 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8008b50:	b084      	sub	sp, #16
 8008b52:	b480      	push	{r7}
 8008b54:	b085      	sub	sp, #20
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
 8008b5a:	f107 001c 	add.w	r0, r7, #28
 8008b5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008b62:	2300      	movs	r3, #0
 8008b64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8008b66:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8008b68:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8008b6a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8008b6e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8008b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 8008b72:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8008b76:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8008b78:	68fa      	ldr	r2, [r7, #12]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	685a      	ldr	r2, [r3, #4]
 8008b82:	4b07      	ldr	r3, [pc, #28]	; (8008ba0 <SDMMC_Init+0x50>)
 8008b84:	4013      	ands	r3, r2
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	431a      	orrs	r2, r3
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	3714      	adds	r7, #20
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	b004      	add	sp, #16
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	ffc02c00 	.word	0xffc02c00

08008ba4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	370c      	adds	r7, #12
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbc:	4770      	bx	lr

08008bbe <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
 8008bc6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	681a      	ldr	r2, [r3, #0]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b083      	sub	sp, #12
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f043 0203 	orr.w	r2, r3, #3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8008bf4:	2300      	movs	r3, #0
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b083      	sub	sp, #12
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	370c      	adds	r7, #12
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
	...

08008c20 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	681a      	ldr	r2, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c36:	683b      	ldr	r3, [r7, #0]
 8008c38:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c3e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8008c44:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8008c4a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8008c4c:	68fa      	ldr	r2, [r7, #12]
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	68da      	ldr	r2, [r3, #12]
 8008c56:	4b06      	ldr	r3, [pc, #24]	; (8008c70 <SDMMC_SendCommand+0x50>)
 8008c58:	4013      	ands	r3, r2
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	fffee0c0 	.word	0xfffee0c0

08008c74 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	691b      	ldr	r3, [r3, #16]
 8008c80:	b2db      	uxtb	r3, r3
}
 8008c82:	4618      	mov	r0, r3
 8008c84:	370c      	adds	r7, #12
 8008c86:	46bd      	mov	sp, r7
 8008c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8c:	4770      	bx	lr

08008c8e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8008c8e:	b480      	push	{r7}
 8008c90:	b085      	sub	sp, #20
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
 8008c96:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	683b      	ldr	r3, [r7, #0]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	3714      	adds	r7, #20
 8008cac:	46bd      	mov	sp, r7
 8008cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb2:	4770      	bx	lr

08008cb4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8008cb4:	b480      	push	{r7}
 8008cb6:	b085      	sub	sp, #20
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008cda:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8008ce0:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8008ce6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8008ce8:	68fa      	ldr	r2, [r7, #12]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8008cfe:	2300      	movs	r3, #0

}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3714      	adds	r7, #20
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr

08008d0c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b088      	sub	sp, #32
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008d1a:	2310      	movs	r3, #16
 8008d1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d24:	2300      	movs	r3, #0
 8008d26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d2e:	f107 0308 	add.w	r3, r7, #8
 8008d32:	4619      	mov	r1, r3
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f7ff ff73 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8008d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d3e:	2110      	movs	r1, #16
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 fa5f 	bl	8009204 <SDMMC_GetCmdResp1>
 8008d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d48:	69fb      	ldr	r3, [r7, #28]
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3720      	adds	r7, #32
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	b088      	sub	sp, #32
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8008d60:	2311      	movs	r3, #17
 8008d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008d74:	f107 0308 	add.w	r3, r7, #8
 8008d78:	4619      	mov	r1, r3
 8008d7a:	6878      	ldr	r0, [r7, #4]
 8008d7c:	f7ff ff50 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d84:	2111      	movs	r1, #17
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 fa3c 	bl	8009204 <SDMMC_GetCmdResp1>
 8008d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008d8e:	69fb      	ldr	r3, [r7, #28]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3720      	adds	r7, #32
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b088      	sub	sp, #32
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8008da6:	2312      	movs	r3, #18
 8008da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008db0:	2300      	movs	r3, #0
 8008db2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008db4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008db8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008dba:	f107 0308 	add.w	r3, r7, #8
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f7ff ff2d 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008dc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dca:	2112      	movs	r1, #18
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 fa19 	bl	8009204 <SDMMC_GetCmdResp1>
 8008dd2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	3720      	adds	r7, #32
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}

08008dde <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008dde:	b580      	push	{r7, lr}
 8008de0:	b088      	sub	sp, #32
 8008de2:	af00      	add	r7, sp, #0
 8008de4:	6078      	str	r0, [r7, #4]
 8008de6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008dec:	2318      	movs	r3, #24
 8008dee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008df0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008df4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008df6:	2300      	movs	r3, #0
 8008df8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e00:	f107 0308 	add.w	r3, r7, #8
 8008e04:	4619      	mov	r1, r3
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff ff0a 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8008e0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e10:	2118      	movs	r1, #24
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f9f6 	bl	8009204 <SDMMC_GetCmdResp1>
 8008e18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e1a:	69fb      	ldr	r3, [r7, #28]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3720      	adds	r7, #32
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}

08008e24 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b088      	sub	sp, #32
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
 8008e2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008e32:	2319      	movs	r3, #25
 8008e34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008e46:	f107 0308 	add.w	r3, r7, #8
 8008e4a:	4619      	mov	r1, r3
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f7ff fee7 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8008e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e56:	2119      	movs	r1, #25
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f9d3 	bl	8009204 <SDMMC_GetCmdResp1>
 8008e5e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008e60:	69fb      	ldr	r3, [r7, #28]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3720      	adds	r7, #32
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
	...

08008e6c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8008e6c:	b580      	push	{r7, lr}
 8008e6e:	b088      	sub	sp, #32
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008e74:	2300      	movs	r3, #0
 8008e76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008e78:	230c      	movs	r3, #12
 8008e7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008e7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008e80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008e82:	2300      	movs	r3, #0
 8008e84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e8a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	68db      	ldr	r3, [r3, #12]
 8008e90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008ea4:	f107 0308 	add.w	r3, r7, #8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f7ff feb8 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8008eb0:	4a0b      	ldr	r2, [pc, #44]	; (8008ee0 <SDMMC_CmdStopTransfer+0x74>)
 8008eb2:	210c      	movs	r1, #12
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f9a5 	bl	8009204 <SDMMC_GetCmdResp1>
 8008eba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8008ec8:	69fb      	ldr	r3, [r7, #28]
 8008eca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ece:	d101      	bne.n	8008ed4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3720      	adds	r7, #32
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	05f5e100 	.word	0x05f5e100

08008ee4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b088      	sub	sp, #32
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
 8008eec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008ef2:	2307      	movs	r3, #7
 8008ef4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ef6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008efa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008efc:	2300      	movs	r3, #0
 8008efe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f06:	f107 0308 	add.w	r3, r7, #8
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	6878      	ldr	r0, [r7, #4]
 8008f0e:	f7ff fe87 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8008f12:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f16:	2107      	movs	r1, #7
 8008f18:	6878      	ldr	r0, [r7, #4]
 8008f1a:	f000 f973 	bl	8009204 <SDMMC_GetCmdResp1>
 8008f1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f20:	69fb      	ldr	r3, [r7, #28]
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3720      	adds	r7, #32
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}

08008f2a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8008f2a:	b580      	push	{r7, lr}
 8008f2c:	b088      	sub	sp, #32
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8008f32:	2300      	movs	r3, #0
 8008f34:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f48:	f107 0308 	add.w	r3, r7, #8
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f7ff fe66 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fb97 	bl	8009688 <SDMMC_GetCmdError>
 8008f5a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f5c:	69fb      	ldr	r3, [r7, #28]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3720      	adds	r7, #32
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}

08008f66 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8008f66:	b580      	push	{r7, lr}
 8008f68:	b088      	sub	sp, #32
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008f6e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008f72:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008f74:	2308      	movs	r3, #8
 8008f76:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008f7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008f88:	f107 0308 	add.w	r3, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f7ff fe46 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 fb29 	bl	80095ec <SDMMC_GetCmdResp7>
 8008f9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008f9c:	69fb      	ldr	r3, [r7, #28]
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3720      	adds	r7, #32
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b088      	sub	sp, #32
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
 8008fae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008fb4:	2337      	movs	r3, #55	; 0x37
 8008fb6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008fb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008fbc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8008fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fc6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8008fc8:	f107 0308 	add.w	r3, r7, #8
 8008fcc:	4619      	mov	r1, r3
 8008fce:	6878      	ldr	r0, [r7, #4]
 8008fd0:	f7ff fe26 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8008fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fd8:	2137      	movs	r1, #55	; 0x37
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f000 f912 	bl	8009204 <SDMMC_GetCmdResp1>
 8008fe0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008fe2:	69fb      	ldr	r3, [r7, #28]
}
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	3720      	adds	r7, #32
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bd80      	pop	{r7, pc}

08008fec <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b088      	sub	sp, #32
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
 8008ff4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008ffa:	2329      	movs	r3, #41	; 0x29
 8008ffc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8008ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009002:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009004:	2300      	movs	r3, #0
 8009006:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009008:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800900c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800900e:	f107 0308 	add.w	r3, r7, #8
 8009012:	4619      	mov	r1, r3
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f7ff fe03 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fa2e 	bl	800947c <SDMMC_GetCmdResp3>
 8009020:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009022:	69fb      	ldr	r3, [r7, #28]
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}

0800902c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b088      	sub	sp, #32
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800903a:	2306      	movs	r3, #6
 800903c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800903e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009044:	2300      	movs	r3, #0
 8009046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800904c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800904e:	f107 0308 	add.w	r3, r7, #8
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f7ff fde3 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800905a:	f241 3288 	movw	r2, #5000	; 0x1388
 800905e:	2106      	movs	r1, #6
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8cf 	bl	8009204 <SDMMC_GetCmdResp1>
 8009066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009068:	69fb      	ldr	r3, [r7, #28]
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}

08009072 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009072:	b580      	push	{r7, lr}
 8009074:	b088      	sub	sp, #32
 8009076:	af00      	add	r7, sp, #0
 8009078:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800907a:	2300      	movs	r3, #0
 800907c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800907e:	2333      	movs	r3, #51	; 0x33
 8009080:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009082:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009088:	2300      	movs	r3, #0
 800908a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800908c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009090:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009092:	f107 0308 	add.w	r3, r7, #8
 8009096:	4619      	mov	r1, r3
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f7ff fdc1 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800909e:	f241 3288 	movw	r2, #5000	; 0x1388
 80090a2:	2133      	movs	r1, #51	; 0x33
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f000 f8ad 	bl	8009204 <SDMMC_GetCmdResp1>
 80090aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ac:	69fb      	ldr	r3, [r7, #28]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3720      	adds	r7, #32
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80090b6:	b580      	push	{r7, lr}
 80090b8:	b088      	sub	sp, #32
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80090c2:	2302      	movs	r3, #2
 80090c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80090c6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80090ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80090cc:	2300      	movs	r3, #0
 80090ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80090d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090d4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80090d6:	f107 0308 	add.w	r3, r7, #8
 80090da:	4619      	mov	r1, r3
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f7ff fd9f 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f980 	bl	80093e8 <SDMMC_GetCmdResp2>
 80090e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80090ea:	69fb      	ldr	r3, [r7, #28]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3720      	adds	r7, #32
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b088      	sub	sp, #32
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009102:	2309      	movs	r3, #9
 8009104:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009106:	f44f 7340 	mov.w	r3, #768	; 0x300
 800910a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800910c:	2300      	movs	r3, #0
 800910e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009114:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009116:	f107 0308 	add.w	r3, r7, #8
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f7ff fd7f 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009122:	6878      	ldr	r0, [r7, #4]
 8009124:	f000 f960 	bl	80093e8 <SDMMC_GetCmdResp2>
 8009128:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800912a:	69fb      	ldr	r3, [r7, #28]
}
 800912c:	4618      	mov	r0, r3
 800912e:	3720      	adds	r7, #32
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}

08009134 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b088      	sub	sp, #32
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
 800913c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800913e:	2300      	movs	r3, #0
 8009140:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009142:	2303      	movs	r3, #3
 8009144:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009146:	f44f 7380 	mov.w	r3, #256	; 0x100
 800914a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800914c:	2300      	movs	r3, #0
 800914e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009154:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009156:	f107 0308 	add.w	r3, r7, #8
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f7ff fd5f 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	2103      	movs	r1, #3
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f9c8 	bl	80094fc <SDMMC_GetCmdResp6>
 800916c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800916e:	69fb      	ldr	r3, [r7, #28]
}
 8009170:	4618      	mov	r0, r3
 8009172:	3720      	adds	r7, #32
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b088      	sub	sp, #32
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009186:	230d      	movs	r3, #13
 8009188:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800918a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800918e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009190:	2300      	movs	r3, #0
 8009192:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009194:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009198:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800919a:	f107 0308 	add.w	r3, r7, #8
 800919e:	4619      	mov	r1, r3
 80091a0:	6878      	ldr	r0, [r7, #4]
 80091a2:	f7ff fd3d 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80091a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80091aa:	210d      	movs	r1, #13
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f000 f829 	bl	8009204 <SDMMC_GetCmdResp1>
 80091b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091b4:	69fb      	ldr	r3, [r7, #28]
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3720      	adds	r7, #32
 80091ba:	46bd      	mov	sp, r7
 80091bc:	bd80      	pop	{r7, pc}

080091be <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80091be:	b580      	push	{r7, lr}
 80091c0:	b088      	sub	sp, #32
 80091c2:	af00      	add	r7, sp, #0
 80091c4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80091ca:	230d      	movs	r3, #13
 80091cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80091ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80091d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80091d4:	2300      	movs	r3, #0
 80091d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80091d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091dc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80091de:	f107 0308 	add.w	r3, r7, #8
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f7ff fd1b 	bl	8008c20 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80091ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ee:	210d      	movs	r1, #13
 80091f0:	6878      	ldr	r0, [r7, #4]
 80091f2:	f000 f807 	bl	8009204 <SDMMC_GetCmdResp1>
 80091f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80091f8:	69fb      	ldr	r3, [r7, #28]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3720      	adds	r7, #32
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b088      	sub	sp, #32
 8009208:	af00      	add	r7, sp, #0
 800920a:	60f8      	str	r0, [r7, #12]
 800920c:	460b      	mov	r3, r1
 800920e:	607a      	str	r2, [r7, #4]
 8009210:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009212:	4b70      	ldr	r3, [pc, #448]	; (80093d4 <SDMMC_GetCmdResp1+0x1d0>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a70      	ldr	r2, [pc, #448]	; (80093d8 <SDMMC_GetCmdResp1+0x1d4>)
 8009218:	fba2 2303 	umull	r2, r3, r2, r3
 800921c:	0a5a      	lsrs	r2, r3, #9
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	fb02 f303 	mul.w	r3, r2, r3
 8009224:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009226:	69fb      	ldr	r3, [r7, #28]
 8009228:	1e5a      	subs	r2, r3, #1
 800922a:	61fa      	str	r2, [r7, #28]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d102      	bne.n	8009236 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009230:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009234:	e0c9      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800923a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800923c:	69ba      	ldr	r2, [r7, #24]
 800923e:	4b67      	ldr	r3, [pc, #412]	; (80093dc <SDMMC_GetCmdResp1+0x1d8>)
 8009240:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009242:	2b00      	cmp	r3, #0
 8009244:	d0ef      	beq.n	8009226 <SDMMC_GetCmdResp1+0x22>
 8009246:	69bb      	ldr	r3, [r7, #24]
 8009248:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800924c:	2b00      	cmp	r3, #0
 800924e:	d1ea      	bne.n	8009226 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d004      	beq.n	8009266 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2204      	movs	r2, #4
 8009260:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009262:	2304      	movs	r3, #4
 8009264:	e0b1      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800926a:	f003 0301 	and.w	r3, r3, #1
 800926e:	2b00      	cmp	r3, #0
 8009270:	d004      	beq.n	800927c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2201      	movs	r2, #1
 8009276:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009278:	2301      	movs	r3, #1
 800927a:	e0a6      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4a58      	ldr	r2, [pc, #352]	; (80093e0 <SDMMC_GetCmdResp1+0x1dc>)
 8009280:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009282:	68f8      	ldr	r0, [r7, #12]
 8009284:	f7ff fcf6 	bl	8008c74 <SDMMC_GetCommandResponse>
 8009288:	4603      	mov	r3, r0
 800928a:	461a      	mov	r2, r3
 800928c:	7afb      	ldrb	r3, [r7, #11]
 800928e:	4293      	cmp	r3, r2
 8009290:	d001      	beq.n	8009296 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009292:	2301      	movs	r3, #1
 8009294:	e099      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009296:	2100      	movs	r1, #0
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f7ff fcf8 	bl	8008c8e <SDMMC_GetResponse>
 800929e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	4b50      	ldr	r3, [pc, #320]	; (80093e4 <SDMMC_GetCmdResp1+0x1e0>)
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d101      	bne.n	80092ae <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80092aa:	2300      	movs	r3, #0
 80092ac:	e08d      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80092ae:	697b      	ldr	r3, [r7, #20]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	da02      	bge.n	80092ba <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80092b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092b8:	e087      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d001      	beq.n	80092c8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80092c4:	2340      	movs	r3, #64	; 0x40
 80092c6:	e080      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d001      	beq.n	80092d6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80092d2:	2380      	movs	r3, #128	; 0x80
 80092d4:	e079      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d002      	beq.n	80092e6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80092e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80092e4:	e071      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80092f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80092f4:	e069      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d002      	beq.n	8009306 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009304:	e061      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d002      	beq.n	8009316 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009314:	e059      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d002      	beq.n	8009326 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009320:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009324:	e051      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009326:	697b      	ldr	r3, [r7, #20]
 8009328:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800932c:	2b00      	cmp	r3, #0
 800932e:	d002      	beq.n	8009336 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009334:	e049      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800933c:	2b00      	cmp	r3, #0
 800933e:	d002      	beq.n	8009346 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009340:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009344:	e041      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800934c:	2b00      	cmp	r3, #0
 800934e:	d002      	beq.n	8009356 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009350:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009354:	e039      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d002      	beq.n	8009366 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009360:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009364:	e031      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d002      	beq.n	8009376 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009370:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009374:	e029      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800937c:	2b00      	cmp	r3, #0
 800937e:	d002      	beq.n	8009386 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009380:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009384:	e021      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009390:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009394:	e019      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800939c:	2b00      	cmp	r3, #0
 800939e:	d002      	beq.n	80093a6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80093a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80093a4:	e011      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d002      	beq.n	80093b6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80093b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80093b4:	e009      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f003 0308 	and.w	r3, r3, #8
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d002      	beq.n	80093c6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80093c0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80093c4:	e001      	b.n	80093ca <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80093c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	20000000 	.word	0x20000000
 80093d8:	10624dd3 	.word	0x10624dd3
 80093dc:	00200045 	.word	0x00200045
 80093e0:	002000c5 	.word	0x002000c5
 80093e4:	fdffe008 	.word	0xfdffe008

080093e8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80093f0:	4b1f      	ldr	r3, [pc, #124]	; (8009470 <SDMMC_GetCmdResp2+0x88>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a1f      	ldr	r2, [pc, #124]	; (8009474 <SDMMC_GetCmdResp2+0x8c>)
 80093f6:	fba2 2303 	umull	r2, r3, r2, r3
 80093fa:	0a5b      	lsrs	r3, r3, #9
 80093fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009400:	fb02 f303 	mul.w	r3, r2, r3
 8009404:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	1e5a      	subs	r2, r3, #1
 800940a:	60fa      	str	r2, [r7, #12]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d102      	bne.n	8009416 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009410:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009414:	e026      	b.n	8009464 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009422:	2b00      	cmp	r3, #0
 8009424:	d0ef      	beq.n	8009406 <SDMMC_GetCmdResp2+0x1e>
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800942c:	2b00      	cmp	r3, #0
 800942e:	d1ea      	bne.n	8009406 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009434:	f003 0304 	and.w	r3, r3, #4
 8009438:	2b00      	cmp	r3, #0
 800943a:	d004      	beq.n	8009446 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2204      	movs	r2, #4
 8009440:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009442:	2304      	movs	r3, #4
 8009444:	e00e      	b.n	8009464 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800944a:	f003 0301 	and.w	r3, r3, #1
 800944e:	2b00      	cmp	r3, #0
 8009450:	d004      	beq.n	800945c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009458:	2301      	movs	r3, #1
 800945a:	e003      	b.n	8009464 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	4a06      	ldr	r2, [pc, #24]	; (8009478 <SDMMC_GetCmdResp2+0x90>)
 8009460:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009462:	2300      	movs	r3, #0
}
 8009464:	4618      	mov	r0, r3
 8009466:	3714      	adds	r7, #20
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr
 8009470:	20000000 	.word	0x20000000
 8009474:	10624dd3 	.word	0x10624dd3
 8009478:	002000c5 	.word	0x002000c5

0800947c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800947c:	b480      	push	{r7}
 800947e:	b085      	sub	sp, #20
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009484:	4b1a      	ldr	r3, [pc, #104]	; (80094f0 <SDMMC_GetCmdResp3+0x74>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	4a1a      	ldr	r2, [pc, #104]	; (80094f4 <SDMMC_GetCmdResp3+0x78>)
 800948a:	fba2 2303 	umull	r2, r3, r2, r3
 800948e:	0a5b      	lsrs	r3, r3, #9
 8009490:	f241 3288 	movw	r2, #5000	; 0x1388
 8009494:	fb02 f303 	mul.w	r3, r2, r3
 8009498:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	1e5a      	subs	r2, r3, #1
 800949e:	60fa      	str	r2, [r7, #12]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d102      	bne.n	80094aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80094a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80094a8:	e01b      	b.n	80094e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0ef      	beq.n	800949a <SDMMC_GetCmdResp3+0x1e>
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d1ea      	bne.n	800949a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094c8:	f003 0304 	and.w	r3, r3, #4
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d004      	beq.n	80094da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2204      	movs	r2, #4
 80094d4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80094d6:	2304      	movs	r3, #4
 80094d8:	e003      	b.n	80094e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a06      	ldr	r2, [pc, #24]	; (80094f8 <SDMMC_GetCmdResp3+0x7c>)
 80094de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80094e0:	2300      	movs	r3, #0
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3714      	adds	r7, #20
 80094e6:	46bd      	mov	sp, r7
 80094e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ec:	4770      	bx	lr
 80094ee:	bf00      	nop
 80094f0:	20000000 	.word	0x20000000
 80094f4:	10624dd3 	.word	0x10624dd3
 80094f8:	002000c5 	.word	0x002000c5

080094fc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b088      	sub	sp, #32
 8009500:	af00      	add	r7, sp, #0
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	460b      	mov	r3, r1
 8009506:	607a      	str	r2, [r7, #4]
 8009508:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800950a:	4b35      	ldr	r3, [pc, #212]	; (80095e0 <SDMMC_GetCmdResp6+0xe4>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a35      	ldr	r2, [pc, #212]	; (80095e4 <SDMMC_GetCmdResp6+0xe8>)
 8009510:	fba2 2303 	umull	r2, r3, r2, r3
 8009514:	0a5b      	lsrs	r3, r3, #9
 8009516:	f241 3288 	movw	r2, #5000	; 0x1388
 800951a:	fb02 f303 	mul.w	r3, r2, r3
 800951e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8009520:	69fb      	ldr	r3, [r7, #28]
 8009522:	1e5a      	subs	r2, r3, #1
 8009524:	61fa      	str	r2, [r7, #28]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d102      	bne.n	8009530 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800952a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800952e:	e052      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009534:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009536:	69bb      	ldr	r3, [r7, #24]
 8009538:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800953c:	2b00      	cmp	r3, #0
 800953e:	d0ef      	beq.n	8009520 <SDMMC_GetCmdResp6+0x24>
 8009540:	69bb      	ldr	r3, [r7, #24]
 8009542:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009546:	2b00      	cmp	r3, #0
 8009548:	d1ea      	bne.n	8009520 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800954e:	f003 0304 	and.w	r3, r3, #4
 8009552:	2b00      	cmp	r3, #0
 8009554:	d004      	beq.n	8009560 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2204      	movs	r2, #4
 800955a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800955c:	2304      	movs	r3, #4
 800955e:	e03a      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d004      	beq.n	8009576 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2201      	movs	r2, #1
 8009570:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009572:	2301      	movs	r3, #1
 8009574:	e02f      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8009576:	68f8      	ldr	r0, [r7, #12]
 8009578:	f7ff fb7c 	bl	8008c74 <SDMMC_GetCommandResponse>
 800957c:	4603      	mov	r3, r0
 800957e:	461a      	mov	r2, r3
 8009580:	7afb      	ldrb	r3, [r7, #11]
 8009582:	4293      	cmp	r3, r2
 8009584:	d001      	beq.n	800958a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009586:	2301      	movs	r3, #1
 8009588:	e025      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	4a16      	ldr	r2, [pc, #88]	; (80095e8 <SDMMC_GetCmdResp6+0xec>)
 800958e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8009590:	2100      	movs	r1, #0
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f7ff fb7b 	bl	8008c8e <SDMMC_GetResponse>
 8009598:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d106      	bne.n	80095b2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 80095a4:	697b      	ldr	r3, [r7, #20]
 80095a6:	0c1b      	lsrs	r3, r3, #16
 80095a8:	b29a      	uxth	r2, r3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	e011      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80095b2:	697b      	ldr	r3, [r7, #20]
 80095b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d002      	beq.n	80095c2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80095bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80095c0:	e009      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80095c2:	697b      	ldr	r3, [r7, #20]
 80095c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d002      	beq.n	80095d2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80095cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d0:	e001      	b.n	80095d6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80095d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3720      	adds	r7, #32
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20000000 	.word	0x20000000
 80095e4:	10624dd3 	.word	0x10624dd3
 80095e8:	002000c5 	.word	0x002000c5

080095ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b085      	sub	sp, #20
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80095f4:	4b22      	ldr	r3, [pc, #136]	; (8009680 <SDMMC_GetCmdResp7+0x94>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	4a22      	ldr	r2, [pc, #136]	; (8009684 <SDMMC_GetCmdResp7+0x98>)
 80095fa:	fba2 2303 	umull	r2, r3, r2, r3
 80095fe:	0a5b      	lsrs	r3, r3, #9
 8009600:	f241 3288 	movw	r2, #5000	; 0x1388
 8009604:	fb02 f303 	mul.w	r3, r2, r3
 8009608:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	1e5a      	subs	r2, r3, #1
 800960e:	60fa      	str	r2, [r7, #12]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d102      	bne.n	800961a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009614:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009618:	e02c      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800961e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8009626:	2b00      	cmp	r3, #0
 8009628:	d0ef      	beq.n	800960a <SDMMC_GetCmdResp7+0x1e>
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1ea      	bne.n	800960a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009638:	f003 0304 	and.w	r3, r3, #4
 800963c:	2b00      	cmp	r3, #0
 800963e:	d004      	beq.n	800964a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2204      	movs	r2, #4
 8009644:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009646:	2304      	movs	r3, #4
 8009648:	e014      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d004      	beq.n	8009660 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2201      	movs	r2, #1
 800965a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800965c:	2301      	movs	r3, #1
 800965e:	e009      	b.n	8009674 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009668:	2b00      	cmp	r3, #0
 800966a:	d002      	beq.n	8009672 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	2240      	movs	r2, #64	; 0x40
 8009670:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009672:	2300      	movs	r3, #0

}
 8009674:	4618      	mov	r0, r3
 8009676:	3714      	adds	r7, #20
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr
 8009680:	20000000 	.word	0x20000000
 8009684:	10624dd3 	.word	0x10624dd3

08009688 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8009690:	4b11      	ldr	r3, [pc, #68]	; (80096d8 <SDMMC_GetCmdError+0x50>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	4a11      	ldr	r2, [pc, #68]	; (80096dc <SDMMC_GetCmdError+0x54>)
 8009696:	fba2 2303 	umull	r2, r3, r2, r3
 800969a:	0a5b      	lsrs	r3, r3, #9
 800969c:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a0:	fb02 f303 	mul.w	r3, r2, r3
 80096a4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	1e5a      	subs	r2, r3, #1
 80096aa:	60fa      	str	r2, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d102      	bne.n	80096b6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80096b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80096b4:	e009      	b.n	80096ca <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80096ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d0f1      	beq.n	80096a6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	4a06      	ldr	r2, [pc, #24]	; (80096e0 <SDMMC_GetCmdError+0x58>)
 80096c6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80096c8:	2300      	movs	r3, #0
}
 80096ca:	4618      	mov	r0, r3
 80096cc:	3714      	adds	r7, #20
 80096ce:	46bd      	mov	sp, r7
 80096d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d4:	4770      	bx	lr
 80096d6:	bf00      	nop
 80096d8:	20000000 	.word	0x20000000
 80096dc:	10624dd3 	.word	0x10624dd3
 80096e0:	002000c5 	.word	0x002000c5

080096e4 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 80096e8:	4907      	ldr	r1, [pc, #28]	; (8009708 <MX_FATFS_Init+0x24>)
 80096ea:	4808      	ldr	r0, [pc, #32]	; (800970c <MX_FATFS_Init+0x28>)
 80096ec:	f004 faae 	bl	800dc4c <FATFS_LinkDriver>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 80096f6:	f04f 33ff 	mov.w	r3, #4294967295
 80096fa:	e003      	b.n	8009704 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 80096fc:	4b04      	ldr	r3, [pc, #16]	; (8009710 <MX_FATFS_Init+0x2c>)
 80096fe:	2201      	movs	r2, #1
 8009700:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 8009702:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 8009704:	4618      	mov	r0, r3
 8009706:	bd80      	pop	{r7, pc}
 8009708:	200003c0 	.word	0x200003c0
 800970c:	0800e96c 	.word	0x0800e96c
 8009710:	200003c4 	.word	0x200003c4

08009714 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8009714:	b480      	push	{r7}
 8009716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8009718:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800971a:	4618      	mov	r0, r3
 800971c:	46bd      	mov	sp, r7
 800971e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009722:	4770      	bx	lr

08009724 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b098      	sub	sp, #96	; 0x60
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_initialize */
  Stat = STA_NOINIT;
 800972e:	4b1a      	ldr	r3, [pc, #104]	; (8009798 <SD_initialize+0x74>)
 8009730:	2201      	movs	r2, #1
 8009732:	701a      	strb	r2, [r3, #0]
  /* Place for user code (may require BSP functions/defines to be added to the project) */
  HAL_StatusTypeDef res1;
  HAL_SD_CardCSDTypeDef CSD;
  HAL_SD_CardInfoTypeDef pCardInfo;

  res1=HAL_SD_Init(&hsd1);
 8009734:	4819      	ldr	r0, [pc, #100]	; (800979c <SD_initialize+0x78>)
 8009736:	f7fc f9af 	bl	8005a98 <HAL_SD_Init>
 800973a:	4603      	mov	r3, r0
 800973c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

  HAL_SD_GetCardCSD(&hsd1, &CSD);
 8009740:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009744:	4619      	mov	r1, r3
 8009746:	4815      	ldr	r0, [pc, #84]	; (800979c <SD_initialize+0x78>)
 8009748:	f7fc fdce 	bl	80062e8 <HAL_SD_GetCardCSD>
  HAL_SD_GetCardInfo(&hsd1, &pCardInfo);
 800974c:	f107 030c 	add.w	r3, r7, #12
 8009750:	4619      	mov	r1, r3
 8009752:	4812      	ldr	r0, [pc, #72]	; (800979c <SD_initialize+0x78>)
 8009754:	f7fd f82a 	bl	80067ac <HAL_SD_GetCardInfo>

  print_str("type",pCardInfo.CardType);
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	4619      	mov	r1, r3
 800975c:	4810      	ldr	r0, [pc, #64]	; (80097a0 <SD_initialize+0x7c>)
 800975e:	f7f6 ff01 	bl	8000564 <print_str>
  print_str("ver",pCardInfo.CardVersion);
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	4619      	mov	r1, r3
 8009766:	480f      	ldr	r0, [pc, #60]	; (80097a4 <SD_initialize+0x80>)
 8009768:	f7f6 fefc 	bl	8000564 <print_str>
  print_str("class",pCardInfo.Class);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	4619      	mov	r1, r3
 8009770:	480d      	ldr	r0, [pc, #52]	; (80097a8 <SD_initialize+0x84>)
 8009772:	f7f6 fef7 	bl	8000564 <print_str>
  print_str("BlockNbr",pCardInfo.BlockNbr);
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	4619      	mov	r1, r3
 800977a:	480c      	ldr	r0, [pc, #48]	; (80097ac <SD_initialize+0x88>)
 800977c:	f7f6 fef2 	bl	8000564 <print_str>
  print_str("BlockSize",pCardInfo.BlockSize);
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	4619      	mov	r1, r3
 8009784:	480a      	ldr	r0, [pc, #40]	; (80097b0 <SD_initialize+0x8c>)
 8009786:	f7f6 feed 	bl	8000564 <print_str>
  //HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B);
  //HAL_SD_ConfigSpeedBusOperation(&hsd1,SDMMC_SPEED_MODE_DEFAULT);



  return res1;
 800978a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  /* USER CODE END SD_initialize */
}
 800978e:	4618      	mov	r0, r3
 8009790:	3760      	adds	r7, #96	; 0x60
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	20000009 	.word	0x20000009
 800979c:	20000238 	.word	0x20000238
 80097a0:	0800e85c 	.word	0x0800e85c
 80097a4:	0800e864 	.word	0x0800e864
 80097a8:	0800e868 	.word	0x0800e868
 80097ac:	0800e870 	.word	0x0800e870
 80097b0:	0800e87c 	.word	0x0800e87c

080097b4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	4603      	mov	r3, r0
 80097bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_status */
  Stat = STA_NOINIT;
 80097be:	4b06      	ldr	r3, [pc, #24]	; (80097d8 <SD_status+0x24>)
 80097c0:	2201      	movs	r2, #1
 80097c2:	701a      	strb	r2, [r3, #0]
  HAL_SD_CardStateTypeDef pStatus;
  /* Place for user code (may require BSP functions/defines to be added to the project) */
  pStatus=HAL_SD_GetCardState(&hsd1);
 80097c4:	4805      	ldr	r0, [pc, #20]	; (80097dc <SD_status+0x28>)
 80097c6:	f7fd f92d 	bl	8006a24 <HAL_SD_GetCardState>
 80097ca:	60f8      	str	r0, [r7, #12]
  return RES_OK;
 80097cc:	2300      	movs	r3, #0
  /* USER CODE END SD_status */
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}
 80097d6:	bf00      	nop
 80097d8:	20000009 	.word	0x20000009
 80097dc:	20000238 	.word	0x20000238

080097e0 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b086      	sub	sp, #24
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	60b9      	str	r1, [r7, #8]
 80097e8:	607a      	str	r2, [r7, #4]
 80097ea:	603b      	str	r3, [r7, #0]
 80097ec:	4603      	mov	r3, r0
 80097ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_read */
  uint32_t tickstart;
  sd_dma_rx_semaphore=0;
 80097f0:	4b17      	ldr	r3, [pc, #92]	; (8009850 <SD_read+0x70>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]

  if(HAL_SD_ReadBlocks_DMA(&hsd1, buff, sector, count)==HAL_OK){
 80097f6:	683b      	ldr	r3, [r7, #0]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	68b9      	ldr	r1, [r7, #8]
 80097fc:	4815      	ldr	r0, [pc, #84]	; (8009854 <SD_read+0x74>)
 80097fe:	f7fc fa63 	bl	8005cc8 <HAL_SD_ReadBlocks_DMA>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d11e      	bne.n	8009846 <SD_read+0x66>
   tickstart = HAL_GetTick();
 8009808:	f7f7 fdea 	bl	80013e0 <HAL_GetTick>
 800980c:	6178      	str	r0, [r7, #20]
   while (sd_dma_rx_semaphore==0)
 800980e:	e00e      	b.n	800982e <SD_read+0x4e>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 8009810:	f7f7 fde6 	bl	80013e0 <HAL_GetTick>
 8009814:	4602      	mov	r2, r0
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	1ad3      	subs	r3, r2, r3
 800981a:	f242 720f 	movw	r2, #9999	; 0x270f
 800981e:	4293      	cmp	r3, r2
 8009820:	d905      	bls.n	800982e <SD_read+0x4e>
    	print_str("rerr",0);
 8009822:	2100      	movs	r1, #0
 8009824:	480c      	ldr	r0, [pc, #48]	; (8009858 <SD_read+0x78>)
 8009826:	f7f6 fe9d 	bl	8000564 <print_str>
    	return RES_ERROR;
 800982a:	2301      	movs	r3, #1
 800982c:	e00c      	b.n	8009848 <SD_read+0x68>
   while (sd_dma_rx_semaphore==0)
 800982e:	4b08      	ldr	r3, [pc, #32]	; (8009850 <SD_read+0x70>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2b00      	cmp	r3, #0
 8009834:	d0ec      	beq.n	8009810 <SD_read+0x30>
    }
   }
   if(HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER){
 8009836:	4807      	ldr	r0, [pc, #28]	; (8009854 <SD_read+0x74>)
 8009838:	f7fd f8f4 	bl	8006a24 <HAL_SD_GetCardState>
 800983c:	4603      	mov	r3, r0
 800983e:	2b04      	cmp	r3, #4
 8009840:	d101      	bne.n	8009846 <SD_read+0x66>
     //print_str("rok",0);
     return RES_OK;
 8009842:	2300      	movs	r3, #0
 8009844:	e000      	b.n	8009848 <SD_read+0x68>
   }
  }
  return RES_ERROR;
 8009846:	2301      	movs	r3, #1
  /* USER CODE END SD_read */
}
 8009848:	4618      	mov	r0, r3
 800984a:	3718      	adds	r7, #24
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	200003b0 	.word	0x200003b0
 8009854:	20000238 	.word	0x20000238
 8009858:	0800e888 	.word	0x0800e888

0800985c <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b086      	sub	sp, #24
 8009860:	af00      	add	r7, sp, #0
 8009862:	60b9      	str	r1, [r7, #8]
 8009864:	607a      	str	r2, [r7, #4]
 8009866:	603b      	str	r3, [r7, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_write */

  uint32_t tickstart;
  sd_dma_tx_semaphore=0;
 800986c:	4b17      	ldr	r3, [pc, #92]	; (80098cc <SD_write+0x70>)
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]
  if(HAL_SD_WriteBlocks_DMA(&hsd1, buff, sector, count)==HAL_OK){
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	687a      	ldr	r2, [r7, #4]
 8009876:	68b9      	ldr	r1, [r7, #8]
 8009878:	4815      	ldr	r0, [pc, #84]	; (80098d0 <SD_write+0x74>)
 800987a:	f7fc facd 	bl	8005e18 <HAL_SD_WriteBlocks_DMA>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d11e      	bne.n	80098c2 <SD_write+0x66>
   tickstart = HAL_GetTick();
 8009884:	f7f7 fdac 	bl	80013e0 <HAL_GetTick>
 8009888:	6178      	str	r0, [r7, #20]
   while (sd_dma_tx_semaphore==0)
 800988a:	e00e      	b.n	80098aa <SD_write+0x4e>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 800988c:	f7f7 fda8 	bl	80013e0 <HAL_GetTick>
 8009890:	4602      	mov	r2, r0
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	1ad3      	subs	r3, r2, r3
 8009896:	f242 720f 	movw	r2, #9999	; 0x270f
 800989a:	4293      	cmp	r3, r2
 800989c:	d905      	bls.n	80098aa <SD_write+0x4e>
    	print_str("werr",0);
 800989e:	2100      	movs	r1, #0
 80098a0:	480c      	ldr	r0, [pc, #48]	; (80098d4 <SD_write+0x78>)
 80098a2:	f7f6 fe5f 	bl	8000564 <print_str>
    	return RES_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	e00c      	b.n	80098c4 <SD_write+0x68>
   while (sd_dma_tx_semaphore==0)
 80098aa:	4b08      	ldr	r3, [pc, #32]	; (80098cc <SD_write+0x70>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d0ec      	beq.n	800988c <SD_write+0x30>
    }
   }
   if(HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER){
 80098b2:	4807      	ldr	r0, [pc, #28]	; (80098d0 <SD_write+0x74>)
 80098b4:	f7fd f8b6 	bl	8006a24 <HAL_SD_GetCardState>
 80098b8:	4603      	mov	r3, r0
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d101      	bne.n	80098c2 <SD_write+0x66>
     //print_str("wok",0);
     return RES_OK;
 80098be:	2300      	movs	r3, #0
 80098c0:	e000      	b.n	80098c4 <SD_write+0x68>
   }
  }
  return RES_ERROR;
 80098c2:	2301      	movs	r3, #1
  /* USER CODE END SD_write */
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	200003b4 	.word	0x200003b4
 80098d0:	20000238 	.word	0x20000238
 80098d4:	0800e890 	.word	0x0800e890

080098d8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80098d8:	b580      	push	{r7, lr}
 80098da:	b08c      	sub	sp, #48	; 0x30
 80098dc:	af00      	add	r7, sp, #0
 80098de:	4603      	mov	r3, r0
 80098e0:	603a      	str	r2, [r7, #0]
 80098e2:	71fb      	strb	r3, [r7, #7]
 80098e4:	460b      	mov	r3, r1
 80098e6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN SD_ioctl */
  DRESULT res = RES_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_SD_CardInfoTypeDef  CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80098ee:	4b26      	ldr	r3, [pc, #152]	; (8009988 <SD_ioctl+0xb0>)
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	b2db      	uxtb	r3, r3
 80098f4:	f003 0301 	and.w	r3, r3, #1
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d001      	beq.n	8009900 <SD_ioctl+0x28>
 80098fc:	2303      	movs	r3, #3
 80098fe:	e03f      	b.n	8009980 <SD_ioctl+0xa8>

  switch (cmd)
 8009900:	79bb      	ldrb	r3, [r7, #6]
 8009902:	2b03      	cmp	r3, #3
 8009904:	d837      	bhi.n	8009976 <SD_ioctl+0x9e>
 8009906:	a201      	add	r2, pc, #4	; (adr r2, 800990c <SD_ioctl+0x34>)
 8009908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990c:	0800991d 	.word	0x0800991d
 8009910:	08009925 	.word	0x08009925
 8009914:	0800993f 	.word	0x0800993f
 8009918:	0800995b 	.word	0x0800995b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800991c:	2300      	movs	r3, #0
 800991e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009922:	e02b      	b.n	800997c <SD_ioctl+0xa4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 8009924:	f107 0308 	add.w	r3, r7, #8
 8009928:	4619      	mov	r1, r3
 800992a:	4818      	ldr	r0, [pc, #96]	; (800998c <SD_ioctl+0xb4>)
 800992c:	f7fc ff3e 	bl	80067ac <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009930:	6a3a      	ldr	r2, [r7, #32]
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800993c:	e01e      	b.n	800997c <SD_ioctl+0xa4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800993e:	f107 0308 	add.w	r3, r7, #8
 8009942:	4619      	mov	r1, r3
 8009944:	4811      	ldr	r0, [pc, #68]	; (800998c <SD_ioctl+0xb4>)
 8009946:	f7fc ff31 	bl	80067ac <HAL_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800994a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800994c:	b29a      	uxth	r2, r3
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009958:	e010      	b.n	800997c <SD_ioctl+0xa4>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800995a:	f107 0308 	add.w	r3, r7, #8
 800995e:	4619      	mov	r1, r3
 8009960:	480a      	ldr	r0, [pc, #40]	; (800998c <SD_ioctl+0xb4>)
 8009962:	f7fc ff23 	bl	80067ac <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009968:	0a5a      	lsrs	r2, r3, #9
 800996a:	683b      	ldr	r3, [r7, #0]
 800996c:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800996e:	2300      	movs	r3, #0
 8009970:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009974:	e002      	b.n	800997c <SD_ioctl+0xa4>

  default:
    res = RES_PARERR;
 8009976:	2304      	movs	r3, #4
 8009978:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800997c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE END SD_ioctl */
}
 8009980:	4618      	mov	r0, r3
 8009982:	3730      	adds	r7, #48	; 0x30
 8009984:	46bd      	mov	sp, r7
 8009986:	bd80      	pop	{r7, pc}
 8009988:	20000009 	.word	0x20000009
 800998c:	20000238 	.word	0x20000238

08009990 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b084      	sub	sp, #16
 8009994:	af00      	add	r7, sp, #0
 8009996:	4603      	mov	r3, r0
 8009998:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800999a:	79fb      	ldrb	r3, [r7, #7]
 800999c:	4a08      	ldr	r2, [pc, #32]	; (80099c0 <disk_status+0x30>)
 800999e:	009b      	lsls	r3, r3, #2
 80099a0:	4413      	add	r3, r2
 80099a2:	685b      	ldr	r3, [r3, #4]
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	79fa      	ldrb	r2, [r7, #7]
 80099a8:	4905      	ldr	r1, [pc, #20]	; (80099c0 <disk_status+0x30>)
 80099aa:	440a      	add	r2, r1
 80099ac:	7a12      	ldrb	r2, [r2, #8]
 80099ae:	4610      	mov	r0, r2
 80099b0:	4798      	blx	r3
 80099b2:	4603      	mov	r3, r0
 80099b4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80099b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099b8:	4618      	mov	r0, r3
 80099ba:	3710      	adds	r7, #16
 80099bc:	46bd      	mov	sp, r7
 80099be:	bd80      	pop	{r7, pc}
 80099c0:	200003f0 	.word	0x200003f0

080099c4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b084      	sub	sp, #16
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	4603      	mov	r3, r0
 80099cc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80099d2:	79fb      	ldrb	r3, [r7, #7]
 80099d4:	4a0d      	ldr	r2, [pc, #52]	; (8009a0c <disk_initialize+0x48>)
 80099d6:	5cd3      	ldrb	r3, [r2, r3]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d111      	bne.n	8009a00 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80099dc:	79fb      	ldrb	r3, [r7, #7]
 80099de:	4a0b      	ldr	r2, [pc, #44]	; (8009a0c <disk_initialize+0x48>)
 80099e0:	2101      	movs	r1, #1
 80099e2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80099e4:	79fb      	ldrb	r3, [r7, #7]
 80099e6:	4a09      	ldr	r2, [pc, #36]	; (8009a0c <disk_initialize+0x48>)
 80099e8:	009b      	lsls	r3, r3, #2
 80099ea:	4413      	add	r3, r2
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	79fa      	ldrb	r2, [r7, #7]
 80099f2:	4906      	ldr	r1, [pc, #24]	; (8009a0c <disk_initialize+0x48>)
 80099f4:	440a      	add	r2, r1
 80099f6:	7a12      	ldrb	r2, [r2, #8]
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
 80099fc:	4603      	mov	r3, r0
 80099fe:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3710      	adds	r7, #16
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	200003f0 	.word	0x200003f0

08009a10 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	60b9      	str	r1, [r7, #8]
 8009a18:	607a      	str	r2, [r7, #4]
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009a20:	7bfb      	ldrb	r3, [r7, #15]
 8009a22:	4a0a      	ldr	r2, [pc, #40]	; (8009a4c <disk_read+0x3c>)
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	689c      	ldr	r4, [r3, #8]
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
 8009a2e:	4a07      	ldr	r2, [pc, #28]	; (8009a4c <disk_read+0x3c>)
 8009a30:	4413      	add	r3, r2
 8009a32:	7a18      	ldrb	r0, [r3, #8]
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	68b9      	ldr	r1, [r7, #8]
 8009a3a:	47a0      	blx	r4
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	371c      	adds	r7, #28
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd90      	pop	{r4, r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	200003f0 	.word	0x200003f0

08009a50 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009a50:	b590      	push	{r4, r7, lr}
 8009a52:	b087      	sub	sp, #28
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60b9      	str	r1, [r7, #8]
 8009a58:	607a      	str	r2, [r7, #4]
 8009a5a:	603b      	str	r3, [r7, #0]
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009a60:	7bfb      	ldrb	r3, [r7, #15]
 8009a62:	4a0a      	ldr	r2, [pc, #40]	; (8009a8c <disk_write+0x3c>)
 8009a64:	009b      	lsls	r3, r3, #2
 8009a66:	4413      	add	r3, r2
 8009a68:	685b      	ldr	r3, [r3, #4]
 8009a6a:	68dc      	ldr	r4, [r3, #12]
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4a07      	ldr	r2, [pc, #28]	; (8009a8c <disk_write+0x3c>)
 8009a70:	4413      	add	r3, r2
 8009a72:	7a18      	ldrb	r0, [r3, #8]
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	687a      	ldr	r2, [r7, #4]
 8009a78:	68b9      	ldr	r1, [r7, #8]
 8009a7a:	47a0      	blx	r4
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	75fb      	strb	r3, [r7, #23]
  return res;
 8009a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	371c      	adds	r7, #28
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd90      	pop	{r4, r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	200003f0 	.word	0x200003f0

08009a90 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b084      	sub	sp, #16
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	4603      	mov	r3, r0
 8009a98:	603a      	str	r2, [r7, #0]
 8009a9a:	71fb      	strb	r3, [r7, #7]
 8009a9c:	460b      	mov	r3, r1
 8009a9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009aa0:	79fb      	ldrb	r3, [r7, #7]
 8009aa2:	4a09      	ldr	r2, [pc, #36]	; (8009ac8 <disk_ioctl+0x38>)
 8009aa4:	009b      	lsls	r3, r3, #2
 8009aa6:	4413      	add	r3, r2
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	79fa      	ldrb	r2, [r7, #7]
 8009aae:	4906      	ldr	r1, [pc, #24]	; (8009ac8 <disk_ioctl+0x38>)
 8009ab0:	440a      	add	r2, r1
 8009ab2:	7a10      	ldrb	r0, [r2, #8]
 8009ab4:	79b9      	ldrb	r1, [r7, #6]
 8009ab6:	683a      	ldr	r2, [r7, #0]
 8009ab8:	4798      	blx	r3
 8009aba:	4603      	mov	r3, r0
 8009abc:	73fb      	strb	r3, [r7, #15]
  return res;
 8009abe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	3710      	adds	r7, #16
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	bd80      	pop	{r7, pc}
 8009ac8:	200003f0 	.word	0x200003f0

08009acc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009acc:	b480      	push	{r7}
 8009ace:	b085      	sub	sp, #20
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3301      	adds	r3, #1
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009adc:	89fb      	ldrh	r3, [r7, #14]
 8009ade:	021b      	lsls	r3, r3, #8
 8009ae0:	b21a      	sxth	r2, r3
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	b21b      	sxth	r3, r3
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	b21b      	sxth	r3, r3
 8009aec:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009aee:	89fb      	ldrh	r3, [r7, #14]
}
 8009af0:	4618      	mov	r0, r3
 8009af2:	3714      	adds	r7, #20
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009afc:	b480      	push	{r7}
 8009afe:	b085      	sub	sp, #20
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	3303      	adds	r3, #3
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	021b      	lsls	r3, r3, #8
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	3202      	adds	r2, #2
 8009b14:	7812      	ldrb	r2, [r2, #0]
 8009b16:	4313      	orrs	r3, r2
 8009b18:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	021b      	lsls	r3, r3, #8
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	3201      	adds	r2, #1
 8009b22:	7812      	ldrb	r2, [r2, #0]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	021b      	lsls	r3, r3, #8
 8009b2c:	687a      	ldr	r2, [r7, #4]
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	4313      	orrs	r3, r2
 8009b32:	60fb      	str	r3, [r7, #12]
	return rv;
 8009b34:	68fb      	ldr	r3, [r7, #12]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b40:	4770      	bx	lr

08009b42 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8009b42:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009b46:	b09d      	sub	sp, #116	; 0x74
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 8009b4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b4e:	3307      	adds	r3, #7
 8009b50:	781b      	ldrb	r3, [r3, #0]
 8009b52:	b2db      	uxtb	r3, r3
 8009b54:	2200      	movs	r2, #0
 8009b56:	469a      	mov	sl, r3
 8009b58:	4693      	mov	fp, r2
 8009b5a:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 8009b5e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b62:	f04f 0000 	mov.w	r0, #0
 8009b66:	f04f 0100 	mov.w	r1, #0
 8009b6a:	0219      	lsls	r1, r3, #8
 8009b6c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009b70:	0210      	lsls	r0, r2, #8
 8009b72:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b74:	3306      	adds	r3, #6
 8009b76:	781b      	ldrb	r3, [r3, #0]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	461c      	mov	r4, r3
 8009b7e:	4615      	mov	r5, r2
 8009b80:	ea40 0804 	orr.w	r8, r0, r4
 8009b84:	ea41 0905 	orr.w	r9, r1, r5
 8009b88:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 8009b8c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009b90:	f04f 0000 	mov.w	r0, #0
 8009b94:	f04f 0100 	mov.w	r1, #0
 8009b98:	0219      	lsls	r1, r3, #8
 8009b9a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009b9e:	0210      	lsls	r0, r2, #8
 8009ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009ba2:	3305      	adds	r3, #5
 8009ba4:	781b      	ldrb	r3, [r3, #0]
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	2200      	movs	r2, #0
 8009baa:	65bb      	str	r3, [r7, #88]	; 0x58
 8009bac:	65fa      	str	r2, [r7, #92]	; 0x5c
 8009bae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 8009bb2:	4623      	mov	r3, r4
 8009bb4:	4303      	orrs	r3, r0
 8009bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009bb8:	462b      	mov	r3, r5
 8009bba:	430b      	orrs	r3, r1
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bbe:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 8009bc2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 8009bc6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009bca:	f04f 0000 	mov.w	r0, #0
 8009bce:	f04f 0100 	mov.w	r1, #0
 8009bd2:	0219      	lsls	r1, r3, #8
 8009bd4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009bd8:	0210      	lsls	r0, r2, #8
 8009bda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bdc:	3304      	adds	r3, #4
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2200      	movs	r2, #0
 8009be4:	653b      	str	r3, [r7, #80]	; 0x50
 8009be6:	657a      	str	r2, [r7, #84]	; 0x54
 8009be8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8009bec:	4623      	mov	r3, r4
 8009bee:	4303      	orrs	r3, r0
 8009bf0:	623b      	str	r3, [r7, #32]
 8009bf2:	462b      	mov	r3, r5
 8009bf4:	430b      	orrs	r3, r1
 8009bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8009bf8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009bfc:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 8009c00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009c04:	f04f 0000 	mov.w	r0, #0
 8009c08:	f04f 0100 	mov.w	r1, #0
 8009c0c:	0219      	lsls	r1, r3, #8
 8009c0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c12:	0210      	lsls	r0, r2, #8
 8009c14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c16:	3303      	adds	r3, #3
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c20:	64fa      	str	r2, [r7, #76]	; 0x4c
 8009c22:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8009c26:	4623      	mov	r3, r4
 8009c28:	4303      	orrs	r3, r0
 8009c2a:	61bb      	str	r3, [r7, #24]
 8009c2c:	462b      	mov	r3, r5
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	61fb      	str	r3, [r7, #28]
 8009c32:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8009c36:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 8009c3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8009c3e:	f04f 0000 	mov.w	r0, #0
 8009c42:	f04f 0100 	mov.w	r1, #0
 8009c46:	0219      	lsls	r1, r3, #8
 8009c48:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8009c4c:	0210      	lsls	r0, r2, #8
 8009c4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c50:	3302      	adds	r3, #2
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	2200      	movs	r2, #0
 8009c58:	643b      	str	r3, [r7, #64]	; 0x40
 8009c5a:	647a      	str	r2, [r7, #68]	; 0x44
 8009c5c:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8009c60:	4623      	mov	r3, r4
 8009c62:	4303      	orrs	r3, r0
 8009c64:	613b      	str	r3, [r7, #16]
 8009c66:	462b      	mov	r3, r5
 8009c68:	430b      	orrs	r3, r1
 8009c6a:	617b      	str	r3, [r7, #20]
 8009c6c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c70:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 8009c74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	020b      	lsls	r3, r1, #8
 8009c82:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009c86:	0202      	lsls	r2, r0, #8
 8009c88:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009c8a:	3101      	adds	r1, #1
 8009c8c:	7809      	ldrb	r1, [r1, #0]
 8009c8e:	b2c9      	uxtb	r1, r1
 8009c90:	2000      	movs	r0, #0
 8009c92:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c94:	63f8      	str	r0, [r7, #60]	; 0x3c
 8009c96:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	4311      	orrs	r1, r2
 8009c9e:	60b9      	str	r1, [r7, #8]
 8009ca0:	4629      	mov	r1, r5
 8009ca2:	4319      	orrs	r1, r3
 8009ca4:	60f9      	str	r1, [r7, #12]
 8009ca6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009caa:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 8009cae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009cb2:	f04f 0200 	mov.w	r2, #0
 8009cb6:	f04f 0300 	mov.w	r3, #0
 8009cba:	020b      	lsls	r3, r1, #8
 8009cbc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009cc0:	0202      	lsls	r2, r0, #8
 8009cc2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8009cc4:	7809      	ldrb	r1, [r1, #0]
 8009cc6:	b2c9      	uxtb	r1, r1
 8009cc8:	2000      	movs	r0, #0
 8009cca:	6339      	str	r1, [r7, #48]	; 0x30
 8009ccc:	6378      	str	r0, [r7, #52]	; 0x34
 8009cce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4311      	orrs	r1, r2
 8009cd6:	6039      	str	r1, [r7, #0]
 8009cd8:	4629      	mov	r1, r5
 8009cda:	4319      	orrs	r1, r3
 8009cdc:	6079      	str	r1, [r7, #4]
 8009cde:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009ce2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 8009ce6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 8009cea:	4610      	mov	r0, r2
 8009cec:	4619      	mov	r1, r3
 8009cee:	3774      	adds	r7, #116	; 0x74
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8009cf6:	4770      	bx	lr

08009cf8 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b083      	sub	sp, #12
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	1c5a      	adds	r2, r3, #1
 8009d08:	607a      	str	r2, [r7, #4]
 8009d0a:	887a      	ldrh	r2, [r7, #2]
 8009d0c:	b2d2      	uxtb	r2, r2
 8009d0e:	701a      	strb	r2, [r3, #0]
 8009d10:	887b      	ldrh	r3, [r7, #2]
 8009d12:	0a1b      	lsrs	r3, r3, #8
 8009d14:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	1c5a      	adds	r2, r3, #1
 8009d1a:	607a      	str	r2, [r7, #4]
 8009d1c:	887a      	ldrh	r2, [r7, #2]
 8009d1e:	b2d2      	uxtb	r2, r2
 8009d20:	701a      	strb	r2, [r3, #0]
}
 8009d22:	bf00      	nop
 8009d24:	370c      	adds	r7, #12
 8009d26:	46bd      	mov	sp, r7
 8009d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2c:	4770      	bx	lr

08009d2e <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009d2e:	b480      	push	{r7}
 8009d30:	b083      	sub	sp, #12
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	1c5a      	adds	r2, r3, #1
 8009d3c:	607a      	str	r2, [r7, #4]
 8009d3e:	683a      	ldr	r2, [r7, #0]
 8009d40:	b2d2      	uxtb	r2, r2
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	0a1b      	lsrs	r3, r3, #8
 8009d48:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	1c5a      	adds	r2, r3, #1
 8009d4e:	607a      	str	r2, [r7, #4]
 8009d50:	683a      	ldr	r2, [r7, #0]
 8009d52:	b2d2      	uxtb	r2, r2
 8009d54:	701a      	strb	r2, [r3, #0]
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	0a1b      	lsrs	r3, r3, #8
 8009d5a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	1c5a      	adds	r2, r3, #1
 8009d60:	607a      	str	r2, [r7, #4]
 8009d62:	683a      	ldr	r2, [r7, #0]
 8009d64:	b2d2      	uxtb	r2, r2
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	0a1b      	lsrs	r3, r3, #8
 8009d6c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	1c5a      	adds	r2, r3, #1
 8009d72:	607a      	str	r2, [r7, #4]
 8009d74:	683a      	ldr	r2, [r7, #0]
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]
}
 8009d7a:	bf00      	nop
 8009d7c:	370c      	adds	r7, #12
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr

08009d86 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8009d86:	b480      	push	{r7}
 8009d88:	b085      	sub	sp, #20
 8009d8a:	af00      	add	r7, sp, #0
 8009d8c:	60f8      	str	r0, [r7, #12]
 8009d8e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	1c5a      	adds	r2, r3, #1
 8009d96:	60fa      	str	r2, [r7, #12]
 8009d98:	783a      	ldrb	r2, [r7, #0]
 8009d9a:	701a      	strb	r2, [r3, #0]
 8009d9c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009da0:	f04f 0200 	mov.w	r2, #0
 8009da4:	f04f 0300 	mov.w	r3, #0
 8009da8:	0a02      	lsrs	r2, r0, #8
 8009daa:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009dae:	0a0b      	lsrs	r3, r1, #8
 8009db0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	60fa      	str	r2, [r7, #12]
 8009dba:	783a      	ldrb	r2, [r7, #0]
 8009dbc:	701a      	strb	r2, [r3, #0]
 8009dbe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009dc2:	f04f 0200 	mov.w	r2, #0
 8009dc6:	f04f 0300 	mov.w	r3, #0
 8009dca:	0a02      	lsrs	r2, r0, #8
 8009dcc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009dd0:	0a0b      	lsrs	r3, r1, #8
 8009dd2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	60fa      	str	r2, [r7, #12]
 8009ddc:	783a      	ldrb	r2, [r7, #0]
 8009dde:	701a      	strb	r2, [r3, #0]
 8009de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009de4:	f04f 0200 	mov.w	r2, #0
 8009de8:	f04f 0300 	mov.w	r3, #0
 8009dec:	0a02      	lsrs	r2, r0, #8
 8009dee:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009df2:	0a0b      	lsrs	r3, r1, #8
 8009df4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	1c5a      	adds	r2, r3, #1
 8009dfc:	60fa      	str	r2, [r7, #12]
 8009dfe:	783a      	ldrb	r2, [r7, #0]
 8009e00:	701a      	strb	r2, [r3, #0]
 8009e02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e06:	f04f 0200 	mov.w	r2, #0
 8009e0a:	f04f 0300 	mov.w	r3, #0
 8009e0e:	0a02      	lsrs	r2, r0, #8
 8009e10:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e14:	0a0b      	lsrs	r3, r1, #8
 8009e16:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1c5a      	adds	r2, r3, #1
 8009e1e:	60fa      	str	r2, [r7, #12]
 8009e20:	783a      	ldrb	r2, [r7, #0]
 8009e22:	701a      	strb	r2, [r3, #0]
 8009e24:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e28:	f04f 0200 	mov.w	r2, #0
 8009e2c:	f04f 0300 	mov.w	r3, #0
 8009e30:	0a02      	lsrs	r2, r0, #8
 8009e32:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e36:	0a0b      	lsrs	r3, r1, #8
 8009e38:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	60fa      	str	r2, [r7, #12]
 8009e42:	783a      	ldrb	r2, [r7, #0]
 8009e44:	701a      	strb	r2, [r3, #0]
 8009e46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e4a:	f04f 0200 	mov.w	r2, #0
 8009e4e:	f04f 0300 	mov.w	r3, #0
 8009e52:	0a02      	lsrs	r2, r0, #8
 8009e54:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e58:	0a0b      	lsrs	r3, r1, #8
 8009e5a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	1c5a      	adds	r2, r3, #1
 8009e62:	60fa      	str	r2, [r7, #12]
 8009e64:	783a      	ldrb	r2, [r7, #0]
 8009e66:	701a      	strb	r2, [r3, #0]
 8009e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009e6c:	f04f 0200 	mov.w	r2, #0
 8009e70:	f04f 0300 	mov.w	r3, #0
 8009e74:	0a02      	lsrs	r2, r0, #8
 8009e76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009e7a:	0a0b      	lsrs	r3, r1, #8
 8009e7c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	1c5a      	adds	r2, r3, #1
 8009e84:	60fa      	str	r2, [r7, #12]
 8009e86:	783a      	ldrb	r2, [r7, #0]
 8009e88:	701a      	strb	r2, [r3, #0]
}
 8009e8a:	bf00      	nop
 8009e8c:	3714      	adds	r7, #20
 8009e8e:	46bd      	mov	sp, r7
 8009e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e94:	4770      	bx	lr

08009e96 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009e96:	b480      	push	{r7}
 8009e98:	b087      	sub	sp, #28
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	60f8      	str	r0, [r7, #12]
 8009e9e:	60b9      	str	r1, [r7, #8]
 8009ea0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009ea6:	68bb      	ldr	r3, [r7, #8]
 8009ea8:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d00d      	beq.n	8009ecc <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009eb0:	693a      	ldr	r2, [r7, #16]
 8009eb2:	1c53      	adds	r3, r2, #1
 8009eb4:	613b      	str	r3, [r7, #16]
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	1c59      	adds	r1, r3, #1
 8009eba:	6179      	str	r1, [r7, #20]
 8009ebc:	7812      	ldrb	r2, [r2, #0]
 8009ebe:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	607b      	str	r3, [r7, #4]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1f1      	bne.n	8009eb0 <mem_cpy+0x1a>
	}
}
 8009ecc:	bf00      	nop
 8009ece:	371c      	adds	r7, #28
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009ed8:	b480      	push	{r7}
 8009eda:	b087      	sub	sp, #28
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	60b9      	str	r1, [r7, #8]
 8009ee2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	1c5a      	adds	r2, r3, #1
 8009eec:	617a      	str	r2, [r7, #20]
 8009eee:	68ba      	ldr	r2, [r7, #8]
 8009ef0:	b2d2      	uxtb	r2, r2
 8009ef2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	3b01      	subs	r3, #1
 8009ef8:	607b      	str	r3, [r7, #4]
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1f3      	bne.n	8009ee8 <mem_set+0x10>
}
 8009f00:	bf00      	nop
 8009f02:	bf00      	nop
 8009f04:	371c      	adds	r7, #28
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009f0e:	b480      	push	{r7}
 8009f10:	b089      	sub	sp, #36	; 0x24
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	61fb      	str	r3, [r7, #28]
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009f22:	2300      	movs	r3, #0
 8009f24:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009f26:	69fb      	ldr	r3, [r7, #28]
 8009f28:	1c5a      	adds	r2, r3, #1
 8009f2a:	61fa      	str	r2, [r7, #28]
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	4619      	mov	r1, r3
 8009f30:	69bb      	ldr	r3, [r7, #24]
 8009f32:	1c5a      	adds	r2, r3, #1
 8009f34:	61ba      	str	r2, [r7, #24]
 8009f36:	781b      	ldrb	r3, [r3, #0]
 8009f38:	1acb      	subs	r3, r1, r3
 8009f3a:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	607b      	str	r3, [r7, #4]
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d002      	beq.n	8009f4e <mem_cmp+0x40>
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0eb      	beq.n	8009f26 <mem_cmp+0x18>

	return r;
 8009f4e:	697b      	ldr	r3, [r7, #20]
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3724      	adds	r7, #36	; 0x24
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009f5c:	b480      	push	{r7}
 8009f5e:	b083      	sub	sp, #12
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009f66:	e002      	b.n	8009f6e <chk_chr+0x12>
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	607b      	str	r3, [r7, #4]
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	781b      	ldrb	r3, [r3, #0]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d005      	beq.n	8009f82 <chk_chr+0x26>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	d1f2      	bne.n	8009f68 <chk_chr+0xc>
	return *str;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	781b      	ldrb	r3, [r3, #0]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	370c      	adds	r7, #12
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f90:	4770      	bx	lr
	...

08009f94 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
 8009f9c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	60bb      	str	r3, [r7, #8]
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e029      	b.n	8009ffc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009fa8:	4a27      	ldr	r2, [pc, #156]	; (800a048 <chk_lock+0xb4>)
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	011b      	lsls	r3, r3, #4
 8009fae:	4413      	add	r3, r2
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d01d      	beq.n	8009ff2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fb6:	4a24      	ldr	r2, [pc, #144]	; (800a048 <chk_lock+0xb4>)
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4413      	add	r3, r2
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	429a      	cmp	r2, r3
 8009fc6:	d116      	bne.n	8009ff6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009fc8:	4a1f      	ldr	r2, [pc, #124]	; (800a048 <chk_lock+0xb4>)
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	011b      	lsls	r3, r3, #4
 8009fce:	4413      	add	r3, r2
 8009fd0:	3304      	adds	r3, #4
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fd8:	429a      	cmp	r2, r3
 8009fda:	d10c      	bne.n	8009ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009fdc:	4a1a      	ldr	r2, [pc, #104]	; (800a048 <chk_lock+0xb4>)
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	011b      	lsls	r3, r3, #4
 8009fe2:	4413      	add	r3, r2
 8009fe4:	3308      	adds	r3, #8
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 8009fec:	429a      	cmp	r2, r3
 8009fee:	d102      	bne.n	8009ff6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009ff0:	e007      	b.n	800a002 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009ff2:	2301      	movs	r3, #1
 8009ff4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	60fb      	str	r3, [r7, #12]
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d9d2      	bls.n	8009fa8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	2b02      	cmp	r3, #2
 800a006:	d109      	bne.n	800a01c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d102      	bne.n	800a014 <chk_lock+0x80>
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d101      	bne.n	800a018 <chk_lock+0x84>
 800a014:	2300      	movs	r3, #0
 800a016:	e010      	b.n	800a03a <chk_lock+0xa6>
 800a018:	2312      	movs	r3, #18
 800a01a:	e00e      	b.n	800a03a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d108      	bne.n	800a034 <chk_lock+0xa0>
 800a022:	4a09      	ldr	r2, [pc, #36]	; (800a048 <chk_lock+0xb4>)
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	4413      	add	r3, r2
 800a02a:	330c      	adds	r3, #12
 800a02c:	881b      	ldrh	r3, [r3, #0]
 800a02e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a032:	d101      	bne.n	800a038 <chk_lock+0xa4>
 800a034:	2310      	movs	r3, #16
 800a036:	e000      	b.n	800a03a <chk_lock+0xa6>
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3714      	adds	r7, #20
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr
 800a046:	bf00      	nop
 800a048:	200003d0 	.word	0x200003d0

0800a04c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a04c:	b480      	push	{r7}
 800a04e:	b083      	sub	sp, #12
 800a050:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a052:	2300      	movs	r3, #0
 800a054:	607b      	str	r3, [r7, #4]
 800a056:	e002      	b.n	800a05e <enq_lock+0x12>
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	3301      	adds	r3, #1
 800a05c:	607b      	str	r3, [r7, #4]
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b01      	cmp	r3, #1
 800a062:	d806      	bhi.n	800a072 <enq_lock+0x26>
 800a064:	4a09      	ldr	r2, [pc, #36]	; (800a08c <enq_lock+0x40>)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	011b      	lsls	r3, r3, #4
 800a06a:	4413      	add	r3, r2
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1f2      	bne.n	800a058 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	2b02      	cmp	r3, #2
 800a076:	bf14      	ite	ne
 800a078:	2301      	movne	r3, #1
 800a07a:	2300      	moveq	r3, #0
 800a07c:	b2db      	uxtb	r3, r3
}
 800a07e:	4618      	mov	r0, r3
 800a080:	370c      	adds	r7, #12
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	200003d0 	.word	0x200003d0

0800a090 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a090:	b480      	push	{r7}
 800a092:	b085      	sub	sp, #20
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a09a:	2300      	movs	r3, #0
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	e01f      	b.n	800a0e0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a0a0:	4a41      	ldr	r2, [pc, #260]	; (800a1a8 <inc_lock+0x118>)
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	011b      	lsls	r3, r3, #4
 800a0a6:	4413      	add	r3, r2
 800a0a8:	681a      	ldr	r2, [r3, #0]
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d113      	bne.n	800a0da <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0b2:	4a3d      	ldr	r2, [pc, #244]	; (800a1a8 <inc_lock+0x118>)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	4413      	add	r3, r2
 800a0ba:	3304      	adds	r3, #4
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a0c2:	429a      	cmp	r2, r3
 800a0c4:	d109      	bne.n	800a0da <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a0c6:	4a38      	ldr	r2, [pc, #224]	; (800a1a8 <inc_lock+0x118>)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	011b      	lsls	r3, r3, #4
 800a0cc:	4413      	add	r3, r2
 800a0ce:	3308      	adds	r3, #8
 800a0d0:	681a      	ldr	r2, [r3, #0]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800a0d6:	429a      	cmp	r2, r3
 800a0d8:	d006      	beq.n	800a0e8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3301      	adds	r3, #1
 800a0de:	60fb      	str	r3, [r7, #12]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	2b01      	cmp	r3, #1
 800a0e4:	d9dc      	bls.n	800a0a0 <inc_lock+0x10>
 800a0e6:	e000      	b.n	800a0ea <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a0e8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	2b02      	cmp	r3, #2
 800a0ee:	d132      	bne.n	800a156 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	60fb      	str	r3, [r7, #12]
 800a0f4:	e002      	b.n	800a0fc <inc_lock+0x6c>
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3301      	adds	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d806      	bhi.n	800a110 <inc_lock+0x80>
 800a102:	4a29      	ldr	r2, [pc, #164]	; (800a1a8 <inc_lock+0x118>)
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	011b      	lsls	r3, r3, #4
 800a108:	4413      	add	r3, r2
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d1f2      	bne.n	800a0f6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b02      	cmp	r3, #2
 800a114:	d101      	bne.n	800a11a <inc_lock+0x8a>
 800a116:	2300      	movs	r3, #0
 800a118:	e040      	b.n	800a19c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681a      	ldr	r2, [r3, #0]
 800a11e:	4922      	ldr	r1, [pc, #136]	; (800a1a8 <inc_lock+0x118>)
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	011b      	lsls	r3, r3, #4
 800a124:	440b      	add	r3, r1
 800a126:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	689a      	ldr	r2, [r3, #8]
 800a12c:	491e      	ldr	r1, [pc, #120]	; (800a1a8 <inc_lock+0x118>)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	440b      	add	r3, r1
 800a134:	3304      	adds	r3, #4
 800a136:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a13c:	491a      	ldr	r1, [pc, #104]	; (800a1a8 <inc_lock+0x118>)
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	440b      	add	r3, r1
 800a144:	3308      	adds	r3, #8
 800a146:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a148:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <inc_lock+0x118>)
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	011b      	lsls	r3, r3, #4
 800a14e:	4413      	add	r3, r2
 800a150:	330c      	adds	r3, #12
 800a152:	2200      	movs	r2, #0
 800a154:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d009      	beq.n	800a170 <inc_lock+0xe0>
 800a15c:	4a12      	ldr	r2, [pc, #72]	; (800a1a8 <inc_lock+0x118>)
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	011b      	lsls	r3, r3, #4
 800a162:	4413      	add	r3, r2
 800a164:	330c      	adds	r3, #12
 800a166:	881b      	ldrh	r3, [r3, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d001      	beq.n	800a170 <inc_lock+0xe0>
 800a16c:	2300      	movs	r3, #0
 800a16e:	e015      	b.n	800a19c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d108      	bne.n	800a188 <inc_lock+0xf8>
 800a176:	4a0c      	ldr	r2, [pc, #48]	; (800a1a8 <inc_lock+0x118>)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	011b      	lsls	r3, r3, #4
 800a17c:	4413      	add	r3, r2
 800a17e:	330c      	adds	r3, #12
 800a180:	881b      	ldrh	r3, [r3, #0]
 800a182:	3301      	adds	r3, #1
 800a184:	b29a      	uxth	r2, r3
 800a186:	e001      	b.n	800a18c <inc_lock+0xfc>
 800a188:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a18c:	4906      	ldr	r1, [pc, #24]	; (800a1a8 <inc_lock+0x118>)
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	011b      	lsls	r3, r3, #4
 800a192:	440b      	add	r3, r1
 800a194:	330c      	adds	r3, #12
 800a196:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a198:	68fb      	ldr	r3, [r7, #12]
 800a19a:	3301      	adds	r3, #1
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3714      	adds	r7, #20
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr
 800a1a8:	200003d0 	.word	0x200003d0

0800a1ac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	607b      	str	r3, [r7, #4]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	2b01      	cmp	r3, #1
 800a1be:	d825      	bhi.n	800a20c <dec_lock+0x60>
		n = Files[i].ctr;
 800a1c0:	4a17      	ldr	r2, [pc, #92]	; (800a220 <dec_lock+0x74>)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	011b      	lsls	r3, r3, #4
 800a1c6:	4413      	add	r3, r2
 800a1c8:	330c      	adds	r3, #12
 800a1ca:	881b      	ldrh	r3, [r3, #0]
 800a1cc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a1ce:	89fb      	ldrh	r3, [r7, #14]
 800a1d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1d4:	d101      	bne.n	800a1da <dec_lock+0x2e>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a1da:	89fb      	ldrh	r3, [r7, #14]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d002      	beq.n	800a1e6 <dec_lock+0x3a>
 800a1e0:	89fb      	ldrh	r3, [r7, #14]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a1e6:	4a0e      	ldr	r2, [pc, #56]	; (800a220 <dec_lock+0x74>)
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	4413      	add	r3, r2
 800a1ee:	330c      	adds	r3, #12
 800a1f0:	89fa      	ldrh	r2, [r7, #14]
 800a1f2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a1f4:	89fb      	ldrh	r3, [r7, #14]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d105      	bne.n	800a206 <dec_lock+0x5a>
 800a1fa:	4a09      	ldr	r2, [pc, #36]	; (800a220 <dec_lock+0x74>)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	011b      	lsls	r3, r3, #4
 800a200:	4413      	add	r3, r2
 800a202:	2200      	movs	r2, #0
 800a204:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a206:	2300      	movs	r3, #0
 800a208:	737b      	strb	r3, [r7, #13]
 800a20a:	e001      	b.n	800a210 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a20c:	2302      	movs	r3, #2
 800a20e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a210:	7b7b      	ldrb	r3, [r7, #13]
}
 800a212:	4618      	mov	r0, r3
 800a214:	3714      	adds	r7, #20
 800a216:	46bd      	mov	sp, r7
 800a218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21c:	4770      	bx	lr
 800a21e:	bf00      	nop
 800a220:	200003d0 	.word	0x200003d0

0800a224 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a22c:	2300      	movs	r3, #0
 800a22e:	60fb      	str	r3, [r7, #12]
 800a230:	e010      	b.n	800a254 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a232:	4a0d      	ldr	r2, [pc, #52]	; (800a268 <clear_lock+0x44>)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	4413      	add	r3, r2
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	429a      	cmp	r2, r3
 800a240:	d105      	bne.n	800a24e <clear_lock+0x2a>
 800a242:	4a09      	ldr	r2, [pc, #36]	; (800a268 <clear_lock+0x44>)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	4413      	add	r3, r2
 800a24a:	2200      	movs	r2, #0
 800a24c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	3301      	adds	r3, #1
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d9eb      	bls.n	800a232 <clear_lock+0xe>
	}
}
 800a25a:	bf00      	nop
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	200003d0 	.word	0x200003d0

0800a26c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a26c:	b580      	push	{r7, lr}
 800a26e:	b086      	sub	sp, #24
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a274:	2300      	movs	r3, #0
 800a276:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	78db      	ldrb	r3, [r3, #3]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d034      	beq.n	800a2ea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a284:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	7858      	ldrb	r0, [r3, #1]
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a290:	2301      	movs	r3, #1
 800a292:	697a      	ldr	r2, [r7, #20]
 800a294:	f7ff fbdc 	bl	8009a50 <disk_write>
 800a298:	4603      	mov	r3, r0
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d002      	beq.n	800a2a4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a29e:	2301      	movs	r3, #1
 800a2a0:	73fb      	strb	r3, [r7, #15]
 800a2a2:	e022      	b.n	800a2ea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	2200      	movs	r2, #0
 800a2a8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ae:	697a      	ldr	r2, [r7, #20]
 800a2b0:	1ad2      	subs	r2, r2, r3
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	429a      	cmp	r2, r3
 800a2b8:	d217      	bcs.n	800a2ea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	789b      	ldrb	r3, [r3, #2]
 800a2be:	613b      	str	r3, [r7, #16]
 800a2c0:	e010      	b.n	800a2e4 <sync_window+0x78>
					wsect += fs->fsize;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	697a      	ldr	r2, [r7, #20]
 800a2c8:	4413      	add	r3, r2
 800a2ca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	7858      	ldrb	r0, [r3, #1]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	697a      	ldr	r2, [r7, #20]
 800a2da:	f7ff fbb9 	bl	8009a50 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2de:	693b      	ldr	r3, [r7, #16]
 800a2e0:	3b01      	subs	r3, #1
 800a2e2:	613b      	str	r3, [r7, #16]
 800a2e4:	693b      	ldr	r3, [r7, #16]
 800a2e6:	2b01      	cmp	r3, #1
 800a2e8:	d8eb      	bhi.n	800a2c2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	3718      	adds	r7, #24
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a2fe:	2300      	movs	r3, #0
 800a300:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a306:	683a      	ldr	r2, [r7, #0]
 800a308:	429a      	cmp	r2, r3
 800a30a:	d01b      	beq.n	800a344 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f7ff ffad 	bl	800a26c <sync_window>
 800a312:	4603      	mov	r3, r0
 800a314:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a316:	7bfb      	ldrb	r3, [r7, #15]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d113      	bne.n	800a344 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	7858      	ldrb	r0, [r3, #1]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a326:	2301      	movs	r3, #1
 800a328:	683a      	ldr	r2, [r7, #0]
 800a32a:	f7ff fb71 	bl	8009a10 <disk_read>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d004      	beq.n	800a33e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a334:	f04f 33ff 	mov.w	r3, #4294967295
 800a338:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a33a:	2301      	movs	r3, #1
 800a33c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800a344:	7bfb      	ldrb	r3, [r7, #15]
}
 800a346:	4618      	mov	r0, r3
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
	...

0800a350 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a350:	b580      	push	{r7, lr}
 800a352:	b084      	sub	sp, #16
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a358:	6878      	ldr	r0, [r7, #4]
 800a35a:	f7ff ff87 	bl	800a26c <sync_window>
 800a35e:	4603      	mov	r3, r0
 800a360:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a362:	7bfb      	ldrb	r3, [r7, #15]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d158      	bne.n	800a41a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	781b      	ldrb	r3, [r3, #0]
 800a36c:	2b03      	cmp	r3, #3
 800a36e:	d148      	bne.n	800a402 <sync_fs+0xb2>
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	791b      	ldrb	r3, [r3, #4]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d144      	bne.n	800a402 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3338      	adds	r3, #56	; 0x38
 800a37c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a380:	2100      	movs	r1, #0
 800a382:	4618      	mov	r0, r3
 800a384:	f7ff fda8 	bl	8009ed8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	3338      	adds	r3, #56	; 0x38
 800a38c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a390:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff fcaf 	bl	8009cf8 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	3338      	adds	r3, #56	; 0x38
 800a39e:	4921      	ldr	r1, [pc, #132]	; (800a424 <sync_fs+0xd4>)
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fcc4 	bl	8009d2e <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3338      	adds	r3, #56	; 0x38
 800a3aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a3ae:	491e      	ldr	r1, [pc, #120]	; (800a428 <sync_fs+0xd8>)
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	f7ff fcbc 	bl	8009d2e <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	3338      	adds	r3, #56	; 0x38
 800a3ba:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	699b      	ldr	r3, [r3, #24]
 800a3c2:	4619      	mov	r1, r3
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	f7ff fcb2 	bl	8009d2e <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	3338      	adds	r3, #56	; 0x38
 800a3ce:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	695b      	ldr	r3, [r3, #20]
 800a3d6:	4619      	mov	r1, r3
 800a3d8:	4610      	mov	r0, r2
 800a3da:	f7ff fca8 	bl	8009d2e <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	7858      	ldrb	r0, [r3, #1]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	f7ff fb2a 	bl	8009a50 <disk_write>
			fs->fsi_flag = 0;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2200      	movs	r2, #0
 800a400:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	785b      	ldrb	r3, [r3, #1]
 800a406:	2200      	movs	r2, #0
 800a408:	2100      	movs	r1, #0
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fb40 	bl	8009a90 <disk_ioctl>
 800a410:	4603      	mov	r3, r0
 800a412:	2b00      	cmp	r3, #0
 800a414:	d001      	beq.n	800a41a <sync_fs+0xca>
 800a416:	2301      	movs	r3, #1
 800a418:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a41a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	3710      	adds	r7, #16
 800a420:	46bd      	mov	sp, r7
 800a422:	bd80      	pop	{r7, pc}
 800a424:	41615252 	.word	0x41615252
 800a428:	61417272 	.word	0x61417272

0800a42c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	3b02      	subs	r3, #2
 800a43a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	69db      	ldr	r3, [r3, #28]
 800a440:	3b02      	subs	r3, #2
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	429a      	cmp	r2, r3
 800a446:	d301      	bcc.n	800a44c <clust2sect+0x20>
 800a448:	2300      	movs	r3, #0
 800a44a:	e008      	b.n	800a45e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	895b      	ldrh	r3, [r3, #10]
 800a450:	461a      	mov	r2, r3
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	fb03 f202 	mul.w	r2, r3, r2
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a45c:	4413      	add	r3, r2
}
 800a45e:	4618      	mov	r0, r3
 800a460:	370c      	adds	r7, #12
 800a462:	46bd      	mov	sp, r7
 800a464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a468:	4770      	bx	lr
	...

0800a46c <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b088      	sub	sp, #32
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
 800a474:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a476:	6879      	ldr	r1, [r7, #4]
 800a478:	6809      	ldr	r1, [r1, #0]
 800a47a:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	2901      	cmp	r1, #1
 800a480:	d904      	bls.n	800a48c <get_fat+0x20>
 800a482:	69b9      	ldr	r1, [r7, #24]
 800a484:	69c9      	ldr	r1, [r1, #28]
 800a486:	6838      	ldr	r0, [r7, #0]
 800a488:	4288      	cmp	r0, r1
 800a48a:	d302      	bcc.n	800a492 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a48c:	2301      	movs	r3, #1
 800a48e:	61fb      	str	r3, [r7, #28]
 800a490:	e101      	b.n	800a696 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a492:	f04f 31ff 	mov.w	r1, #4294967295
 800a496:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800a498:	69b9      	ldr	r1, [r7, #24]
 800a49a:	7809      	ldrb	r1, [r1, #0]
 800a49c:	3901      	subs	r1, #1
 800a49e:	2903      	cmp	r1, #3
 800a4a0:	f200 80ed 	bhi.w	800a67e <get_fat+0x212>
 800a4a4:	a001      	add	r0, pc, #4	; (adr r0, 800a4ac <get_fat+0x40>)
 800a4a6:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a4aa:	bf00      	nop
 800a4ac:	0800a4bd 	.word	0x0800a4bd
 800a4b0:	0800a545 	.word	0x0800a545
 800a4b4:	0800a57b 	.word	0x0800a57b
 800a4b8:	0800a5b3 	.word	0x0800a5b3
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	60fb      	str	r3, [r7, #12]
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	085b      	lsrs	r3, r3, #1
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	0a5b      	lsrs	r3, r3, #9
 800a4d2:	4413      	add	r3, r2
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	69b8      	ldr	r0, [r7, #24]
 800a4d8:	f7ff ff0c 	bl	800a2f4 <move_window>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	f040 80d0 	bne.w	800a684 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	1c5a      	adds	r2, r3, #1
 800a4e8:	60fa      	str	r2, [r7, #12]
 800a4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ee:	69ba      	ldr	r2, [r7, #24]
 800a4f0:	4413      	add	r3, r2
 800a4f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a4f6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4f8:	69bb      	ldr	r3, [r7, #24]
 800a4fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	0a5b      	lsrs	r3, r3, #9
 800a500:	4413      	add	r3, r2
 800a502:	4619      	mov	r1, r3
 800a504:	69b8      	ldr	r0, [r7, #24]
 800a506:	f7ff fef5 	bl	800a2f4 <move_window>
 800a50a:	4603      	mov	r3, r0
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	f040 80bb 	bne.w	800a688 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a518:	69ba      	ldr	r2, [r7, #24]
 800a51a:	4413      	add	r3, r2
 800a51c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a520:	021b      	lsls	r3, r3, #8
 800a522:	461a      	mov	r2, r3
 800a524:	68bb      	ldr	r3, [r7, #8]
 800a526:	4313      	orrs	r3, r2
 800a528:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a52a:	683b      	ldr	r3, [r7, #0]
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <get_fat+0xce>
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	091b      	lsrs	r3, r3, #4
 800a538:	e002      	b.n	800a540 <get_fat+0xd4>
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a540:	61fb      	str	r3, [r7, #28]
			break;
 800a542:	e0a8      	b.n	800a696 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	0a1b      	lsrs	r3, r3, #8
 800a54c:	4413      	add	r3, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	69b8      	ldr	r0, [r7, #24]
 800a552:	f7ff fecf 	bl	800a2f4 <move_window>
 800a556:	4603      	mov	r3, r0
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f040 8097 	bne.w	800a68c <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	005b      	lsls	r3, r3, #1
 800a568:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a56c:	4413      	add	r3, r2
 800a56e:	4618      	mov	r0, r3
 800a570:	f7ff faac 	bl	8009acc <ld_word>
 800a574:	4603      	mov	r3, r0
 800a576:	61fb      	str	r3, [r7, #28]
			break;
 800a578:	e08d      	b.n	800a696 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	09db      	lsrs	r3, r3, #7
 800a582:	4413      	add	r3, r2
 800a584:	4619      	mov	r1, r3
 800a586:	69b8      	ldr	r0, [r7, #24]
 800a588:	f7ff feb4 	bl	800a2f4 <move_window>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d17e      	bne.n	800a690 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	009b      	lsls	r3, r3, #2
 800a59c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a5a0:	4413      	add	r3, r2
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	f7ff faaa 	bl	8009afc <ld_dword>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a5ae:	61fb      	str	r3, [r7, #28]
			break;
 800a5b0:	e071      	b.n	800a696 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a5b8:	4301      	orrs	r1, r0
 800a5ba:	d060      	beq.n	800a67e <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800a5bc:	6879      	ldr	r1, [r7, #4]
 800a5be:	6889      	ldr	r1, [r1, #8]
 800a5c0:	6838      	ldr	r0, [r7, #0]
 800a5c2:	1a41      	subs	r1, r0, r1
 800a5c4:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800a5c6:	6879      	ldr	r1, [r7, #4]
 800a5c8:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800a5cc:	1e42      	subs	r2, r0, #1
 800a5ce:	f141 33ff 	adc.w	r3, r1, #4294967295
 800a5d2:	f04f 0000 	mov.w	r0, #0
 800a5d6:	f04f 0100 	mov.w	r1, #0
 800a5da:	0a50      	lsrs	r0, r2, #9
 800a5dc:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800a5e0:	0a59      	lsrs	r1, r3, #9
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	895b      	ldrh	r3, [r3, #10]
 800a5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ec:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	79db      	ldrb	r3, [r3, #7]
 800a5f2:	2b02      	cmp	r3, #2
 800a5f4:	d10e      	bne.n	800a614 <get_fat+0x1a8>
					if (cofs <= clen) {
 800a5f6:	697a      	ldr	r2, [r7, #20]
 800a5f8:	693b      	ldr	r3, [r7, #16]
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d80a      	bhi.n	800a614 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	693b      	ldr	r3, [r7, #16]
 800a602:	429a      	cmp	r2, r3
 800a604:	d002      	beq.n	800a60c <get_fat+0x1a0>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	3301      	adds	r3, #1
 800a60a:	e001      	b.n	800a610 <get_fat+0x1a4>
 800a60c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a610:	61fb      	str	r3, [r7, #28]
						break;
 800a612:	e040      	b.n	800a696 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	79db      	ldrb	r3, [r3, #7]
 800a618:	2b03      	cmp	r3, #3
 800a61a:	d108      	bne.n	800a62e <get_fat+0x1c2>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	697a      	ldr	r2, [r7, #20]
 800a622:	429a      	cmp	r2, r3
 800a624:	d203      	bcs.n	800a62e <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	3301      	adds	r3, #1
 800a62a:	61fb      	str	r3, [r7, #28]
					break;
 800a62c:	e033      	b.n	800a696 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	79db      	ldrb	r3, [r3, #7]
 800a632:	2b02      	cmp	r3, #2
 800a634:	d023      	beq.n	800a67e <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	69db      	ldr	r3, [r3, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d003      	beq.n	800a646 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800a63e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800a642:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800a644:	e027      	b.n	800a696 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a646:	69bb      	ldr	r3, [r7, #24]
 800a648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	09db      	lsrs	r3, r3, #7
 800a64e:	4413      	add	r3, r2
 800a650:	4619      	mov	r1, r3
 800a652:	69b8      	ldr	r0, [r7, #24]
 800a654:	f7ff fe4e 	bl	800a2f4 <move_window>
 800a658:	4603      	mov	r3, r0
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d11a      	bne.n	800a694 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a664:	683b      	ldr	r3, [r7, #0]
 800a666:	009b      	lsls	r3, r3, #2
 800a668:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a66c:	4413      	add	r3, r2
 800a66e:	4618      	mov	r0, r3
 800a670:	f7ff fa44 	bl	8009afc <ld_dword>
 800a674:	4603      	mov	r3, r0
 800a676:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a67a:	61fb      	str	r3, [r7, #28]
					break;
 800a67c:	e00b      	b.n	800a696 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a67e:	2301      	movs	r3, #1
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	e008      	b.n	800a696 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a684:	bf00      	nop
 800a686:	e006      	b.n	800a696 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a688:	bf00      	nop
 800a68a:	e004      	b.n	800a696 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a68c:	bf00      	nop
 800a68e:	e002      	b.n	800a696 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a690:	bf00      	nop
 800a692:	e000      	b.n	800a696 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a694:	bf00      	nop
		}
	}

	return val;
 800a696:	69fb      	ldr	r3, [r7, #28]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3720      	adds	r7, #32
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a6a0:	b590      	push	{r4, r7, lr}
 800a6a2:	b089      	sub	sp, #36	; 0x24
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	60f8      	str	r0, [r7, #12]
 800a6a8:	60b9      	str	r1, [r7, #8]
 800a6aa:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a6ac:	2302      	movs	r3, #2
 800a6ae:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	f240 80d6 	bls.w	800a864 <put_fat+0x1c4>
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	68ba      	ldr	r2, [r7, #8]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	f080 80d0 	bcs.w	800a864 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	781b      	ldrb	r3, [r3, #0]
 800a6c8:	2b04      	cmp	r3, #4
 800a6ca:	f300 80d4 	bgt.w	800a876 <put_fat+0x1d6>
 800a6ce:	2b03      	cmp	r3, #3
 800a6d0:	f280 8093 	bge.w	800a7fa <put_fat+0x15a>
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d002      	beq.n	800a6de <put_fat+0x3e>
 800a6d8:	2b02      	cmp	r3, #2
 800a6da:	d06e      	beq.n	800a7ba <put_fat+0x11a>
 800a6dc:	e0cb      	b.n	800a876 <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	61bb      	str	r3, [r7, #24]
 800a6e2:	69bb      	ldr	r3, [r7, #24]
 800a6e4:	085b      	lsrs	r3, r3, #1
 800a6e6:	69ba      	ldr	r2, [r7, #24]
 800a6e8:	4413      	add	r3, r2
 800a6ea:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a6f0:	69bb      	ldr	r3, [r7, #24]
 800a6f2:	0a5b      	lsrs	r3, r3, #9
 800a6f4:	4413      	add	r3, r2
 800a6f6:	4619      	mov	r1, r3
 800a6f8:	68f8      	ldr	r0, [r7, #12]
 800a6fa:	f7ff fdfb 	bl	800a2f4 <move_window>
 800a6fe:	4603      	mov	r3, r0
 800a700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a702:	7ffb      	ldrb	r3, [r7, #31]
 800a704:	2b00      	cmp	r3, #0
 800a706:	f040 80af 	bne.w	800a868 <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	1c59      	adds	r1, r3, #1
 800a714:	61b9      	str	r1, [r7, #24]
 800a716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a71a:	4413      	add	r3, r2
 800a71c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	f003 0301 	and.w	r3, r3, #1
 800a724:	2b00      	cmp	r3, #0
 800a726:	d00d      	beq.n	800a744 <put_fat+0xa4>
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	781b      	ldrb	r3, [r3, #0]
 800a72c:	b25b      	sxtb	r3, r3
 800a72e:	f003 030f 	and.w	r3, r3, #15
 800a732:	b25a      	sxtb	r2, r3
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	011b      	lsls	r3, r3, #4
 800a73a:	b25b      	sxtb	r3, r3
 800a73c:	4313      	orrs	r3, r2
 800a73e:	b25b      	sxtb	r3, r3
 800a740:	b2db      	uxtb	r3, r3
 800a742:	e001      	b.n	800a748 <put_fat+0xa8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	697a      	ldr	r2, [r7, #20]
 800a74a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2201      	movs	r2, #1
 800a750:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	0a5b      	lsrs	r3, r3, #9
 800a75a:	4413      	add	r3, r2
 800a75c:	4619      	mov	r1, r3
 800a75e:	68f8      	ldr	r0, [r7, #12]
 800a760:	f7ff fdc8 	bl	800a2f4 <move_window>
 800a764:	4603      	mov	r3, r0
 800a766:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a768:	7ffb      	ldrb	r3, [r7, #31]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d17e      	bne.n	800a86c <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a77a:	4413      	add	r3, r2
 800a77c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a77e:	68bb      	ldr	r3, [r7, #8]
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	d003      	beq.n	800a790 <put_fat+0xf0>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	091b      	lsrs	r3, r3, #4
 800a78c:	b2db      	uxtb	r3, r3
 800a78e:	e00e      	b.n	800a7ae <put_fat+0x10e>
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	781b      	ldrb	r3, [r3, #0]
 800a794:	b25b      	sxtb	r3, r3
 800a796:	f023 030f 	bic.w	r3, r3, #15
 800a79a:	b25a      	sxtb	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	0a1b      	lsrs	r3, r3, #8
 800a7a0:	b25b      	sxtb	r3, r3
 800a7a2:	f003 030f 	and.w	r3, r3, #15
 800a7a6:	b25b      	sxtb	r3, r3
 800a7a8:	4313      	orrs	r3, r2
 800a7aa:	b25b      	sxtb	r3, r3
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	697a      	ldr	r2, [r7, #20]
 800a7b0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	70da      	strb	r2, [r3, #3]
			break;
 800a7b8:	e05d      	b.n	800a876 <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	0a1b      	lsrs	r3, r3, #8
 800a7c2:	4413      	add	r3, r2
 800a7c4:	4619      	mov	r1, r3
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f7ff fd94 	bl	800a2f4 <move_window>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a7d0:	7ffb      	ldrb	r3, [r7, #31]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d14c      	bne.n	800a870 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a7dc:	68bb      	ldr	r3, [r7, #8]
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800a7e4:	4413      	add	r3, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	b292      	uxth	r2, r2
 800a7ea:	4611      	mov	r1, r2
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	f7ff fa83 	bl	8009cf8 <st_word>
			fs->wflag = 1;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2201      	movs	r2, #1
 800a7f6:	70da      	strb	r2, [r3, #3]
			break;
 800a7f8:	e03d      	b.n	800a876 <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	09db      	lsrs	r3, r3, #7
 800a802:	4413      	add	r3, r2
 800a804:	4619      	mov	r1, r3
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f7ff fd74 	bl	800a2f4 <move_window>
 800a80c:	4603      	mov	r3, r0
 800a80e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a810:	7ffb      	ldrb	r3, [r7, #31]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d12e      	bne.n	800a874 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b04      	cmp	r3, #4
 800a81c:	d012      	beq.n	800a844 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a832:	4413      	add	r3, r2
 800a834:	4618      	mov	r0, r3
 800a836:	f7ff f961 	bl	8009afc <ld_dword>
 800a83a:	4603      	mov	r3, r0
 800a83c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a840:	4323      	orrs	r3, r4
 800a842:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800a84a:	68bb      	ldr	r3, [r7, #8]
 800a84c:	009b      	lsls	r3, r3, #2
 800a84e:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800a852:	4413      	add	r3, r2
 800a854:	6879      	ldr	r1, [r7, #4]
 800a856:	4618      	mov	r0, r3
 800a858:	f7ff fa69 	bl	8009d2e <st_dword>
			fs->wflag = 1;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	2201      	movs	r2, #1
 800a860:	70da      	strb	r2, [r3, #3]
			break;
 800a862:	e008      	b.n	800a876 <put_fat+0x1d6>
		}
	}
 800a864:	bf00      	nop
 800a866:	e006      	b.n	800a876 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a868:	bf00      	nop
 800a86a:	e004      	b.n	800a876 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a86c:	bf00      	nop
 800a86e:	e002      	b.n	800a876 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a870:	bf00      	nop
 800a872:	e000      	b.n	800a876 <put_fat+0x1d6>
			if (res != FR_OK) break;
 800a874:	bf00      	nop
	return res;
 800a876:	7ffb      	ldrb	r3, [r7, #31]
}
 800a878:	4618      	mov	r0, r3
 800a87a:	3724      	adds	r7, #36	; 0x24
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bd90      	pop	{r4, r7, pc}

0800a880 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b08a      	sub	sp, #40	; 0x28
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	3b02      	subs	r3, #2
 800a890:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	69db      	ldr	r3, [r3, #28]
 800a896:	3b02      	subs	r3, #2
 800a898:	68ba      	ldr	r2, [r7, #8]
 800a89a:	429a      	cmp	r2, r3
 800a89c:	d301      	bcc.n	800a8a2 <find_bitmap+0x22>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	61fb      	str	r3, [r7, #28]
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	61bb      	str	r3, [r7, #24]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8b2:	69fb      	ldr	r3, [r7, #28]
 800a8b4:	0b1b      	lsrs	r3, r3, #12
 800a8b6:	4413      	add	r3, r2
 800a8b8:	4619      	mov	r1, r3
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f7ff fd1a 	bl	800a2f4 <move_window>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d002      	beq.n	800a8cc <find_bitmap+0x4c>
 800a8c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a8ca:	e051      	b.n	800a970 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800a8cc:	69fb      	ldr	r3, [r7, #28]
 800a8ce:	08db      	lsrs	r3, r3, #3
 800a8d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d4:	623b      	str	r3, [r7, #32]
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	2201      	movs	r2, #1
 800a8de:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800a8e6:	68fa      	ldr	r2, [r7, #12]
 800a8e8:	6a3b      	ldr	r3, [r7, #32]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	3338      	adds	r3, #56	; 0x38
 800a8ee:	781a      	ldrb	r2, [r3, #0]
 800a8f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	74fb      	strb	r3, [r7, #19]
 800a8f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a8fc:	005b      	lsls	r3, r3, #1
 800a8fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	3301      	adds	r3, #1
 800a906:	61fb      	str	r3, [r7, #28]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	69db      	ldr	r3, [r3, #28]
 800a90c:	3b02      	subs	r3, #2
 800a90e:	69fa      	ldr	r2, [r7, #28]
 800a910:	429a      	cmp	r2, r3
 800a912:	d307      	bcc.n	800a924 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800a914:	2300      	movs	r3, #0
 800a916:	61fb      	str	r3, [r7, #28]
 800a918:	2300      	movs	r3, #0
 800a91a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800a91e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a922:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800a924:	7cfb      	ldrb	r3, [r7, #19]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	3301      	adds	r3, #1
 800a92e:	617b      	str	r3, [r7, #20]
 800a930:	697a      	ldr	r2, [r7, #20]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	429a      	cmp	r2, r3
 800a936:	d106      	bne.n	800a946 <find_bitmap+0xc6>
 800a938:	69bb      	ldr	r3, [r7, #24]
 800a93a:	3302      	adds	r3, #2
 800a93c:	e018      	b.n	800a970 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800a93e:	69fb      	ldr	r3, [r7, #28]
 800a940:	61bb      	str	r3, [r7, #24]
 800a942:	2300      	movs	r3, #0
 800a944:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800a946:	69fa      	ldr	r2, [r7, #28]
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	429a      	cmp	r2, r3
 800a94c:	d101      	bne.n	800a952 <find_bitmap+0xd2>
 800a94e:	2300      	movs	r3, #0
 800a950:	e00e      	b.n	800a970 <find_bitmap+0xf0>
			} while (bm);
 800a952:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a956:	2b00      	cmp	r3, #0
 800a958:	d1c5      	bne.n	800a8e6 <find_bitmap+0x66>
			bm = 1;
 800a95a:	2301      	movs	r3, #1
 800a95c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800a960:	6a3b      	ldr	r3, [r7, #32]
 800a962:	3301      	adds	r3, #1
 800a964:	623b      	str	r3, [r7, #32]
 800a966:	6a3b      	ldr	r3, [r7, #32]
 800a968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a96c:	d3bb      	bcc.n	800a8e6 <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800a96e:	e79e      	b.n	800a8ae <find_bitmap+0x2e>
	}
}
 800a970:	4618      	mov	r0, r3
 800a972:	3728      	adds	r7, #40	; 0x28
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}

0800a978 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800a978:	b580      	push	{r7, lr}
 800a97a:	b088      	sub	sp, #32
 800a97c:	af00      	add	r7, sp, #0
 800a97e:	60f8      	str	r0, [r7, #12]
 800a980:	60b9      	str	r1, [r7, #8]
 800a982:	607a      	str	r2, [r7, #4]
 800a984:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	3b02      	subs	r3, #2
 800a98a:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	0b1b      	lsrs	r3, r3, #12
 800a994:	4413      	add	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	08db      	lsrs	r3, r3, #3
 800a99c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a9a0:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800a9a2:	68bb      	ldr	r3, [r7, #8]
 800a9a4:	f003 0307 	and.w	r3, r3, #7
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ae:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	1c5a      	adds	r2, r3, #1
 800a9b4:	617a      	str	r2, [r7, #20]
 800a9b6:	4619      	mov	r1, r3
 800a9b8:	68f8      	ldr	r0, [r7, #12]
 800a9ba:	f7ff fc9b 	bl	800a2f4 <move_window>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d001      	beq.n	800a9c8 <change_bitmap+0x50>
 800a9c4:	2301      	movs	r3, #1
 800a9c6:	e03d      	b.n	800aa44 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800a9c8:	68fa      	ldr	r2, [r7, #12]
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	4413      	add	r3, r2
 800a9ce:	3338      	adds	r3, #56	; 0x38
 800a9d0:	781a      	ldrb	r2, [r3, #0]
 800a9d2:	7ffb      	ldrb	r3, [r7, #31]
 800a9d4:	4013      	ands	r3, r2
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	bf14      	ite	ne
 800a9dc:	2301      	movne	r3, #1
 800a9de:	2300      	moveq	r3, #0
 800a9e0:	b2db      	uxtb	r3, r3
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d101      	bne.n	800a9ee <change_bitmap+0x76>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	e02a      	b.n	800aa44 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	69bb      	ldr	r3, [r7, #24]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	3338      	adds	r3, #56	; 0x38
 800a9f6:	781a      	ldrb	r2, [r3, #0]
 800a9f8:	7ffb      	ldrb	r3, [r7, #31]
 800a9fa:	4053      	eors	r3, r2
 800a9fc:	b2d9      	uxtb	r1, r3
 800a9fe:	68fa      	ldr	r2, [r7, #12]
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	4413      	add	r3, r2
 800aa04:	3338      	adds	r3, #56	; 0x38
 800aa06:	460a      	mov	r2, r1
 800aa08:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	3b01      	subs	r3, #1
 800aa14:	607b      	str	r3, [r7, #4]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d101      	bne.n	800aa20 <change_bitmap+0xa8>
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	e011      	b.n	800aa44 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800aa20:	7ffb      	ldrb	r3, [r7, #31]
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	77fb      	strb	r3, [r7, #31]
 800aa26:	7ffb      	ldrb	r3, [r7, #31]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d1cd      	bne.n	800a9c8 <change_bitmap+0x50>
			bm = 1;
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800aa30:	69bb      	ldr	r3, [r7, #24]
 800aa32:	3301      	adds	r3, #1
 800aa34:	61bb      	str	r3, [r7, #24]
 800aa36:	69bb      	ldr	r3, [r7, #24]
 800aa38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa3c:	d3c4      	bcc.n	800a9c8 <change_bitmap+0x50>
		i = 0;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800aa42:	e7b5      	b.n	800a9b0 <change_bitmap+0x38>
	}
}
 800aa44:	4618      	mov	r0, r3
 800aa46:	3720      	adds	r7, #32
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}

0800aa4c <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	79db      	ldrb	r3, [r3, #7]
 800aa58:	2b03      	cmp	r3, #3
 800aa5a:	d121      	bne.n	800aaa0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	689b      	ldr	r3, [r3, #8]
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	613b      	str	r3, [r7, #16]
 800aa68:	e014      	b.n	800aa94 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6818      	ldr	r0, [r3, #0]
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	3301      	adds	r3, #1
 800aa72:	461a      	mov	r2, r3
 800aa74:	6979      	ldr	r1, [r7, #20]
 800aa76:	f7ff fe13 	bl	800a6a0 <put_fat>
 800aa7a:	4603      	mov	r3, r0
 800aa7c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800aa7e:	7bfb      	ldrb	r3, [r7, #15]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d001      	beq.n	800aa88 <fill_first_frag+0x3c>
 800aa84:	7bfb      	ldrb	r3, [r7, #15]
 800aa86:	e00c      	b.n	800aaa2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	3301      	adds	r3, #1
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	693b      	ldr	r3, [r7, #16]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	613b      	str	r3, [r7, #16]
 800aa94:	693b      	ldr	r3, [r7, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d1e7      	bne.n	800aa6a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2200      	movs	r2, #0
 800aa9e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3718      	adds	r7, #24
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	b086      	sub	sp, #24
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	60f8      	str	r0, [r7, #12]
 800aab2:	60b9      	str	r1, [r7, #8]
 800aab4:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800aab6:	e020      	b.n	800aafa <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	6818      	ldr	r0, [r3, #0]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	69db      	ldr	r3, [r3, #28]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	1ad3      	subs	r3, r2, r3
 800aac4:	1c59      	adds	r1, r3, #1
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	69db      	ldr	r3, [r3, #28]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d905      	bls.n	800aada <fill_last_frag+0x30>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	69db      	ldr	r3, [r3, #28]
 800aad2:	68ba      	ldr	r2, [r7, #8]
 800aad4:	1ad3      	subs	r3, r2, r3
 800aad6:	3302      	adds	r3, #2
 800aad8:	e000      	b.n	800aadc <fill_last_frag+0x32>
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	461a      	mov	r2, r3
 800aade:	f7ff fddf 	bl	800a6a0 <put_fat>
 800aae2:	4603      	mov	r3, r0
 800aae4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800aae6:	7dfb      	ldrb	r3, [r7, #23]
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d001      	beq.n	800aaf0 <fill_last_frag+0x46>
 800aaec:	7dfb      	ldrb	r3, [r7, #23]
 800aaee:	e009      	b.n	800ab04 <fill_last_frag+0x5a>
		obj->n_frag--;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	69db      	ldr	r3, [r3, #28]
 800aaf4:	1e5a      	subs	r2, r3, #1
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	69db      	ldr	r3, [r3, #28]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d1da      	bne.n	800aab8 <fill_last_frag+0xe>
	}
	return FR_OK;
 800ab02:	2300      	movs	r3, #0
}
 800ab04:	4618      	mov	r0, r3
 800ab06:	3718      	adds	r7, #24
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	bd80      	pop	{r7, pc}

0800ab0c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b08a      	sub	sp, #40	; 0x28
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	60f8      	str	r0, [r7, #12]
 800ab14:	60b9      	str	r1, [r7, #8]
 800ab16:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	627b      	str	r3, [r7, #36]	; 0x24
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ab2a:	68bb      	ldr	r3, [r7, #8]
 800ab2c:	2b01      	cmp	r3, #1
 800ab2e:	d904      	bls.n	800ab3a <remove_chain+0x2e>
 800ab30:	69bb      	ldr	r3, [r7, #24]
 800ab32:	69db      	ldr	r3, [r3, #28]
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d301      	bcc.n	800ab3e <remove_chain+0x32>
 800ab3a:	2302      	movs	r3, #2
 800ab3c:	e096      	b.n	800ac6c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d014      	beq.n	800ab6e <remove_chain+0x62>
 800ab44:	69bb      	ldr	r3, [r7, #24]
 800ab46:	781b      	ldrb	r3, [r3, #0]
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d103      	bne.n	800ab54 <remove_chain+0x48>
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	79db      	ldrb	r3, [r3, #7]
 800ab50:	2b02      	cmp	r3, #2
 800ab52:	d00c      	beq.n	800ab6e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ab54:	f04f 32ff 	mov.w	r2, #4294967295
 800ab58:	6879      	ldr	r1, [r7, #4]
 800ab5a:	69b8      	ldr	r0, [r7, #24]
 800ab5c:	f7ff fda0 	bl	800a6a0 <put_fat>
 800ab60:	4603      	mov	r3, r0
 800ab62:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ab64:	7ffb      	ldrb	r3, [r7, #31]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d001      	beq.n	800ab6e <remove_chain+0x62>
 800ab6a:	7ffb      	ldrb	r3, [r7, #31]
 800ab6c:	e07e      	b.n	800ac6c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ab6e:	68b9      	ldr	r1, [r7, #8]
 800ab70:	68f8      	ldr	r0, [r7, #12]
 800ab72:	f7ff fc7b 	bl	800a46c <get_fat>
 800ab76:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d055      	beq.n	800ac2a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	2b01      	cmp	r3, #1
 800ab82:	d101      	bne.n	800ab88 <remove_chain+0x7c>
 800ab84:	2302      	movs	r3, #2
 800ab86:	e071      	b.n	800ac6c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab8e:	d101      	bne.n	800ab94 <remove_chain+0x88>
 800ab90:	2301      	movs	r3, #1
 800ab92:	e06b      	b.n	800ac6c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	2b04      	cmp	r3, #4
 800ab9a:	d00b      	beq.n	800abb4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	68b9      	ldr	r1, [r7, #8]
 800aba0:	69b8      	ldr	r0, [r7, #24]
 800aba2:	f7ff fd7d 	bl	800a6a0 <put_fat>
 800aba6:	4603      	mov	r3, r0
 800aba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800abaa:	7ffb      	ldrb	r3, [r7, #31]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d001      	beq.n	800abb4 <remove_chain+0xa8>
 800abb0:	7ffb      	ldrb	r3, [r7, #31]
 800abb2:	e05b      	b.n	800ac6c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800abb4:	69bb      	ldr	r3, [r7, #24]
 800abb6:	699a      	ldr	r2, [r3, #24]
 800abb8:	69bb      	ldr	r3, [r7, #24]
 800abba:	69db      	ldr	r3, [r3, #28]
 800abbc:	3b02      	subs	r3, #2
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d20b      	bcs.n	800abda <remove_chain+0xce>
			fs->free_clst++;
 800abc2:	69bb      	ldr	r3, [r7, #24]
 800abc4:	699b      	ldr	r3, [r3, #24]
 800abc6:	1c5a      	adds	r2, r3, #1
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800abcc:	69bb      	ldr	r3, [r7, #24]
 800abce:	791b      	ldrb	r3, [r3, #4]
 800abd0:	f043 0301 	orr.w	r3, r3, #1
 800abd4:	b2da      	uxtb	r2, r3
 800abd6:	69bb      	ldr	r3, [r7, #24]
 800abd8:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800abda:	6a3b      	ldr	r3, [r7, #32]
 800abdc:	3301      	adds	r3, #1
 800abde:	697a      	ldr	r2, [r7, #20]
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d102      	bne.n	800abea <remove_chain+0xde>
			ecl = nxt;
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	623b      	str	r3, [r7, #32]
 800abe8:	e017      	b.n	800ac1a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800abea:	69bb      	ldr	r3, [r7, #24]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	2b04      	cmp	r3, #4
 800abf0:	d10f      	bne.n	800ac12 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800abf2:	6a3a      	ldr	r2, [r7, #32]
 800abf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf6:	1ad3      	subs	r3, r2, r3
 800abf8:	1c5a      	adds	r2, r3, #1
 800abfa:	2300      	movs	r3, #0
 800abfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800abfe:	69b8      	ldr	r0, [r7, #24]
 800ac00:	f7ff feba 	bl	800a978 <change_bitmap>
 800ac04:	4603      	mov	r3, r0
 800ac06:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ac08:	7ffb      	ldrb	r3, [r7, #31]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d001      	beq.n	800ac12 <remove_chain+0x106>
 800ac0e:	7ffb      	ldrb	r3, [r7, #31]
 800ac10:	e02c      	b.n	800ac6c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ac12:	697b      	ldr	r3, [r7, #20]
 800ac14:	623b      	str	r3, [r7, #32]
 800ac16:	6a3b      	ldr	r3, [r7, #32]
 800ac18:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ac1e:	69bb      	ldr	r3, [r7, #24]
 800ac20:	69db      	ldr	r3, [r3, #28]
 800ac22:	68ba      	ldr	r2, [r7, #8]
 800ac24:	429a      	cmp	r2, r3
 800ac26:	d3a2      	bcc.n	800ab6e <remove_chain+0x62>
 800ac28:	e000      	b.n	800ac2c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ac2a:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ac2c:	69bb      	ldr	r3, [r7, #24]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	2b04      	cmp	r3, #4
 800ac32:	d11a      	bne.n	800ac6a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d103      	bne.n	800ac42 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	71da      	strb	r2, [r3, #7]
 800ac40:	e013      	b.n	800ac6a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	79db      	ldrb	r3, [r3, #7]
 800ac46:	2b03      	cmp	r3, #3
 800ac48:	d10f      	bne.n	800ac6a <remove_chain+0x15e>
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	689b      	ldr	r3, [r3, #8]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d30a      	bcc.n	800ac6a <remove_chain+0x15e>
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	689a      	ldr	r2, [r3, #8]
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	699b      	ldr	r3, [r3, #24]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	687a      	ldr	r2, [r7, #4]
 800ac60:	429a      	cmp	r2, r3
 800ac62:	d802      	bhi.n	800ac6a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	2202      	movs	r2, #2
 800ac68:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800ac6a:	2300      	movs	r3, #0
}
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	3728      	adds	r7, #40	; 0x28
 800ac70:	46bd      	mov	sp, r7
 800ac72:	bd80      	pop	{r7, pc}

0800ac74 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d10d      	bne.n	800aca6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ac90:	69bb      	ldr	r3, [r7, #24]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d004      	beq.n	800aca0 <create_chain+0x2c>
 800ac96:	693b      	ldr	r3, [r7, #16]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	429a      	cmp	r2, r3
 800ac9e:	d31b      	bcc.n	800acd8 <create_chain+0x64>
 800aca0:	2301      	movs	r3, #1
 800aca2:	61bb      	str	r3, [r7, #24]
 800aca4:	e018      	b.n	800acd8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	6878      	ldr	r0, [r7, #4]
 800acaa:	f7ff fbdf 	bl	800a46c <get_fat>
 800acae:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	2b01      	cmp	r3, #1
 800acb4:	d801      	bhi.n	800acba <create_chain+0x46>
 800acb6:	2301      	movs	r3, #1
 800acb8:	e0d9      	b.n	800ae6e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acc0:	d101      	bne.n	800acc6 <create_chain+0x52>
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	e0d3      	b.n	800ae6e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	69db      	ldr	r3, [r3, #28]
 800acca:	68fa      	ldr	r2, [r7, #12]
 800accc:	429a      	cmp	r2, r3
 800acce:	d201      	bcs.n	800acd4 <create_chain+0x60>
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	e0cc      	b.n	800ae6e <create_chain+0x1fa>
		scl = clst;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b04      	cmp	r3, #4
 800acde:	d164      	bne.n	800adaa <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800ace0:	2201      	movs	r2, #1
 800ace2:	69b9      	ldr	r1, [r7, #24]
 800ace4:	6938      	ldr	r0, [r7, #16]
 800ace6:	f7ff fdcb 	bl	800a880 <find_bitmap>
 800acea:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800acec:	69fb      	ldr	r3, [r7, #28]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d003      	beq.n	800acfa <create_chain+0x86>
 800acf2:	69fb      	ldr	r3, [r7, #28]
 800acf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acf8:	d101      	bne.n	800acfe <create_chain+0x8a>
 800acfa:	69fb      	ldr	r3, [r7, #28]
 800acfc:	e0b7      	b.n	800ae6e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800acfe:	2301      	movs	r3, #1
 800ad00:	2201      	movs	r2, #1
 800ad02:	69f9      	ldr	r1, [r7, #28]
 800ad04:	6938      	ldr	r0, [r7, #16]
 800ad06:	f7ff fe37 	bl	800a978 <change_bitmap>
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800ad0e:	7dfb      	ldrb	r3, [r7, #23]
 800ad10:	2b02      	cmp	r3, #2
 800ad12:	d101      	bne.n	800ad18 <create_chain+0xa4>
 800ad14:	2301      	movs	r3, #1
 800ad16:	e0aa      	b.n	800ae6e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d102      	bne.n	800ad24 <create_chain+0xb0>
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295
 800ad22:	e0a4      	b.n	800ae6e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d103      	bne.n	800ad32 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	2202      	movs	r2, #2
 800ad2e:	71da      	strb	r2, [r3, #7]
 800ad30:	e011      	b.n	800ad56 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	79db      	ldrb	r3, [r3, #7]
 800ad36:	2b02      	cmp	r3, #2
 800ad38:	d10d      	bne.n	800ad56 <create_chain+0xe2>
 800ad3a:	69bb      	ldr	r3, [r7, #24]
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	d008      	beq.n	800ad56 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	689b      	ldr	r3, [r3, #8]
 800ad48:	69ba      	ldr	r2, [r7, #24]
 800ad4a:	1ad2      	subs	r2, r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2203      	movs	r2, #3
 800ad54:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	79db      	ldrb	r3, [r3, #7]
 800ad5a:	2b02      	cmp	r3, #2
 800ad5c:	d064      	beq.n	800ae28 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	3301      	adds	r3, #1
 800ad62:	69fa      	ldr	r2, [r7, #28]
 800ad64:	429a      	cmp	r2, r3
 800ad66:	d10b      	bne.n	800ad80 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	69db      	ldr	r3, [r3, #28]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d003      	beq.n	800ad78 <create_chain+0x104>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	3301      	adds	r3, #1
 800ad76:	e000      	b.n	800ad7a <create_chain+0x106>
 800ad78:	2302      	movs	r3, #2
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	61d3      	str	r3, [r2, #28]
 800ad7e:	e053      	b.n	800ae28 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	69db      	ldr	r3, [r3, #28]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d102      	bne.n	800ad8e <create_chain+0x11a>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800ad8e:	69fa      	ldr	r2, [r7, #28]
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f7ff fe89 	bl	800aaaa <fill_last_frag>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800ad9c:	7dfb      	ldrb	r3, [r7, #23]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d142      	bne.n	800ae28 <create_chain+0x1b4>
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2201      	movs	r2, #1
 800ada6:	61da      	str	r2, [r3, #28]
 800ada8:	e03e      	b.n	800ae28 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800adaa:	69bb      	ldr	r3, [r7, #24]
 800adac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800adae:	69fb      	ldr	r3, [r7, #28]
 800adb0:	3301      	adds	r3, #1
 800adb2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	69db      	ldr	r3, [r3, #28]
 800adb8:	69fa      	ldr	r2, [r7, #28]
 800adba:	429a      	cmp	r2, r3
 800adbc:	d307      	bcc.n	800adce <create_chain+0x15a>
				ncl = 2;
 800adbe:	2302      	movs	r3, #2
 800adc0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	69bb      	ldr	r3, [r7, #24]
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d901      	bls.n	800adce <create_chain+0x15a>
 800adca:	2300      	movs	r3, #0
 800adcc:	e04f      	b.n	800ae6e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800adce:	69f9      	ldr	r1, [r7, #28]
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f7ff fb4b 	bl	800a46c <get_fat>
 800add6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d00e      	beq.n	800adfc <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d003      	beq.n	800adec <create_chain+0x178>
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adea:	d101      	bne.n	800adf0 <create_chain+0x17c>
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	e03e      	b.n	800ae6e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800adf0:	69fa      	ldr	r2, [r7, #28]
 800adf2:	69bb      	ldr	r3, [r7, #24]
 800adf4:	429a      	cmp	r2, r3
 800adf6:	d1da      	bne.n	800adae <create_chain+0x13a>
 800adf8:	2300      	movs	r3, #0
 800adfa:	e038      	b.n	800ae6e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800adfc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800adfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ae02:	69f9      	ldr	r1, [r7, #28]
 800ae04:	6938      	ldr	r0, [r7, #16]
 800ae06:	f7ff fc4b 	bl	800a6a0 <put_fat>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ae0e:	7dfb      	ldrb	r3, [r7, #23]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d109      	bne.n	800ae28 <create_chain+0x1b4>
 800ae14:	683b      	ldr	r3, [r7, #0]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d006      	beq.n	800ae28 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ae1a:	69fa      	ldr	r2, [r7, #28]
 800ae1c:	6839      	ldr	r1, [r7, #0]
 800ae1e:	6938      	ldr	r0, [r7, #16]
 800ae20:	f7ff fc3e 	bl	800a6a0 <put_fat>
 800ae24:	4603      	mov	r3, r0
 800ae26:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ae28:	7dfb      	ldrb	r3, [r7, #23]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d116      	bne.n	800ae5c <create_chain+0x1e8>
		fs->last_clst = ncl;
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	69fa      	ldr	r2, [r7, #28]
 800ae32:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	699a      	ldr	r2, [r3, #24]
 800ae38:	693b      	ldr	r3, [r7, #16]
 800ae3a:	69db      	ldr	r3, [r3, #28]
 800ae3c:	3b02      	subs	r3, #2
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d804      	bhi.n	800ae4c <create_chain+0x1d8>
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	699b      	ldr	r3, [r3, #24]
 800ae46:	1e5a      	subs	r2, r3, #1
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	791b      	ldrb	r3, [r3, #4]
 800ae50:	f043 0301 	orr.w	r3, r3, #1
 800ae54:	b2da      	uxtb	r2, r3
 800ae56:	693b      	ldr	r3, [r7, #16]
 800ae58:	711a      	strb	r2, [r3, #4]
 800ae5a:	e007      	b.n	800ae6c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ae5c:	7dfb      	ldrb	r3, [r7, #23]
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d102      	bne.n	800ae68 <create_chain+0x1f4>
 800ae62:	f04f 33ff 	mov.w	r3, #4294967295
 800ae66:	e000      	b.n	800ae6a <create_chain+0x1f6>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ae6c:	69fb      	ldr	r3, [r7, #28]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3720      	adds	r7, #32
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}

0800ae76 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ae76:	b5b0      	push	{r4, r5, r7, lr}
 800ae78:	b088      	sub	sp, #32
 800ae7a:	af00      	add	r7, sp, #0
 800ae7c:	60f8      	str	r0, [r7, #12]
 800ae7e:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae8c:	3304      	adds	r3, #4
 800ae8e:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ae90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ae94:	f04f 0000 	mov.w	r0, #0
 800ae98:	f04f 0100 	mov.w	r1, #0
 800ae9c:	0a50      	lsrs	r0, r2, #9
 800ae9e:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800aea2:	0a59      	lsrs	r1, r3, #9
 800aea4:	697b      	ldr	r3, [r7, #20]
 800aea6:	895b      	ldrh	r3, [r3, #10]
 800aea8:	b29b      	uxth	r3, r3
 800aeaa:	2200      	movs	r2, #0
 800aeac:	461c      	mov	r4, r3
 800aeae:	4615      	mov	r5, r2
 800aeb0:	4622      	mov	r2, r4
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	f7f5 f9c6 	bl	8000244 <__aeabi_uldivmod>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4613      	mov	r3, r2
 800aebe:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	1d1a      	adds	r2, r3, #4
 800aec4:	61ba      	str	r2, [r7, #24]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d101      	bne.n	800aed4 <clmt_clust+0x5e>
 800aed0:	2300      	movs	r3, #0
 800aed2:	e010      	b.n	800aef6 <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800aed4:	69fa      	ldr	r2, [r7, #28]
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d307      	bcc.n	800aeec <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800aedc:	69fa      	ldr	r2, [r7, #28]
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	61fb      	str	r3, [r7, #28]
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	3304      	adds	r3, #4
 800aee8:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800aeea:	e7e9      	b.n	800aec0 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800aeec:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800aeee:	69bb      	ldr	r3, [r7, #24]
 800aef0:	681a      	ldr	r2, [r3, #0]
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	4413      	add	r3, r2
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bdb0      	pop	{r4, r5, r7, pc}

0800aefe <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b086      	sub	sp, #24
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
 800af06:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	781b      	ldrb	r3, [r3, #0]
 800af12:	2b04      	cmp	r3, #4
 800af14:	d102      	bne.n	800af1c <dir_sdi+0x1e>
 800af16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af1a:	e001      	b.n	800af20 <dir_sdi+0x22>
 800af1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	429a      	cmp	r2, r3
 800af24:	d904      	bls.n	800af30 <dir_sdi+0x32>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	f003 031f 	and.w	r3, r3, #31
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <dir_sdi+0x36>
		return FR_INT_ERR;
 800af30:	2302      	movs	r3, #2
 800af32:	e066      	b.n	800b002 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	683a      	ldr	r2, [r7, #0]
 800af38:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	689b      	ldr	r3, [r3, #8]
 800af3e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d109      	bne.n	800af5a <dir_sdi+0x5c>
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	781b      	ldrb	r3, [r3, #0]
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d905      	bls.n	800af5a <dir_sdi+0x5c>
		clst = fs->dirbase;
 800af4e:	693b      	ldr	r3, [r7, #16]
 800af50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af52:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2200      	movs	r2, #0
 800af58:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d10c      	bne.n	800af7a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	095b      	lsrs	r3, r3, #5
 800af64:	693a      	ldr	r2, [r7, #16]
 800af66:	8912      	ldrh	r2, [r2, #8]
 800af68:	4293      	cmp	r3, r2
 800af6a:	d301      	bcc.n	800af70 <dir_sdi+0x72>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e048      	b.n	800b002 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	639a      	str	r2, [r3, #56]	; 0x38
 800af78:	e029      	b.n	800afce <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	895b      	ldrh	r3, [r3, #10]
 800af7e:	025b      	lsls	r3, r3, #9
 800af80:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800af82:	e019      	b.n	800afb8 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6979      	ldr	r1, [r7, #20]
 800af88:	4618      	mov	r0, r3
 800af8a:	f7ff fa6f 	bl	800a46c <get_fat>
 800af8e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800af90:	697b      	ldr	r3, [r7, #20]
 800af92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af96:	d101      	bne.n	800af9c <dir_sdi+0x9e>
 800af98:	2301      	movs	r3, #1
 800af9a:	e032      	b.n	800b002 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2b01      	cmp	r3, #1
 800afa0:	d904      	bls.n	800afac <dir_sdi+0xae>
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	69db      	ldr	r3, [r3, #28]
 800afa6:	697a      	ldr	r2, [r7, #20]
 800afa8:	429a      	cmp	r2, r3
 800afaa:	d301      	bcc.n	800afb0 <dir_sdi+0xb2>
 800afac:	2302      	movs	r3, #2
 800afae:	e028      	b.n	800b002 <dir_sdi+0x104>
			ofs -= csz;
 800afb0:	683a      	ldr	r2, [r7, #0]
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	1ad3      	subs	r3, r2, r3
 800afb6:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800afb8:	683a      	ldr	r2, [r7, #0]
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	429a      	cmp	r2, r3
 800afbe:	d2e1      	bcs.n	800af84 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800afc0:	6979      	ldr	r1, [r7, #20]
 800afc2:	6938      	ldr	r0, [r7, #16]
 800afc4:	f7ff fa32 	bl	800a42c <clust2sect>
 800afc8:	4602      	mov	r2, r0
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	697a      	ldr	r2, [r7, #20]
 800afd2:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d101      	bne.n	800afe0 <dir_sdi+0xe2>
 800afdc:	2302      	movs	r3, #2
 800afde:	e010      	b.n	800b002 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800afe4:	683b      	ldr	r3, [r7, #0]
 800afe6:	0a5b      	lsrs	r3, r3, #9
 800afe8:	441a      	add	r2, r3
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800afee:	693b      	ldr	r3, [r7, #16]
 800aff0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affa:	441a      	add	r2, r3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3718      	adds	r7, #24
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b086      	sub	sp, #24
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
 800b012:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b01e:	3320      	adds	r3, #32
 800b020:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00b      	beq.n	800b042 <dir_next+0x38>
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	781b      	ldrb	r3, [r3, #0]
 800b02e:	2b04      	cmp	r3, #4
 800b030:	d102      	bne.n	800b038 <dir_next+0x2e>
 800b032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b036:	e001      	b.n	800b03c <dir_next+0x32>
 800b038:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	429a      	cmp	r2, r3
 800b040:	d801      	bhi.n	800b046 <dir_next+0x3c>
 800b042:	2304      	movs	r3, #4
 800b044:	e0b2      	b.n	800b1ac <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f040 80a0 	bne.w	800b192 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b056:	1c5a      	adds	r2, r3, #1
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b060:	2b00      	cmp	r3, #0
 800b062:	d10b      	bne.n	800b07c <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b064:	68bb      	ldr	r3, [r7, #8]
 800b066:	095b      	lsrs	r3, r3, #5
 800b068:	68fa      	ldr	r2, [r7, #12]
 800b06a:	8912      	ldrh	r2, [r2, #8]
 800b06c:	4293      	cmp	r3, r2
 800b06e:	f0c0 8090 	bcc.w	800b192 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	639a      	str	r2, [r3, #56]	; 0x38
 800b078:	2304      	movs	r3, #4
 800b07a:	e097      	b.n	800b1ac <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	0a5b      	lsrs	r3, r3, #9
 800b080:	68fa      	ldr	r2, [r7, #12]
 800b082:	8952      	ldrh	r2, [r2, #10]
 800b084:	3a01      	subs	r2, #1
 800b086:	4013      	ands	r3, r2
 800b088:	2b00      	cmp	r3, #0
 800b08a:	f040 8082 	bne.w	800b192 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b094:	4619      	mov	r1, r3
 800b096:	4610      	mov	r0, r2
 800b098:	f7ff f9e8 	bl	800a46c <get_fat>
 800b09c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b09e:	697b      	ldr	r3, [r7, #20]
 800b0a0:	2b01      	cmp	r3, #1
 800b0a2:	d801      	bhi.n	800b0a8 <dir_next+0x9e>
 800b0a4:	2302      	movs	r3, #2
 800b0a6:	e081      	b.n	800b1ac <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0ae:	d101      	bne.n	800b0b4 <dir_next+0xaa>
 800b0b0:	2301      	movs	r3, #1
 800b0b2:	e07b      	b.n	800b1ac <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	69db      	ldr	r3, [r3, #28]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d35f      	bcc.n	800b17e <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d104      	bne.n	800b0ce <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	639a      	str	r2, [r3, #56]	; 0x38
 800b0ca:	2304      	movs	r3, #4
 800b0cc:	e06e      	b.n	800b1ac <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b0ce:	687a      	ldr	r2, [r7, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4610      	mov	r0, r2
 800b0d8:	f7ff fdcc 	bl	800ac74 <create_chain>
 800b0dc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d101      	bne.n	800b0e8 <dir_next+0xde>
 800b0e4:	2307      	movs	r3, #7
 800b0e6:	e061      	b.n	800b1ac <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	2b01      	cmp	r3, #1
 800b0ec:	d101      	bne.n	800b0f2 <dir_next+0xe8>
 800b0ee:	2302      	movs	r3, #2
 800b0f0:	e05c      	b.n	800b1ac <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0f8:	d101      	bne.n	800b0fe <dir_next+0xf4>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e056      	b.n	800b1ac <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	79db      	ldrb	r3, [r3, #7]
 800b102:	f043 0304 	orr.w	r3, r3, #4
 800b106:	b2da      	uxtb	r2, r3
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b10c:	68f8      	ldr	r0, [r7, #12]
 800b10e:	f7ff f8ad 	bl	800a26c <sync_window>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <dir_next+0x112>
 800b118:	2301      	movs	r3, #1
 800b11a:	e047      	b.n	800b1ac <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3338      	adds	r3, #56	; 0x38
 800b120:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b124:	2100      	movs	r1, #0
 800b126:	4618      	mov	r0, r3
 800b128:	f7fe fed6 	bl	8009ed8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b12c:	2300      	movs	r3, #0
 800b12e:	613b      	str	r3, [r7, #16]
 800b130:	6979      	ldr	r1, [r7, #20]
 800b132:	68f8      	ldr	r0, [r7, #12]
 800b134:	f7ff f97a 	bl	800a42c <clust2sect>
 800b138:	4602      	mov	r2, r0
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	635a      	str	r2, [r3, #52]	; 0x34
 800b13e:	e012      	b.n	800b166 <dir_next+0x15c>
						fs->wflag = 1;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2201      	movs	r2, #1
 800b144:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f7ff f890 	bl	800a26c <sync_window>
 800b14c:	4603      	mov	r3, r0
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <dir_next+0x14c>
 800b152:	2301      	movs	r3, #1
 800b154:	e02a      	b.n	800b1ac <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b156:	693b      	ldr	r3, [r7, #16]
 800b158:	3301      	adds	r3, #1
 800b15a:	613b      	str	r3, [r7, #16]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b160:	1c5a      	adds	r2, r3, #1
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	635a      	str	r2, [r3, #52]	; 0x34
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	895b      	ldrh	r3, [r3, #10]
 800b16a:	461a      	mov	r2, r3
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	4293      	cmp	r3, r2
 800b170:	d3e6      	bcc.n	800b140 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b176:	693b      	ldr	r3, [r7, #16]
 800b178:	1ad2      	subs	r2, r2, r3
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800b184:	6979      	ldr	r1, [r7, #20]
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff f950 	bl	800a42c <clust2sect>
 800b18c:	4602      	mov	r2, r0
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	68ba      	ldr	r2, [r7, #8]
 800b196:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1a4:	441a      	add	r2, r3
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800b1aa:	2300      	movs	r3, #0
}
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b086      	sub	sp, #24
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
 800b1bc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f7ff fe99 	bl	800aefe <dir_sdi>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d140      	bne.n	800b258 <dir_alloc+0xa4>
		n = 0;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1de:	4619      	mov	r1, r3
 800b1e0:	68f8      	ldr	r0, [r7, #12]
 800b1e2:	f7ff f887 	bl	800a2f4 <move_window>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b1ea:	7dfb      	ldrb	r3, [r7, #23]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d132      	bne.n	800b256 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	781b      	ldrb	r3, [r3, #0]
 800b1f4:	2b04      	cmp	r3, #4
 800b1f6:	d108      	bne.n	800b20a <dir_alloc+0x56>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	b25b      	sxtb	r3, r3
 800b200:	43db      	mvns	r3, r3
 800b202:	b2db      	uxtb	r3, r3
 800b204:	09db      	lsrs	r3, r3, #7
 800b206:	b2db      	uxtb	r3, r3
 800b208:	e00f      	b.n	800b22a <dir_alloc+0x76>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b20e:	781b      	ldrb	r3, [r3, #0]
 800b210:	2be5      	cmp	r3, #229	; 0xe5
 800b212:	d004      	beq.n	800b21e <dir_alloc+0x6a>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b218:	781b      	ldrb	r3, [r3, #0]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d101      	bne.n	800b222 <dir_alloc+0x6e>
 800b21e:	2301      	movs	r3, #1
 800b220:	e000      	b.n	800b224 <dir_alloc+0x70>
 800b222:	2300      	movs	r3, #0
 800b224:	f003 0301 	and.w	r3, r3, #1
 800b228:	b2db      	uxtb	r3, r3
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d007      	beq.n	800b23e <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b22e:	693b      	ldr	r3, [r7, #16]
 800b230:	3301      	adds	r3, #1
 800b232:	613b      	str	r3, [r7, #16]
 800b234:	693a      	ldr	r2, [r7, #16]
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	429a      	cmp	r2, r3
 800b23a:	d102      	bne.n	800b242 <dir_alloc+0x8e>
 800b23c:	e00c      	b.n	800b258 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b242:	2101      	movs	r1, #1
 800b244:	6878      	ldr	r0, [r7, #4]
 800b246:	f7ff fee0 	bl	800b00a <dir_next>
 800b24a:	4603      	mov	r3, r0
 800b24c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d0c2      	beq.n	800b1da <dir_alloc+0x26>
 800b254:	e000      	b.n	800b258 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800b256:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	2b04      	cmp	r3, #4
 800b25c:	d101      	bne.n	800b262 <dir_alloc+0xae>
 800b25e:	2307      	movs	r3, #7
 800b260:	75fb      	strb	r3, [r7, #23]
	return res;
 800b262:	7dfb      	ldrb	r3, [r7, #23]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}

0800b26c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	331a      	adds	r3, #26
 800b27a:	4618      	mov	r0, r3
 800b27c:	f7fe fc26 	bl	8009acc <ld_word>
 800b280:	4603      	mov	r3, r0
 800b282:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	781b      	ldrb	r3, [r3, #0]
 800b288:	2b03      	cmp	r3, #3
 800b28a:	d109      	bne.n	800b2a0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	3314      	adds	r3, #20
 800b290:	4618      	mov	r0, r3
 800b292:	f7fe fc1b 	bl	8009acc <ld_word>
 800b296:	4603      	mov	r3, r0
 800b298:	041b      	lsls	r3, r3, #16
 800b29a:	68fa      	ldr	r2, [r7, #12]
 800b29c:	4313      	orrs	r3, r2
 800b29e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
}
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	3710      	adds	r7, #16
 800b2a6:	46bd      	mov	sp, r7
 800b2a8:	bd80      	pop	{r7, pc}

0800b2aa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b2aa:	b580      	push	{r7, lr}
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	af00      	add	r7, sp, #0
 800b2b0:	60f8      	str	r0, [r7, #12]
 800b2b2:	60b9      	str	r1, [r7, #8]
 800b2b4:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b2b6:	68bb      	ldr	r3, [r7, #8]
 800b2b8:	331a      	adds	r3, #26
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	b292      	uxth	r2, r2
 800b2be:	4611      	mov	r1, r2
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	f7fe fd19 	bl	8009cf8 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b03      	cmp	r3, #3
 800b2cc:	d109      	bne.n	800b2e2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	f103 0214 	add.w	r2, r3, #20
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	0c1b      	lsrs	r3, r3, #16
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4610      	mov	r0, r2
 800b2de:	f7fe fd0b 	bl	8009cf8 <st_word>
	}
}
 800b2e2:	bf00      	nop
 800b2e4:	3710      	adds	r7, #16
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
	...

0800b2ec <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800b2ec:	b590      	push	{r4, r7, lr}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	331a      	adds	r3, #26
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f7fe fbe6 	bl	8009acc <ld_word>
 800b300:	4603      	mov	r3, r0
 800b302:	2b00      	cmp	r3, #0
 800b304:	d001      	beq.n	800b30a <cmp_lfn+0x1e>
 800b306:	2300      	movs	r3, #0
 800b308:	e059      	b.n	800b3be <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800b30a:	683b      	ldr	r3, [r7, #0]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b312:	1e5a      	subs	r2, r3, #1
 800b314:	4613      	mov	r3, r2
 800b316:	005b      	lsls	r3, r3, #1
 800b318:	4413      	add	r3, r2
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	4413      	add	r3, r2
 800b31e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b320:	2301      	movs	r3, #1
 800b322:	81fb      	strh	r3, [r7, #14]
 800b324:	2300      	movs	r3, #0
 800b326:	613b      	str	r3, [r7, #16]
 800b328:	e033      	b.n	800b392 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b32a:	4a27      	ldr	r2, [pc, #156]	; (800b3c8 <cmp_lfn+0xdc>)
 800b32c:	693b      	ldr	r3, [r7, #16]
 800b32e:	4413      	add	r3, r2
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	461a      	mov	r2, r3
 800b334:	683b      	ldr	r3, [r7, #0]
 800b336:	4413      	add	r3, r2
 800b338:	4618      	mov	r0, r3
 800b33a:	f7fe fbc7 	bl	8009acc <ld_word>
 800b33e:	4603      	mov	r3, r0
 800b340:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b342:	89fb      	ldrh	r3, [r7, #14]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d01a      	beq.n	800b37e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800b348:	697b      	ldr	r3, [r7, #20]
 800b34a:	2bfe      	cmp	r3, #254	; 0xfe
 800b34c:	d812      	bhi.n	800b374 <cmp_lfn+0x88>
 800b34e:	89bb      	ldrh	r3, [r7, #12]
 800b350:	4618      	mov	r0, r3
 800b352:	f002 fcc7 	bl	800dce4 <ff_wtoupper>
 800b356:	4603      	mov	r3, r0
 800b358:	461c      	mov	r4, r3
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	1c5a      	adds	r2, r3, #1
 800b35e:	617a      	str	r2, [r7, #20]
 800b360:	005b      	lsls	r3, r3, #1
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	4413      	add	r3, r2
 800b366:	881b      	ldrh	r3, [r3, #0]
 800b368:	4618      	mov	r0, r3
 800b36a:	f002 fcbb 	bl	800dce4 <ff_wtoupper>
 800b36e:	4603      	mov	r3, r0
 800b370:	429c      	cmp	r4, r3
 800b372:	d001      	beq.n	800b378 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800b374:	2300      	movs	r3, #0
 800b376:	e022      	b.n	800b3be <cmp_lfn+0xd2>
			}
			wc = uc;
 800b378:	89bb      	ldrh	r3, [r7, #12]
 800b37a:	81fb      	strh	r3, [r7, #14]
 800b37c:	e006      	b.n	800b38c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b37e:	89bb      	ldrh	r3, [r7, #12]
 800b380:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b384:	4293      	cmp	r3, r2
 800b386:	d001      	beq.n	800b38c <cmp_lfn+0xa0>
 800b388:	2300      	movs	r3, #0
 800b38a:	e018      	b.n	800b3be <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	3301      	adds	r3, #1
 800b390:	613b      	str	r3, [r7, #16]
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	2b0c      	cmp	r3, #12
 800b396:	d9c8      	bls.n	800b32a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800b398:	683b      	ldr	r3, [r7, #0]
 800b39a:	781b      	ldrb	r3, [r3, #0]
 800b39c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d00b      	beq.n	800b3bc <cmp_lfn+0xd0>
 800b3a4:	89fb      	ldrh	r3, [r7, #14]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d008      	beq.n	800b3bc <cmp_lfn+0xd0>
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	881b      	ldrh	r3, [r3, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d001      	beq.n	800b3bc <cmp_lfn+0xd0>
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	e000      	b.n	800b3be <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800b3bc:	2301      	movs	r3, #1
}
 800b3be:	4618      	mov	r0, r3
 800b3c0:	371c      	adds	r7, #28
 800b3c2:	46bd      	mov	sp, r7
 800b3c4:	bd90      	pop	{r4, r7, pc}
 800b3c6:	bf00      	nop
 800b3c8:	0800ea00 	.word	0x0800ea00

0800b3cc <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b086      	sub	sp, #24
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
 800b3d4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	331a      	adds	r3, #26
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f7fe fb76 	bl	8009acc <ld_word>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d001      	beq.n	800b3ea <pick_lfn+0x1e>
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	e04d      	b.n	800b486 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3f2:	1e5a      	subs	r2, r3, #1
 800b3f4:	4613      	mov	r3, r2
 800b3f6:	005b      	lsls	r3, r3, #1
 800b3f8:	4413      	add	r3, r2
 800b3fa:	009b      	lsls	r3, r3, #2
 800b3fc:	4413      	add	r3, r2
 800b3fe:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b400:	2301      	movs	r3, #1
 800b402:	81fb      	strh	r3, [r7, #14]
 800b404:	2300      	movs	r3, #0
 800b406:	613b      	str	r3, [r7, #16]
 800b408:	e028      	b.n	800b45c <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800b40a:	4a21      	ldr	r2, [pc, #132]	; (800b490 <pick_lfn+0xc4>)
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	4413      	add	r3, r2
 800b410:	781b      	ldrb	r3, [r3, #0]
 800b412:	461a      	mov	r2, r3
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	4413      	add	r3, r2
 800b418:	4618      	mov	r0, r3
 800b41a:	f7fe fb57 	bl	8009acc <ld_word>
 800b41e:	4603      	mov	r3, r0
 800b420:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800b422:	89fb      	ldrh	r3, [r7, #14]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00f      	beq.n	800b448 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	2bfe      	cmp	r3, #254	; 0xfe
 800b42c:	d901      	bls.n	800b432 <pick_lfn+0x66>
 800b42e:	2300      	movs	r3, #0
 800b430:	e029      	b.n	800b486 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800b432:	89bb      	ldrh	r3, [r7, #12]
 800b434:	81fb      	strh	r3, [r7, #14]
 800b436:	697b      	ldr	r3, [r7, #20]
 800b438:	1c5a      	adds	r2, r3, #1
 800b43a:	617a      	str	r2, [r7, #20]
 800b43c:	005b      	lsls	r3, r3, #1
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	4413      	add	r3, r2
 800b442:	89fa      	ldrh	r2, [r7, #14]
 800b444:	801a      	strh	r2, [r3, #0]
 800b446:	e006      	b.n	800b456 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800b448:	89bb      	ldrh	r3, [r7, #12]
 800b44a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b44e:	4293      	cmp	r3, r2
 800b450:	d001      	beq.n	800b456 <pick_lfn+0x8a>
 800b452:	2300      	movs	r3, #0
 800b454:	e017      	b.n	800b486 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800b456:	693b      	ldr	r3, [r7, #16]
 800b458:	3301      	adds	r3, #1
 800b45a:	613b      	str	r3, [r7, #16]
 800b45c:	693b      	ldr	r3, [r7, #16]
 800b45e:	2b0c      	cmp	r3, #12
 800b460:	d9d3      	bls.n	800b40a <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d00a      	beq.n	800b484 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	2bfe      	cmp	r3, #254	; 0xfe
 800b472:	d901      	bls.n	800b478 <pick_lfn+0xac>
 800b474:	2300      	movs	r3, #0
 800b476:	e006      	b.n	800b486 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800b478:	697b      	ldr	r3, [r7, #20]
 800b47a:	005b      	lsls	r3, r3, #1
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	4413      	add	r3, r2
 800b480:	2200      	movs	r2, #0
 800b482:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800b484:	2301      	movs	r3, #1
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}
 800b48e:	bf00      	nop
 800b490:	0800ea00 	.word	0x0800ea00

0800b494 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b088      	sub	sp, #32
 800b498:	af00      	add	r7, sp, #0
 800b49a:	60f8      	str	r0, [r7, #12]
 800b49c:	60b9      	str	r1, [r7, #8]
 800b49e:	4611      	mov	r1, r2
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	71fb      	strb	r3, [r7, #7]
 800b4a6:	4613      	mov	r3, r2
 800b4a8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	330d      	adds	r3, #13
 800b4ae:	79ba      	ldrb	r2, [r7, #6]
 800b4b0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	330b      	adds	r3, #11
 800b4b6:	220f      	movs	r2, #15
 800b4b8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	330c      	adds	r3, #12
 800b4be:	2200      	movs	r2, #0
 800b4c0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	331a      	adds	r3, #26
 800b4c6:	2100      	movs	r1, #0
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fe fc15 	bl	8009cf8 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800b4ce:	79fb      	ldrb	r3, [r7, #7]
 800b4d0:	1e5a      	subs	r2, r3, #1
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4413      	add	r3, r2
 800b4dc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	82fb      	strh	r3, [r7, #22]
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800b4e6:	8afb      	ldrh	r3, [r7, #22]
 800b4e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d007      	beq.n	800b500 <put_lfn+0x6c>
 800b4f0:	69fb      	ldr	r3, [r7, #28]
 800b4f2:	1c5a      	adds	r2, r3, #1
 800b4f4:	61fa      	str	r2, [r7, #28]
 800b4f6:	005b      	lsls	r3, r3, #1
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	881b      	ldrh	r3, [r3, #0]
 800b4fe:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800b500:	4a17      	ldr	r2, [pc, #92]	; (800b560 <put_lfn+0xcc>)
 800b502:	69bb      	ldr	r3, [r7, #24]
 800b504:	4413      	add	r3, r2
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	461a      	mov	r2, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	4413      	add	r3, r2
 800b50e:	8afa      	ldrh	r2, [r7, #22]
 800b510:	4611      	mov	r1, r2
 800b512:	4618      	mov	r0, r3
 800b514:	f7fe fbf0 	bl	8009cf8 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800b518:	8afb      	ldrh	r3, [r7, #22]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d102      	bne.n	800b524 <put_lfn+0x90>
 800b51e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b522:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	3301      	adds	r3, #1
 800b528:	61bb      	str	r3, [r7, #24]
 800b52a:	69bb      	ldr	r3, [r7, #24]
 800b52c:	2b0c      	cmp	r3, #12
 800b52e:	d9da      	bls.n	800b4e6 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800b530:	8afb      	ldrh	r3, [r7, #22]
 800b532:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b536:	4293      	cmp	r3, r2
 800b538:	d006      	beq.n	800b548 <put_lfn+0xb4>
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	005b      	lsls	r3, r3, #1
 800b53e:	68fa      	ldr	r2, [r7, #12]
 800b540:	4413      	add	r3, r2
 800b542:	881b      	ldrh	r3, [r3, #0]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d103      	bne.n	800b550 <put_lfn+0xbc>
 800b548:	79fb      	ldrb	r3, [r7, #7]
 800b54a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b54e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	79fa      	ldrb	r2, [r7, #7]
 800b554:	701a      	strb	r2, [r3, #0]
}
 800b556:	bf00      	nop
 800b558:	3720      	adds	r7, #32
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
 800b55e:	bf00      	nop
 800b560:	0800ea00 	.word	0x0800ea00

0800b564 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b08c      	sub	sp, #48	; 0x30
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	607a      	str	r2, [r7, #4]
 800b570:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800b572:	220b      	movs	r2, #11
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	68f8      	ldr	r0, [r7, #12]
 800b578:	f7fe fc8d 	bl	8009e96 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b05      	cmp	r3, #5
 800b580:	d92b      	bls.n	800b5da <gen_numname+0x76>
		sr = seq;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800b586:	e022      	b.n	800b5ce <gen_numname+0x6a>
			wc = *lfn++;
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	1c9a      	adds	r2, r3, #2
 800b58c:	607a      	str	r2, [r7, #4]
 800b58e:	881b      	ldrh	r3, [r3, #0]
 800b590:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800b592:	2300      	movs	r3, #0
 800b594:	62bb      	str	r3, [r7, #40]	; 0x28
 800b596:	e017      	b.n	800b5c8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	005a      	lsls	r2, r3, #1
 800b59c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b59e:	f003 0301 	and.w	r3, r3, #1
 800b5a2:	4413      	add	r3, r2
 800b5a4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800b5a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5a8:	085b      	lsrs	r3, r3, #1
 800b5aa:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d005      	beq.n	800b5c2 <gen_numname+0x5e>
 800b5b6:	69fb      	ldr	r3, [r7, #28]
 800b5b8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800b5bc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800b5c0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800b5c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ca:	2b0f      	cmp	r3, #15
 800b5cc:	d9e4      	bls.n	800b598 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	881b      	ldrh	r3, [r3, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d1d8      	bne.n	800b588 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800b5d6:	69fb      	ldr	r3, [r7, #28]
 800b5d8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800b5da:	2307      	movs	r3, #7
 800b5dc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800b5de:	683b      	ldr	r3, [r7, #0]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	f003 030f 	and.w	r3, r3, #15
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	3330      	adds	r3, #48	; 0x30
 800b5ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800b5ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5f2:	2b39      	cmp	r3, #57	; 0x39
 800b5f4:	d904      	bls.n	800b600 <gen_numname+0x9c>
 800b5f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800b5fa:	3307      	adds	r3, #7
 800b5fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800b600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b602:	1e5a      	subs	r2, r3, #1
 800b604:	62ba      	str	r2, [r7, #40]	; 0x28
 800b606:	3330      	adds	r3, #48	; 0x30
 800b608:	443b      	add	r3, r7
 800b60a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800b60e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	091b      	lsrs	r3, r3, #4
 800b616:	603b      	str	r3, [r7, #0]
	} while (seq);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1df      	bne.n	800b5de <gen_numname+0x7a>
	ns[i] = '~';
 800b61e:	f107 0214 	add.w	r2, r7, #20
 800b622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b624:	4413      	add	r3, r2
 800b626:	227e      	movs	r2, #126	; 0x7e
 800b628:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800b62a:	2300      	movs	r3, #0
 800b62c:	627b      	str	r3, [r7, #36]	; 0x24
 800b62e:	e002      	b.n	800b636 <gen_numname+0xd2>
 800b630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b632:	3301      	adds	r3, #1
 800b634:	627b      	str	r3, [r7, #36]	; 0x24
 800b636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d205      	bcs.n	800b64a <gen_numname+0xe6>
 800b63e:	68fa      	ldr	r2, [r7, #12]
 800b640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b642:	4413      	add	r3, r2
 800b644:	781b      	ldrb	r3, [r3, #0]
 800b646:	2b20      	cmp	r3, #32
 800b648:	d1f2      	bne.n	800b630 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800b64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b64c:	2b07      	cmp	r3, #7
 800b64e:	d807      	bhi.n	800b660 <gen_numname+0xfc>
 800b650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b652:	1c5a      	adds	r2, r3, #1
 800b654:	62ba      	str	r2, [r7, #40]	; 0x28
 800b656:	3330      	adds	r3, #48	; 0x30
 800b658:	443b      	add	r3, r7
 800b65a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800b65e:	e000      	b.n	800b662 <gen_numname+0xfe>
 800b660:	2120      	movs	r1, #32
 800b662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b664:	1c5a      	adds	r2, r3, #1
 800b666:	627a      	str	r2, [r7, #36]	; 0x24
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	4413      	add	r3, r2
 800b66c:	460a      	mov	r2, r1
 800b66e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800b670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b672:	2b07      	cmp	r3, #7
 800b674:	d9e9      	bls.n	800b64a <gen_numname+0xe6>
}
 800b676:	bf00      	nop
 800b678:	bf00      	nop
 800b67a:	3730      	adds	r7, #48	; 0x30
 800b67c:	46bd      	mov	sp, r7
 800b67e:	bd80      	pop	{r7, pc}

0800b680 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800b680:	b480      	push	{r7}
 800b682:	b085      	sub	sp, #20
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800b688:	2300      	movs	r3, #0
 800b68a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800b68c:	230b      	movs	r3, #11
 800b68e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800b690:	7bfb      	ldrb	r3, [r7, #15]
 800b692:	b2da      	uxtb	r2, r3
 800b694:	0852      	lsrs	r2, r2, #1
 800b696:	01db      	lsls	r3, r3, #7
 800b698:	4313      	orrs	r3, r2
 800b69a:	b2da      	uxtb	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	1c59      	adds	r1, r3, #1
 800b6a0:	6079      	str	r1, [r7, #4]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	60bb      	str	r3, [r7, #8]
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1ed      	bne.n	800b690 <sum_sfn+0x10>
	return sum;
 800b6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c0:	4770      	bx	lr

0800b6c2 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b087      	sub	sp, #28
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	781b      	ldrb	r3, [r3, #0]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	015b      	lsls	r3, r3, #5
 800b6d4:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	827b      	strh	r3, [r7, #18]
 800b6da:	2300      	movs	r3, #0
 800b6dc:	617b      	str	r3, [r7, #20]
 800b6de:	e018      	b.n	800b712 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d103      	bne.n	800b6ee <xdir_sum+0x2c>
			i++;
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	617b      	str	r3, [r7, #20]
 800b6ec:	e00e      	b.n	800b70c <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800b6ee:	8a7b      	ldrh	r3, [r7, #18]
 800b6f0:	03db      	lsls	r3, r3, #15
 800b6f2:	b29a      	uxth	r2, r3
 800b6f4:	8a7b      	ldrh	r3, [r7, #18]
 800b6f6:	085b      	lsrs	r3, r3, #1
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	4413      	add	r3, r2
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	6879      	ldr	r1, [r7, #4]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	440b      	add	r3, r1
 800b704:	781b      	ldrb	r3, [r3, #0]
 800b706:	b29b      	uxth	r3, r3
 800b708:	4413      	add	r3, r2
 800b70a:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800b70c:	697b      	ldr	r3, [r7, #20]
 800b70e:	3301      	adds	r3, #1
 800b710:	617b      	str	r3, [r7, #20]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	429a      	cmp	r2, r3
 800b718:	d3e2      	bcc.n	800b6e0 <xdir_sum+0x1e>
		}
	}
	return sum;
 800b71a:	8a7b      	ldrh	r3, [r7, #18]
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	371c      	adds	r7, #28
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800b730:	2300      	movs	r3, #0
 800b732:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800b734:	e01f      	b.n	800b776 <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800b736:	89bb      	ldrh	r3, [r7, #12]
 800b738:	4618      	mov	r0, r3
 800b73a:	f002 fad3 	bl	800dce4 <ff_wtoupper>
 800b73e:	4603      	mov	r3, r0
 800b740:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800b742:	89fb      	ldrh	r3, [r7, #14]
 800b744:	03db      	lsls	r3, r3, #15
 800b746:	b29a      	uxth	r2, r3
 800b748:	89fb      	ldrh	r3, [r7, #14]
 800b74a:	085b      	lsrs	r3, r3, #1
 800b74c:	b29b      	uxth	r3, r3
 800b74e:	4413      	add	r3, r2
 800b750:	b29a      	uxth	r2, r3
 800b752:	89bb      	ldrh	r3, [r7, #12]
 800b754:	b2db      	uxtb	r3, r3
 800b756:	b29b      	uxth	r3, r3
 800b758:	4413      	add	r3, r2
 800b75a:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800b75c:	89fb      	ldrh	r3, [r7, #14]
 800b75e:	03db      	lsls	r3, r3, #15
 800b760:	b29a      	uxth	r2, r3
 800b762:	89fb      	ldrh	r3, [r7, #14]
 800b764:	085b      	lsrs	r3, r3, #1
 800b766:	b29b      	uxth	r3, r3
 800b768:	4413      	add	r3, r2
 800b76a:	b29a      	uxth	r2, r3
 800b76c:	89bb      	ldrh	r3, [r7, #12]
 800b76e:	0a1b      	lsrs	r3, r3, #8
 800b770:	b29b      	uxth	r3, r3
 800b772:	4413      	add	r3, r2
 800b774:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	1c9a      	adds	r2, r3, #2
 800b77a:	607a      	str	r2, [r7, #4]
 800b77c:	881b      	ldrh	r3, [r3, #0]
 800b77e:	81bb      	strh	r3, [r7, #12]
 800b780:	89bb      	ldrh	r3, [r7, #12]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d1d7      	bne.n	800b736 <xname_sum+0xe>
	}
	return sum;
 800b786:	89fb      	ldrh	r3, [r7, #14]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3710      	adds	r7, #16
 800b78c:	46bd      	mov	sp, r7
 800b78e:	bd80      	pop	{r7, pc}

0800b790 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800b790:	b590      	push	{r4, r7, lr}
 800b792:	b087      	sub	sp, #28
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	691b      	ldr	r3, [r3, #16]
 800b79e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681a      	ldr	r2, [r3, #0]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a8:	4619      	mov	r1, r3
 800b7aa:	4610      	mov	r0, r2
 800b7ac:	f7fe fda2 	bl	800a2f4 <move_window>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b7b4:	7bfb      	ldrb	r3, [r7, #15]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d001      	beq.n	800b7be <load_xdir+0x2e>
 800b7ba:	7bfb      	ldrb	r3, [r7, #15]
 800b7bc:	e09f      	b.n	800b8fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7c2:	781b      	ldrb	r3, [r3, #0]
 800b7c4:	2b85      	cmp	r3, #133	; 0x85
 800b7c6:	d001      	beq.n	800b7cc <load_xdir+0x3c>
 800b7c8:	2302      	movs	r3, #2
 800b7ca:	e098      	b.n	800b8fe <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b7d0:	2220      	movs	r2, #32
 800b7d2:	4619      	mov	r1, r3
 800b7d4:	6938      	ldr	r0, [r7, #16]
 800b7d6:	f7fe fb5e 	bl	8009e96 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	3301      	adds	r3, #1
 800b7de:	781b      	ldrb	r3, [r3, #0]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	015b      	lsls	r3, r3, #5
 800b7e4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800b7e6:	68bb      	ldr	r3, [r7, #8]
 800b7e8:	2b5f      	cmp	r3, #95	; 0x5f
 800b7ea:	d903      	bls.n	800b7f4 <load_xdir+0x64>
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b7f2:	d901      	bls.n	800b7f8 <load_xdir+0x68>
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e082      	b.n	800b8fe <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7ff fc05 	bl	800b00a <dir_next>
 800b800:	4603      	mov	r3, r0
 800b802:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b804:	7bfb      	ldrb	r3, [r7, #15]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d001      	beq.n	800b80e <load_xdir+0x7e>
 800b80a:	7bfb      	ldrb	r3, [r7, #15]
 800b80c:	e077      	b.n	800b8fe <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681a      	ldr	r2, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b816:	4619      	mov	r1, r3
 800b818:	4610      	mov	r0, r2
 800b81a:	f7fe fd6b 	bl	800a2f4 <move_window>
 800b81e:	4603      	mov	r3, r0
 800b820:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800b822:	7bfb      	ldrb	r3, [r7, #15]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d001      	beq.n	800b82c <load_xdir+0x9c>
 800b828:	7bfb      	ldrb	r3, [r7, #15]
 800b82a:	e068      	b.n	800b8fe <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	2bc0      	cmp	r3, #192	; 0xc0
 800b834:	d001      	beq.n	800b83a <load_xdir+0xaa>
 800b836:	2302      	movs	r3, #2
 800b838:	e061      	b.n	800b8fe <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	f103 0020 	add.w	r0, r3, #32
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b844:	2220      	movs	r2, #32
 800b846:	4619      	mov	r1, r3
 800b848:	f7fe fb25 	bl	8009e96 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	3323      	adds	r3, #35	; 0x23
 800b850:	781b      	ldrb	r3, [r3, #0]
 800b852:	332c      	adds	r3, #44	; 0x2c
 800b854:	4a2c      	ldr	r2, [pc, #176]	; (800b908 <load_xdir+0x178>)
 800b856:	fba2 2303 	umull	r2, r3, r2, r3
 800b85a:	08db      	lsrs	r3, r3, #3
 800b85c:	015b      	lsls	r3, r3, #5
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	429a      	cmp	r2, r3
 800b862:	d201      	bcs.n	800b868 <load_xdir+0xd8>
 800b864:	2302      	movs	r3, #2
 800b866:	e04a      	b.n	800b8fe <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800b868:	2340      	movs	r3, #64	; 0x40
 800b86a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800b86c:	2100      	movs	r1, #0
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f7ff fbcb 	bl	800b00a <dir_next>
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <load_xdir+0xf2>
 800b87e:	7bfb      	ldrb	r3, [r7, #15]
 800b880:	e03d      	b.n	800b8fe <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	681a      	ldr	r2, [r3, #0]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88a:	4619      	mov	r1, r3
 800b88c:	4610      	mov	r0, r2
 800b88e:	f7fe fd31 	bl	800a2f4 <move_window>
 800b892:	4603      	mov	r3, r0
 800b894:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800b896:	7bfb      	ldrb	r3, [r7, #15]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d001      	beq.n	800b8a0 <load_xdir+0x110>
 800b89c:	7bfb      	ldrb	r3, [r7, #15]
 800b89e:	e02e      	b.n	800b8fe <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8a4:	781b      	ldrb	r3, [r3, #0]
 800b8a6:	2bc1      	cmp	r3, #193	; 0xc1
 800b8a8:	d001      	beq.n	800b8ae <load_xdir+0x11e>
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e027      	b.n	800b8fe <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800b8ae:	697b      	ldr	r3, [r7, #20]
 800b8b0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b8b4:	d208      	bcs.n	800b8c8 <load_xdir+0x138>
 800b8b6:	693a      	ldr	r2, [r7, #16]
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	18d0      	adds	r0, r2, r3
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8c0:	2220      	movs	r2, #32
 800b8c2:	4619      	mov	r1, r3
 800b8c4:	f7fe fae7 	bl	8009e96 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	3320      	adds	r3, #32
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	429a      	cmp	r2, r3
 800b8d4:	d3ca      	bcc.n	800b86c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800b8d6:	697b      	ldr	r3, [r7, #20]
 800b8d8:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800b8dc:	d80e      	bhi.n	800b8fc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800b8de:	6938      	ldr	r0, [r7, #16]
 800b8e0:	f7ff feef 	bl	800b6c2 <xdir_sum>
 800b8e4:	4603      	mov	r3, r0
 800b8e6:	461c      	mov	r4, r3
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	3302      	adds	r3, #2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7fe f8ed 	bl	8009acc <ld_word>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	429c      	cmp	r4, r3
 800b8f6:	d001      	beq.n	800b8fc <load_xdir+0x16c>
 800b8f8:	2302      	movs	r3, #2
 800b8fa:	e000      	b.n	800b8fe <load_xdir+0x16e>
	}
	return FR_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	371c      	adds	r7, #28
 800b902:	46bd      	mov	sp, r7
 800b904:	bd90      	pop	{r4, r7, pc}
 800b906:	bf00      	nop
 800b908:	88888889 	.word	0x88888889

0800b90c <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800b90c:	b5b0      	push	{r4, r5, r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6808      	ldr	r0, [r1, #0]
 800b91a:	6879      	ldr	r1, [r7, #4]
 800b91c:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800b91e:	6839      	ldr	r1, [r7, #0]
 800b920:	6a08      	ldr	r0, [r1, #32]
 800b922:	6879      	ldr	r1, [r7, #4]
 800b924:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800b926:	6839      	ldr	r1, [r7, #0]
 800b928:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b92a:	b2c8      	uxtb	r0, r1
 800b92c:	6879      	ldr	r1, [r7, #4]
 800b92e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800b934:	2000      	movs	r0, #0
 800b936:	460c      	mov	r4, r1
 800b938:	4605      	mov	r5, r0
 800b93a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800b93e:	2300      	movs	r3, #0
 800b940:	6879      	ldr	r1, [r7, #4]
 800b942:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7ff fad2 	bl	800aefe <dir_sdi>
 800b95a:	4603      	mov	r3, r0
 800b95c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b95e:	7bfb      	ldrb	r3, [r7, #15]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d104      	bne.n	800b96e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800b964:	6878      	ldr	r0, [r7, #4]
 800b966:	f7ff ff13 	bl	800b790 <load_xdir>
 800b96a:	4603      	mov	r3, r0
 800b96c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800b96e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b970:	4618      	mov	r0, r3
 800b972:	3710      	adds	r7, #16
 800b974:	46bd      	mov	sp, r7
 800b976:	bdb0      	pop	{r4, r5, r7, pc}

0800b978 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800b978:	b590      	push	{r4, r7, lr}
 800b97a:	b087      	sub	sp, #28
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	1c9c      	adds	r4, r3, #2
 800b98c:	68f8      	ldr	r0, [r7, #12]
 800b98e:	f7ff fe98 	bl	800b6c2 <xdir_sum>
 800b992:	4603      	mov	r3, r0
 800b994:	4619      	mov	r1, r3
 800b996:	4620      	mov	r0, r4
 800b998:	f7fe f9ae 	bl	8009cf8 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	3301      	adds	r3, #1
 800b9a0:	781b      	ldrb	r3, [r3, #0]
 800b9a2:	3301      	adds	r3, #1
 800b9a4:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	6878      	ldr	r0, [r7, #4]
 800b9ae:	f7ff faa6 	bl	800aefe <dir_sdi>
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800b9b6:	e026      	b.n	800ba06 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9c0:	4619      	mov	r1, r3
 800b9c2:	4610      	mov	r0, r2
 800b9c4:	f7fe fc96 	bl	800a2f4 <move_window>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b9cc:	7dfb      	ldrb	r3, [r7, #23]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d11d      	bne.n	800ba0e <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b9d6:	2220      	movs	r2, #32
 800b9d8:	68f9      	ldr	r1, [r7, #12]
 800b9da:	4618      	mov	r0, r3
 800b9dc:	f7fe fa5b 	bl	8009e96 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2201      	movs	r2, #1
 800b9e6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	3b01      	subs	r3, #1
 800b9ec:	613b      	str	r3, [r7, #16]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d00e      	beq.n	800ba12 <store_xdir+0x9a>
		dirb += SZDIRE;
 800b9f4:	68fb      	ldr	r3, [r7, #12]
 800b9f6:	3320      	adds	r3, #32
 800b9f8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f7ff fb04 	bl	800b00a <dir_next>
 800ba02:	4603      	mov	r3, r0
 800ba04:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800ba06:	7dfb      	ldrb	r3, [r7, #23]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d0d5      	beq.n	800b9b8 <store_xdir+0x40>
 800ba0c:	e002      	b.n	800ba14 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800ba0e:	bf00      	nop
 800ba10:	e000      	b.n	800ba14 <store_xdir+0x9c>
		if (--nent == 0) break;
 800ba12:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800ba14:	7dfb      	ldrb	r3, [r7, #23]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d002      	beq.n	800ba20 <store_xdir+0xa8>
 800ba1a:	7dfb      	ldrb	r3, [r7, #23]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d101      	bne.n	800ba24 <store_xdir+0xac>
 800ba20:	7dfb      	ldrb	r3, [r7, #23]
 800ba22:	e000      	b.n	800ba26 <store_xdir+0xae>
 800ba24:	2302      	movs	r3, #2
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	371c      	adds	r7, #28
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd90      	pop	{r4, r7, pc}

0800ba2e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800ba2e:	b590      	push	{r4, r7, lr}
 800ba30:	b085      	sub	sp, #20
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]
 800ba36:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800ba38:	2240      	movs	r2, #64	; 0x40
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	6878      	ldr	r0, [r7, #4]
 800ba3e:	f7fe fa4b 	bl	8009ed8 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	2285      	movs	r2, #133	; 0x85
 800ba46:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	3320      	adds	r3, #32
 800ba4c:	22c0      	movs	r2, #192	; 0xc0
 800ba4e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800ba50:	2300      	movs	r3, #0
 800ba52:	72bb      	strb	r3, [r7, #10]
 800ba54:	2301      	movs	r3, #1
 800ba56:	72fb      	strb	r3, [r7, #11]
 800ba58:	2301      	movs	r3, #1
 800ba5a:	813b      	strh	r3, [r7, #8]
 800ba5c:	2340      	movs	r3, #64	; 0x40
 800ba5e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800ba60:	68fb      	ldr	r3, [r7, #12]
 800ba62:	1c5a      	adds	r2, r3, #1
 800ba64:	60fa      	str	r2, [r7, #12]
 800ba66:	687a      	ldr	r2, [r7, #4]
 800ba68:	4413      	add	r3, r2
 800ba6a:	22c1      	movs	r2, #193	; 0xc1
 800ba6c:	701a      	strb	r2, [r3, #0]
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	1c5a      	adds	r2, r3, #1
 800ba72:	60fa      	str	r2, [r7, #12]
 800ba74:	687a      	ldr	r2, [r7, #4]
 800ba76:	4413      	add	r3, r2
 800ba78:	2200      	movs	r2, #0
 800ba7a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800ba7c:	893b      	ldrh	r3, [r7, #8]
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d00b      	beq.n	800ba9a <create_xdir+0x6c>
 800ba82:	7abb      	ldrb	r3, [r7, #10]
 800ba84:	005b      	lsls	r3, r3, #1
 800ba86:	683a      	ldr	r2, [r7, #0]
 800ba88:	4413      	add	r3, r2
 800ba8a:	881b      	ldrh	r3, [r3, #0]
 800ba8c:	813b      	strh	r3, [r7, #8]
 800ba8e:	893b      	ldrh	r3, [r7, #8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d002      	beq.n	800ba9a <create_xdir+0x6c>
 800ba94:	7abb      	ldrb	r3, [r7, #10]
 800ba96:	3301      	adds	r3, #1
 800ba98:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	893a      	ldrh	r2, [r7, #8]
 800baa2:	4611      	mov	r1, r2
 800baa4:	4618      	mov	r0, r3
 800baa6:	f7fe f927 	bl	8009cf8 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	3302      	adds	r3, #2
 800baae:	60fb      	str	r3, [r7, #12]
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	f003 031f 	and.w	r3, r3, #31
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d1e0      	bne.n	800ba7c <create_xdir+0x4e>
		nb++;
 800baba:	7afb      	ldrb	r3, [r7, #11]
 800babc:	3301      	adds	r3, #1
 800babe:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800bac0:	7abb      	ldrb	r3, [r7, #10]
 800bac2:	005b      	lsls	r3, r3, #1
 800bac4:	683a      	ldr	r2, [r7, #0]
 800bac6:	4413      	add	r3, r2
 800bac8:	881b      	ldrh	r3, [r3, #0]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d1c8      	bne.n	800ba60 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	3323      	adds	r3, #35	; 0x23
 800bad2:	7aba      	ldrb	r2, [r7, #10]
 800bad4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	3301      	adds	r3, #1
 800bada:	7afa      	ldrb	r2, [r7, #11]
 800badc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800bae4:	6838      	ldr	r0, [r7, #0]
 800bae6:	f7ff fe1f 	bl	800b728 <xname_sum>
 800baea:	4603      	mov	r3, r0
 800baec:	4619      	mov	r1, r3
 800baee:	4620      	mov	r0, r4
 800baf0:	f7fe f902 	bl	8009cf8 <st_word>
}
 800baf4:	bf00      	nop
 800baf6:	3714      	adds	r7, #20
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd90      	pop	{r4, r7, pc}

0800bafc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800bafc:	b580      	push	{r7, lr}
 800bafe:	b086      	sub	sp, #24
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800bb06:	2304      	movs	r3, #4
 800bb08:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800bb10:	23ff      	movs	r3, #255	; 0xff
 800bb12:	757b      	strb	r3, [r7, #21]
 800bb14:	23ff      	movs	r3, #255	; 0xff
 800bb16:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800bb18:	e09f      	b.n	800bc5a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb1e:	4619      	mov	r1, r3
 800bb20:	6938      	ldr	r0, [r7, #16]
 800bb22:	f7fe fbe7 	bl	800a2f4 <move_window>
 800bb26:	4603      	mov	r3, r0
 800bb28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bb2a:	7dfb      	ldrb	r3, [r7, #23]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	f040 809a 	bne.w	800bc66 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800bb3a:	7dbb      	ldrb	r3, [r7, #22]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d102      	bne.n	800bb46 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800bb40:	2304      	movs	r3, #4
 800bb42:	75fb      	strb	r3, [r7, #23]
 800bb44:	e096      	b.n	800bc74 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bb46:	693b      	ldr	r3, [r7, #16]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	2b04      	cmp	r3, #4
 800bb4c:	d118      	bne.n	800bb80 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800bb4e:	7dbb      	ldrb	r3, [r7, #22]
 800bb50:	2b85      	cmp	r3, #133	; 0x85
 800bb52:	d179      	bne.n	800bc48 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f7ff fe17 	bl	800b790 <load_xdir>
 800bb62:	4603      	mov	r3, r0
 800bb64:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800bb66:	7dfb      	ldrb	r3, [r7, #23]
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d17e      	bne.n	800bc6a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	3304      	adds	r3, #4
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb78:	b2da      	uxtb	r2, r3
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800bb7e:	e074      	b.n	800bc6a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb84:	330b      	adds	r3, #11
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb8c:	73fb      	strb	r3, [r7, #15]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	7bfa      	ldrb	r2, [r7, #15]
 800bb92:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800bb94:	7dbb      	ldrb	r3, [r7, #22]
 800bb96:	2be5      	cmp	r3, #229	; 0xe5
 800bb98:	d00e      	beq.n	800bbb8 <dir_read+0xbc>
 800bb9a:	7dbb      	ldrb	r3, [r7, #22]
 800bb9c:	2b2e      	cmp	r3, #46	; 0x2e
 800bb9e:	d00b      	beq.n	800bbb8 <dir_read+0xbc>
 800bba0:	7bfb      	ldrb	r3, [r7, #15]
 800bba2:	f023 0320 	bic.w	r3, r3, #32
 800bba6:	2b08      	cmp	r3, #8
 800bba8:	bf0c      	ite	eq
 800bbaa:	2301      	moveq	r3, #1
 800bbac:	2300      	movne	r3, #0
 800bbae:	b2db      	uxtb	r3, r3
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	4293      	cmp	r3, r2
 800bbb6:	d002      	beq.n	800bbbe <dir_read+0xc2>
				ord = 0xFF;
 800bbb8:	23ff      	movs	r3, #255	; 0xff
 800bbba:	757b      	strb	r3, [r7, #21]
 800bbbc:	e044      	b.n	800bc48 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800bbbe:	7bfb      	ldrb	r3, [r7, #15]
 800bbc0:	2b0f      	cmp	r3, #15
 800bbc2:	d12f      	bne.n	800bc24 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800bbc4:	7dbb      	ldrb	r3, [r7, #22]
 800bbc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00d      	beq.n	800bbea <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbd2:	7b5b      	ldrb	r3, [r3, #13]
 800bbd4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800bbd6:	7dbb      	ldrb	r3, [r7, #22]
 800bbd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bbdc:	75bb      	strb	r3, [r7, #22]
 800bbde:	7dbb      	ldrb	r3, [r7, #22]
 800bbe0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800bbea:	7dba      	ldrb	r2, [r7, #22]
 800bbec:	7d7b      	ldrb	r3, [r7, #21]
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d115      	bne.n	800bc1e <dir_read+0x122>
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbf6:	330d      	adds	r3, #13
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	7d3a      	ldrb	r2, [r7, #20]
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d10e      	bne.n	800bc1e <dir_read+0x122>
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	68da      	ldr	r2, [r3, #12]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc08:	4619      	mov	r1, r3
 800bc0a:	4610      	mov	r0, r2
 800bc0c:	f7ff fbde 	bl	800b3cc <pick_lfn>
 800bc10:	4603      	mov	r3, r0
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d003      	beq.n	800bc1e <dir_read+0x122>
 800bc16:	7d7b      	ldrb	r3, [r7, #21]
 800bc18:	3b01      	subs	r3, #1
 800bc1a:	b2db      	uxtb	r3, r3
 800bc1c:	e000      	b.n	800bc20 <dir_read+0x124>
 800bc1e:	23ff      	movs	r3, #255	; 0xff
 800bc20:	757b      	strb	r3, [r7, #21]
 800bc22:	e011      	b.n	800bc48 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800bc24:	7d7b      	ldrb	r3, [r7, #21]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d109      	bne.n	800bc3e <dir_read+0x142>
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f7ff fd26 	bl	800b680 <sum_sfn>
 800bc34:	4603      	mov	r3, r0
 800bc36:	461a      	mov	r2, r3
 800bc38:	7d3b      	ldrb	r3, [r7, #20]
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d017      	beq.n	800bc6e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	f04f 32ff 	mov.w	r2, #4294967295
 800bc44:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800bc46:	e012      	b.n	800bc6e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800bc48:	2100      	movs	r1, #0
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7ff f9dd 	bl	800b00a <dir_next>
 800bc50:	4603      	mov	r3, r0
 800bc52:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bc54:	7dfb      	ldrb	r3, [r7, #23]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10b      	bne.n	800bc72 <dir_read+0x176>
	while (dp->sect) {
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	f47f af5b 	bne.w	800bb1a <dir_read+0x1e>
 800bc64:	e006      	b.n	800bc74 <dir_read+0x178>
		if (res != FR_OK) break;
 800bc66:	bf00      	nop
 800bc68:	e004      	b.n	800bc74 <dir_read+0x178>
					break;
 800bc6a:	bf00      	nop
 800bc6c:	e002      	b.n	800bc74 <dir_read+0x178>
					break;
 800bc6e:	bf00      	nop
 800bc70:	e000      	b.n	800bc74 <dir_read+0x178>
		if (res != FR_OK) break;
 800bc72:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800bc74:	7dfb      	ldrb	r3, [r7, #23]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <dir_read+0x184>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800bc80:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3718      	adds	r7, #24
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}

0800bc8a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bc8a:	b590      	push	{r4, r7, lr}
 800bc8c:	b089      	sub	sp, #36	; 0x24
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bc98:	2100      	movs	r1, #0
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f7ff f92f 	bl	800aefe <dir_sdi>
 800bca0:	4603      	mov	r3, r0
 800bca2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800bca4:	7ffb      	ldrb	r3, [r7, #31]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d001      	beq.n	800bcae <dir_find+0x24>
 800bcaa:	7ffb      	ldrb	r3, [r7, #31]
 800bcac:	e112      	b.n	800bed4 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	781b      	ldrb	r3, [r3, #0]
 800bcb2:	2b04      	cmp	r3, #4
 800bcb4:	d164      	bne.n	800bd80 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	68db      	ldr	r3, [r3, #12]
 800bcba:	4618      	mov	r0, r3
 800bcbc:	f7ff fd34 	bl	800b728 <xname_sum>
 800bcc0:	4603      	mov	r3, r0
 800bcc2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bcc4:	e04f      	b.n	800bd66 <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	691b      	ldr	r3, [r3, #16]
 800bcca:	3324      	adds	r3, #36	; 0x24
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7fd fefd 	bl	8009acc <ld_word>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	461a      	mov	r2, r3
 800bcd6:	893b      	ldrh	r3, [r7, #8]
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d000      	beq.n	800bcde <dir_find+0x54>
 800bcdc:	e043      	b.n	800bd66 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800bce6:	76fb      	strb	r3, [r7, #27]
 800bce8:	2340      	movs	r3, #64	; 0x40
 800bcea:	617b      	str	r3, [r7, #20]
 800bcec:	2300      	movs	r3, #0
 800bcee:	613b      	str	r3, [r7, #16]
 800bcf0:	e029      	b.n	800bd46 <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f003 031f 	and.w	r3, r3, #31
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d102      	bne.n	800bd02 <dir_find+0x78>
 800bcfc:	697b      	ldr	r3, [r7, #20]
 800bcfe:	3302      	adds	r3, #2
 800bd00:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	691a      	ldr	r2, [r3, #16]
 800bd06:	697b      	ldr	r3, [r7, #20]
 800bd08:	4413      	add	r3, r2
 800bd0a:	4618      	mov	r0, r3
 800bd0c:	f7fd fede 	bl	8009acc <ld_word>
 800bd10:	4603      	mov	r3, r0
 800bd12:	4618      	mov	r0, r3
 800bd14:	f001 ffe6 	bl	800dce4 <ff_wtoupper>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	461c      	mov	r4, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	693b      	ldr	r3, [r7, #16]
 800bd22:	005b      	lsls	r3, r3, #1
 800bd24:	4413      	add	r3, r2
 800bd26:	881b      	ldrh	r3, [r3, #0]
 800bd28:	4618      	mov	r0, r3
 800bd2a:	f001 ffdb 	bl	800dce4 <ff_wtoupper>
 800bd2e:	4603      	mov	r3, r0
 800bd30:	429c      	cmp	r4, r3
 800bd32:	d10c      	bne.n	800bd4e <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800bd34:	7efb      	ldrb	r3, [r7, #27]
 800bd36:	3b01      	subs	r3, #1
 800bd38:	76fb      	strb	r3, [r7, #27]
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	3302      	adds	r3, #2
 800bd3e:	617b      	str	r3, [r7, #20]
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	3301      	adds	r3, #1
 800bd44:	613b      	str	r3, [r7, #16]
 800bd46:	7efb      	ldrb	r3, [r7, #27]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d1d2      	bne.n	800bcf2 <dir_find+0x68>
 800bd4c:	e000      	b.n	800bd50 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800bd4e:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bd50:	7efb      	ldrb	r3, [r7, #27]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d107      	bne.n	800bd66 <dir_find+0xdc>
 800bd56:	68fb      	ldr	r3, [r7, #12]
 800bd58:	68da      	ldr	r2, [r3, #12]
 800bd5a:	693b      	ldr	r3, [r7, #16]
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	4413      	add	r3, r2
 800bd60:	881b      	ldrh	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d009      	beq.n	800bd7a <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800bd66:	2100      	movs	r1, #0
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f7ff fec7 	bl	800bafc <dir_read>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	77fb      	strb	r3, [r7, #31]
 800bd72:	7ffb      	ldrb	r3, [r7, #31]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0a6      	beq.n	800bcc6 <dir_find+0x3c>
 800bd78:	e000      	b.n	800bd7c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800bd7a:	bf00      	nop
		}
		return res;
 800bd7c:	7ffb      	ldrb	r3, [r7, #31]
 800bd7e:	e0a9      	b.n	800bed4 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bd80:	23ff      	movs	r3, #255	; 0xff
 800bd82:	773b      	strb	r3, [r7, #28]
 800bd84:	7f3b      	ldrb	r3, [r7, #28]
 800bd86:	777b      	strb	r3, [r7, #29]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd94:	4619      	mov	r1, r3
 800bd96:	68f8      	ldr	r0, [r7, #12]
 800bd98:	f7fe faac 	bl	800a2f4 <move_window>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800bda0:	7ffb      	ldrb	r3, [r7, #31]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	f040 8090 	bne.w	800bec8 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bdb0:	7fbb      	ldrb	r3, [r7, #30]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d102      	bne.n	800bdbc <dir_find+0x132>
 800bdb6:	2304      	movs	r3, #4
 800bdb8:	77fb      	strb	r3, [r7, #31]
 800bdba:	e08a      	b.n	800bed2 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdc0:	330b      	adds	r3, #11
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bdc8:	72fb      	strb	r3, [r7, #11]
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	7afa      	ldrb	r2, [r7, #11]
 800bdce:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800bdd0:	7fbb      	ldrb	r3, [r7, #30]
 800bdd2:	2be5      	cmp	r3, #229	; 0xe5
 800bdd4:	d007      	beq.n	800bde6 <dir_find+0x15c>
 800bdd6:	7afb      	ldrb	r3, [r7, #11]
 800bdd8:	f003 0308 	and.w	r3, r3, #8
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d009      	beq.n	800bdf4 <dir_find+0x16a>
 800bde0:	7afb      	ldrb	r3, [r7, #11]
 800bde2:	2b0f      	cmp	r3, #15
 800bde4:	d006      	beq.n	800bdf4 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bde6:	23ff      	movs	r3, #255	; 0xff
 800bde8:	777b      	strb	r3, [r7, #29]
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	f04f 32ff 	mov.w	r2, #4294967295
 800bdf0:	64da      	str	r2, [r3, #76]	; 0x4c
 800bdf2:	e05e      	b.n	800beb2 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800bdf4:	7afb      	ldrb	r3, [r7, #11]
 800bdf6:	2b0f      	cmp	r3, #15
 800bdf8:	d136      	bne.n	800be68 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800be00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be04:	2b00      	cmp	r3, #0
 800be06:	d154      	bne.n	800beb2 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800be08:	7fbb      	ldrb	r3, [r7, #30]
 800be0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d00d      	beq.n	800be2e <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be16:	7b5b      	ldrb	r3, [r3, #13]
 800be18:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800be1a:	7fbb      	ldrb	r3, [r7, #30]
 800be1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be20:	77bb      	strb	r3, [r7, #30]
 800be22:	7fbb      	ldrb	r3, [r7, #30]
 800be24:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800be2e:	7fba      	ldrb	r2, [r7, #30]
 800be30:	7f7b      	ldrb	r3, [r7, #29]
 800be32:	429a      	cmp	r2, r3
 800be34:	d115      	bne.n	800be62 <dir_find+0x1d8>
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3a:	330d      	adds	r3, #13
 800be3c:	781b      	ldrb	r3, [r3, #0]
 800be3e:	7f3a      	ldrb	r2, [r7, #28]
 800be40:	429a      	cmp	r2, r3
 800be42:	d10e      	bne.n	800be62 <dir_find+0x1d8>
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	68da      	ldr	r2, [r3, #12]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4c:	4619      	mov	r1, r3
 800be4e:	4610      	mov	r0, r2
 800be50:	f7ff fa4c 	bl	800b2ec <cmp_lfn>
 800be54:	4603      	mov	r3, r0
 800be56:	2b00      	cmp	r3, #0
 800be58:	d003      	beq.n	800be62 <dir_find+0x1d8>
 800be5a:	7f7b      	ldrb	r3, [r7, #29]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	b2db      	uxtb	r3, r3
 800be60:	e000      	b.n	800be64 <dir_find+0x1da>
 800be62:	23ff      	movs	r3, #255	; 0xff
 800be64:	777b      	strb	r3, [r7, #29]
 800be66:	e024      	b.n	800beb2 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800be68:	7f7b      	ldrb	r3, [r7, #29]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d109      	bne.n	800be82 <dir_find+0x1f8>
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be72:	4618      	mov	r0, r3
 800be74:	f7ff fc04 	bl	800b680 <sum_sfn>
 800be78:	4603      	mov	r3, r0
 800be7a:	461a      	mov	r2, r3
 800be7c:	7f3b      	ldrb	r3, [r7, #28]
 800be7e:	4293      	cmp	r3, r2
 800be80:	d024      	beq.n	800becc <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800be88:	f003 0301 	and.w	r3, r3, #1
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d10a      	bne.n	800bea6 <dir_find+0x21c>
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	3340      	adds	r3, #64	; 0x40
 800be98:	220b      	movs	r2, #11
 800be9a:	4619      	mov	r1, r3
 800be9c:	f7fe f837 	bl	8009f0e <mem_cmp>
 800bea0:	4603      	mov	r3, r0
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d014      	beq.n	800bed0 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800bea6:	23ff      	movs	r3, #255	; 0xff
 800bea8:	777b      	strb	r3, [r7, #29]
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	f04f 32ff 	mov.w	r2, #4294967295
 800beb0:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800beb2:	2100      	movs	r1, #0
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff f8a8 	bl	800b00a <dir_next>
 800beba:	4603      	mov	r3, r0
 800bebc:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800bebe:	7ffb      	ldrb	r3, [r7, #31]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	f43f af65 	beq.w	800bd90 <dir_find+0x106>
 800bec6:	e004      	b.n	800bed2 <dir_find+0x248>
		if (res != FR_OK) break;
 800bec8:	bf00      	nop
 800beca:	e002      	b.n	800bed2 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800becc:	bf00      	nop
 800bece:	e000      	b.n	800bed2 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800bed0:	bf00      	nop

	return res;
 800bed2:	7ffb      	ldrb	r3, [r7, #31]
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3724      	adds	r7, #36	; 0x24
 800bed8:	46bd      	mov	sp, r7
 800beda:	bd90      	pop	{r4, r7, pc}

0800bedc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800bedc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800bee0:	b0a0      	sub	sp, #128	; 0x80
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800bef2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d001      	beq.n	800befe <dir_register+0x22>
 800befa:	2306      	movs	r3, #6
 800befc:	e18e      	b.n	800c21c <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800befe:	2300      	movs	r3, #0
 800bf00:	677b      	str	r3, [r7, #116]	; 0x74
 800bf02:	e002      	b.n	800bf0a <dir_register+0x2e>
 800bf04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf06:	3301      	adds	r3, #1
 800bf08:	677b      	str	r3, [r7, #116]	; 0x74
 800bf0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf0c:	68da      	ldr	r2, [r3, #12]
 800bf0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf10:	005b      	lsls	r3, r3, #1
 800bf12:	4413      	add	r3, r2
 800bf14:	881b      	ldrh	r3, [r3, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d1f4      	bne.n	800bf04 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bf1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	2b04      	cmp	r3, #4
 800bf20:	f040 809f 	bne.w	800c062 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800bf24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf26:	330e      	adds	r3, #14
 800bf28:	4aa2      	ldr	r2, [pc, #648]	; (800c1b4 <dir_register+0x2d8>)
 800bf2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bf2e:	08db      	lsrs	r3, r3, #3
 800bf30:	3302      	adds	r3, #2
 800bf32:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800bf34:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f7ff f93c 	bl	800b1b4 <dir_alloc>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800bf42:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d002      	beq.n	800bf50 <dir_register+0x74>
 800bf4a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bf4e:	e165      	b.n	800c21c <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf56:	3b01      	subs	r3, #1
 800bf58:	015b      	lsls	r3, r3, #5
 800bf5a:	1ad2      	subs	r2, r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d072      	beq.n	800c04e <dir_register+0x172>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	79db      	ldrb	r3, [r3, #7]
 800bf6c:	f003 0304 	and.w	r3, r3, #4
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d06c      	beq.n	800c04e <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800bf7a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800bf7c:	8949      	ldrh	r1, [r1, #10]
 800bf7e:	0249      	lsls	r1, r1, #9
 800bf80:	2000      	movs	r0, #0
 800bf82:	460c      	mov	r4, r1
 800bf84:	4605      	mov	r5, r0
 800bf86:	eb12 0804 	adds.w	r8, r2, r4
 800bf8a:	eb43 0905 	adc.w	r9, r3, r5
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fe fd58 	bl	800aa4c <fill_first_frag>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bfa2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d002      	beq.n	800bfb0 <dir_register+0xd4>
 800bfaa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bfae:	e135      	b.n	800c21c <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfba:	4619      	mov	r1, r3
 800bfbc:	f7fe fd75 	bl	800aaaa <fill_last_frag>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bfc6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bfca:	2b00      	cmp	r3, #0
 800bfcc:	d002      	beq.n	800bfd4 <dir_register+0xf8>
 800bfce:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bfd2:	e123      	b.n	800c21c <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800bfd4:	687a      	ldr	r2, [r7, #4]
 800bfd6:	f107 0308 	add.w	r3, r7, #8
 800bfda:	4611      	mov	r1, r2
 800bfdc:	4618      	mov	r0, r3
 800bfde:	f7ff fc95 	bl	800b90c <load_obj_dir>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800bfe8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <dir_register+0x11a>
 800bff0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800bff4:	e112      	b.n	800c21c <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800bff6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bff8:	691b      	ldr	r3, [r3, #16]
 800bffa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c004:	4608      	mov	r0, r1
 800c006:	f7fd febe 	bl	8009d86 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800c00a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c00c:	691b      	ldr	r3, [r3, #16]
 800c00e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c018:	4608      	mov	r0, r1
 800c01a:	f7fd feb4 	bl	8009d86 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	79da      	ldrb	r2, [r3, #7]
 800c022:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c024:	691b      	ldr	r3, [r3, #16]
 800c026:	3321      	adds	r3, #33	; 0x21
 800c028:	f042 0201 	orr.w	r2, r2, #1
 800c02c:	b2d2      	uxtb	r2, r2
 800c02e:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800c030:	f107 0308 	add.w	r3, r7, #8
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fc9f 	bl	800b978 <store_xdir>
 800c03a:	4603      	mov	r3, r0
 800c03c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800c040:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <dir_register+0x172>
 800c048:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c04c:	e0e6      	b.n	800c21c <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800c04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c050:	691a      	ldr	r2, [r3, #16]
 800c052:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c054:	68db      	ldr	r3, [r3, #12]
 800c056:	4619      	mov	r1, r3
 800c058:	4610      	mov	r0, r2
 800c05a:	f7ff fce8 	bl	800ba2e <create_xdir>
		return FR_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	e0dc      	b.n	800c21c <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800c068:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800c06c:	220c      	movs	r2, #12
 800c06e:	4618      	mov	r0, r3
 800c070:	f7fd ff11 	bl	8009e96 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800c074:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d033      	beq.n	800c0e8 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	2240      	movs	r2, #64	; 0x40
 800c084:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800c088:	2301      	movs	r3, #1
 800c08a:	67bb      	str	r3, [r7, #120]	; 0x78
 800c08c:	e016      	b.n	800c0bc <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800c094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c096:	68da      	ldr	r2, [r3, #12]
 800c098:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800c09c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c09e:	f7ff fa61 	bl	800b564 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800c0a2:	6878      	ldr	r0, [r7, #4]
 800c0a4:	f7ff fdf1 	bl	800bc8a <dir_find>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800c0ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800c0b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0b8:	3301      	adds	r3, #1
 800c0ba:	67bb      	str	r3, [r7, #120]	; 0x78
 800c0bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0be:	2b63      	cmp	r3, #99	; 0x63
 800c0c0:	d9e5      	bls.n	800c08e <dir_register+0x1b2>
 800c0c2:	e000      	b.n	800c0c6 <dir_register+0x1ea>
			if (res != FR_OK) break;
 800c0c4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800c0c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c0c8:	2b64      	cmp	r3, #100	; 0x64
 800c0ca:	d101      	bne.n	800c0d0 <dir_register+0x1f4>
 800c0cc:	2307      	movs	r3, #7
 800c0ce:	e0a5      	b.n	800c21c <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800c0d0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d002      	beq.n	800c0de <dir_register+0x202>
 800c0d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c0dc:	e09e      	b.n	800c21c <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800c0de:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800c0e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800c0ec:	f003 0302 	and.w	r3, r3, #2
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d007      	beq.n	800c104 <dir_register+0x228>
 800c0f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0f6:	330c      	adds	r3, #12
 800c0f8:	4a2f      	ldr	r2, [pc, #188]	; (800c1b8 <dir_register+0x2dc>)
 800c0fa:	fba2 2303 	umull	r2, r3, r2, r3
 800c0fe:	089b      	lsrs	r3, r3, #2
 800c100:	3301      	adds	r3, #1
 800c102:	e000      	b.n	800c106 <dir_register+0x22a>
 800c104:	2301      	movs	r3, #1
 800c106:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800c108:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800c10a:	6878      	ldr	r0, [r7, #4]
 800c10c:	f7ff f852 	bl	800b1b4 <dir_alloc>
 800c110:	4603      	mov	r3, r0
 800c112:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800c116:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d14f      	bne.n	800c1be <dir_register+0x2e2>
 800c11e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c120:	3b01      	subs	r3, #1
 800c122:	673b      	str	r3, [r7, #112]	; 0x70
 800c124:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c126:	2b00      	cmp	r3, #0
 800c128:	d049      	beq.n	800c1be <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c12e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c130:	015b      	lsls	r3, r3, #5
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	4619      	mov	r1, r3
 800c136:	6878      	ldr	r0, [r7, #4]
 800c138:	f7fe fee1 	bl	800aefe <dir_sdi>
 800c13c:	4603      	mov	r3, r0
 800c13e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800c142:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c146:	2b00      	cmp	r3, #0
 800c148:	d139      	bne.n	800c1be <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3340      	adds	r3, #64	; 0x40
 800c14e:	4618      	mov	r0, r3
 800c150:	f7ff fa96 	bl	800b680 <sum_sfn>
 800c154:	4603      	mov	r3, r0
 800c156:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c15e:	4619      	mov	r1, r3
 800c160:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c162:	f7fe f8c7 	bl	800a2f4 <move_window>
 800c166:	4603      	mov	r3, r0
 800c168:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800c16c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c170:	2b00      	cmp	r3, #0
 800c172:	d123      	bne.n	800c1bc <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800c174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c176:	68d8      	ldr	r0, [r3, #12]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800c17c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c17e:	b2da      	uxtb	r2, r3
 800c180:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800c184:	f7ff f986 	bl	800b494 <put_lfn>
				fs->wflag = 1;
 800c188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c18a:	2201      	movs	r2, #1
 800c18c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800c18e:	2100      	movs	r1, #0
 800c190:	6878      	ldr	r0, [r7, #4]
 800c192:	f7fe ff3a 	bl	800b00a <dir_next>
 800c196:	4603      	mov	r3, r0
 800c198:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800c19c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d10c      	bne.n	800c1be <dir_register+0x2e2>
 800c1a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	673b      	str	r3, [r7, #112]	; 0x70
 800c1aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d1d4      	bne.n	800c15a <dir_register+0x27e>
 800c1b0:	e005      	b.n	800c1be <dir_register+0x2e2>
 800c1b2:	bf00      	nop
 800c1b4:	88888889 	.word	0x88888889
 800c1b8:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800c1bc:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800c1be:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d128      	bne.n	800c218 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1ca:	4619      	mov	r1, r3
 800c1cc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c1ce:	f7fe f891 	bl	800a2f4 <move_window>
 800c1d2:	4603      	mov	r3, r0
 800c1d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800c1d8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d11b      	bne.n	800c218 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7fd fe75 	bl	8009ed8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	3340      	adds	r3, #64	; 0x40
 800c1f6:	220b      	movs	r2, #11
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	f7fd fe4c 	bl	8009e96 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c208:	330c      	adds	r3, #12
 800c20a:	f002 0218 	and.w	r2, r2, #24
 800c20e:	b2d2      	uxtb	r2, r2
 800c210:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800c212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c214:	2201      	movs	r2, #1
 800c216:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800c218:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3780      	adds	r7, #128	; 0x80
 800c220:	46bd      	mov	sp, r7
 800c222:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c226:	bf00      	nop

0800c228 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800c228:	b580      	push	{r7, lr}
 800c22a:	b08a      	sub	sp, #40	; 0x28
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	6078      	str	r0, [r7, #4]
 800c230:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	613b      	str	r3, [r7, #16]
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68db      	ldr	r3, [r3, #12]
 800c23e:	60fb      	str	r3, [r7, #12]
 800c240:	2300      	movs	r3, #0
 800c242:	617b      	str	r3, [r7, #20]
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800c248:	69bb      	ldr	r3, [r7, #24]
 800c24a:	1c5a      	adds	r2, r3, #1
 800c24c:	61ba      	str	r2, [r7, #24]
 800c24e:	693a      	ldr	r2, [r7, #16]
 800c250:	4413      	add	r3, r2
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800c256:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c258:	2b1f      	cmp	r3, #31
 800c25a:	d940      	bls.n	800c2de <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800c25c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c25e:	2b2f      	cmp	r3, #47	; 0x2f
 800c260:	d006      	beq.n	800c270 <create_name+0x48>
 800c262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c264:	2b5c      	cmp	r3, #92	; 0x5c
 800c266:	d110      	bne.n	800c28a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800c268:	e002      	b.n	800c270 <create_name+0x48>
 800c26a:	69bb      	ldr	r3, [r7, #24]
 800c26c:	3301      	adds	r3, #1
 800c26e:	61bb      	str	r3, [r7, #24]
 800c270:	693a      	ldr	r2, [r7, #16]
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	4413      	add	r3, r2
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	2b2f      	cmp	r3, #47	; 0x2f
 800c27a:	d0f6      	beq.n	800c26a <create_name+0x42>
 800c27c:	693a      	ldr	r2, [r7, #16]
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	4413      	add	r3, r2
 800c282:	781b      	ldrb	r3, [r3, #0]
 800c284:	2b5c      	cmp	r3, #92	; 0x5c
 800c286:	d0f0      	beq.n	800c26a <create_name+0x42>
			break;
 800c288:	e02a      	b.n	800c2e0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	2bfe      	cmp	r3, #254	; 0xfe
 800c28e:	d901      	bls.n	800c294 <create_name+0x6c>
 800c290:	2306      	movs	r3, #6
 800c292:	e17d      	b.n	800c590 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800c294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c296:	b2db      	uxtb	r3, r3
 800c298:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800c29a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c29c:	2101      	movs	r1, #1
 800c29e:	4618      	mov	r0, r3
 800c2a0:	f001 fce4 	bl	800dc6c <ff_convert>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800c2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d101      	bne.n	800c2b2 <create_name+0x8a>
 800c2ae:	2306      	movs	r3, #6
 800c2b0:	e16e      	b.n	800c590 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800c2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2b4:	2b7f      	cmp	r3, #127	; 0x7f
 800c2b6:	d809      	bhi.n	800c2cc <create_name+0xa4>
 800c2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ba:	4619      	mov	r1, r3
 800c2bc:	488d      	ldr	r0, [pc, #564]	; (800c4f4 <create_name+0x2cc>)
 800c2be:	f7fd fe4d 	bl	8009f5c <chk_chr>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d001      	beq.n	800c2cc <create_name+0xa4>
 800c2c8:	2306      	movs	r3, #6
 800c2ca:	e161      	b.n	800c590 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	1c5a      	adds	r2, r3, #1
 800c2d0:	617a      	str	r2, [r7, #20]
 800c2d2:	005b      	lsls	r3, r3, #1
 800c2d4:	68fa      	ldr	r2, [r7, #12]
 800c2d6:	4413      	add	r3, r2
 800c2d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c2da:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800c2dc:	e7b4      	b.n	800c248 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800c2de:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800c2e0:	693a      	ldr	r2, [r7, #16]
 800c2e2:	69bb      	ldr	r3, [r7, #24]
 800c2e4:	441a      	add	r2, r3
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800c2ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c2ec:	2b1f      	cmp	r3, #31
 800c2ee:	d801      	bhi.n	800c2f4 <create_name+0xcc>
 800c2f0:	2304      	movs	r3, #4
 800c2f2:	e000      	b.n	800c2f6 <create_name+0xce>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c2fa:	e011      	b.n	800c320 <create_name+0xf8>
		w = lfn[di - 1];
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c302:	3b01      	subs	r3, #1
 800c304:	005b      	lsls	r3, r3, #1
 800c306:	68fa      	ldr	r2, [r7, #12]
 800c308:	4413      	add	r3, r2
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800c30e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c310:	2b20      	cmp	r3, #32
 800c312:	d002      	beq.n	800c31a <create_name+0xf2>
 800c314:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c316:	2b2e      	cmp	r3, #46	; 0x2e
 800c318:	d106      	bne.n	800c328 <create_name+0x100>
		di--;
 800c31a:	697b      	ldr	r3, [r7, #20]
 800c31c:	3b01      	subs	r3, #1
 800c31e:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800c320:	697b      	ldr	r3, [r7, #20]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d1ea      	bne.n	800c2fc <create_name+0xd4>
 800c326:	e000      	b.n	800c32a <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800c328:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	005b      	lsls	r3, r3, #1
 800c32e:	68fa      	ldr	r2, [r7, #12]
 800c330:	4413      	add	r3, r2
 800c332:	2200      	movs	r2, #0
 800c334:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d101      	bne.n	800c340 <create_name+0x118>
 800c33c:	2306      	movs	r3, #6
 800c33e:	e127      	b.n	800c590 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	3340      	adds	r3, #64	; 0x40
 800c344:	220b      	movs	r2, #11
 800c346:	2120      	movs	r1, #32
 800c348:	4618      	mov	r0, r3
 800c34a:	f7fd fdc5 	bl	8009ed8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800c34e:	2300      	movs	r3, #0
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	e002      	b.n	800c35a <create_name+0x132>
 800c354:	69bb      	ldr	r3, [r7, #24]
 800c356:	3301      	adds	r3, #1
 800c358:	61bb      	str	r3, [r7, #24]
 800c35a:	69bb      	ldr	r3, [r7, #24]
 800c35c:	005b      	lsls	r3, r3, #1
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4413      	add	r3, r2
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	2b20      	cmp	r3, #32
 800c366:	d0f5      	beq.n	800c354 <create_name+0x12c>
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	005b      	lsls	r3, r3, #1
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	4413      	add	r3, r2
 800c370:	881b      	ldrh	r3, [r3, #0]
 800c372:	2b2e      	cmp	r3, #46	; 0x2e
 800c374:	d0ee      	beq.n	800c354 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800c376:	69bb      	ldr	r3, [r7, #24]
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d009      	beq.n	800c390 <create_name+0x168>
 800c37c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c380:	f043 0303 	orr.w	r3, r3, #3
 800c384:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800c388:	e002      	b.n	800c390 <create_name+0x168>
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	3b01      	subs	r3, #1
 800c38e:	617b      	str	r3, [r7, #20]
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d009      	beq.n	800c3aa <create_name+0x182>
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c39c:	3b01      	subs	r3, #1
 800c39e:	005b      	lsls	r3, r3, #1
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4413      	add	r3, r2
 800c3a4:	881b      	ldrh	r3, [r3, #0]
 800c3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800c3a8:	d1ef      	bne.n	800c38a <create_name+0x162>

	i = b = 0; ni = 8;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	623b      	str	r3, [r7, #32]
 800c3b4:	2308      	movs	r3, #8
 800c3b6:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	1c5a      	adds	r2, r3, #1
 800c3bc:	61ba      	str	r2, [r7, #24]
 800c3be:	005b      	lsls	r3, r3, #1
 800c3c0:	68fa      	ldr	r2, [r7, #12]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	881b      	ldrh	r3, [r3, #0]
 800c3c6:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800c3c8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	f000 8090 	beq.w	800c4f0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800c3d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d2:	2b20      	cmp	r3, #32
 800c3d4:	d006      	beq.n	800c3e4 <create_name+0x1bc>
 800c3d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c3d8:	2b2e      	cmp	r3, #46	; 0x2e
 800c3da:	d10a      	bne.n	800c3f2 <create_name+0x1ca>
 800c3dc:	69ba      	ldr	r2, [r7, #24]
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d006      	beq.n	800c3f2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800c3e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e8:	f043 0303 	orr.w	r3, r3, #3
 800c3ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c3f0:	e07d      	b.n	800c4ee <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800c3f2:	6a3a      	ldr	r2, [r7, #32]
 800c3f4:	69fb      	ldr	r3, [r7, #28]
 800c3f6:	429a      	cmp	r2, r3
 800c3f8:	d203      	bcs.n	800c402 <create_name+0x1da>
 800c3fa:	69ba      	ldr	r2, [r7, #24]
 800c3fc:	697b      	ldr	r3, [r7, #20]
 800c3fe:	429a      	cmp	r2, r3
 800c400:	d123      	bne.n	800c44a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800c402:	69fb      	ldr	r3, [r7, #28]
 800c404:	2b0b      	cmp	r3, #11
 800c406:	d106      	bne.n	800c416 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800c408:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c40c:	f043 0303 	orr.w	r3, r3, #3
 800c410:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c414:	e075      	b.n	800c502 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800c416:	69ba      	ldr	r2, [r7, #24]
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	429a      	cmp	r2, r3
 800c41c:	d005      	beq.n	800c42a <create_name+0x202>
 800c41e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c422:	f043 0303 	orr.w	r3, r3, #3
 800c426:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800c42a:	69ba      	ldr	r2, [r7, #24]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d866      	bhi.n	800c500 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800c432:	697b      	ldr	r3, [r7, #20]
 800c434:	61bb      	str	r3, [r7, #24]
 800c436:	2308      	movs	r3, #8
 800c438:	623b      	str	r3, [r7, #32]
 800c43a:	230b      	movs	r3, #11
 800c43c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800c43e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c448:	e051      	b.n	800c4ee <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800c44a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c44c:	2b7f      	cmp	r3, #127	; 0x7f
 800c44e:	d914      	bls.n	800c47a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800c450:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c452:	2100      	movs	r1, #0
 800c454:	4618      	mov	r0, r3
 800c456:	f001 fc09 	bl	800dc6c <ff_convert>
 800c45a:	4603      	mov	r3, r0
 800c45c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800c45e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c460:	2b00      	cmp	r3, #0
 800c462:	d004      	beq.n	800c46e <create_name+0x246>
 800c464:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c466:	3b80      	subs	r3, #128	; 0x80
 800c468:	4a23      	ldr	r2, [pc, #140]	; (800c4f8 <create_name+0x2d0>)
 800c46a:	5cd3      	ldrb	r3, [r2, r3]
 800c46c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800c46e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c472:	f043 0302 	orr.w	r3, r3, #2
 800c476:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800c47a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d007      	beq.n	800c490 <create_name+0x268>
 800c480:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c482:	4619      	mov	r1, r3
 800c484:	481d      	ldr	r0, [pc, #116]	; (800c4fc <create_name+0x2d4>)
 800c486:	f7fd fd69 	bl	8009f5c <chk_chr>
 800c48a:	4603      	mov	r3, r0
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d008      	beq.n	800c4a2 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800c490:	235f      	movs	r3, #95	; 0x5f
 800c492:	84bb      	strh	r3, [r7, #36]	; 0x24
 800c494:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c498:	f043 0303 	orr.w	r3, r3, #3
 800c49c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c4a0:	e01b      	b.n	800c4da <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800c4a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4a4:	2b40      	cmp	r3, #64	; 0x40
 800c4a6:	d909      	bls.n	800c4bc <create_name+0x294>
 800c4a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4aa:	2b5a      	cmp	r3, #90	; 0x5a
 800c4ac:	d806      	bhi.n	800c4bc <create_name+0x294>
					b |= 2;
 800c4ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4b2:	f043 0302 	orr.w	r3, r3, #2
 800c4b6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4ba:	e00e      	b.n	800c4da <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800c4bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4be:	2b60      	cmp	r3, #96	; 0x60
 800c4c0:	d90b      	bls.n	800c4da <create_name+0x2b2>
 800c4c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4c4:	2b7a      	cmp	r3, #122	; 0x7a
 800c4c6:	d808      	bhi.n	800c4da <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800c4c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c4cc:	f043 0301 	orr.w	r3, r3, #1
 800c4d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c4d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c4d6:	3b20      	subs	r3, #32
 800c4d8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800c4da:	6a3b      	ldr	r3, [r7, #32]
 800c4dc:	1c5a      	adds	r2, r3, #1
 800c4de:	623a      	str	r2, [r7, #32]
 800c4e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800c4e2:	b2d1      	uxtb	r1, r2
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	4413      	add	r3, r2
 800c4e8:	460a      	mov	r2, r1
 800c4ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800c4ee:	e763      	b.n	800c3b8 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800c4f0:	bf00      	nop
 800c4f2:	e006      	b.n	800c502 <create_name+0x2da>
 800c4f4:	0800e898 	.word	0x0800e898
 800c4f8:	0800e980 	.word	0x0800e980
 800c4fc:	0800e8a4 	.word	0x0800e8a4
			if (si > di) break;			/* No extension */
 800c500:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c508:	2be5      	cmp	r3, #229	; 0xe5
 800c50a:	d103      	bne.n	800c514 <create_name+0x2ec>
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2205      	movs	r2, #5
 800c510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800c514:	69fb      	ldr	r3, [r7, #28]
 800c516:	2b08      	cmp	r3, #8
 800c518:	d104      	bne.n	800c524 <create_name+0x2fc>
 800c51a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c51e:	009b      	lsls	r3, r3, #2
 800c520:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800c524:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c528:	f003 030c 	and.w	r3, r3, #12
 800c52c:	2b0c      	cmp	r3, #12
 800c52e:	d005      	beq.n	800c53c <create_name+0x314>
 800c530:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c534:	f003 0303 	and.w	r3, r3, #3
 800c538:	2b03      	cmp	r3, #3
 800c53a:	d105      	bne.n	800c548 <create_name+0x320>
 800c53c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c540:	f043 0302 	orr.w	r3, r3, #2
 800c544:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800c548:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c54c:	f003 0302 	and.w	r3, r3, #2
 800c550:	2b00      	cmp	r3, #0
 800c552:	d117      	bne.n	800c584 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800c554:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c558:	f003 0303 	and.w	r3, r3, #3
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d105      	bne.n	800c56c <create_name+0x344>
 800c560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c564:	f043 0310 	orr.w	r3, r3, #16
 800c568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800c56c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c570:	f003 030c 	and.w	r3, r3, #12
 800c574:	2b04      	cmp	r3, #4
 800c576:	d105      	bne.n	800c584 <create_name+0x35c>
 800c578:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c57c:	f043 0308 	orr.w	r3, r3, #8
 800c580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800c58a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800c58e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800c590:	4618      	mov	r0, r3
 800c592:	3728      	adds	r7, #40	; 0x28
 800c594:	46bd      	mov	sp, r7
 800c596:	bd80      	pop	{r7, pc}

0800c598 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800c598:	b580      	push	{r7, lr}
 800c59a:	b086      	sub	sp, #24
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
 800c5a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800c5ac:	e002      	b.n	800c5b4 <follow_path+0x1c>
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	3301      	adds	r3, #1
 800c5b2:	603b      	str	r3, [r7, #0]
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	781b      	ldrb	r3, [r3, #0]
 800c5b8:	2b2f      	cmp	r3, #47	; 0x2f
 800c5ba:	d0f8      	beq.n	800c5ae <follow_path+0x16>
 800c5bc:	683b      	ldr	r3, [r7, #0]
 800c5be:	781b      	ldrb	r3, [r3, #0]
 800c5c0:	2b5c      	cmp	r3, #92	; 0x5c
 800c5c2:	d0f4      	beq.n	800c5ae <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b1f      	cmp	r3, #31
 800c5d6:	d80a      	bhi.n	800c5ee <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2280      	movs	r2, #128	; 0x80
 800c5dc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800c5e0:	2100      	movs	r1, #0
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f7fe fc8b 	bl	800aefe <dir_sdi>
 800c5e8:	4603      	mov	r3, r0
 800c5ea:	75fb      	strb	r3, [r7, #23]
 800c5ec:	e078      	b.n	800c6e0 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c5ee:	463b      	mov	r3, r7
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	6878      	ldr	r0, [r7, #4]
 800c5f4:	f7ff fe18 	bl	800c228 <create_name>
 800c5f8:	4603      	mov	r3, r0
 800c5fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c5fc:	7dfb      	ldrb	r3, [r7, #23]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d169      	bne.n	800c6d6 <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f7ff fb41 	bl	800bc8a <dir_find>
 800c608:	4603      	mov	r3, r0
 800c60a:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800c612:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c614:	7dfb      	ldrb	r3, [r7, #23]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d00a      	beq.n	800c630 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c61a:	7dfb      	ldrb	r3, [r7, #23]
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d15c      	bne.n	800c6da <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c620:	7afb      	ldrb	r3, [r7, #11]
 800c622:	f003 0304 	and.w	r3, r3, #4
 800c626:	2b00      	cmp	r3, #0
 800c628:	d157      	bne.n	800c6da <follow_path+0x142>
 800c62a:	2305      	movs	r3, #5
 800c62c:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c62e:	e054      	b.n	800c6da <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c630:	7afb      	ldrb	r3, [r7, #11]
 800c632:	f003 0304 	and.w	r3, r3, #4
 800c636:	2b00      	cmp	r3, #0
 800c638:	d151      	bne.n	800c6de <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c63a:	693b      	ldr	r3, [r7, #16]
 800c63c:	799b      	ldrb	r3, [r3, #6]
 800c63e:	f003 0310 	and.w	r3, r3, #16
 800c642:	2b00      	cmp	r3, #0
 800c644:	d102      	bne.n	800c64c <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800c646:	2305      	movs	r3, #5
 800c648:	75fb      	strb	r3, [r7, #23]
 800c64a:	e049      	b.n	800c6e0 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	2b04      	cmp	r3, #4
 800c652:	d130      	bne.n	800c6b6 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800c654:	693b      	ldr	r3, [r7, #16]
 800c656:	689a      	ldr	r2, [r3, #8]
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800c65c:	693b      	ldr	r3, [r7, #16]
 800c65e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800c662:	4613      	mov	r3, r2
 800c664:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800c668:	693a      	ldr	r2, [r7, #16]
 800c66a:	79d2      	ldrb	r2, [r2, #7]
 800c66c:	431a      	orrs	r2, r3
 800c66e:	693b      	ldr	r3, [r7, #16]
 800c670:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800c67a:	68fb      	ldr	r3, [r7, #12]
 800c67c:	691b      	ldr	r3, [r3, #16]
 800c67e:	3334      	adds	r3, #52	; 0x34
 800c680:	4618      	mov	r0, r3
 800c682:	f7fd fa3b 	bl	8009afc <ld_dword>
 800c686:	4602      	mov	r2, r0
 800c688:	693b      	ldr	r3, [r7, #16]
 800c68a:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	691b      	ldr	r3, [r3, #16]
 800c690:	3321      	adds	r3, #33	; 0x21
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	f003 0302 	and.w	r3, r3, #2
 800c698:	b2da      	uxtb	r2, r3
 800c69a:	693b      	ldr	r3, [r7, #16]
 800c69c:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	691b      	ldr	r3, [r3, #16]
 800c6a2:	3338      	adds	r3, #56	; 0x38
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7fd fa4c 	bl	8009b42 <ld_qword>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	6939      	ldr	r1, [r7, #16]
 800c6b0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800c6b4:	e79b      	b.n	800c5ee <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c6c4:	4413      	add	r3, r2
 800c6c6:	4619      	mov	r1, r3
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f7fe fdcf 	bl	800b26c <ld_clust>
 800c6ce:	4602      	mov	r2, r0
 800c6d0:	693b      	ldr	r3, [r7, #16]
 800c6d2:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c6d4:	e78b      	b.n	800c5ee <follow_path+0x56>
			if (res != FR_OK) break;
 800c6d6:	bf00      	nop
 800c6d8:	e002      	b.n	800c6e0 <follow_path+0x148>
				break;
 800c6da:	bf00      	nop
 800c6dc:	e000      	b.n	800c6e0 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c6de:	bf00      	nop
			}
		}
	}

	return res;
 800c6e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6e2:	4618      	mov	r0, r3
 800c6e4:	3718      	adds	r7, #24
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}

0800c6ea <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b087      	sub	sp, #28
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c6f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c6f6:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d031      	beq.n	800c764 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	617b      	str	r3, [r7, #20]
 800c706:	e002      	b.n	800c70e <get_ldnumber+0x24>
 800c708:	697b      	ldr	r3, [r7, #20]
 800c70a:	3301      	adds	r3, #1
 800c70c:	617b      	str	r3, [r7, #20]
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	2b1f      	cmp	r3, #31
 800c714:	d903      	bls.n	800c71e <get_ldnumber+0x34>
 800c716:	697b      	ldr	r3, [r7, #20]
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b3a      	cmp	r3, #58	; 0x3a
 800c71c:	d1f4      	bne.n	800c708 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c71e:	697b      	ldr	r3, [r7, #20]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	2b3a      	cmp	r3, #58	; 0x3a
 800c724:	d11c      	bne.n	800c760 <get_ldnumber+0x76>
			tp = *path;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	1c5a      	adds	r2, r3, #1
 800c730:	60fa      	str	r2, [r7, #12]
 800c732:	781b      	ldrb	r3, [r3, #0]
 800c734:	3b30      	subs	r3, #48	; 0x30
 800c736:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	2b09      	cmp	r3, #9
 800c73c:	d80e      	bhi.n	800c75c <get_ldnumber+0x72>
 800c73e:	68fa      	ldr	r2, [r7, #12]
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	429a      	cmp	r2, r3
 800c744:	d10a      	bne.n	800c75c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d107      	bne.n	800c75c <get_ldnumber+0x72>
					vol = (int)i;
 800c74c:	68bb      	ldr	r3, [r7, #8]
 800c74e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c750:	697b      	ldr	r3, [r7, #20]
 800c752:	3301      	adds	r3, #1
 800c754:	617b      	str	r3, [r7, #20]
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	697a      	ldr	r2, [r7, #20]
 800c75a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	e002      	b.n	800c766 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c760:	2300      	movs	r3, #0
 800c762:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c764:	693b      	ldr	r3, [r7, #16]
}
 800c766:	4618      	mov	r0, r3
 800c768:	371c      	adds	r7, #28
 800c76a:	46bd      	mov	sp, r7
 800c76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c770:	4770      	bx	lr
	...

0800c774 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b082      	sub	sp, #8
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	2200      	movs	r2, #0
 800c782:	70da      	strb	r2, [r3, #3]
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c78c:	6839      	ldr	r1, [r7, #0]
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f7fd fdb0 	bl	800a2f4 <move_window>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	d001      	beq.n	800c79e <check_fs+0x2a>
 800c79a:	2304      	movs	r3, #4
 800c79c:	e044      	b.n	800c828 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	3338      	adds	r3, #56	; 0x38
 800c7a2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	f7fd f990 	bl	8009acc <ld_word>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	461a      	mov	r2, r3
 800c7b0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d001      	beq.n	800c7bc <check_fs+0x48>
 800c7b8:	2303      	movs	r3, #3
 800c7ba:	e035      	b.n	800c828 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7c2:	2be9      	cmp	r3, #233	; 0xe9
 800c7c4:	d009      	beq.n	800c7da <check_fs+0x66>
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c7cc:	2beb      	cmp	r3, #235	; 0xeb
 800c7ce:	d11e      	bne.n	800c80e <check_fs+0x9a>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c7d6:	2b90      	cmp	r3, #144	; 0x90
 800c7d8:	d119      	bne.n	800c80e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	3338      	adds	r3, #56	; 0x38
 800c7de:	3336      	adds	r3, #54	; 0x36
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7fd f98b 	bl	8009afc <ld_dword>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c7ec:	4a10      	ldr	r2, [pc, #64]	; (800c830 <check_fs+0xbc>)
 800c7ee:	4293      	cmp	r3, r2
 800c7f0:	d101      	bne.n	800c7f6 <check_fs+0x82>
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	e018      	b.n	800c828 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	3338      	adds	r3, #56	; 0x38
 800c7fa:	3352      	adds	r3, #82	; 0x52
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f7fd f97d 	bl	8009afc <ld_dword>
 800c802:	4603      	mov	r3, r0
 800c804:	4a0b      	ldr	r2, [pc, #44]	; (800c834 <check_fs+0xc0>)
 800c806:	4293      	cmp	r3, r2
 800c808:	d101      	bne.n	800c80e <check_fs+0x9a>
 800c80a:	2300      	movs	r3, #0
 800c80c:	e00c      	b.n	800c828 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	3338      	adds	r3, #56	; 0x38
 800c812:	220b      	movs	r2, #11
 800c814:	4908      	ldr	r1, [pc, #32]	; (800c838 <check_fs+0xc4>)
 800c816:	4618      	mov	r0, r3
 800c818:	f7fd fb79 	bl	8009f0e <mem_cmp>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d101      	bne.n	800c826 <check_fs+0xb2>
 800c822:	2301      	movs	r3, #1
 800c824:	e000      	b.n	800c828 <check_fs+0xb4>
#endif
	return 2;
 800c826:	2302      	movs	r3, #2
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3708      	adds	r7, #8
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}
 800c830:	00544146 	.word	0x00544146
 800c834:	33544146 	.word	0x33544146
 800c838:	0800e8ac 	.word	0x0800e8ac

0800c83c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c83c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c840:	b09c      	sub	sp, #112	; 0x70
 800c842:	af00      	add	r7, sp, #0
 800c844:	61f8      	str	r0, [r7, #28]
 800c846:	61b9      	str	r1, [r7, #24]
 800c848:	4613      	mov	r3, r2
 800c84a:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c84c:	69bb      	ldr	r3, [r7, #24]
 800c84e:	2200      	movs	r2, #0
 800c850:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c852:	69f8      	ldr	r0, [r7, #28]
 800c854:	f7ff ff49 	bl	800c6ea <get_ldnumber>
 800c858:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800c85a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da01      	bge.n	800c864 <find_volume+0x28>
 800c860:	230b      	movs	r3, #11
 800c862:	e331      	b.n	800cec8 <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c864:	4a99      	ldr	r2, [pc, #612]	; (800cacc <find_volume+0x290>)
 800c866:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c86c:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c86e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c870:	2b00      	cmp	r3, #0
 800c872:	d101      	bne.n	800c878 <find_volume+0x3c>
 800c874:	230c      	movs	r3, #12
 800c876:	e327      	b.n	800cec8 <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c878:	69bb      	ldr	r3, [r7, #24]
 800c87a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c87c:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c87e:	7dfb      	ldrb	r3, [r7, #23]
 800c880:	f023 0301 	bic.w	r3, r3, #1
 800c884:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c886:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d01a      	beq.n	800c8c4 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800c88e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c890:	785b      	ldrb	r3, [r3, #1]
 800c892:	4618      	mov	r0, r3
 800c894:	f7fd f87c 	bl	8009990 <disk_status>
 800c898:	4603      	mov	r3, r0
 800c89a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c89e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8a2:	f003 0301 	and.w	r3, r3, #1
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10c      	bne.n	800c8c4 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c8aa:	7dfb      	ldrb	r3, [r7, #23]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d007      	beq.n	800c8c0 <find_volume+0x84>
 800c8b0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8b4:	f003 0304 	and.w	r3, r3, #4
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d001      	beq.n	800c8c0 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800c8bc:	230a      	movs	r3, #10
 800c8be:	e303      	b.n	800cec8 <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e301      	b.n	800cec8 <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c8c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c8ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d0:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c8d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8d4:	785b      	ldrb	r3, [r3, #1]
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	f7fd f874 	bl	80099c4 <disk_initialize>
 800c8dc:	4603      	mov	r3, r0
 800c8de:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c8e2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8e6:	f003 0301 	and.w	r3, r3, #1
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d001      	beq.n	800c8f2 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c8ee:	2303      	movs	r3, #3
 800c8f0:	e2ea      	b.n	800cec8 <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c8f2:	7dfb      	ldrb	r3, [r7, #23]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d007      	beq.n	800c908 <find_volume+0xcc>
 800c8f8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800c8fc:	f003 0304 	and.w	r3, r3, #4
 800c900:	2b00      	cmp	r3, #0
 800c902:	d001      	beq.n	800c908 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800c904:	230a      	movs	r3, #10
 800c906:	e2df      	b.n	800cec8 <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c908:	2300      	movs	r3, #0
 800c90a:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c90c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c90e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c910:	f7ff ff30 	bl	800c774 <check_fs>
 800c914:	4603      	mov	r3, r0
 800c916:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c91a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c91e:	2b02      	cmp	r3, #2
 800c920:	d14d      	bne.n	800c9be <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c922:	2300      	movs	r3, #0
 800c924:	65bb      	str	r3, [r7, #88]	; 0x58
 800c926:	e020      	b.n	800c96a <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c92a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800c92e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c936:	4413      	add	r3, r2
 800c938:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c93c:	3304      	adds	r3, #4
 800c93e:	781b      	ldrb	r3, [r3, #0]
 800c940:	2b00      	cmp	r3, #0
 800c942:	d006      	beq.n	800c952 <find_volume+0x116>
 800c944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c946:	3308      	adds	r3, #8
 800c948:	4618      	mov	r0, r3
 800c94a:	f7fd f8d7 	bl	8009afc <ld_dword>
 800c94e:	4602      	mov	r2, r0
 800c950:	e000      	b.n	800c954 <find_volume+0x118>
 800c952:	2200      	movs	r2, #0
 800c954:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	3360      	adds	r3, #96	; 0x60
 800c95a:	f107 0110 	add.w	r1, r7, #16
 800c95e:	440b      	add	r3, r1
 800c960:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c964:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c966:	3301      	adds	r3, #1
 800c968:	65bb      	str	r3, [r7, #88]	; 0x58
 800c96a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d9db      	bls.n	800c928 <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c970:	2300      	movs	r3, #0
 800c972:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800c974:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c976:	2b00      	cmp	r3, #0
 800c978:	d002      	beq.n	800c980 <find_volume+0x144>
 800c97a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c97c:	3b01      	subs	r3, #1
 800c97e:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	3360      	adds	r3, #96	; 0x60
 800c986:	f107 0210 	add.w	r2, r7, #16
 800c98a:	4413      	add	r3, r2
 800c98c:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800c990:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c992:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c994:	2b00      	cmp	r3, #0
 800c996:	d005      	beq.n	800c9a4 <find_volume+0x168>
 800c998:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c99a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800c99c:	f7ff feea 	bl	800c774 <check_fs>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	e000      	b.n	800c9a6 <find_volume+0x16a>
 800c9a4:	2303      	movs	r3, #3
 800c9a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c9aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9ae:	2b01      	cmp	r3, #1
 800c9b0:	d905      	bls.n	800c9be <find_volume+0x182>
 800c9b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d9e0      	bls.n	800c980 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c9be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9c2:	2b04      	cmp	r3, #4
 800c9c4:	d101      	bne.n	800c9ca <find_volume+0x18e>
 800c9c6:	2301      	movs	r3, #1
 800c9c8:	e27e      	b.n	800cec8 <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c9ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d901      	bls.n	800c9d6 <find_volume+0x19a>
 800c9d2:	230d      	movs	r3, #13
 800c9d4:	e278      	b.n	800cec8 <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800c9d6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800c9da:	2b01      	cmp	r3, #1
 800c9dc:	f040 80fa 	bne.w	800cbd4 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800c9e0:	230b      	movs	r3, #11
 800c9e2:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9e4:	e002      	b.n	800c9ec <find_volume+0x1b0>
 800c9e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9e8:	3301      	adds	r3, #1
 800c9ea:	65bb      	str	r3, [r7, #88]	; 0x58
 800c9ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9ee:	2b3f      	cmp	r3, #63	; 0x3f
 800c9f0:	d806      	bhi.n	800ca00 <find_volume+0x1c4>
 800c9f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9f6:	4413      	add	r3, r2
 800c9f8:	3338      	adds	r3, #56	; 0x38
 800c9fa:	781b      	ldrb	r3, [r3, #0]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0f2      	beq.n	800c9e6 <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800ca00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca02:	2b3f      	cmp	r3, #63	; 0x3f
 800ca04:	d801      	bhi.n	800ca0a <find_volume+0x1ce>
 800ca06:	230d      	movs	r3, #13
 800ca08:	e25e      	b.n	800cec8 <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800ca0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca0c:	3338      	adds	r3, #56	; 0x38
 800ca0e:	3368      	adds	r3, #104	; 0x68
 800ca10:	4618      	mov	r0, r3
 800ca12:	f7fd f85b 	bl	8009acc <ld_word>
 800ca16:	4603      	mov	r3, r0
 800ca18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ca1c:	d001      	beq.n	800ca22 <find_volume+0x1e6>
 800ca1e:	230d      	movs	r3, #13
 800ca20:	e252      	b.n	800cec8 <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800ca22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca24:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800ca28:	2b09      	cmp	r3, #9
 800ca2a:	d001      	beq.n	800ca30 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800ca2c:	230d      	movs	r3, #13
 800ca2e:	e24b      	b.n	800cec8 <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800ca30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca32:	3338      	adds	r3, #56	; 0x38
 800ca34:	3348      	adds	r3, #72	; 0x48
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fd f883 	bl	8009b42 <ld_qword>
 800ca3c:	4602      	mov	r2, r0
 800ca3e:	460b      	mov	r3, r1
 800ca40:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ca42:	2000      	movs	r0, #0
 800ca44:	60b9      	str	r1, [r7, #8]
 800ca46:	60f8      	str	r0, [r7, #12]
 800ca48:	68b9      	ldr	r1, [r7, #8]
 800ca4a:	1851      	adds	r1, r2, r1
 800ca4c:	6039      	str	r1, [r7, #0]
 800ca4e:	68f9      	ldr	r1, [r7, #12]
 800ca50:	eb43 0101 	adc.w	r1, r3, r1
 800ca54:	6079      	str	r1, [r7, #4]
 800ca56:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca5a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800ca5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d301      	bcc.n	800ca6a <find_volume+0x22e>
 800ca66:	230d      	movs	r3, #13
 800ca68:	e22e      	b.n	800cec8 <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800ca6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca6c:	3338      	adds	r3, #56	; 0x38
 800ca6e:	3354      	adds	r3, #84	; 0x54
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fd f843 	bl	8009afc <ld_dword>
 800ca76:	4602      	mov	r2, r0
 800ca78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7a:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800ca7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca7e:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800ca82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca84:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800ca86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca88:	789b      	ldrb	r3, [r3, #2]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d001      	beq.n	800ca92 <find_volume+0x256>
 800ca8e:	230d      	movs	r3, #13
 800ca90:	e21a      	b.n	800cec8 <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800ca92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca94:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800ca98:	461a      	mov	r2, r3
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	4093      	lsls	r3, r2
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa2:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800caa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caa6:	895b      	ldrh	r3, [r3, #10]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d101      	bne.n	800cab0 <find_volume+0x274>
 800caac:	230d      	movs	r3, #13
 800caae:	e20b      	b.n	800cec8 <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800cab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cab2:	3338      	adds	r3, #56	; 0x38
 800cab4:	335c      	adds	r3, #92	; 0x5c
 800cab6:	4618      	mov	r0, r3
 800cab8:	f7fd f820 	bl	8009afc <ld_dword>
 800cabc:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800cabe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac0:	4a03      	ldr	r2, [pc, #12]	; (800cad0 <find_volume+0x294>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d906      	bls.n	800cad4 <find_volume+0x298>
 800cac6:	230d      	movs	r3, #13
 800cac8:	e1fe      	b.n	800cec8 <find_volume+0x68c>
 800caca:	bf00      	nop
 800cacc:	200003c8 	.word	0x200003c8
 800cad0:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800cad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cad6:	1c9a      	adds	r2, r3, #2
 800cad8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cada:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800cadc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cade:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cae0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800cae2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cae4:	3338      	adds	r3, #56	; 0x38
 800cae6:	3358      	adds	r3, #88	; 0x58
 800cae8:	4618      	mov	r0, r3
 800caea:	f7fd f807 	bl	8009afc <ld_dword>
 800caee:	4602      	mov	r2, r0
 800caf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800caf2:	441a      	add	r2, r3
 800caf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800caf6:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800caf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cafa:	3338      	adds	r3, #56	; 0x38
 800cafc:	3350      	adds	r3, #80	; 0x50
 800cafe:	4618      	mov	r0, r3
 800cb00:	f7fc fffc 	bl	8009afc <ld_dword>
 800cb04:	4602      	mov	r2, r0
 800cb06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cb08:	441a      	add	r2, r3
 800cb0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb0c:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800cb0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb12:	2200      	movs	r2, #0
 800cb14:	469a      	mov	sl, r3
 800cb16:	4693      	mov	fp, r2
 800cb18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb1a:	895b      	ldrh	r3, [r3, #10]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb20:	fb02 f303 	mul.w	r3, r2, r3
 800cb24:	2200      	movs	r2, #0
 800cb26:	4698      	mov	r8, r3
 800cb28:	4691      	mov	r9, r2
 800cb2a:	eb1a 0408 	adds.w	r4, sl, r8
 800cb2e:	eb4b 0509 	adc.w	r5, fp, r9
 800cb32:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cb36:	42a2      	cmp	r2, r4
 800cb38:	41ab      	sbcs	r3, r5
 800cb3a:	d201      	bcs.n	800cb40 <find_volume+0x304>
 800cb3c:	230d      	movs	r3, #13
 800cb3e:	e1c3      	b.n	800cec8 <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800cb40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb42:	3338      	adds	r3, #56	; 0x38
 800cb44:	3360      	adds	r3, #96	; 0x60
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fc ffd8 	bl	8009afc <ld_dword>
 800cb4c:	4602      	mov	r2, r0
 800cb4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb50:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800cb52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb56:	4619      	mov	r1, r3
 800cb58:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cb5a:	f7fd fc67 	bl	800a42c <clust2sect>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	4619      	mov	r1, r3
 800cb62:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cb64:	f7fd fbc6 	bl	800a2f4 <move_window>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <find_volume+0x336>
 800cb6e:	2301      	movs	r3, #1
 800cb70:	e1aa      	b.n	800cec8 <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cb72:	2300      	movs	r3, #0
 800cb74:	65bb      	str	r3, [r7, #88]	; 0x58
 800cb76:	e015      	b.n	800cba4 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cb78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb7a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb7c:	4413      	add	r3, r2
 800cb7e:	3338      	adds	r3, #56	; 0x38
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	2b81      	cmp	r3, #129	; 0x81
 800cb84:	d10b      	bne.n	800cb9e <find_volume+0x362>
 800cb86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb88:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800cb8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cb8e:	3314      	adds	r3, #20
 800cb90:	4413      	add	r3, r2
 800cb92:	4618      	mov	r0, r3
 800cb94:	f7fc ffb2 	bl	8009afc <ld_dword>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	2b02      	cmp	r3, #2
 800cb9c:	d007      	beq.n	800cbae <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800cb9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba0:	3320      	adds	r3, #32
 800cba2:	65bb      	str	r3, [r7, #88]	; 0x58
 800cba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cba6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbaa:	d3e5      	bcc.n	800cb78 <find_volume+0x33c>
 800cbac:	e000      	b.n	800cbb0 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800cbae:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800cbb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cbb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbb6:	d101      	bne.n	800cbbc <find_volume+0x380>
 800cbb8:	230d      	movs	r3, #13
 800cbba:	e185      	b.n	800cec8 <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cbbc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbbe:	f04f 32ff 	mov.w	r2, #4294967295
 800cbc2:	619a      	str	r2, [r3, #24]
 800cbc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbc6:	699a      	ldr	r2, [r3, #24]
 800cbc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbca:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800cbcc:	2304      	movs	r3, #4
 800cbce:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800cbd2:	e167      	b.n	800cea4 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800cbd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbd6:	3338      	adds	r3, #56	; 0x38
 800cbd8:	330b      	adds	r3, #11
 800cbda:	4618      	mov	r0, r3
 800cbdc:	f7fc ff76 	bl	8009acc <ld_word>
 800cbe0:	4603      	mov	r3, r0
 800cbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe6:	d001      	beq.n	800cbec <find_volume+0x3b0>
 800cbe8:	230d      	movs	r3, #13
 800cbea:	e16d      	b.n	800cec8 <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800cbec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cbee:	3338      	adds	r3, #56	; 0x38
 800cbf0:	3316      	adds	r3, #22
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	f7fc ff6a 	bl	8009acc <ld_word>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800cbfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d106      	bne.n	800cc10 <find_volume+0x3d4>
 800cc02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc04:	3338      	adds	r3, #56	; 0x38
 800cc06:	3324      	adds	r3, #36	; 0x24
 800cc08:	4618      	mov	r0, r3
 800cc0a:	f7fc ff77 	bl	8009afc <ld_dword>
 800cc0e:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800cc10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc12:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cc14:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800cc16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc18:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800cc1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc1e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800cc20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc22:	789b      	ldrb	r3, [r3, #2]
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d005      	beq.n	800cc34 <find_volume+0x3f8>
 800cc28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc2a:	789b      	ldrb	r3, [r3, #2]
 800cc2c:	2b02      	cmp	r3, #2
 800cc2e:	d001      	beq.n	800cc34 <find_volume+0x3f8>
 800cc30:	230d      	movs	r3, #13
 800cc32:	e149      	b.n	800cec8 <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800cc34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc36:	789b      	ldrb	r3, [r3, #2]
 800cc38:	461a      	mov	r2, r3
 800cc3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc3c:	fb02 f303 	mul.w	r3, r2, r3
 800cc40:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800cc42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc4c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800cc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc50:	895b      	ldrh	r3, [r3, #10]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d008      	beq.n	800cc68 <find_volume+0x42c>
 800cc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc58:	895b      	ldrh	r3, [r3, #10]
 800cc5a:	461a      	mov	r2, r3
 800cc5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc5e:	895b      	ldrh	r3, [r3, #10]
 800cc60:	3b01      	subs	r3, #1
 800cc62:	4013      	ands	r3, r2
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d001      	beq.n	800cc6c <find_volume+0x430>
 800cc68:	230d      	movs	r3, #13
 800cc6a:	e12d      	b.n	800cec8 <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800cc6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc6e:	3338      	adds	r3, #56	; 0x38
 800cc70:	3311      	adds	r3, #17
 800cc72:	4618      	mov	r0, r3
 800cc74:	f7fc ff2a 	bl	8009acc <ld_word>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc7e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800cc80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc82:	891b      	ldrh	r3, [r3, #8]
 800cc84:	f003 030f 	and.w	r3, r3, #15
 800cc88:	b29b      	uxth	r3, r3
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <find_volume+0x456>
 800cc8e:	230d      	movs	r3, #13
 800cc90:	e11a      	b.n	800cec8 <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800cc92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cc94:	3338      	adds	r3, #56	; 0x38
 800cc96:	3313      	adds	r3, #19
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7fc ff17 	bl	8009acc <ld_word>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800cca2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d106      	bne.n	800ccb6 <find_volume+0x47a>
 800cca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccaa:	3338      	adds	r3, #56	; 0x38
 800ccac:	3320      	adds	r3, #32
 800ccae:	4618      	mov	r0, r3
 800ccb0:	f7fc ff24 	bl	8009afc <ld_dword>
 800ccb4:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ccb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccb8:	3338      	adds	r3, #56	; 0x38
 800ccba:	330e      	adds	r3, #14
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	f7fc ff05 	bl	8009acc <ld_word>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ccc8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d101      	bne.n	800ccd4 <find_volume+0x498>
 800ccd0:	230d      	movs	r3, #13
 800ccd2:	e0f9      	b.n	800cec8 <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ccd4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ccd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ccda:	4413      	add	r3, r2
 800ccdc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccde:	8912      	ldrh	r2, [r2, #8]
 800cce0:	0912      	lsrs	r2, r2, #4
 800cce2:	b292      	uxth	r2, r2
 800cce4:	4413      	add	r3, r2
 800cce6:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800cce8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccec:	429a      	cmp	r2, r3
 800ccee:	d201      	bcs.n	800ccf4 <find_volume+0x4b8>
 800ccf0:	230d      	movs	r3, #13
 800ccf2:	e0e9      	b.n	800cec8 <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ccf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ccf6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccf8:	1ad3      	subs	r3, r2, r3
 800ccfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ccfc:	8952      	ldrh	r2, [r2, #10]
 800ccfe:	fbb3 f3f2 	udiv	r3, r3, r2
 800cd02:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800cd04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d101      	bne.n	800cd0e <find_volume+0x4d2>
 800cd0a:	230d      	movs	r3, #13
 800cd0c:	e0dc      	b.n	800cec8 <find_volume+0x68c>
		fmt = FS_FAT32;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800cd14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd16:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800cd1a:	4293      	cmp	r3, r2
 800cd1c:	d802      	bhi.n	800cd24 <find_volume+0x4e8>
 800cd1e:	2302      	movs	r3, #2
 800cd20:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800cd24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd26:	f640 72f5 	movw	r2, #4085	; 0xff5
 800cd2a:	4293      	cmp	r3, r2
 800cd2c:	d802      	bhi.n	800cd34 <find_volume+0x4f8>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800cd34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd36:	1c9a      	adds	r2, r3, #2
 800cd38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800cd3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd40:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800cd42:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800cd46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800cd48:	441a      	add	r2, r3
 800cd4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd4c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800cd4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800cd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd52:	441a      	add	r2, r3
 800cd54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd56:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800cd58:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d11e      	bne.n	800cd9e <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800cd60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd62:	3338      	adds	r3, #56	; 0x38
 800cd64:	332a      	adds	r3, #42	; 0x2a
 800cd66:	4618      	mov	r0, r3
 800cd68:	f7fc feb0 	bl	8009acc <ld_word>
 800cd6c:	4603      	mov	r3, r0
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d001      	beq.n	800cd76 <find_volume+0x53a>
 800cd72:	230d      	movs	r3, #13
 800cd74:	e0a8      	b.n	800cec8 <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800cd76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd78:	891b      	ldrh	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <find_volume+0x546>
 800cd7e:	230d      	movs	r3, #13
 800cd80:	e0a2      	b.n	800cec8 <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800cd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd84:	3338      	adds	r3, #56	; 0x38
 800cd86:	332c      	adds	r3, #44	; 0x2c
 800cd88:	4618      	mov	r0, r3
 800cd8a:	f7fc feb7 	bl	8009afc <ld_dword>
 800cd8e:	4602      	mov	r2, r0
 800cd90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd92:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800cd94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cd96:	69db      	ldr	r3, [r3, #28]
 800cd98:	009b      	lsls	r3, r3, #2
 800cd9a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd9c:	e01f      	b.n	800cdde <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800cd9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cda0:	891b      	ldrh	r3, [r3, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <find_volume+0x56e>
 800cda6:	230d      	movs	r3, #13
 800cda8:	e08e      	b.n	800cec8 <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800cdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cdae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb0:	441a      	add	r2, r3
 800cdb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdb4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800cdb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800cdba:	2b02      	cmp	r3, #2
 800cdbc:	d103      	bne.n	800cdc6 <find_volume+0x58a>
 800cdbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdc0:	69db      	ldr	r3, [r3, #28]
 800cdc2:	005b      	lsls	r3, r3, #1
 800cdc4:	e00a      	b.n	800cddc <find_volume+0x5a0>
 800cdc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdc8:	69da      	ldr	r2, [r3, #28]
 800cdca:	4613      	mov	r3, r2
 800cdcc:	005b      	lsls	r3, r3, #1
 800cdce:	4413      	add	r3, r2
 800cdd0:	085a      	lsrs	r2, r3, #1
 800cdd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdd4:	69db      	ldr	r3, [r3, #28]
 800cdd6:	f003 0301 	and.w	r3, r3, #1
 800cdda:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800cddc:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800cdde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cde0:	6a1a      	ldr	r2, [r3, #32]
 800cde2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cde4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800cde8:	0a5b      	lsrs	r3, r3, #9
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d201      	bcs.n	800cdf2 <find_volume+0x5b6>
 800cdee:	230d      	movs	r3, #13
 800cdf0:	e06a      	b.n	800cec8 <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800cdf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdf4:	f04f 32ff 	mov.w	r2, #4294967295
 800cdf8:	619a      	str	r2, [r3, #24]
 800cdfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdfc:	699a      	ldr	r2, [r3, #24]
 800cdfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce00:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800ce02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce04:	2280      	movs	r2, #128	; 0x80
 800ce06:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800ce08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ce0c:	2b03      	cmp	r3, #3
 800ce0e:	d149      	bne.n	800cea4 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800ce10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce12:	3338      	adds	r3, #56	; 0x38
 800ce14:	3330      	adds	r3, #48	; 0x30
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fc fe58 	bl	8009acc <ld_word>
 800ce1c:	4603      	mov	r3, r0
 800ce1e:	2b01      	cmp	r3, #1
 800ce20:	d140      	bne.n	800cea4 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800ce22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce24:	3301      	adds	r3, #1
 800ce26:	4619      	mov	r1, r3
 800ce28:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ce2a:	f7fd fa63 	bl	800a2f4 <move_window>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d137      	bne.n	800cea4 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800ce34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce36:	2200      	movs	r2, #0
 800ce38:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800ce3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce3c:	3338      	adds	r3, #56	; 0x38
 800ce3e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fc fe42 	bl	8009acc <ld_word>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	461a      	mov	r2, r3
 800ce4c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d127      	bne.n	800cea4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800ce54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce56:	3338      	adds	r3, #56	; 0x38
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f7fc fe4f 	bl	8009afc <ld_dword>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	4a1c      	ldr	r2, [pc, #112]	; (800ced4 <find_volume+0x698>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d11e      	bne.n	800cea4 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800ce66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce68:	3338      	adds	r3, #56	; 0x38
 800ce6a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ce6e:	4618      	mov	r0, r3
 800ce70:	f7fc fe44 	bl	8009afc <ld_dword>
 800ce74:	4603      	mov	r3, r0
 800ce76:	4a18      	ldr	r2, [pc, #96]	; (800ced8 <find_volume+0x69c>)
 800ce78:	4293      	cmp	r3, r2
 800ce7a:	d113      	bne.n	800cea4 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800ce7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce7e:	3338      	adds	r3, #56	; 0x38
 800ce80:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800ce84:	4618      	mov	r0, r3
 800ce86:	f7fc fe39 	bl	8009afc <ld_dword>
 800ce8a:	4602      	mov	r2, r0
 800ce8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce8e:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800ce90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce92:	3338      	adds	r3, #56	; 0x38
 800ce94:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7fc fe2f 	bl	8009afc <ld_dword>
 800ce9e:	4602      	mov	r2, r0
 800cea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cea2:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800cea4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cea6:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800ceaa:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800ceac:	4b0b      	ldr	r3, [pc, #44]	; (800cedc <find_volume+0x6a0>)
 800ceae:	881b      	ldrh	r3, [r3, #0]
 800ceb0:	3301      	adds	r3, #1
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	4b09      	ldr	r3, [pc, #36]	; (800cedc <find_volume+0x6a0>)
 800ceb6:	801a      	strh	r2, [r3, #0]
 800ceb8:	4b08      	ldr	r3, [pc, #32]	; (800cedc <find_volume+0x6a0>)
 800ceba:	881a      	ldrh	r2, [r3, #0]
 800cebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cebe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800cec0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cec2:	f7fd f9af 	bl	800a224 <clear_lock>
#endif
	return FR_OK;
 800cec6:	2300      	movs	r3, #0
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	3770      	adds	r7, #112	; 0x70
 800cecc:	46bd      	mov	sp, r7
 800cece:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ced2:	bf00      	nop
 800ced4:	41615252 	.word	0x41615252
 800ced8:	61417272 	.word	0x61417272
 800cedc:	200003cc 	.word	0x200003cc

0800cee0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b084      	sub	sp, #16
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
 800cee8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800ceea:	2309      	movs	r3, #9
 800ceec:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d01c      	beq.n	800cf2e <validate+0x4e>
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d018      	beq.n	800cf2e <validate+0x4e>
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	781b      	ldrb	r3, [r3, #0]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d013      	beq.n	800cf2e <validate+0x4e>
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	889a      	ldrh	r2, [r3, #4]
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	88db      	ldrh	r3, [r3, #6]
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d10c      	bne.n	800cf2e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	785b      	ldrb	r3, [r3, #1]
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	f7fc fd38 	bl	8009990 <disk_status>
 800cf20:	4603      	mov	r3, r0
 800cf22:	f003 0301 	and.w	r3, r3, #1
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d101      	bne.n	800cf2e <validate+0x4e>
			res = FR_OK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800cf2e:	7bfb      	ldrb	r3, [r7, #15]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d102      	bne.n	800cf3a <validate+0x5a>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	e000      	b.n	800cf3c <validate+0x5c>
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	683a      	ldr	r2, [r7, #0]
 800cf3e:	6013      	str	r3, [r2, #0]
	return res;
 800cf40:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf42:	4618      	mov	r0, r3
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
	...

0800cf4c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800cf4c:	b580      	push	{r7, lr}
 800cf4e:	b088      	sub	sp, #32
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	60f8      	str	r0, [r7, #12]
 800cf54:	60b9      	str	r1, [r7, #8]
 800cf56:	4613      	mov	r3, r2
 800cf58:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800cf5e:	f107 0310 	add.w	r3, r7, #16
 800cf62:	4618      	mov	r0, r3
 800cf64:	f7ff fbc1 	bl	800c6ea <get_ldnumber>
 800cf68:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800cf6a:	69fb      	ldr	r3, [r7, #28]
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	da01      	bge.n	800cf74 <f_mount+0x28>
 800cf70:	230b      	movs	r3, #11
 800cf72:	e02b      	b.n	800cfcc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800cf74:	4a17      	ldr	r2, [pc, #92]	; (800cfd4 <f_mount+0x88>)
 800cf76:	69fb      	ldr	r3, [r7, #28]
 800cf78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cf7c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d005      	beq.n	800cf90 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800cf84:	69b8      	ldr	r0, [r7, #24]
 800cf86:	f7fd f94d 	bl	800a224 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800cf8a:	69bb      	ldr	r3, [r7, #24]
 800cf8c:	2200      	movs	r2, #0
 800cf8e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d002      	beq.n	800cf9c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800cf9c:	68fa      	ldr	r2, [r7, #12]
 800cf9e:	490d      	ldr	r1, [pc, #52]	; (800cfd4 <f_mount+0x88>)
 800cfa0:	69fb      	ldr	r3, [r7, #28]
 800cfa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <f_mount+0x66>
 800cfac:	79fb      	ldrb	r3, [r7, #7]
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d001      	beq.n	800cfb6 <f_mount+0x6a>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	e00a      	b.n	800cfcc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800cfb6:	f107 010c 	add.w	r1, r7, #12
 800cfba:	f107 0308 	add.w	r3, r7, #8
 800cfbe:	2200      	movs	r2, #0
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	f7ff fc3b 	bl	800c83c <find_volume>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800cfca:	7dfb      	ldrb	r3, [r7, #23]
}
 800cfcc:	4618      	mov	r0, r3
 800cfce:	3720      	adds	r7, #32
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	bd80      	pop	{r7, pc}
 800cfd4:	200003c8 	.word	0x200003c8

0800cfd8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800cfd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfdc:	b0a8      	sub	sp, #160	; 0xa0
 800cfde:	af00      	add	r7, sp, #0
 800cfe0:	61f8      	str	r0, [r7, #28]
 800cfe2:	61b9      	str	r1, [r7, #24]
 800cfe4:	4613      	mov	r3, r2
 800cfe6:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800cfe8:	69fb      	ldr	r3, [r7, #28]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d101      	bne.n	800cff2 <f_open+0x1a>
 800cfee:	2309      	movs	r3, #9
 800cff0:	e2cb      	b.n	800d58a <f_open+0x5b2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800cff2:	7dfb      	ldrb	r3, [r7, #23]
 800cff4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cff8:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800cffa:	7dfa      	ldrb	r2, [r7, #23]
 800cffc:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800d000:	f107 0318 	add.w	r3, r7, #24
 800d004:	4618      	mov	r0, r3
 800d006:	f7ff fc19 	bl	800c83c <find_volume>
 800d00a:	4603      	mov	r3, r0
 800d00c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800d010:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d014:	2b00      	cmp	r3, #0
 800d016:	f040 82af 	bne.w	800d578 <f_open+0x5a0>
		dj.obj.fs = fs;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01c:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
 800d01e:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800d022:	f000 fee9 	bl	800ddf8 <ff_memalloc>
 800d026:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800d02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d101      	bne.n	800d036 <f_open+0x5e>
 800d032:	2311      	movs	r3, #17
 800d034:	e2a9      	b.n	800d58a <f_open+0x5b2>
 800d036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d038:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d03c:	60da      	str	r2, [r3, #12]
 800d03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d040:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d044:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800d048:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800d04a:	69ba      	ldr	r2, [r7, #24]
 800d04c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d050:	4611      	mov	r1, r2
 800d052:	4618      	mov	r0, r3
 800d054:	f7ff faa0 	bl	800c598 <follow_path>
 800d058:	4603      	mov	r3, r0
 800d05a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800d05e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d062:	2b00      	cmp	r3, #0
 800d064:	d11a      	bne.n	800d09c <f_open+0xc4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800d066:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800d06a:	b25b      	sxtb	r3, r3
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	da03      	bge.n	800d078 <f_open+0xa0>
				res = FR_INVALID_NAME;
 800d070:	2306      	movs	r3, #6
 800d072:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d076:	e011      	b.n	800d09c <f_open+0xc4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d078:	7dfb      	ldrb	r3, [r7, #23]
 800d07a:	f023 0301 	bic.w	r3, r3, #1
 800d07e:	2b00      	cmp	r3, #0
 800d080:	bf14      	ite	ne
 800d082:	2301      	movne	r3, #1
 800d084:	2300      	moveq	r3, #0
 800d086:	b2db      	uxtb	r3, r3
 800d088:	461a      	mov	r2, r3
 800d08a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d08e:	4611      	mov	r1, r2
 800d090:	4618      	mov	r0, r3
 800d092:	f7fc ff7f 	bl	8009f94 <chk_lock>
 800d096:	4603      	mov	r3, r0
 800d098:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800d09c:	7dfb      	ldrb	r3, [r7, #23]
 800d09e:	f003 031c 	and.w	r3, r3, #28
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	f000 8115 	beq.w	800d2d2 <f_open+0x2fa>
			if (res != FR_OK) {					/* No file, create new */
 800d0a8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d017      	beq.n	800d0e0 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800d0b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d0b4:	2b04      	cmp	r3, #4
 800d0b6:	d10e      	bne.n	800d0d6 <f_open+0xfe>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800d0b8:	f7fc ffc8 	bl	800a04c <enq_lock>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d006      	beq.n	800d0d0 <f_open+0xf8>
 800d0c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	f7fe ff08 	bl	800bedc <dir_register>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	e000      	b.n	800d0d2 <f_open+0xfa>
 800d0d0:	2312      	movs	r3, #18
 800d0d2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800d0d6:	7dfb      	ldrb	r3, [r7, #23]
 800d0d8:	f043 0308 	orr.w	r3, r3, #8
 800d0dc:	75fb      	strb	r3, [r7, #23]
 800d0de:	e011      	b.n	800d104 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800d0e0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d0e4:	f003 0311 	and.w	r3, r3, #17
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d003      	beq.n	800d0f4 <f_open+0x11c>
					res = FR_DENIED;
 800d0ec:	2307      	movs	r3, #7
 800d0ee:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d0f2:	e007      	b.n	800d104 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800d0f4:	7dfb      	ldrb	r3, [r7, #23]
 800d0f6:	f003 0304 	and.w	r3, r3, #4
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d002      	beq.n	800d104 <f_open+0x12c>
 800d0fe:	2308      	movs	r3, #8
 800d100:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800d104:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f040 80fe 	bne.w	800d30a <f_open+0x332>
 800d10e:	7dfb      	ldrb	r3, [r7, #23]
 800d110:	f003 0308 	and.w	r3, r3, #8
 800d114:	2b00      	cmp	r3, #0
 800d116:	f000 80f8 	beq.w	800d30a <f_open+0x332>
				dw = GET_FATTIME();
 800d11a:	f7fc fafb 	bl	8009714 <get_fattime>
 800d11e:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800d122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d124:	781b      	ldrb	r3, [r3, #0]
 800d126:	2b04      	cmp	r3, #4
 800d128:	f040 8084 	bne.w	800d234 <f_open+0x25c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800d12c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d12e:	69fb      	ldr	r3, [r7, #28]
 800d130:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800d132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d134:	691b      	ldr	r3, [r3, #16]
 800d136:	3334      	adds	r3, #52	; 0x34
 800d138:	4618      	mov	r0, r3
 800d13a:	f7fc fcdf 	bl	8009afc <ld_dword>
 800d13e:	4602      	mov	r2, r0
 800d140:	69fb      	ldr	r3, [r7, #28]
 800d142:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d146:	691b      	ldr	r3, [r3, #16]
 800d148:	3338      	adds	r3, #56	; 0x38
 800d14a:	4618      	mov	r0, r3
 800d14c:	f7fc fcf9 	bl	8009b42 <ld_qword>
 800d150:	4602      	mov	r2, r0
 800d152:	460b      	mov	r3, r1
 800d154:	69f9      	ldr	r1, [r7, #28]
 800d156:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d15c:	691b      	ldr	r3, [r3, #16]
 800d15e:	3321      	adds	r3, #33	; 0x21
 800d160:	781b      	ldrb	r3, [r3, #0]
 800d162:	f003 0302 	and.w	r3, r3, #2
 800d166:	b2da      	uxtb	r2, r3
 800d168:	69fb      	ldr	r3, [r7, #28]
 800d16a:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800d16c:	69fb      	ldr	r3, [r7, #28]
 800d16e:	2200      	movs	r2, #0
 800d170:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800d172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	3308      	adds	r3, #8
 800d178:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7fc fdd6 	bl	8009d2e <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	691b      	ldr	r3, [r3, #16]
 800d186:	3314      	adds	r3, #20
 800d188:	2200      	movs	r2, #0
 800d18a:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800d18c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d18e:	691b      	ldr	r3, [r3, #16]
 800d190:	330c      	adds	r3, #12
 800d192:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d196:	4618      	mov	r0, r3
 800d198:	f7fc fdc9 	bl	8009d2e <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800d19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d19e:	691b      	ldr	r3, [r3, #16]
 800d1a0:	3315      	adds	r3, #21
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	3304      	adds	r3, #4
 800d1ac:	2220      	movs	r2, #32
 800d1ae:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	691b      	ldr	r3, [r3, #16]
 800d1b4:	3334      	adds	r3, #52	; 0x34
 800d1b6:	2100      	movs	r1, #0
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	f7fc fdb8 	bl	8009d2e <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800d1be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800d1c6:	f04f 0200 	mov.w	r2, #0
 800d1ca:	f04f 0300 	mov.w	r3, #0
 800d1ce:	4608      	mov	r0, r1
 800d1d0:	f7fc fdd9 	bl	8009d86 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800d1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d6:	691b      	ldr	r3, [r3, #16]
 800d1d8:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800d1dc:	f04f 0200 	mov.w	r2, #0
 800d1e0:	f04f 0300 	mov.w	r3, #0
 800d1e4:	4608      	mov	r0, r1
 800d1e6:	f7fc fdce 	bl	8009d86 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800d1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ec:	691b      	ldr	r3, [r3, #16]
 800d1ee:	3321      	adds	r3, #33	; 0x21
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800d1f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7fe fbbd 	bl	800b978 <store_xdir>
 800d1fe:	4603      	mov	r3, r0
 800d200:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800d204:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d17e      	bne.n	800d30a <f_open+0x332>
 800d20c:	69fb      	ldr	r3, [r7, #28]
 800d20e:	689b      	ldr	r3, [r3, #8]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d07a      	beq.n	800d30a <f_open+0x332>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800d214:	69f8      	ldr	r0, [r7, #28]
 800d216:	69fb      	ldr	r3, [r7, #28]
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	2200      	movs	r2, #0
 800d21c:	4619      	mov	r1, r3
 800d21e:	f7fd fc75 	bl	800ab0c <remove_chain>
 800d222:	4603      	mov	r3, r0
 800d224:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800d228:	69fb      	ldr	r3, [r7, #28]
 800d22a:	689a      	ldr	r2, [r3, #8]
 800d22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d22e:	3a01      	subs	r2, #1
 800d230:	615a      	str	r2, [r3, #20]
 800d232:	e06a      	b.n	800d30a <f_open+0x332>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800d234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d236:	330e      	adds	r3, #14
 800d238:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d23c:	4618      	mov	r0, r3
 800d23e:	f7fc fd76 	bl	8009d2e <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800d242:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d244:	3316      	adds	r3, #22
 800d246:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d24a:	4618      	mov	r0, r3
 800d24c:	f7fc fd6f 	bl	8009d2e <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800d250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d252:	330b      	adds	r3, #11
 800d254:	2220      	movs	r2, #32
 800d256:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800d258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d25a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d25c:	4611      	mov	r1, r2
 800d25e:	4618      	mov	r0, r3
 800d260:	f7fe f804 	bl	800b26c <ld_clust>
 800d264:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800d268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d26a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d26c:	2200      	movs	r2, #0
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe f81b 	bl	800b2aa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800d274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d276:	331c      	adds	r3, #28
 800d278:	2100      	movs	r1, #0
 800d27a:	4618      	mov	r0, r3
 800d27c:	f7fc fd57 	bl	8009d2e <st_dword>
					fs->wflag = 1;
 800d280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d282:	2201      	movs	r2, #1
 800d284:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800d286:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d03d      	beq.n	800d30a <f_open+0x332>
						dw = fs->winsect;
 800d28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d292:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800d296:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d29a:	2200      	movs	r2, #0
 800d29c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f7fd fc33 	bl	800ab0c <remove_chain>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800d2ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	d12a      	bne.n	800d30a <f_open+0x332>
							res = move_window(fs, dw);
 800d2b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2b6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800d2ba:	4618      	mov	r0, r3
 800d2bc:	f7fd f81a 	bl	800a2f4 <move_window>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800d2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d2cc:	3a01      	subs	r2, #1
 800d2ce:	615a      	str	r2, [r3, #20]
 800d2d0:	e01b      	b.n	800d30a <f_open+0x332>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800d2d2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d117      	bne.n	800d30a <f_open+0x332>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800d2da:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d2de:	f003 0310 	and.w	r3, r3, #16
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <f_open+0x316>
					res = FR_NO_FILE;
 800d2e6:	2304      	movs	r3, #4
 800d2e8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d2ec:	e00d      	b.n	800d30a <f_open+0x332>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800d2ee:	7dfb      	ldrb	r3, [r7, #23]
 800d2f0:	f003 0302 	and.w	r3, r3, #2
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d008      	beq.n	800d30a <f_open+0x332>
 800d2f8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800d2fc:	f003 0301 	and.w	r3, r3, #1
 800d300:	2b00      	cmp	r3, #0
 800d302:	d002      	beq.n	800d30a <f_open+0x332>
						res = FR_DENIED;
 800d304:	2307      	movs	r3, #7
 800d306:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800d30a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d128      	bne.n	800d364 <f_open+0x38c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	f003 0308 	and.w	r3, r3, #8
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d003      	beq.n	800d324 <f_open+0x34c>
				mode |= FA_MODIFIED;
 800d31c:	7dfb      	ldrb	r3, [r7, #23]
 800d31e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d322:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800d324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d326:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800d32c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800d332:	7dfb      	ldrb	r3, [r7, #23]
 800d334:	f023 0301 	bic.w	r3, r3, #1
 800d338:	2b00      	cmp	r3, #0
 800d33a:	bf14      	ite	ne
 800d33c:	2301      	movne	r3, #1
 800d33e:	2300      	moveq	r3, #0
 800d340:	b2db      	uxtb	r3, r3
 800d342:	461a      	mov	r2, r3
 800d344:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d348:	4611      	mov	r1, r2
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fc fea0 	bl	800a090 <inc_lock>
 800d350:	4602      	mov	r2, r0
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d102      	bne.n	800d364 <f_open+0x38c>
 800d35e:	2302      	movs	r3, #2
 800d360:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800d364:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d368:	2b00      	cmp	r3, #0
 800d36a:	f040 8101 	bne.w	800d570 <f_open+0x598>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d370:	781b      	ldrb	r3, [r3, #0]
 800d372:	2b04      	cmp	r3, #4
 800d374:	d12d      	bne.n	800d3d2 <f_open+0x3fa>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800d376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800d37c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800d380:	4613      	mov	r3, r2
 800d382:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d386:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800d38a:	431a      	orrs	r2, r3
 800d38c:	69fb      	ldr	r3, [r7, #28]
 800d38e:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800d390:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d392:	69fb      	ldr	r3, [r7, #28]
 800d394:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800d396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d398:	691b      	ldr	r3, [r3, #16]
 800d39a:	3334      	adds	r3, #52	; 0x34
 800d39c:	4618      	mov	r0, r3
 800d39e:	f7fc fbad 	bl	8009afc <ld_dword>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	3338      	adds	r3, #56	; 0x38
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	f7fc fbc7 	bl	8009b42 <ld_qword>
 800d3b4:	4602      	mov	r2, r0
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	69f9      	ldr	r1, [r7, #28]
 800d3ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d3be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	3321      	adds	r3, #33	; 0x21
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	f003 0302 	and.w	r3, r3, #2
 800d3ca:	b2da      	uxtb	r2, r3
 800d3cc:	69fb      	ldr	r3, [r7, #28]
 800d3ce:	71da      	strb	r2, [r3, #7]
 800d3d0:	e016      	b.n	800d400 <f_open+0x428>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800d3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3d4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d3d6:	4611      	mov	r1, r2
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f7fd ff47 	bl	800b26c <ld_clust>
 800d3de:	4602      	mov	r2, r0
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800d3e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3e6:	331c      	adds	r3, #28
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7fc fb87 	bl	8009afc <ld_dword>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	2200      	movs	r2, #0
 800d3f2:	60bb      	str	r3, [r7, #8]
 800d3f4:	60fa      	str	r2, [r7, #12]
 800d3f6:	69fb      	ldr	r3, [r7, #28]
 800d3f8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800d3fc:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800d400:	69fb      	ldr	r3, [r7, #28]
 800d402:	2200      	movs	r2, #0
 800d404:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800d406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800d40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d40e:	88da      	ldrh	r2, [r3, #6]
 800d410:	69fb      	ldr	r3, [r7, #28]
 800d412:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800d414:	69fb      	ldr	r3, [r7, #28]
 800d416:	7dfa      	ldrb	r2, [r7, #23]
 800d418:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	2200      	movs	r2, #0
 800d420:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	2200      	movs	r2, #0
 800d428:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800d42a:	69f9      	ldr	r1, [r7, #28]
 800d42c:	f04f 0200 	mov.w	r2, #0
 800d430:	f04f 0300 	mov.w	r3, #0
 800d434:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	3354      	adds	r3, #84	; 0x54
 800d43c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d440:	2100      	movs	r1, #0
 800d442:	4618      	mov	r0, r3
 800d444:	f7fc fd48 	bl	8009ed8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800d448:	7dfb      	ldrb	r3, [r7, #23]
 800d44a:	f003 0320 	and.w	r3, r3, #32
 800d44e:	2b00      	cmp	r3, #0
 800d450:	f000 808e 	beq.w	800d570 <f_open+0x598>
 800d454:	69fb      	ldr	r3, [r7, #28]
 800d456:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d45a:	4313      	orrs	r3, r2
 800d45c:	f000 8088 	beq.w	800d570 <f_open+0x598>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800d460:	69fb      	ldr	r3, [r7, #28]
 800d462:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d466:	69f9      	ldr	r1, [r7, #28]
 800d468:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800d46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46e:	895b      	ldrh	r3, [r3, #10]
 800d470:	025b      	lsls	r3, r3, #9
 800d472:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800d476:	69fb      	ldr	r3, [r7, #28]
 800d478:	689b      	ldr	r3, [r3, #8]
 800d47a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d47e:	69fb      	ldr	r3, [r7, #28]
 800d480:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d484:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800d488:	e027      	b.n	800d4da <f_open+0x502>
					clst = get_fat(&fp->obj, clst);
 800d48a:	69fb      	ldr	r3, [r7, #28]
 800d48c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d490:	4618      	mov	r0, r3
 800d492:	f7fc ffeb 	bl	800a46c <get_fat>
 800d496:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800d49a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d49e:	2b01      	cmp	r3, #1
 800d4a0:	d802      	bhi.n	800d4a8 <f_open+0x4d0>
 800d4a2:	2302      	movs	r3, #2
 800d4a4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800d4a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4b0:	d102      	bne.n	800d4b8 <f_open+0x4e0>
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800d4b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4bc:	2200      	movs	r2, #0
 800d4be:	469a      	mov	sl, r3
 800d4c0:	4693      	mov	fp, r2
 800d4c2:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d4c6:	ebb2 010a 	subs.w	r1, r2, sl
 800d4ca:	6039      	str	r1, [r7, #0]
 800d4cc:	eb63 030b 	sbc.w	r3, r3, fp
 800d4d0:	607b      	str	r3, [r7, #4]
 800d4d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d4d6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800d4da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d10a      	bne.n	800d4f8 <f_open+0x520>
 800d4e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	4698      	mov	r8, r3
 800d4ea:	4691      	mov	r9, r2
 800d4ec:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d4f0:	4590      	cmp	r8, r2
 800d4f2:	eb79 0303 	sbcs.w	r3, r9, r3
 800d4f6:	d3c8      	bcc.n	800d48a <f_open+0x4b2>
				}
				fp->clust = clst;
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d4fe:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800d500:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d504:	2b00      	cmp	r3, #0
 800d506:	d133      	bne.n	800d570 <f_open+0x598>
 800d508:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800d50c:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800d510:	2500      	movs	r5, #0
 800d512:	ea54 0305 	orrs.w	r3, r4, r5
 800d516:	d02b      	beq.n	800d570 <f_open+0x598>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800d518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800d51e:	4618      	mov	r0, r3
 800d520:	f7fc ff84 	bl	800a42c <clust2sect>
 800d524:	67f8      	str	r0, [r7, #124]	; 0x7c
 800d526:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d103      	bne.n	800d534 <f_open+0x55c>
						res = FR_INT_ERR;
 800d52c:	2302      	movs	r3, #2
 800d52e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800d532:	e01d      	b.n	800d570 <f_open+0x598>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800d534:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800d538:	f04f 0200 	mov.w	r2, #0
 800d53c:	f04f 0300 	mov.w	r3, #0
 800d540:	0a42      	lsrs	r2, r0, #9
 800d542:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d546:	0a4b      	lsrs	r3, r1, #9
 800d548:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800d54a:	441a      	add	r2, r3
 800d54c:	69fb      	ldr	r3, [r7, #28]
 800d54e:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800d550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d552:	7858      	ldrb	r0, [r3, #1]
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d55e:	2301      	movs	r3, #1
 800d560:	f7fc fa56 	bl	8009a10 <disk_read>
 800d564:	4603      	mov	r3, r0
 800d566:	2b00      	cmp	r3, #0
 800d568:	d002      	beq.n	800d570 <f_open+0x598>
 800d56a:	2301      	movs	r3, #1
 800d56c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800d570:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800d574:	f000 fc4c 	bl	800de10 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800d578:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d002      	beq.n	800d586 <f_open+0x5ae>
 800d580:	69fb      	ldr	r3, [r7, #28]
 800d582:	2200      	movs	r2, #0
 800d584:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800d586:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800d58a:	4618      	mov	r0, r3
 800d58c:	37a0      	adds	r7, #160	; 0xa0
 800d58e:	46bd      	mov	sp, r7
 800d590:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d594 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800d594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d598:	b08c      	sub	sp, #48	; 0x30
 800d59a:	af00      	add	r7, sp, #0
 800d59c:	60f8      	str	r0, [r7, #12]
 800d59e:	60b9      	str	r1, [r7, #8]
 800d5a0:	607a      	str	r2, [r7, #4]
 800d5a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800d5a4:	68bb      	ldr	r3, [r7, #8]
 800d5a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800d5a8:	683b      	ldr	r3, [r7, #0]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	f107 0210 	add.w	r2, r7, #16
 800d5b4:	4611      	mov	r1, r2
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff fc92 	bl	800cee0 <validate>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d5c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d108      	bne.n	800d5dc <f_write+0x48>
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800d5d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d5d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d002      	beq.n	800d5e2 <f_write+0x4e>
 800d5dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5e0:	e187      	b.n	800d8f2 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5e8:	f003 0302 	and.w	r3, r3, #2
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d101      	bne.n	800d5f4 <f_write+0x60>
 800d5f0:	2307      	movs	r3, #7
 800d5f2:	e17e      	b.n	800d8f2 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	2b04      	cmp	r3, #4
 800d5fa:	f000 816a 	beq.w	800d8d2 <f_write+0x33e>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	18d1      	adds	r1, r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d60e:	4613      	mov	r3, r2
 800d610:	4299      	cmp	r1, r3
 800d612:	f080 815e 	bcs.w	800d8d2 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d61c:	4613      	mov	r3, r2
 800d61e:	43db      	mvns	r3, r3
 800d620:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800d622:	e156      	b.n	800d8d2 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d62a:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800d62e:	2500      	movs	r5, #0
 800d630:	ea54 0305 	orrs.w	r3, r4, r5
 800d634:	f040 80fb 	bne.w	800d82e <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d63e:	f04f 0200 	mov.w	r2, #0
 800d642:	f04f 0300 	mov.w	r3, #0
 800d646:	0a42      	lsrs	r2, r0, #9
 800d648:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800d64c:	0a4b      	lsrs	r3, r1, #9
 800d64e:	693b      	ldr	r3, [r7, #16]
 800d650:	895b      	ldrh	r3, [r3, #10]
 800d652:	3b01      	subs	r3, #1
 800d654:	4013      	ands	r3, r2
 800d656:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800d658:	69bb      	ldr	r3, [r7, #24]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d146      	bne.n	800d6ec <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d664:	4313      	orrs	r3, r2
 800d666:	d10c      	bne.n	800d682 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800d66e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d670:	2b00      	cmp	r3, #0
 800d672:	d11a      	bne.n	800d6aa <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	2100      	movs	r1, #0
 800d678:	4618      	mov	r0, r3
 800d67a:	f7fd fafb 	bl	800ac74 <create_chain>
 800d67e:	62b8      	str	r0, [r7, #40]	; 0x28
 800d680:	e013      	b.n	800d6aa <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d686:	2b00      	cmp	r3, #0
 800d688:	d007      	beq.n	800d69a <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d690:	68f8      	ldr	r0, [r7, #12]
 800d692:	f7fd fbf0 	bl	800ae76 <clmt_clust>
 800d696:	62b8      	str	r0, [r7, #40]	; 0x28
 800d698:	e007      	b.n	800d6aa <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800d69a:	68fa      	ldr	r2, [r7, #12]
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	4610      	mov	r0, r2
 800d6a4:	f7fd fae6 	bl	800ac74 <create_chain>
 800d6a8:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	f000 8115 	beq.w	800d8dc <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6b4:	2b01      	cmp	r3, #1
 800d6b6:	d105      	bne.n	800d6c4 <f_write+0x130>
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	2202      	movs	r2, #2
 800d6bc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d6c0:	2302      	movs	r3, #2
 800d6c2:	e116      	b.n	800d8f2 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6ca:	d105      	bne.n	800d6d8 <f_write+0x144>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2201      	movs	r2, #1
 800d6d0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	e10c      	b.n	800d8f2 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6dc:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d102      	bne.n	800d6ec <f_write+0x158>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d6ea:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d6f2:	b25b      	sxtb	r3, r3
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	da1b      	bge.n	800d730 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	7858      	ldrb	r0, [r3, #1]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d706:	2301      	movs	r3, #1
 800d708:	f7fc f9a2 	bl	8009a50 <disk_write>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d005      	beq.n	800d71e <f_write+0x18a>
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	2201      	movs	r2, #1
 800d716:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d71a:	2301      	movs	r3, #1
 800d71c:	e0e9      	b.n	800d8f2 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d724:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d728:	b2da      	uxtb	r2, r3
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800d730:	693a      	ldr	r2, [r7, #16]
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d736:	4619      	mov	r1, r3
 800d738:	4610      	mov	r0, r2
 800d73a:	f7fc fe77 	bl	800a42c <clust2sect>
 800d73e:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800d740:	697b      	ldr	r3, [r7, #20]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d105      	bne.n	800d752 <f_write+0x1be>
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	2202      	movs	r2, #2
 800d74a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d74e:	2302      	movs	r3, #2
 800d750:	e0cf      	b.n	800d8f2 <f_write+0x35e>
			sect += csect;
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	4413      	add	r3, r2
 800d758:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	0a5b      	lsrs	r3, r3, #9
 800d75e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800d760:	6a3b      	ldr	r3, [r7, #32]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d03f      	beq.n	800d7e6 <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800d766:	69ba      	ldr	r2, [r7, #24]
 800d768:	6a3b      	ldr	r3, [r7, #32]
 800d76a:	4413      	add	r3, r2
 800d76c:	693a      	ldr	r2, [r7, #16]
 800d76e:	8952      	ldrh	r2, [r2, #10]
 800d770:	4293      	cmp	r3, r2
 800d772:	d905      	bls.n	800d780 <f_write+0x1ec>
					cc = fs->csize - csect;
 800d774:	693b      	ldr	r3, [r7, #16]
 800d776:	895b      	ldrh	r3, [r3, #10]
 800d778:	461a      	mov	r2, r3
 800d77a:	69bb      	ldr	r3, [r7, #24]
 800d77c:	1ad3      	subs	r3, r2, r3
 800d77e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	7858      	ldrb	r0, [r3, #1]
 800d784:	6a3b      	ldr	r3, [r7, #32]
 800d786:	697a      	ldr	r2, [r7, #20]
 800d788:	69f9      	ldr	r1, [r7, #28]
 800d78a:	f7fc f961 	bl	8009a50 <disk_write>
 800d78e:	4603      	mov	r3, r0
 800d790:	2b00      	cmp	r3, #0
 800d792:	d005      	beq.n	800d7a0 <f_write+0x20c>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d79c:	2301      	movs	r3, #1
 800d79e:	e0a8      	b.n	800d8f2 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	1ad3      	subs	r3, r2, r3
 800d7a8:	6a3a      	ldr	r2, [r7, #32]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d917      	bls.n	800d7de <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7b8:	697b      	ldr	r3, [r7, #20]
 800d7ba:	1ad3      	subs	r3, r2, r3
 800d7bc:	025b      	lsls	r3, r3, #9
 800d7be:	69fa      	ldr	r2, [r7, #28]
 800d7c0:	4413      	add	r3, r2
 800d7c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	f7fc fb65 	bl	8009e96 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800d7cc:	68fb      	ldr	r3, [r7, #12]
 800d7ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d7d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7d6:	b2da      	uxtb	r2, r3
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800d7de:	6a3b      	ldr	r3, [r7, #32]
 800d7e0:	025b      	lsls	r3, r3, #9
 800d7e2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800d7e4:	e04a      	b.n	800d87c <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7ea:	697a      	ldr	r2, [r7, #20]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d01b      	beq.n	800d828 <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800d7fc:	4290      	cmp	r0, r2
 800d7fe:	eb71 0303 	sbcs.w	r3, r1, r3
 800d802:	d211      	bcs.n	800d828 <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800d804:	693b      	ldr	r3, [r7, #16]
 800d806:	7858      	ldrb	r0, [r3, #1]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d80e:	2301      	movs	r3, #1
 800d810:	697a      	ldr	r2, [r7, #20]
 800d812:	f7fc f8fd 	bl	8009a10 <disk_read>
 800d816:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d005      	beq.n	800d828 <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800d824:	2301      	movs	r3, #1
 800d826:	e064      	b.n	800d8f2 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	697a      	ldr	r2, [r7, #20]
 800d82c:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d834:	4613      	mov	r3, r2
 800d836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d83a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800d83e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800d840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d901      	bls.n	800d84c <f_write+0x2b8>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800d84c:	68fb      	ldr	r3, [r7, #12]
 800d84e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d858:	4613      	mov	r3, r2
 800d85a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d85e:	440b      	add	r3, r1
 800d860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d862:	69f9      	ldr	r1, [r7, #28]
 800d864:	4618      	mov	r0, r3
 800d866:	f7fc fb16 	bl	8009e96 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d874:	b2da      	uxtb	r2, r3
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800d87c:	69fa      	ldr	r2, [r7, #28]
 800d87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d880:	4413      	add	r3, r2
 800d882:	61fb      	str	r3, [r7, #28]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800d88a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d88c:	2000      	movs	r0, #0
 800d88e:	4688      	mov	r8, r1
 800d890:	4681      	mov	r9, r0
 800d892:	eb12 0a08 	adds.w	sl, r2, r8
 800d896:	eb43 0b09 	adc.w	fp, r3, r9
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d8a6:	68f9      	ldr	r1, [r7, #12]
 800d8a8:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800d8ac:	4282      	cmp	r2, r0
 800d8ae:	eb73 0c01 	sbcs.w	ip, r3, r1
 800d8b2:	d201      	bcs.n	800d8b8 <f_write+0x324>
 800d8b4:	4602      	mov	r2, r0
 800d8b6:	460b      	mov	r3, r1
 800d8b8:	68f9      	ldr	r1, [r7, #12]
 800d8ba:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	441a      	add	r2, r3
 800d8c6:	683b      	ldr	r3, [r7, #0]
 800d8c8:	601a      	str	r2, [r3, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	1ad3      	subs	r3, r2, r3
 800d8d0:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	f47f aea5 	bne.w	800d624 <f_write+0x90>
 800d8da:	e000      	b.n	800d8de <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800d8dc:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d8e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800d8f0:	2300      	movs	r3, #0
}
 800d8f2:	4618      	mov	r0, r3
 800d8f4:	3730      	adds	r7, #48	; 0x30
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800d8fc <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b09c      	sub	sp, #112	; 0x70
 800d900:	af00      	add	r7, sp, #0
 800d902:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800d90a:	4611      	mov	r1, r2
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff fae7 	bl	800cee0 <validate>
 800d912:	4603      	mov	r3, r0
 800d914:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800d918:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	f040 8119 	bne.w	800db54 <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f000 8111 	beq.w	800db54 <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d938:	b25b      	sxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	da17      	bge.n	800d96e <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800d93e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d940:	7858      	ldrb	r0, [r3, #1]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d94c:	2301      	movs	r3, #1
 800d94e:	f7fc f87f 	bl	8009a50 <disk_write>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d001      	beq.n	800d95c <f_sync+0x60>
 800d958:	2301      	movs	r3, #1
 800d95a:	e0fd      	b.n	800db58 <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d966:	b2da      	uxtb	r2, r3
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800d96e:	f7fb fed1 	bl	8009714 <get_fattime>
 800d972:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800d974:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d976:	781b      	ldrb	r3, [r3, #0]
 800d978:	2b04      	cmp	r3, #4
 800d97a:	f040 80a0 	bne.w	800dabe <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	4618      	mov	r0, r3
 800d982:	f7fd f863 	bl	800aa4c <fill_first_frag>
 800d986:	4603      	mov	r3, r0
 800d988:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800d98c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d990:	2b00      	cmp	r3, #0
 800d992:	d10a      	bne.n	800d9aa <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800d994:	6878      	ldr	r0, [r7, #4]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99a:	f04f 32ff 	mov.w	r2, #4294967295
 800d99e:	4619      	mov	r1, r3
 800d9a0:	f7fd f883 	bl	800aaaa <fill_last_frag>
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800d9aa:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f040 80d0 	bne.w	800db54 <f_sync+0x258>
					INIT_NAMBUF(fs);
 800d9b4:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800d9b8:	f000 fa1e 	bl	800ddf8 <ff_memalloc>
 800d9bc:	6638      	str	r0, [r7, #96]	; 0x60
 800d9be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d101      	bne.n	800d9c8 <f_sync+0xcc>
 800d9c4:	2311      	movs	r3, #17
 800d9c6:	e0c7      	b.n	800db58 <f_sync+0x25c>
 800d9c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9ca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9cc:	60da      	str	r2, [r3, #12]
 800d9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d9d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800d9d6:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	f107 0308 	add.w	r3, r7, #8
 800d9de:	4611      	mov	r1, r2
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	f7fd ff93 	bl	800b90c <load_obj_dir>
 800d9e6:	4603      	mov	r3, r0
 800d9e8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800d9ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d160      	bne.n	800dab6 <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800d9f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	3304      	adds	r3, #4
 800d9fa:	781a      	ldrb	r2, [r3, #0]
 800d9fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9fe:	691b      	ldr	r3, [r3, #16]
 800da00:	3304      	adds	r3, #4
 800da02:	f042 0220 	orr.w	r2, r2, #32
 800da06:	b2d2      	uxtb	r2, r2
 800da08:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	79da      	ldrb	r2, [r3, #7]
 800da0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da10:	691b      	ldr	r3, [r3, #16]
 800da12:	3321      	adds	r3, #33	; 0x21
 800da14:	f042 0201 	orr.w	r2, r2, #1
 800da18:	b2d2      	uxtb	r2, r2
 800da1a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800da1c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da1e:	691b      	ldr	r3, [r3, #16]
 800da20:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	689b      	ldr	r3, [r3, #8]
 800da28:	4619      	mov	r1, r3
 800da2a:	4610      	mov	r0, r2
 800da2c:	f7fc f97f 	bl	8009d2e <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800da30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da32:	691b      	ldr	r3, [r3, #16]
 800da34:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da3e:	4608      	mov	r0, r1
 800da40:	f7fc f9a1 	bl	8009d86 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800da44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da46:	691b      	ldr	r3, [r3, #16]
 800da48:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800da52:	4608      	mov	r0, r1
 800da54:	f7fc f997 	bl	8009d86 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800da58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da5a:	691b      	ldr	r3, [r3, #16]
 800da5c:	330c      	adds	r3, #12
 800da5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800da60:	4618      	mov	r0, r3
 800da62:	f7fc f964 	bl	8009d2e <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800da66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da68:	691b      	ldr	r3, [r3, #16]
 800da6a:	3315      	adds	r3, #21
 800da6c:	2200      	movs	r2, #0
 800da6e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800da70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da72:	691b      	ldr	r3, [r3, #16]
 800da74:	3310      	adds	r3, #16
 800da76:	2100      	movs	r1, #0
 800da78:	4618      	mov	r0, r3
 800da7a:	f7fc f958 	bl	8009d2e <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800da7e:	f107 0308 	add.w	r3, r7, #8
 800da82:	4618      	mov	r0, r3
 800da84:	f7fd ff78 	bl	800b978 <store_xdir>
 800da88:	4603      	mov	r3, r0
 800da8a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800da8e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10f      	bne.n	800dab6 <f_sync+0x1ba>
							res = sync_fs(fs);
 800da96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da98:	4618      	mov	r0, r3
 800da9a:	f7fc fc59 	bl	800a350 <sync_fs>
 800da9e:	4603      	mov	r3, r0
 800daa0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800daaa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800daae:	b2da      	uxtb	r2, r3
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 800dab6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800dab8:	f000 f9aa 	bl	800de10 <ff_memfree>
 800dabc:	e04a      	b.n	800db54 <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dabe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dac4:	4619      	mov	r1, r3
 800dac6:	4610      	mov	r0, r2
 800dac8:	f7fc fc14 	bl	800a2f4 <move_window>
 800dacc:	4603      	mov	r3, r0
 800dace:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800dad2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d13c      	bne.n	800db54 <f_sync+0x258>
					dir = fp->dir_ptr;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dade:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dae0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dae2:	330b      	adds	r3, #11
 800dae4:	781a      	ldrb	r2, [r3, #0]
 800dae6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dae8:	330b      	adds	r3, #11
 800daea:	f042 0220 	orr.w	r2, r2, #32
 800daee:	b2d2      	uxtb	r2, r2
 800daf0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6818      	ldr	r0, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	461a      	mov	r2, r3
 800dafc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800dafe:	f7fd fbd4 	bl	800b2aa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800db02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db04:	f103 001c 	add.w	r0, r3, #28
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800db0e:	4613      	mov	r3, r2
 800db10:	4619      	mov	r1, r3
 800db12:	f7fc f90c 	bl	8009d2e <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800db16:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db18:	3316      	adds	r3, #22
 800db1a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800db1c:	4618      	mov	r0, r3
 800db1e:	f7fc f906 	bl	8009d2e <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800db22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db24:	3312      	adds	r3, #18
 800db26:	2100      	movs	r1, #0
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fc f8e5 	bl	8009cf8 <st_word>
					fs->wflag = 1;
 800db2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db30:	2201      	movs	r2, #1
 800db32:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800db34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db36:	4618      	mov	r0, r3
 800db38:	f7fc fc0a 	bl	800a350 <sync_fs>
 800db3c:	4603      	mov	r3, r0
 800db3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800db54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3770      	adds	r7, #112	; 0x70
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}

0800db60 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b084      	sub	sp, #16
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f7ff fec7 	bl	800d8fc <f_sync>
 800db6e:	4603      	mov	r3, r0
 800db70:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800db72:	7bfb      	ldrb	r3, [r7, #15]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d118      	bne.n	800dbaa <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	f107 0208 	add.w	r2, r7, #8
 800db7e:	4611      	mov	r1, r2
 800db80:	4618      	mov	r0, r3
 800db82:	f7ff f9ad 	bl	800cee0 <validate>
 800db86:	4603      	mov	r3, r0
 800db88:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800db8a:	7bfb      	ldrb	r3, [r7, #15]
 800db8c:	2b00      	cmp	r3, #0
 800db8e:	d10c      	bne.n	800dbaa <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db94:	4618      	mov	r0, r3
 800db96:	f7fc fb09 	bl	800a1ac <dec_lock>
 800db9a:	4603      	mov	r3, r0
 800db9c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800db9e:	7bfb      	ldrb	r3, [r7, #15]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d102      	bne.n	800dbaa <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2200      	movs	r2, #0
 800dba8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3710      	adds	r7, #16
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}

0800dbb4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dbb4:	b480      	push	{r7}
 800dbb6:	b087      	sub	sp, #28
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	4613      	mov	r3, r2
 800dbc0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dbca:	4b1f      	ldr	r3, [pc, #124]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbcc:	7a5b      	ldrb	r3, [r3, #9]
 800dbce:	b2db      	uxtb	r3, r3
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	d131      	bne.n	800dc38 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dbd4:	4b1c      	ldr	r3, [pc, #112]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbd6:	7a5b      	ldrb	r3, [r3, #9]
 800dbd8:	b2db      	uxtb	r3, r3
 800dbda:	461a      	mov	r2, r3
 800dbdc:	4b1a      	ldr	r3, [pc, #104]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbde:	2100      	movs	r1, #0
 800dbe0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dbe2:	4b19      	ldr	r3, [pc, #100]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbe4:	7a5b      	ldrb	r3, [r3, #9]
 800dbe6:	b2db      	uxtb	r3, r3
 800dbe8:	4a17      	ldr	r2, [pc, #92]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	68fa      	ldr	r2, [r7, #12]
 800dbf0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dbf2:	4b15      	ldr	r3, [pc, #84]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbf4:	7a5b      	ldrb	r3, [r3, #9]
 800dbf6:	b2db      	uxtb	r3, r3
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	4b13      	ldr	r3, [pc, #76]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dbfc:	4413      	add	r3, r2
 800dbfe:	79fa      	ldrb	r2, [r7, #7]
 800dc00:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dc02:	4b11      	ldr	r3, [pc, #68]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dc04:	7a5b      	ldrb	r3, [r3, #9]
 800dc06:	b2db      	uxtb	r3, r3
 800dc08:	1c5a      	adds	r2, r3, #1
 800dc0a:	b2d1      	uxtb	r1, r2
 800dc0c:	4a0e      	ldr	r2, [pc, #56]	; (800dc48 <FATFS_LinkDriverEx+0x94>)
 800dc0e:	7251      	strb	r1, [r2, #9]
 800dc10:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dc12:	7dbb      	ldrb	r3, [r7, #22]
 800dc14:	3330      	adds	r3, #48	; 0x30
 800dc16:	b2da      	uxtb	r2, r3
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dc1c:	68bb      	ldr	r3, [r7, #8]
 800dc1e:	3301      	adds	r3, #1
 800dc20:	223a      	movs	r2, #58	; 0x3a
 800dc22:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	3302      	adds	r3, #2
 800dc28:	222f      	movs	r2, #47	; 0x2f
 800dc2a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	3303      	adds	r3, #3
 800dc30:	2200      	movs	r2, #0
 800dc32:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dc34:	2300      	movs	r3, #0
 800dc36:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	371c      	adds	r7, #28
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
 800dc46:	bf00      	nop
 800dc48:	200003f0 	.word	0x200003f0

0800dc4c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b082      	sub	sp, #8
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dc56:	2200      	movs	r2, #0
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f7ff ffaa 	bl	800dbb4 <FATFS_LinkDriverEx>
 800dc60:	4603      	mov	r3, r0
}
 800dc62:	4618      	mov	r0, r3
 800dc64:	3708      	adds	r7, #8
 800dc66:	46bd      	mov	sp, r7
 800dc68:	bd80      	pop	{r7, pc}
	...

0800dc6c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800dc6c:	b480      	push	{r7}
 800dc6e:	b085      	sub	sp, #20
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	4603      	mov	r3, r0
 800dc74:	6039      	str	r1, [r7, #0]
 800dc76:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800dc78:	88fb      	ldrh	r3, [r7, #6]
 800dc7a:	2b7f      	cmp	r3, #127	; 0x7f
 800dc7c:	d802      	bhi.n	800dc84 <ff_convert+0x18>
		c = chr;
 800dc7e:	88fb      	ldrh	r3, [r7, #6]
 800dc80:	81fb      	strh	r3, [r7, #14]
 800dc82:	e025      	b.n	800dcd0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d00b      	beq.n	800dca2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	2bff      	cmp	r3, #255	; 0xff
 800dc8e:	d805      	bhi.n	800dc9c <ff_convert+0x30>
 800dc90:	88fb      	ldrh	r3, [r7, #6]
 800dc92:	3b80      	subs	r3, #128	; 0x80
 800dc94:	4a12      	ldr	r2, [pc, #72]	; (800dce0 <ff_convert+0x74>)
 800dc96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc9a:	e000      	b.n	800dc9e <ff_convert+0x32>
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	81fb      	strh	r3, [r7, #14]
 800dca0:	e016      	b.n	800dcd0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800dca2:	2300      	movs	r3, #0
 800dca4:	81fb      	strh	r3, [r7, #14]
 800dca6:	e009      	b.n	800dcbc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800dca8:	89fb      	ldrh	r3, [r7, #14]
 800dcaa:	4a0d      	ldr	r2, [pc, #52]	; (800dce0 <ff_convert+0x74>)
 800dcac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dcb0:	88fa      	ldrh	r2, [r7, #6]
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d006      	beq.n	800dcc4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800dcb6:	89fb      	ldrh	r3, [r7, #14]
 800dcb8:	3301      	adds	r3, #1
 800dcba:	81fb      	strh	r3, [r7, #14]
 800dcbc:	89fb      	ldrh	r3, [r7, #14]
 800dcbe:	2b7f      	cmp	r3, #127	; 0x7f
 800dcc0:	d9f2      	bls.n	800dca8 <ff_convert+0x3c>
 800dcc2:	e000      	b.n	800dcc6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800dcc4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800dcc6:	89fb      	ldrh	r3, [r7, #14]
 800dcc8:	3380      	adds	r3, #128	; 0x80
 800dcca:	b29b      	uxth	r3, r3
 800dccc:	b2db      	uxtb	r3, r3
 800dcce:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800dcd0:	89fb      	ldrh	r3, [r7, #14]
}
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	3714      	adds	r7, #20
 800dcd6:	46bd      	mov	sp, r7
 800dcd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcdc:	4770      	bx	lr
 800dcde:	bf00      	nop
 800dce0:	0800ea10 	.word	0x0800ea10

0800dce4 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800dce4:	b480      	push	{r7}
 800dce6:	b087      	sub	sp, #28
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	4603      	mov	r3, r0
 800dcec:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800dcee:	88fb      	ldrh	r3, [r7, #6]
 800dcf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dcf4:	d201      	bcs.n	800dcfa <ff_wtoupper+0x16>
 800dcf6:	4b3e      	ldr	r3, [pc, #248]	; (800ddf0 <ff_wtoupper+0x10c>)
 800dcf8:	e000      	b.n	800dcfc <ff_wtoupper+0x18>
 800dcfa:	4b3e      	ldr	r3, [pc, #248]	; (800ddf4 <ff_wtoupper+0x110>)
 800dcfc:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	1c9a      	adds	r2, r3, #2
 800dd02:	617a      	str	r2, [r7, #20]
 800dd04:	881b      	ldrh	r3, [r3, #0]
 800dd06:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800dd08:	8a7b      	ldrh	r3, [r7, #18]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d068      	beq.n	800dde0 <ff_wtoupper+0xfc>
 800dd0e:	88fa      	ldrh	r2, [r7, #6]
 800dd10:	8a7b      	ldrh	r3, [r7, #18]
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d364      	bcc.n	800dde0 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800dd16:	697b      	ldr	r3, [r7, #20]
 800dd18:	1c9a      	adds	r2, r3, #2
 800dd1a:	617a      	str	r2, [r7, #20]
 800dd1c:	881b      	ldrh	r3, [r3, #0]
 800dd1e:	823b      	strh	r3, [r7, #16]
 800dd20:	8a3b      	ldrh	r3, [r7, #16]
 800dd22:	0a1b      	lsrs	r3, r3, #8
 800dd24:	81fb      	strh	r3, [r7, #14]
 800dd26:	8a3b      	ldrh	r3, [r7, #16]
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800dd2c:	88fa      	ldrh	r2, [r7, #6]
 800dd2e:	8a79      	ldrh	r1, [r7, #18]
 800dd30:	8a3b      	ldrh	r3, [r7, #16]
 800dd32:	440b      	add	r3, r1
 800dd34:	429a      	cmp	r2, r3
 800dd36:	da49      	bge.n	800ddcc <ff_wtoupper+0xe8>
			switch (cmd) {
 800dd38:	89fb      	ldrh	r3, [r7, #14]
 800dd3a:	2b08      	cmp	r3, #8
 800dd3c:	d84f      	bhi.n	800ddde <ff_wtoupper+0xfa>
 800dd3e:	a201      	add	r2, pc, #4	; (adr r2, 800dd44 <ff_wtoupper+0x60>)
 800dd40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd44:	0800dd69 	.word	0x0800dd69
 800dd48:	0800dd7b 	.word	0x0800dd7b
 800dd4c:	0800dd91 	.word	0x0800dd91
 800dd50:	0800dd99 	.word	0x0800dd99
 800dd54:	0800dda1 	.word	0x0800dda1
 800dd58:	0800dda9 	.word	0x0800dda9
 800dd5c:	0800ddb1 	.word	0x0800ddb1
 800dd60:	0800ddb9 	.word	0x0800ddb9
 800dd64:	0800ddc1 	.word	0x0800ddc1
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800dd68:	88fa      	ldrh	r2, [r7, #6]
 800dd6a:	8a7b      	ldrh	r3, [r7, #18]
 800dd6c:	1ad3      	subs	r3, r2, r3
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	697a      	ldr	r2, [r7, #20]
 800dd72:	4413      	add	r3, r2
 800dd74:	881b      	ldrh	r3, [r3, #0]
 800dd76:	80fb      	strh	r3, [r7, #6]
 800dd78:	e027      	b.n	800ddca <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800dd7a:	88fa      	ldrh	r2, [r7, #6]
 800dd7c:	8a7b      	ldrh	r3, [r7, #18]
 800dd7e:	1ad3      	subs	r3, r2, r3
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	f003 0301 	and.w	r3, r3, #1
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	88fa      	ldrh	r2, [r7, #6]
 800dd8a:	1ad3      	subs	r3, r2, r3
 800dd8c:	80fb      	strh	r3, [r7, #6]
 800dd8e:	e01c      	b.n	800ddca <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800dd90:	88fb      	ldrh	r3, [r7, #6]
 800dd92:	3b10      	subs	r3, #16
 800dd94:	80fb      	strh	r3, [r7, #6]
 800dd96:	e018      	b.n	800ddca <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800dd98:	88fb      	ldrh	r3, [r7, #6]
 800dd9a:	3b20      	subs	r3, #32
 800dd9c:	80fb      	strh	r3, [r7, #6]
 800dd9e:	e014      	b.n	800ddca <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800dda0:	88fb      	ldrh	r3, [r7, #6]
 800dda2:	3b30      	subs	r3, #48	; 0x30
 800dda4:	80fb      	strh	r3, [r7, #6]
 800dda6:	e010      	b.n	800ddca <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800dda8:	88fb      	ldrh	r3, [r7, #6]
 800ddaa:	3b1a      	subs	r3, #26
 800ddac:	80fb      	strh	r3, [r7, #6]
 800ddae:	e00c      	b.n	800ddca <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ddb0:	88fb      	ldrh	r3, [r7, #6]
 800ddb2:	3308      	adds	r3, #8
 800ddb4:	80fb      	strh	r3, [r7, #6]
 800ddb6:	e008      	b.n	800ddca <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ddb8:	88fb      	ldrh	r3, [r7, #6]
 800ddba:	3b50      	subs	r3, #80	; 0x50
 800ddbc:	80fb      	strh	r3, [r7, #6]
 800ddbe:	e004      	b.n	800ddca <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ddc0:	88fb      	ldrh	r3, [r7, #6]
 800ddc2:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ddc6:	80fb      	strh	r3, [r7, #6]
 800ddc8:	bf00      	nop
			}
			break;
 800ddca:	e008      	b.n	800ddde <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ddcc:	89fb      	ldrh	r3, [r7, #14]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d195      	bne.n	800dcfe <ff_wtoupper+0x1a>
 800ddd2:	8a3b      	ldrh	r3, [r7, #16]
 800ddd4:	005b      	lsls	r3, r3, #1
 800ddd6:	697a      	ldr	r2, [r7, #20]
 800ddd8:	4413      	add	r3, r2
 800ddda:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800dddc:	e78f      	b.n	800dcfe <ff_wtoupper+0x1a>
			break;
 800ddde:	bf00      	nop
	}

	return chr;
 800dde0:	88fb      	ldrh	r3, [r7, #6]
}
 800dde2:	4618      	mov	r0, r3
 800dde4:	371c      	adds	r7, #28
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	0800eb10 	.word	0x0800eb10
 800ddf4:	0800ed04 	.word	0x0800ed04

0800ddf8 <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800ddf8:	b580      	push	{r7, lr}
 800ddfa:	b082      	sub	sp, #8
 800ddfc:	af00      	add	r7, sp, #0
 800ddfe:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f000 f83b 	bl	800de7c <malloc>
 800de06:	4603      	mov	r3, r0
}
 800de08:	4618      	mov	r0, r3
 800de0a:	3708      	adds	r7, #8
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 f837 	bl	800de8c <free>
}
 800de1e:	bf00      	nop
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}
	...

0800de28 <__errno>:
 800de28:	4b01      	ldr	r3, [pc, #4]	; (800de30 <__errno+0x8>)
 800de2a:	6818      	ldr	r0, [r3, #0]
 800de2c:	4770      	bx	lr
 800de2e:	bf00      	nop
 800de30:	2000000c 	.word	0x2000000c

0800de34 <__libc_init_array>:
 800de34:	b570      	push	{r4, r5, r6, lr}
 800de36:	4d0d      	ldr	r5, [pc, #52]	; (800de6c <__libc_init_array+0x38>)
 800de38:	2600      	movs	r6, #0
 800de3a:	4c0d      	ldr	r4, [pc, #52]	; (800de70 <__libc_init_array+0x3c>)
 800de3c:	1b64      	subs	r4, r4, r5
 800de3e:	10a4      	asrs	r4, r4, #2
 800de40:	42a6      	cmp	r6, r4
 800de42:	d109      	bne.n	800de58 <__libc_init_array+0x24>
 800de44:	4d0b      	ldr	r5, [pc, #44]	; (800de74 <__libc_init_array+0x40>)
 800de46:	2600      	movs	r6, #0
 800de48:	4c0b      	ldr	r4, [pc, #44]	; (800de78 <__libc_init_array+0x44>)
 800de4a:	f000 fcab 	bl	800e7a4 <_init>
 800de4e:	1b64      	subs	r4, r4, r5
 800de50:	10a4      	asrs	r4, r4, #2
 800de52:	42a6      	cmp	r6, r4
 800de54:	d105      	bne.n	800de62 <__libc_init_array+0x2e>
 800de56:	bd70      	pop	{r4, r5, r6, pc}
 800de58:	f855 3b04 	ldr.w	r3, [r5], #4
 800de5c:	3601      	adds	r6, #1
 800de5e:	4798      	blx	r3
 800de60:	e7ee      	b.n	800de40 <__libc_init_array+0xc>
 800de62:	f855 3b04 	ldr.w	r3, [r5], #4
 800de66:	3601      	adds	r6, #1
 800de68:	4798      	blx	r3
 800de6a:	e7f2      	b.n	800de52 <__libc_init_array+0x1e>
 800de6c:	0800edfc 	.word	0x0800edfc
 800de70:	0800edfc 	.word	0x0800edfc
 800de74:	0800edfc 	.word	0x0800edfc
 800de78:	0800ee00 	.word	0x0800ee00

0800de7c <malloc>:
 800de7c:	4b02      	ldr	r3, [pc, #8]	; (800de88 <malloc+0xc>)
 800de7e:	4601      	mov	r1, r0
 800de80:	6818      	ldr	r0, [r3, #0]
 800de82:	f000 b87f 	b.w	800df84 <_malloc_r>
 800de86:	bf00      	nop
 800de88:	2000000c 	.word	0x2000000c

0800de8c <free>:
 800de8c:	4b02      	ldr	r3, [pc, #8]	; (800de98 <free+0xc>)
 800de8e:	4601      	mov	r1, r0
 800de90:	6818      	ldr	r0, [r3, #0]
 800de92:	f000 b80b 	b.w	800deac <_free_r>
 800de96:	bf00      	nop
 800de98:	2000000c 	.word	0x2000000c

0800de9c <memset>:
 800de9c:	4402      	add	r2, r0
 800de9e:	4603      	mov	r3, r0
 800dea0:	4293      	cmp	r3, r2
 800dea2:	d100      	bne.n	800dea6 <memset+0xa>
 800dea4:	4770      	bx	lr
 800dea6:	f803 1b01 	strb.w	r1, [r3], #1
 800deaa:	e7f9      	b.n	800dea0 <memset+0x4>

0800deac <_free_r>:
 800deac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800deae:	2900      	cmp	r1, #0
 800deb0:	d043      	beq.n	800df3a <_free_r+0x8e>
 800deb2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800deb6:	1f0c      	subs	r4, r1, #4
 800deb8:	9001      	str	r0, [sp, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	bfb8      	it	lt
 800debe:	18e4      	addlt	r4, r4, r3
 800dec0:	f000 f904 	bl	800e0cc <__malloc_lock>
 800dec4:	4a1e      	ldr	r2, [pc, #120]	; (800df40 <_free_r+0x94>)
 800dec6:	9801      	ldr	r0, [sp, #4]
 800dec8:	6813      	ldr	r3, [r2, #0]
 800deca:	b933      	cbnz	r3, 800deda <_free_r+0x2e>
 800decc:	6063      	str	r3, [r4, #4]
 800dece:	6014      	str	r4, [r2, #0]
 800ded0:	b003      	add	sp, #12
 800ded2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ded6:	f000 b8ff 	b.w	800e0d8 <__malloc_unlock>
 800deda:	42a3      	cmp	r3, r4
 800dedc:	d908      	bls.n	800def0 <_free_r+0x44>
 800dede:	6825      	ldr	r5, [r4, #0]
 800dee0:	1961      	adds	r1, r4, r5
 800dee2:	428b      	cmp	r3, r1
 800dee4:	bf01      	itttt	eq
 800dee6:	6819      	ldreq	r1, [r3, #0]
 800dee8:	685b      	ldreq	r3, [r3, #4]
 800deea:	1949      	addeq	r1, r1, r5
 800deec:	6021      	streq	r1, [r4, #0]
 800deee:	e7ed      	b.n	800decc <_free_r+0x20>
 800def0:	461a      	mov	r2, r3
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	b10b      	cbz	r3, 800defa <_free_r+0x4e>
 800def6:	42a3      	cmp	r3, r4
 800def8:	d9fa      	bls.n	800def0 <_free_r+0x44>
 800defa:	6811      	ldr	r1, [r2, #0]
 800defc:	1855      	adds	r5, r2, r1
 800defe:	42a5      	cmp	r5, r4
 800df00:	d10b      	bne.n	800df1a <_free_r+0x6e>
 800df02:	6824      	ldr	r4, [r4, #0]
 800df04:	4421      	add	r1, r4
 800df06:	1854      	adds	r4, r2, r1
 800df08:	6011      	str	r1, [r2, #0]
 800df0a:	42a3      	cmp	r3, r4
 800df0c:	d1e0      	bne.n	800ded0 <_free_r+0x24>
 800df0e:	681c      	ldr	r4, [r3, #0]
 800df10:	685b      	ldr	r3, [r3, #4]
 800df12:	4421      	add	r1, r4
 800df14:	6053      	str	r3, [r2, #4]
 800df16:	6011      	str	r1, [r2, #0]
 800df18:	e7da      	b.n	800ded0 <_free_r+0x24>
 800df1a:	d902      	bls.n	800df22 <_free_r+0x76>
 800df1c:	230c      	movs	r3, #12
 800df1e:	6003      	str	r3, [r0, #0]
 800df20:	e7d6      	b.n	800ded0 <_free_r+0x24>
 800df22:	6825      	ldr	r5, [r4, #0]
 800df24:	1961      	adds	r1, r4, r5
 800df26:	428b      	cmp	r3, r1
 800df28:	bf02      	ittt	eq
 800df2a:	6819      	ldreq	r1, [r3, #0]
 800df2c:	685b      	ldreq	r3, [r3, #4]
 800df2e:	1949      	addeq	r1, r1, r5
 800df30:	6063      	str	r3, [r4, #4]
 800df32:	bf08      	it	eq
 800df34:	6021      	streq	r1, [r4, #0]
 800df36:	6054      	str	r4, [r2, #4]
 800df38:	e7ca      	b.n	800ded0 <_free_r+0x24>
 800df3a:	b003      	add	sp, #12
 800df3c:	bd30      	pop	{r4, r5, pc}
 800df3e:	bf00      	nop
 800df40:	200003fc 	.word	0x200003fc

0800df44 <sbrk_aligned>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	4e0e      	ldr	r6, [pc, #56]	; (800df80 <sbrk_aligned+0x3c>)
 800df48:	460c      	mov	r4, r1
 800df4a:	4605      	mov	r5, r0
 800df4c:	6831      	ldr	r1, [r6, #0]
 800df4e:	b911      	cbnz	r1, 800df56 <sbrk_aligned+0x12>
 800df50:	f000 f88c 	bl	800e06c <_sbrk_r>
 800df54:	6030      	str	r0, [r6, #0]
 800df56:	4621      	mov	r1, r4
 800df58:	4628      	mov	r0, r5
 800df5a:	f000 f887 	bl	800e06c <_sbrk_r>
 800df5e:	1c43      	adds	r3, r0, #1
 800df60:	d00a      	beq.n	800df78 <sbrk_aligned+0x34>
 800df62:	1cc4      	adds	r4, r0, #3
 800df64:	f024 0403 	bic.w	r4, r4, #3
 800df68:	42a0      	cmp	r0, r4
 800df6a:	d007      	beq.n	800df7c <sbrk_aligned+0x38>
 800df6c:	1a21      	subs	r1, r4, r0
 800df6e:	4628      	mov	r0, r5
 800df70:	f000 f87c 	bl	800e06c <_sbrk_r>
 800df74:	3001      	adds	r0, #1
 800df76:	d101      	bne.n	800df7c <sbrk_aligned+0x38>
 800df78:	f04f 34ff 	mov.w	r4, #4294967295
 800df7c:	4620      	mov	r0, r4
 800df7e:	bd70      	pop	{r4, r5, r6, pc}
 800df80:	20000400 	.word	0x20000400

0800df84 <_malloc_r>:
 800df84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df88:	1ccd      	adds	r5, r1, #3
 800df8a:	4607      	mov	r7, r0
 800df8c:	f025 0503 	bic.w	r5, r5, #3
 800df90:	3508      	adds	r5, #8
 800df92:	2d0c      	cmp	r5, #12
 800df94:	bf38      	it	cc
 800df96:	250c      	movcc	r5, #12
 800df98:	2d00      	cmp	r5, #0
 800df9a:	db01      	blt.n	800dfa0 <_malloc_r+0x1c>
 800df9c:	42a9      	cmp	r1, r5
 800df9e:	d905      	bls.n	800dfac <_malloc_r+0x28>
 800dfa0:	230c      	movs	r3, #12
 800dfa2:	2600      	movs	r6, #0
 800dfa4:	603b      	str	r3, [r7, #0]
 800dfa6:	4630      	mov	r0, r6
 800dfa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dfac:	4e2e      	ldr	r6, [pc, #184]	; (800e068 <_malloc_r+0xe4>)
 800dfae:	f000 f88d 	bl	800e0cc <__malloc_lock>
 800dfb2:	6833      	ldr	r3, [r6, #0]
 800dfb4:	461c      	mov	r4, r3
 800dfb6:	bb34      	cbnz	r4, 800e006 <_malloc_r+0x82>
 800dfb8:	4629      	mov	r1, r5
 800dfba:	4638      	mov	r0, r7
 800dfbc:	f7ff ffc2 	bl	800df44 <sbrk_aligned>
 800dfc0:	1c43      	adds	r3, r0, #1
 800dfc2:	4604      	mov	r4, r0
 800dfc4:	d14d      	bne.n	800e062 <_malloc_r+0xde>
 800dfc6:	6834      	ldr	r4, [r6, #0]
 800dfc8:	4626      	mov	r6, r4
 800dfca:	2e00      	cmp	r6, #0
 800dfcc:	d140      	bne.n	800e050 <_malloc_r+0xcc>
 800dfce:	6823      	ldr	r3, [r4, #0]
 800dfd0:	4631      	mov	r1, r6
 800dfd2:	4638      	mov	r0, r7
 800dfd4:	eb04 0803 	add.w	r8, r4, r3
 800dfd8:	f000 f848 	bl	800e06c <_sbrk_r>
 800dfdc:	4580      	cmp	r8, r0
 800dfde:	d13a      	bne.n	800e056 <_malloc_r+0xd2>
 800dfe0:	6821      	ldr	r1, [r4, #0]
 800dfe2:	3503      	adds	r5, #3
 800dfe4:	4638      	mov	r0, r7
 800dfe6:	1a6d      	subs	r5, r5, r1
 800dfe8:	f025 0503 	bic.w	r5, r5, #3
 800dfec:	3508      	adds	r5, #8
 800dfee:	2d0c      	cmp	r5, #12
 800dff0:	bf38      	it	cc
 800dff2:	250c      	movcc	r5, #12
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7ff ffa5 	bl	800df44 <sbrk_aligned>
 800dffa:	3001      	adds	r0, #1
 800dffc:	d02b      	beq.n	800e056 <_malloc_r+0xd2>
 800dffe:	6823      	ldr	r3, [r4, #0]
 800e000:	442b      	add	r3, r5
 800e002:	6023      	str	r3, [r4, #0]
 800e004:	e00e      	b.n	800e024 <_malloc_r+0xa0>
 800e006:	6822      	ldr	r2, [r4, #0]
 800e008:	1b52      	subs	r2, r2, r5
 800e00a:	d41e      	bmi.n	800e04a <_malloc_r+0xc6>
 800e00c:	2a0b      	cmp	r2, #11
 800e00e:	d916      	bls.n	800e03e <_malloc_r+0xba>
 800e010:	1961      	adds	r1, r4, r5
 800e012:	42a3      	cmp	r3, r4
 800e014:	6025      	str	r5, [r4, #0]
 800e016:	bf18      	it	ne
 800e018:	6059      	strne	r1, [r3, #4]
 800e01a:	6863      	ldr	r3, [r4, #4]
 800e01c:	bf08      	it	eq
 800e01e:	6031      	streq	r1, [r6, #0]
 800e020:	5162      	str	r2, [r4, r5]
 800e022:	604b      	str	r3, [r1, #4]
 800e024:	f104 060b 	add.w	r6, r4, #11
 800e028:	4638      	mov	r0, r7
 800e02a:	f000 f855 	bl	800e0d8 <__malloc_unlock>
 800e02e:	1d23      	adds	r3, r4, #4
 800e030:	f026 0607 	bic.w	r6, r6, #7
 800e034:	1af2      	subs	r2, r6, r3
 800e036:	d0b6      	beq.n	800dfa6 <_malloc_r+0x22>
 800e038:	1b9b      	subs	r3, r3, r6
 800e03a:	50a3      	str	r3, [r4, r2]
 800e03c:	e7b3      	b.n	800dfa6 <_malloc_r+0x22>
 800e03e:	6862      	ldr	r2, [r4, #4]
 800e040:	42a3      	cmp	r3, r4
 800e042:	bf0c      	ite	eq
 800e044:	6032      	streq	r2, [r6, #0]
 800e046:	605a      	strne	r2, [r3, #4]
 800e048:	e7ec      	b.n	800e024 <_malloc_r+0xa0>
 800e04a:	4623      	mov	r3, r4
 800e04c:	6864      	ldr	r4, [r4, #4]
 800e04e:	e7b2      	b.n	800dfb6 <_malloc_r+0x32>
 800e050:	4634      	mov	r4, r6
 800e052:	6876      	ldr	r6, [r6, #4]
 800e054:	e7b9      	b.n	800dfca <_malloc_r+0x46>
 800e056:	230c      	movs	r3, #12
 800e058:	4638      	mov	r0, r7
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	f000 f83c 	bl	800e0d8 <__malloc_unlock>
 800e060:	e7a1      	b.n	800dfa6 <_malloc_r+0x22>
 800e062:	6025      	str	r5, [r4, #0]
 800e064:	e7de      	b.n	800e024 <_malloc_r+0xa0>
 800e066:	bf00      	nop
 800e068:	200003fc 	.word	0x200003fc

0800e06c <_sbrk_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	2300      	movs	r3, #0
 800e070:	4d05      	ldr	r5, [pc, #20]	; (800e088 <_sbrk_r+0x1c>)
 800e072:	4604      	mov	r4, r0
 800e074:	4608      	mov	r0, r1
 800e076:	602b      	str	r3, [r5, #0]
 800e078:	f7f3 f828 	bl	80010cc <_sbrk>
 800e07c:	1c43      	adds	r3, r0, #1
 800e07e:	d102      	bne.n	800e086 <_sbrk_r+0x1a>
 800e080:	682b      	ldr	r3, [r5, #0]
 800e082:	b103      	cbz	r3, 800e086 <_sbrk_r+0x1a>
 800e084:	6023      	str	r3, [r4, #0]
 800e086:	bd38      	pop	{r3, r4, r5, pc}
 800e088:	20000404 	.word	0x20000404

0800e08c <siprintf>:
 800e08c:	b40e      	push	{r1, r2, r3}
 800e08e:	b500      	push	{lr}
 800e090:	b09c      	sub	sp, #112	; 0x70
 800e092:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e096:	ab1d      	add	r3, sp, #116	; 0x74
 800e098:	9002      	str	r0, [sp, #8]
 800e09a:	9006      	str	r0, [sp, #24]
 800e09c:	9107      	str	r1, [sp, #28]
 800e09e:	9104      	str	r1, [sp, #16]
 800e0a0:	4808      	ldr	r0, [pc, #32]	; (800e0c4 <siprintf+0x38>)
 800e0a2:	4909      	ldr	r1, [pc, #36]	; (800e0c8 <siprintf+0x3c>)
 800e0a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e0a8:	9105      	str	r1, [sp, #20]
 800e0aa:	a902      	add	r1, sp, #8
 800e0ac:	6800      	ldr	r0, [r0, #0]
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	f000 f874 	bl	800e19c <_svfiprintf_r>
 800e0b4:	9b02      	ldr	r3, [sp, #8]
 800e0b6:	2200      	movs	r2, #0
 800e0b8:	701a      	strb	r2, [r3, #0]
 800e0ba:	b01c      	add	sp, #112	; 0x70
 800e0bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e0c0:	b003      	add	sp, #12
 800e0c2:	4770      	bx	lr
 800e0c4:	2000000c 	.word	0x2000000c
 800e0c8:	ffff0208 	.word	0xffff0208

0800e0cc <__malloc_lock>:
 800e0cc:	4801      	ldr	r0, [pc, #4]	; (800e0d4 <__malloc_lock+0x8>)
 800e0ce:	f000 bafb 	b.w	800e6c8 <__retarget_lock_acquire_recursive>
 800e0d2:	bf00      	nop
 800e0d4:	20000408 	.word	0x20000408

0800e0d8 <__malloc_unlock>:
 800e0d8:	4801      	ldr	r0, [pc, #4]	; (800e0e0 <__malloc_unlock+0x8>)
 800e0da:	f000 baf6 	b.w	800e6ca <__retarget_lock_release_recursive>
 800e0de:	bf00      	nop
 800e0e0:	20000408 	.word	0x20000408

0800e0e4 <__ssputs_r>:
 800e0e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0e8:	688e      	ldr	r6, [r1, #8]
 800e0ea:	4682      	mov	sl, r0
 800e0ec:	460c      	mov	r4, r1
 800e0ee:	4690      	mov	r8, r2
 800e0f0:	429e      	cmp	r6, r3
 800e0f2:	461f      	mov	r7, r3
 800e0f4:	d838      	bhi.n	800e168 <__ssputs_r+0x84>
 800e0f6:	898a      	ldrh	r2, [r1, #12]
 800e0f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e0fc:	d032      	beq.n	800e164 <__ssputs_r+0x80>
 800e0fe:	6825      	ldr	r5, [r4, #0]
 800e100:	3301      	adds	r3, #1
 800e102:	6909      	ldr	r1, [r1, #16]
 800e104:	eba5 0901 	sub.w	r9, r5, r1
 800e108:	6965      	ldr	r5, [r4, #20]
 800e10a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e10e:	444b      	add	r3, r9
 800e110:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e114:	106d      	asrs	r5, r5, #1
 800e116:	429d      	cmp	r5, r3
 800e118:	bf38      	it	cc
 800e11a:	461d      	movcc	r5, r3
 800e11c:	0553      	lsls	r3, r2, #21
 800e11e:	d531      	bpl.n	800e184 <__ssputs_r+0xa0>
 800e120:	4629      	mov	r1, r5
 800e122:	f7ff ff2f 	bl	800df84 <_malloc_r>
 800e126:	4606      	mov	r6, r0
 800e128:	b950      	cbnz	r0, 800e140 <__ssputs_r+0x5c>
 800e12a:	230c      	movs	r3, #12
 800e12c:	f04f 30ff 	mov.w	r0, #4294967295
 800e130:	f8ca 3000 	str.w	r3, [sl]
 800e134:	89a3      	ldrh	r3, [r4, #12]
 800e136:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e13a:	81a3      	strh	r3, [r4, #12]
 800e13c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e140:	464a      	mov	r2, r9
 800e142:	6921      	ldr	r1, [r4, #16]
 800e144:	f000 fad0 	bl	800e6e8 <memcpy>
 800e148:	89a3      	ldrh	r3, [r4, #12]
 800e14a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e14e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e152:	81a3      	strh	r3, [r4, #12]
 800e154:	6126      	str	r6, [r4, #16]
 800e156:	444e      	add	r6, r9
 800e158:	6165      	str	r5, [r4, #20]
 800e15a:	eba5 0509 	sub.w	r5, r5, r9
 800e15e:	6026      	str	r6, [r4, #0]
 800e160:	463e      	mov	r6, r7
 800e162:	60a5      	str	r5, [r4, #8]
 800e164:	42be      	cmp	r6, r7
 800e166:	d900      	bls.n	800e16a <__ssputs_r+0x86>
 800e168:	463e      	mov	r6, r7
 800e16a:	4632      	mov	r2, r6
 800e16c:	4641      	mov	r1, r8
 800e16e:	6820      	ldr	r0, [r4, #0]
 800e170:	f000 fac7 	bl	800e702 <memmove>
 800e174:	68a3      	ldr	r3, [r4, #8]
 800e176:	2000      	movs	r0, #0
 800e178:	1b9b      	subs	r3, r3, r6
 800e17a:	60a3      	str	r3, [r4, #8]
 800e17c:	6823      	ldr	r3, [r4, #0]
 800e17e:	4433      	add	r3, r6
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	e7db      	b.n	800e13c <__ssputs_r+0x58>
 800e184:	462a      	mov	r2, r5
 800e186:	f000 fad6 	bl	800e736 <_realloc_r>
 800e18a:	4606      	mov	r6, r0
 800e18c:	2800      	cmp	r0, #0
 800e18e:	d1e1      	bne.n	800e154 <__ssputs_r+0x70>
 800e190:	6921      	ldr	r1, [r4, #16]
 800e192:	4650      	mov	r0, sl
 800e194:	f7ff fe8a 	bl	800deac <_free_r>
 800e198:	e7c7      	b.n	800e12a <__ssputs_r+0x46>
	...

0800e19c <_svfiprintf_r>:
 800e19c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1a0:	4698      	mov	r8, r3
 800e1a2:	898b      	ldrh	r3, [r1, #12]
 800e1a4:	b09d      	sub	sp, #116	; 0x74
 800e1a6:	4607      	mov	r7, r0
 800e1a8:	061b      	lsls	r3, r3, #24
 800e1aa:	460d      	mov	r5, r1
 800e1ac:	4614      	mov	r4, r2
 800e1ae:	d50e      	bpl.n	800e1ce <_svfiprintf_r+0x32>
 800e1b0:	690b      	ldr	r3, [r1, #16]
 800e1b2:	b963      	cbnz	r3, 800e1ce <_svfiprintf_r+0x32>
 800e1b4:	2140      	movs	r1, #64	; 0x40
 800e1b6:	f7ff fee5 	bl	800df84 <_malloc_r>
 800e1ba:	6028      	str	r0, [r5, #0]
 800e1bc:	6128      	str	r0, [r5, #16]
 800e1be:	b920      	cbnz	r0, 800e1ca <_svfiprintf_r+0x2e>
 800e1c0:	230c      	movs	r3, #12
 800e1c2:	603b      	str	r3, [r7, #0]
 800e1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e1c8:	e0d1      	b.n	800e36e <_svfiprintf_r+0x1d2>
 800e1ca:	2340      	movs	r3, #64	; 0x40
 800e1cc:	616b      	str	r3, [r5, #20]
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e1d4:	f04f 0901 	mov.w	r9, #1
 800e1d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800e388 <_svfiprintf_r+0x1ec>
 800e1dc:	9309      	str	r3, [sp, #36]	; 0x24
 800e1de:	2320      	movs	r3, #32
 800e1e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e1e4:	2330      	movs	r3, #48	; 0x30
 800e1e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e1ea:	4623      	mov	r3, r4
 800e1ec:	469a      	mov	sl, r3
 800e1ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e1f2:	b10a      	cbz	r2, 800e1f8 <_svfiprintf_r+0x5c>
 800e1f4:	2a25      	cmp	r2, #37	; 0x25
 800e1f6:	d1f9      	bne.n	800e1ec <_svfiprintf_r+0x50>
 800e1f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e1fc:	d00b      	beq.n	800e216 <_svfiprintf_r+0x7a>
 800e1fe:	465b      	mov	r3, fp
 800e200:	4622      	mov	r2, r4
 800e202:	4629      	mov	r1, r5
 800e204:	4638      	mov	r0, r7
 800e206:	f7ff ff6d 	bl	800e0e4 <__ssputs_r>
 800e20a:	3001      	adds	r0, #1
 800e20c:	f000 80aa 	beq.w	800e364 <_svfiprintf_r+0x1c8>
 800e210:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e212:	445a      	add	r2, fp
 800e214:	9209      	str	r2, [sp, #36]	; 0x24
 800e216:	f89a 3000 	ldrb.w	r3, [sl]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	f000 80a2 	beq.w	800e364 <_svfiprintf_r+0x1c8>
 800e220:	2300      	movs	r3, #0
 800e222:	f04f 32ff 	mov.w	r2, #4294967295
 800e226:	f10a 0a01 	add.w	sl, sl, #1
 800e22a:	9304      	str	r3, [sp, #16]
 800e22c:	9307      	str	r3, [sp, #28]
 800e22e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e232:	931a      	str	r3, [sp, #104]	; 0x68
 800e234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e238:	4654      	mov	r4, sl
 800e23a:	2205      	movs	r2, #5
 800e23c:	4852      	ldr	r0, [pc, #328]	; (800e388 <_svfiprintf_r+0x1ec>)
 800e23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e242:	f000 fa43 	bl	800e6cc <memchr>
 800e246:	9a04      	ldr	r2, [sp, #16]
 800e248:	b9d8      	cbnz	r0, 800e282 <_svfiprintf_r+0xe6>
 800e24a:	06d0      	lsls	r0, r2, #27
 800e24c:	bf44      	itt	mi
 800e24e:	2320      	movmi	r3, #32
 800e250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e254:	0711      	lsls	r1, r2, #28
 800e256:	bf44      	itt	mi
 800e258:	232b      	movmi	r3, #43	; 0x2b
 800e25a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e25e:	f89a 3000 	ldrb.w	r3, [sl]
 800e262:	2b2a      	cmp	r3, #42	; 0x2a
 800e264:	d015      	beq.n	800e292 <_svfiprintf_r+0xf6>
 800e266:	9a07      	ldr	r2, [sp, #28]
 800e268:	4654      	mov	r4, sl
 800e26a:	2000      	movs	r0, #0
 800e26c:	f04f 0c0a 	mov.w	ip, #10
 800e270:	4621      	mov	r1, r4
 800e272:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e276:	3b30      	subs	r3, #48	; 0x30
 800e278:	2b09      	cmp	r3, #9
 800e27a:	d94e      	bls.n	800e31a <_svfiprintf_r+0x17e>
 800e27c:	b1b0      	cbz	r0, 800e2ac <_svfiprintf_r+0x110>
 800e27e:	9207      	str	r2, [sp, #28]
 800e280:	e014      	b.n	800e2ac <_svfiprintf_r+0x110>
 800e282:	eba0 0308 	sub.w	r3, r0, r8
 800e286:	46a2      	mov	sl, r4
 800e288:	fa09 f303 	lsl.w	r3, r9, r3
 800e28c:	4313      	orrs	r3, r2
 800e28e:	9304      	str	r3, [sp, #16]
 800e290:	e7d2      	b.n	800e238 <_svfiprintf_r+0x9c>
 800e292:	9b03      	ldr	r3, [sp, #12]
 800e294:	1d19      	adds	r1, r3, #4
 800e296:	681b      	ldr	r3, [r3, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	9103      	str	r1, [sp, #12]
 800e29c:	bfbb      	ittet	lt
 800e29e:	425b      	neglt	r3, r3
 800e2a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e2a4:	9307      	strge	r3, [sp, #28]
 800e2a6:	9307      	strlt	r3, [sp, #28]
 800e2a8:	bfb8      	it	lt
 800e2aa:	9204      	strlt	r2, [sp, #16]
 800e2ac:	7823      	ldrb	r3, [r4, #0]
 800e2ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e2b0:	d10c      	bne.n	800e2cc <_svfiprintf_r+0x130>
 800e2b2:	7863      	ldrb	r3, [r4, #1]
 800e2b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e2b6:	d135      	bne.n	800e324 <_svfiprintf_r+0x188>
 800e2b8:	9b03      	ldr	r3, [sp, #12]
 800e2ba:	3402      	adds	r4, #2
 800e2bc:	1d1a      	adds	r2, r3, #4
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	9203      	str	r2, [sp, #12]
 800e2c4:	bfb8      	it	lt
 800e2c6:	f04f 33ff 	movlt.w	r3, #4294967295
 800e2ca:	9305      	str	r3, [sp, #20]
 800e2cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e398 <_svfiprintf_r+0x1fc>
 800e2d0:	2203      	movs	r2, #3
 800e2d2:	7821      	ldrb	r1, [r4, #0]
 800e2d4:	4650      	mov	r0, sl
 800e2d6:	f000 f9f9 	bl	800e6cc <memchr>
 800e2da:	b140      	cbz	r0, 800e2ee <_svfiprintf_r+0x152>
 800e2dc:	2340      	movs	r3, #64	; 0x40
 800e2de:	eba0 000a 	sub.w	r0, r0, sl
 800e2e2:	3401      	adds	r4, #1
 800e2e4:	fa03 f000 	lsl.w	r0, r3, r0
 800e2e8:	9b04      	ldr	r3, [sp, #16]
 800e2ea:	4303      	orrs	r3, r0
 800e2ec:	9304      	str	r3, [sp, #16]
 800e2ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2f2:	2206      	movs	r2, #6
 800e2f4:	4825      	ldr	r0, [pc, #148]	; (800e38c <_svfiprintf_r+0x1f0>)
 800e2f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e2fa:	f000 f9e7 	bl	800e6cc <memchr>
 800e2fe:	2800      	cmp	r0, #0
 800e300:	d038      	beq.n	800e374 <_svfiprintf_r+0x1d8>
 800e302:	4b23      	ldr	r3, [pc, #140]	; (800e390 <_svfiprintf_r+0x1f4>)
 800e304:	bb1b      	cbnz	r3, 800e34e <_svfiprintf_r+0x1b2>
 800e306:	9b03      	ldr	r3, [sp, #12]
 800e308:	3307      	adds	r3, #7
 800e30a:	f023 0307 	bic.w	r3, r3, #7
 800e30e:	3308      	adds	r3, #8
 800e310:	9303      	str	r3, [sp, #12]
 800e312:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e314:	4433      	add	r3, r6
 800e316:	9309      	str	r3, [sp, #36]	; 0x24
 800e318:	e767      	b.n	800e1ea <_svfiprintf_r+0x4e>
 800e31a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e31e:	460c      	mov	r4, r1
 800e320:	2001      	movs	r0, #1
 800e322:	e7a5      	b.n	800e270 <_svfiprintf_r+0xd4>
 800e324:	2300      	movs	r3, #0
 800e326:	3401      	adds	r4, #1
 800e328:	f04f 0c0a 	mov.w	ip, #10
 800e32c:	4619      	mov	r1, r3
 800e32e:	9305      	str	r3, [sp, #20]
 800e330:	4620      	mov	r0, r4
 800e332:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e336:	3a30      	subs	r2, #48	; 0x30
 800e338:	2a09      	cmp	r2, #9
 800e33a:	d903      	bls.n	800e344 <_svfiprintf_r+0x1a8>
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d0c5      	beq.n	800e2cc <_svfiprintf_r+0x130>
 800e340:	9105      	str	r1, [sp, #20]
 800e342:	e7c3      	b.n	800e2cc <_svfiprintf_r+0x130>
 800e344:	fb0c 2101 	mla	r1, ip, r1, r2
 800e348:	4604      	mov	r4, r0
 800e34a:	2301      	movs	r3, #1
 800e34c:	e7f0      	b.n	800e330 <_svfiprintf_r+0x194>
 800e34e:	ab03      	add	r3, sp, #12
 800e350:	462a      	mov	r2, r5
 800e352:	a904      	add	r1, sp, #16
 800e354:	4638      	mov	r0, r7
 800e356:	9300      	str	r3, [sp, #0]
 800e358:	4b0e      	ldr	r3, [pc, #56]	; (800e394 <_svfiprintf_r+0x1f8>)
 800e35a:	e000      	b.n	800e35e <_svfiprintf_r+0x1c2>
 800e35c:	bf00      	nop
 800e35e:	1c42      	adds	r2, r0, #1
 800e360:	4606      	mov	r6, r0
 800e362:	d1d6      	bne.n	800e312 <_svfiprintf_r+0x176>
 800e364:	89ab      	ldrh	r3, [r5, #12]
 800e366:	065b      	lsls	r3, r3, #25
 800e368:	f53f af2c 	bmi.w	800e1c4 <_svfiprintf_r+0x28>
 800e36c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e36e:	b01d      	add	sp, #116	; 0x74
 800e370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e374:	ab03      	add	r3, sp, #12
 800e376:	462a      	mov	r2, r5
 800e378:	a904      	add	r1, sp, #16
 800e37a:	4638      	mov	r0, r7
 800e37c:	9300      	str	r3, [sp, #0]
 800e37e:	4b05      	ldr	r3, [pc, #20]	; (800e394 <_svfiprintf_r+0x1f8>)
 800e380:	f000 f87c 	bl	800e47c <_printf_i>
 800e384:	e7eb      	b.n	800e35e <_svfiprintf_r+0x1c2>
 800e386:	bf00      	nop
 800e388:	0800edc0 	.word	0x0800edc0
 800e38c:	0800edca 	.word	0x0800edca
 800e390:	00000000 	.word	0x00000000
 800e394:	0800e0e5 	.word	0x0800e0e5
 800e398:	0800edc6 	.word	0x0800edc6

0800e39c <_printf_common>:
 800e39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3a0:	4616      	mov	r6, r2
 800e3a2:	4699      	mov	r9, r3
 800e3a4:	688a      	ldr	r2, [r1, #8]
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	690b      	ldr	r3, [r1, #16]
 800e3aa:	460c      	mov	r4, r1
 800e3ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e3b0:	4293      	cmp	r3, r2
 800e3b2:	bfb8      	it	lt
 800e3b4:	4613      	movlt	r3, r2
 800e3b6:	6033      	str	r3, [r6, #0]
 800e3b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e3bc:	b10a      	cbz	r2, 800e3c2 <_printf_common+0x26>
 800e3be:	3301      	adds	r3, #1
 800e3c0:	6033      	str	r3, [r6, #0]
 800e3c2:	6823      	ldr	r3, [r4, #0]
 800e3c4:	0699      	lsls	r1, r3, #26
 800e3c6:	bf42      	ittt	mi
 800e3c8:	6833      	ldrmi	r3, [r6, #0]
 800e3ca:	3302      	addmi	r3, #2
 800e3cc:	6033      	strmi	r3, [r6, #0]
 800e3ce:	6825      	ldr	r5, [r4, #0]
 800e3d0:	f015 0506 	ands.w	r5, r5, #6
 800e3d4:	d106      	bne.n	800e3e4 <_printf_common+0x48>
 800e3d6:	f104 0a19 	add.w	sl, r4, #25
 800e3da:	68e3      	ldr	r3, [r4, #12]
 800e3dc:	6832      	ldr	r2, [r6, #0]
 800e3de:	1a9b      	subs	r3, r3, r2
 800e3e0:	42ab      	cmp	r3, r5
 800e3e2:	dc29      	bgt.n	800e438 <_printf_common+0x9c>
 800e3e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e3e8:	1e13      	subs	r3, r2, #0
 800e3ea:	6822      	ldr	r2, [r4, #0]
 800e3ec:	bf18      	it	ne
 800e3ee:	2301      	movne	r3, #1
 800e3f0:	0692      	lsls	r2, r2, #26
 800e3f2:	d42e      	bmi.n	800e452 <_printf_common+0xb6>
 800e3f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e3f8:	4649      	mov	r1, r9
 800e3fa:	4638      	mov	r0, r7
 800e3fc:	47c0      	blx	r8
 800e3fe:	3001      	adds	r0, #1
 800e400:	d021      	beq.n	800e446 <_printf_common+0xaa>
 800e402:	6823      	ldr	r3, [r4, #0]
 800e404:	341a      	adds	r4, #26
 800e406:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800e40a:	f003 0306 	and.w	r3, r3, #6
 800e40e:	6832      	ldr	r2, [r6, #0]
 800e410:	2600      	movs	r6, #0
 800e412:	2b04      	cmp	r3, #4
 800e414:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800e418:	bf08      	it	eq
 800e41a:	1aad      	subeq	r5, r5, r2
 800e41c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800e420:	bf14      	ite	ne
 800e422:	2500      	movne	r5, #0
 800e424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e428:	4293      	cmp	r3, r2
 800e42a:	bfc4      	itt	gt
 800e42c:	1a9b      	subgt	r3, r3, r2
 800e42e:	18ed      	addgt	r5, r5, r3
 800e430:	42b5      	cmp	r5, r6
 800e432:	d11a      	bne.n	800e46a <_printf_common+0xce>
 800e434:	2000      	movs	r0, #0
 800e436:	e008      	b.n	800e44a <_printf_common+0xae>
 800e438:	2301      	movs	r3, #1
 800e43a:	4652      	mov	r2, sl
 800e43c:	4649      	mov	r1, r9
 800e43e:	4638      	mov	r0, r7
 800e440:	47c0      	blx	r8
 800e442:	3001      	adds	r0, #1
 800e444:	d103      	bne.n	800e44e <_printf_common+0xb2>
 800e446:	f04f 30ff 	mov.w	r0, #4294967295
 800e44a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e44e:	3501      	adds	r5, #1
 800e450:	e7c3      	b.n	800e3da <_printf_common+0x3e>
 800e452:	18e1      	adds	r1, r4, r3
 800e454:	1c5a      	adds	r2, r3, #1
 800e456:	2030      	movs	r0, #48	; 0x30
 800e458:	3302      	adds	r3, #2
 800e45a:	4422      	add	r2, r4
 800e45c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e460:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e464:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e468:	e7c4      	b.n	800e3f4 <_printf_common+0x58>
 800e46a:	2301      	movs	r3, #1
 800e46c:	4622      	mov	r2, r4
 800e46e:	4649      	mov	r1, r9
 800e470:	4638      	mov	r0, r7
 800e472:	47c0      	blx	r8
 800e474:	3001      	adds	r0, #1
 800e476:	d0e6      	beq.n	800e446 <_printf_common+0xaa>
 800e478:	3601      	adds	r6, #1
 800e47a:	e7d9      	b.n	800e430 <_printf_common+0x94>

0800e47c <_printf_i>:
 800e47c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e480:	7e0f      	ldrb	r7, [r1, #24]
 800e482:	4691      	mov	r9, r2
 800e484:	4680      	mov	r8, r0
 800e486:	460c      	mov	r4, r1
 800e488:	2f78      	cmp	r7, #120	; 0x78
 800e48a:	469a      	mov	sl, r3
 800e48c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e48e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e492:	d807      	bhi.n	800e4a4 <_printf_i+0x28>
 800e494:	2f62      	cmp	r7, #98	; 0x62
 800e496:	d80a      	bhi.n	800e4ae <_printf_i+0x32>
 800e498:	2f00      	cmp	r7, #0
 800e49a:	f000 80d8 	beq.w	800e64e <_printf_i+0x1d2>
 800e49e:	2f58      	cmp	r7, #88	; 0x58
 800e4a0:	f000 80a3 	beq.w	800e5ea <_printf_i+0x16e>
 800e4a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e4a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e4ac:	e03a      	b.n	800e524 <_printf_i+0xa8>
 800e4ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e4b2:	2b15      	cmp	r3, #21
 800e4b4:	d8f6      	bhi.n	800e4a4 <_printf_i+0x28>
 800e4b6:	a101      	add	r1, pc, #4	; (adr r1, 800e4bc <_printf_i+0x40>)
 800e4b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e4bc:	0800e515 	.word	0x0800e515
 800e4c0:	0800e529 	.word	0x0800e529
 800e4c4:	0800e4a5 	.word	0x0800e4a5
 800e4c8:	0800e4a5 	.word	0x0800e4a5
 800e4cc:	0800e4a5 	.word	0x0800e4a5
 800e4d0:	0800e4a5 	.word	0x0800e4a5
 800e4d4:	0800e529 	.word	0x0800e529
 800e4d8:	0800e4a5 	.word	0x0800e4a5
 800e4dc:	0800e4a5 	.word	0x0800e4a5
 800e4e0:	0800e4a5 	.word	0x0800e4a5
 800e4e4:	0800e4a5 	.word	0x0800e4a5
 800e4e8:	0800e635 	.word	0x0800e635
 800e4ec:	0800e559 	.word	0x0800e559
 800e4f0:	0800e617 	.word	0x0800e617
 800e4f4:	0800e4a5 	.word	0x0800e4a5
 800e4f8:	0800e4a5 	.word	0x0800e4a5
 800e4fc:	0800e657 	.word	0x0800e657
 800e500:	0800e4a5 	.word	0x0800e4a5
 800e504:	0800e559 	.word	0x0800e559
 800e508:	0800e4a5 	.word	0x0800e4a5
 800e50c:	0800e4a5 	.word	0x0800e4a5
 800e510:	0800e61f 	.word	0x0800e61f
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	1d1a      	adds	r2, r3, #4
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	602a      	str	r2, [r5, #0]
 800e51c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e520:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e524:	2301      	movs	r3, #1
 800e526:	e0a3      	b.n	800e670 <_printf_i+0x1f4>
 800e528:	6820      	ldr	r0, [r4, #0]
 800e52a:	6829      	ldr	r1, [r5, #0]
 800e52c:	0606      	lsls	r6, r0, #24
 800e52e:	f101 0304 	add.w	r3, r1, #4
 800e532:	d50a      	bpl.n	800e54a <_printf_i+0xce>
 800e534:	680e      	ldr	r6, [r1, #0]
 800e536:	602b      	str	r3, [r5, #0]
 800e538:	2e00      	cmp	r6, #0
 800e53a:	da03      	bge.n	800e544 <_printf_i+0xc8>
 800e53c:	232d      	movs	r3, #45	; 0x2d
 800e53e:	4276      	negs	r6, r6
 800e540:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e544:	485e      	ldr	r0, [pc, #376]	; (800e6c0 <_printf_i+0x244>)
 800e546:	230a      	movs	r3, #10
 800e548:	e019      	b.n	800e57e <_printf_i+0x102>
 800e54a:	680e      	ldr	r6, [r1, #0]
 800e54c:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e550:	602b      	str	r3, [r5, #0]
 800e552:	bf18      	it	ne
 800e554:	b236      	sxthne	r6, r6
 800e556:	e7ef      	b.n	800e538 <_printf_i+0xbc>
 800e558:	682b      	ldr	r3, [r5, #0]
 800e55a:	6820      	ldr	r0, [r4, #0]
 800e55c:	1d19      	adds	r1, r3, #4
 800e55e:	6029      	str	r1, [r5, #0]
 800e560:	0601      	lsls	r1, r0, #24
 800e562:	d501      	bpl.n	800e568 <_printf_i+0xec>
 800e564:	681e      	ldr	r6, [r3, #0]
 800e566:	e002      	b.n	800e56e <_printf_i+0xf2>
 800e568:	0646      	lsls	r6, r0, #25
 800e56a:	d5fb      	bpl.n	800e564 <_printf_i+0xe8>
 800e56c:	881e      	ldrh	r6, [r3, #0]
 800e56e:	2f6f      	cmp	r7, #111	; 0x6f
 800e570:	4853      	ldr	r0, [pc, #332]	; (800e6c0 <_printf_i+0x244>)
 800e572:	bf0c      	ite	eq
 800e574:	2308      	moveq	r3, #8
 800e576:	230a      	movne	r3, #10
 800e578:	2100      	movs	r1, #0
 800e57a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e57e:	6865      	ldr	r5, [r4, #4]
 800e580:	2d00      	cmp	r5, #0
 800e582:	60a5      	str	r5, [r4, #8]
 800e584:	bfa2      	ittt	ge
 800e586:	6821      	ldrge	r1, [r4, #0]
 800e588:	f021 0104 	bicge.w	r1, r1, #4
 800e58c:	6021      	strge	r1, [r4, #0]
 800e58e:	b90e      	cbnz	r6, 800e594 <_printf_i+0x118>
 800e590:	2d00      	cmp	r5, #0
 800e592:	d04d      	beq.n	800e630 <_printf_i+0x1b4>
 800e594:	4615      	mov	r5, r2
 800e596:	fbb6 f1f3 	udiv	r1, r6, r3
 800e59a:	fb03 6711 	mls	r7, r3, r1, r6
 800e59e:	5dc7      	ldrb	r7, [r0, r7]
 800e5a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e5a4:	4637      	mov	r7, r6
 800e5a6:	460e      	mov	r6, r1
 800e5a8:	42bb      	cmp	r3, r7
 800e5aa:	d9f4      	bls.n	800e596 <_printf_i+0x11a>
 800e5ac:	2b08      	cmp	r3, #8
 800e5ae:	d10b      	bne.n	800e5c8 <_printf_i+0x14c>
 800e5b0:	6823      	ldr	r3, [r4, #0]
 800e5b2:	07de      	lsls	r6, r3, #31
 800e5b4:	d508      	bpl.n	800e5c8 <_printf_i+0x14c>
 800e5b6:	6923      	ldr	r3, [r4, #16]
 800e5b8:	6861      	ldr	r1, [r4, #4]
 800e5ba:	4299      	cmp	r1, r3
 800e5bc:	bfde      	ittt	le
 800e5be:	2330      	movle	r3, #48	; 0x30
 800e5c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e5c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e5c8:	1b52      	subs	r2, r2, r5
 800e5ca:	6122      	str	r2, [r4, #16]
 800e5cc:	464b      	mov	r3, r9
 800e5ce:	aa03      	add	r2, sp, #12
 800e5d0:	4621      	mov	r1, r4
 800e5d2:	4640      	mov	r0, r8
 800e5d4:	f8cd a000 	str.w	sl, [sp]
 800e5d8:	f7ff fee0 	bl	800e39c <_printf_common>
 800e5dc:	3001      	adds	r0, #1
 800e5de:	d14c      	bne.n	800e67a <_printf_i+0x1fe>
 800e5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e4:	b004      	add	sp, #16
 800e5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ea:	4835      	ldr	r0, [pc, #212]	; (800e6c0 <_printf_i+0x244>)
 800e5ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e5f0:	6829      	ldr	r1, [r5, #0]
 800e5f2:	6823      	ldr	r3, [r4, #0]
 800e5f4:	f851 6b04 	ldr.w	r6, [r1], #4
 800e5f8:	6029      	str	r1, [r5, #0]
 800e5fa:	061d      	lsls	r5, r3, #24
 800e5fc:	d514      	bpl.n	800e628 <_printf_i+0x1ac>
 800e5fe:	07df      	lsls	r7, r3, #31
 800e600:	bf44      	itt	mi
 800e602:	f043 0320 	orrmi.w	r3, r3, #32
 800e606:	6023      	strmi	r3, [r4, #0]
 800e608:	b91e      	cbnz	r6, 800e612 <_printf_i+0x196>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	f023 0320 	bic.w	r3, r3, #32
 800e610:	6023      	str	r3, [r4, #0]
 800e612:	2310      	movs	r3, #16
 800e614:	e7b0      	b.n	800e578 <_printf_i+0xfc>
 800e616:	6823      	ldr	r3, [r4, #0]
 800e618:	f043 0320 	orr.w	r3, r3, #32
 800e61c:	6023      	str	r3, [r4, #0]
 800e61e:	2378      	movs	r3, #120	; 0x78
 800e620:	4828      	ldr	r0, [pc, #160]	; (800e6c4 <_printf_i+0x248>)
 800e622:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e626:	e7e3      	b.n	800e5f0 <_printf_i+0x174>
 800e628:	0659      	lsls	r1, r3, #25
 800e62a:	bf48      	it	mi
 800e62c:	b2b6      	uxthmi	r6, r6
 800e62e:	e7e6      	b.n	800e5fe <_printf_i+0x182>
 800e630:	4615      	mov	r5, r2
 800e632:	e7bb      	b.n	800e5ac <_printf_i+0x130>
 800e634:	682b      	ldr	r3, [r5, #0]
 800e636:	6826      	ldr	r6, [r4, #0]
 800e638:	1d18      	adds	r0, r3, #4
 800e63a:	6961      	ldr	r1, [r4, #20]
 800e63c:	6028      	str	r0, [r5, #0]
 800e63e:	0635      	lsls	r5, r6, #24
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	d501      	bpl.n	800e648 <_printf_i+0x1cc>
 800e644:	6019      	str	r1, [r3, #0]
 800e646:	e002      	b.n	800e64e <_printf_i+0x1d2>
 800e648:	0670      	lsls	r0, r6, #25
 800e64a:	d5fb      	bpl.n	800e644 <_printf_i+0x1c8>
 800e64c:	8019      	strh	r1, [r3, #0]
 800e64e:	2300      	movs	r3, #0
 800e650:	4615      	mov	r5, r2
 800e652:	6123      	str	r3, [r4, #16]
 800e654:	e7ba      	b.n	800e5cc <_printf_i+0x150>
 800e656:	682b      	ldr	r3, [r5, #0]
 800e658:	2100      	movs	r1, #0
 800e65a:	1d1a      	adds	r2, r3, #4
 800e65c:	602a      	str	r2, [r5, #0]
 800e65e:	681d      	ldr	r5, [r3, #0]
 800e660:	6862      	ldr	r2, [r4, #4]
 800e662:	4628      	mov	r0, r5
 800e664:	f000 f832 	bl	800e6cc <memchr>
 800e668:	b108      	cbz	r0, 800e66e <_printf_i+0x1f2>
 800e66a:	1b40      	subs	r0, r0, r5
 800e66c:	6060      	str	r0, [r4, #4]
 800e66e:	6863      	ldr	r3, [r4, #4]
 800e670:	6123      	str	r3, [r4, #16]
 800e672:	2300      	movs	r3, #0
 800e674:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e678:	e7a8      	b.n	800e5cc <_printf_i+0x150>
 800e67a:	6923      	ldr	r3, [r4, #16]
 800e67c:	462a      	mov	r2, r5
 800e67e:	4649      	mov	r1, r9
 800e680:	4640      	mov	r0, r8
 800e682:	47d0      	blx	sl
 800e684:	3001      	adds	r0, #1
 800e686:	d0ab      	beq.n	800e5e0 <_printf_i+0x164>
 800e688:	6823      	ldr	r3, [r4, #0]
 800e68a:	079b      	lsls	r3, r3, #30
 800e68c:	d413      	bmi.n	800e6b6 <_printf_i+0x23a>
 800e68e:	68e0      	ldr	r0, [r4, #12]
 800e690:	9b03      	ldr	r3, [sp, #12]
 800e692:	4298      	cmp	r0, r3
 800e694:	bfb8      	it	lt
 800e696:	4618      	movlt	r0, r3
 800e698:	e7a4      	b.n	800e5e4 <_printf_i+0x168>
 800e69a:	2301      	movs	r3, #1
 800e69c:	4632      	mov	r2, r6
 800e69e:	4649      	mov	r1, r9
 800e6a0:	4640      	mov	r0, r8
 800e6a2:	47d0      	blx	sl
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	d09b      	beq.n	800e5e0 <_printf_i+0x164>
 800e6a8:	3501      	adds	r5, #1
 800e6aa:	68e3      	ldr	r3, [r4, #12]
 800e6ac:	9903      	ldr	r1, [sp, #12]
 800e6ae:	1a5b      	subs	r3, r3, r1
 800e6b0:	42ab      	cmp	r3, r5
 800e6b2:	dcf2      	bgt.n	800e69a <_printf_i+0x21e>
 800e6b4:	e7eb      	b.n	800e68e <_printf_i+0x212>
 800e6b6:	2500      	movs	r5, #0
 800e6b8:	f104 0619 	add.w	r6, r4, #25
 800e6bc:	e7f5      	b.n	800e6aa <_printf_i+0x22e>
 800e6be:	bf00      	nop
 800e6c0:	0800edd1 	.word	0x0800edd1
 800e6c4:	0800ede2 	.word	0x0800ede2

0800e6c8 <__retarget_lock_acquire_recursive>:
 800e6c8:	4770      	bx	lr

0800e6ca <__retarget_lock_release_recursive>:
 800e6ca:	4770      	bx	lr

0800e6cc <memchr>:
 800e6cc:	b2c9      	uxtb	r1, r1
 800e6ce:	4402      	add	r2, r0
 800e6d0:	b510      	push	{r4, lr}
 800e6d2:	4290      	cmp	r0, r2
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	d101      	bne.n	800e6dc <memchr+0x10>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	e003      	b.n	800e6e4 <memchr+0x18>
 800e6dc:	781c      	ldrb	r4, [r3, #0]
 800e6de:	3001      	adds	r0, #1
 800e6e0:	428c      	cmp	r4, r1
 800e6e2:	d1f6      	bne.n	800e6d2 <memchr+0x6>
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	bd10      	pop	{r4, pc}

0800e6e8 <memcpy>:
 800e6e8:	440a      	add	r2, r1
 800e6ea:	1e43      	subs	r3, r0, #1
 800e6ec:	4291      	cmp	r1, r2
 800e6ee:	d100      	bne.n	800e6f2 <memcpy+0xa>
 800e6f0:	4770      	bx	lr
 800e6f2:	b510      	push	{r4, lr}
 800e6f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6f8:	4291      	cmp	r1, r2
 800e6fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6fe:	d1f9      	bne.n	800e6f4 <memcpy+0xc>
 800e700:	bd10      	pop	{r4, pc}

0800e702 <memmove>:
 800e702:	4288      	cmp	r0, r1
 800e704:	b510      	push	{r4, lr}
 800e706:	eb01 0402 	add.w	r4, r1, r2
 800e70a:	d902      	bls.n	800e712 <memmove+0x10>
 800e70c:	4284      	cmp	r4, r0
 800e70e:	4623      	mov	r3, r4
 800e710:	d807      	bhi.n	800e722 <memmove+0x20>
 800e712:	1e43      	subs	r3, r0, #1
 800e714:	42a1      	cmp	r1, r4
 800e716:	d008      	beq.n	800e72a <memmove+0x28>
 800e718:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e71c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e720:	e7f8      	b.n	800e714 <memmove+0x12>
 800e722:	4402      	add	r2, r0
 800e724:	4601      	mov	r1, r0
 800e726:	428a      	cmp	r2, r1
 800e728:	d100      	bne.n	800e72c <memmove+0x2a>
 800e72a:	bd10      	pop	{r4, pc}
 800e72c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e730:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e734:	e7f7      	b.n	800e726 <memmove+0x24>

0800e736 <_realloc_r>:
 800e736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e73a:	4680      	mov	r8, r0
 800e73c:	4614      	mov	r4, r2
 800e73e:	460e      	mov	r6, r1
 800e740:	b921      	cbnz	r1, 800e74c <_realloc_r+0x16>
 800e742:	4611      	mov	r1, r2
 800e744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e748:	f7ff bc1c 	b.w	800df84 <_malloc_r>
 800e74c:	b92a      	cbnz	r2, 800e75a <_realloc_r+0x24>
 800e74e:	4625      	mov	r5, r4
 800e750:	f7ff fbac 	bl	800deac <_free_r>
 800e754:	4628      	mov	r0, r5
 800e756:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e75a:	f000 f81b 	bl	800e794 <_malloc_usable_size_r>
 800e75e:	4284      	cmp	r4, r0
 800e760:	4607      	mov	r7, r0
 800e762:	d802      	bhi.n	800e76a <_realloc_r+0x34>
 800e764:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e768:	d812      	bhi.n	800e790 <_realloc_r+0x5a>
 800e76a:	4621      	mov	r1, r4
 800e76c:	4640      	mov	r0, r8
 800e76e:	f7ff fc09 	bl	800df84 <_malloc_r>
 800e772:	4605      	mov	r5, r0
 800e774:	2800      	cmp	r0, #0
 800e776:	d0ed      	beq.n	800e754 <_realloc_r+0x1e>
 800e778:	42bc      	cmp	r4, r7
 800e77a:	4622      	mov	r2, r4
 800e77c:	4631      	mov	r1, r6
 800e77e:	bf28      	it	cs
 800e780:	463a      	movcs	r2, r7
 800e782:	f7ff ffb1 	bl	800e6e8 <memcpy>
 800e786:	4631      	mov	r1, r6
 800e788:	4640      	mov	r0, r8
 800e78a:	f7ff fb8f 	bl	800deac <_free_r>
 800e78e:	e7e1      	b.n	800e754 <_realloc_r+0x1e>
 800e790:	4635      	mov	r5, r6
 800e792:	e7df      	b.n	800e754 <_realloc_r+0x1e>

0800e794 <_malloc_usable_size_r>:
 800e794:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e798:	1f18      	subs	r0, r3, #4
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	bfbc      	itt	lt
 800e79e:	580b      	ldrlt	r3, [r1, r0]
 800e7a0:	18c0      	addlt	r0, r0, r3
 800e7a2:	4770      	bx	lr

0800e7a4 <_init>:
 800e7a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7a6:	bf00      	nop
 800e7a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7aa:	bc08      	pop	{r3}
 800e7ac:	469e      	mov	lr, r3
 800e7ae:	4770      	bx	lr

0800e7b0 <_fini>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	bf00      	nop
 800e7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b6:	bc08      	pop	{r3}
 800e7b8:	469e      	mov	lr, r3
 800e7ba:	4770      	bx	lr
