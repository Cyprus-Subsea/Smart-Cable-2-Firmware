
MCU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f41c  080001f4  080001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  0800f610  0800f610  0001f610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc8c  0800fc8c  00022848  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc8c  0800fc8c  0001fc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc94  0800fc94  00022848  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc94  0800fc94  0001fc94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc98  0800fc98  0001fc98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00002848  20000000  0800fc9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000600  20002848  080124e4  00022848  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20002e48  080124e4  00022e48  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00022848  2**0
                  CONTENTS, READONLY
 12 .debug_info   000236c2  00000000  00000000  0002287e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000413d  00000000  00000000  00045f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001bb8  00000000  00000000  0004a080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a20  00000000  00000000  0004bc38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002d67d  00000000  00000000  0004d658  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002424b  00000000  00000000  0007acd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112b5f  00000000  00000000  0009ef20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b1a7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000079a8  00000000  00000000  001b1ad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f4 <__do_global_dtors_aux>:
 80001f4:	b510      	push	{r4, lr}
 80001f6:	4c05      	ldr	r4, [pc, #20]	; (800020c <__do_global_dtors_aux+0x18>)
 80001f8:	7823      	ldrb	r3, [r4, #0]
 80001fa:	b933      	cbnz	r3, 800020a <__do_global_dtors_aux+0x16>
 80001fc:	4b04      	ldr	r3, [pc, #16]	; (8000210 <__do_global_dtors_aux+0x1c>)
 80001fe:	b113      	cbz	r3, 8000206 <__do_global_dtors_aux+0x12>
 8000200:	4804      	ldr	r0, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x20>)
 8000202:	e000      	b.n	8000206 <__do_global_dtors_aux+0x12>
 8000204:	bf00      	nop
 8000206:	2301      	movs	r3, #1
 8000208:	7023      	strb	r3, [r4, #0]
 800020a:	bd10      	pop	{r4, pc}
 800020c:	20002848 	.word	0x20002848
 8000210:	00000000 	.word	0x00000000
 8000214:	0800f5f8 	.word	0x0800f5f8

08000218 <frame_dummy>:
 8000218:	b508      	push	{r3, lr}
 800021a:	4b03      	ldr	r3, [pc, #12]	; (8000228 <frame_dummy+0x10>)
 800021c:	b11b      	cbz	r3, 8000226 <frame_dummy+0xe>
 800021e:	4903      	ldr	r1, [pc, #12]	; (800022c <frame_dummy+0x14>)
 8000220:	4803      	ldr	r0, [pc, #12]	; (8000230 <frame_dummy+0x18>)
 8000222:	e000      	b.n	8000226 <frame_dummy+0xe>
 8000224:	bf00      	nop
 8000226:	bd08      	pop	{r3, pc}
 8000228:	00000000 	.word	0x00000000
 800022c:	2000284c 	.word	0x2000284c
 8000230:	0800f5f8 	.word	0x0800f5f8

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr

08000244 <__aeabi_uldivmod>:
 8000244:	b953      	cbnz	r3, 800025c <__aeabi_uldivmod+0x18>
 8000246:	b94a      	cbnz	r2, 800025c <__aeabi_uldivmod+0x18>
 8000248:	2900      	cmp	r1, #0
 800024a:	bf08      	it	eq
 800024c:	2800      	cmpeq	r0, #0
 800024e:	bf1c      	itt	ne
 8000250:	f04f 31ff 	movne.w	r1, #4294967295
 8000254:	f04f 30ff 	movne.w	r0, #4294967295
 8000258:	f000 b982 	b.w	8000560 <__aeabi_idiv0>
 800025c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000260:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000264:	f000 f806 	bl	8000274 <__udivmoddi4>
 8000268:	f8dd e004 	ldr.w	lr, [sp, #4]
 800026c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000270:	b004      	add	sp, #16
 8000272:	4770      	bx	lr

08000274 <__udivmoddi4>:
 8000274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000278:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800027a:	4604      	mov	r4, r0
 800027c:	460f      	mov	r7, r1
 800027e:	2b00      	cmp	r3, #0
 8000280:	d148      	bne.n	8000314 <__udivmoddi4+0xa0>
 8000282:	428a      	cmp	r2, r1
 8000284:	4694      	mov	ip, r2
 8000286:	d961      	bls.n	800034c <__udivmoddi4+0xd8>
 8000288:	fab2 f382 	clz	r3, r2
 800028c:	b143      	cbz	r3, 80002a0 <__udivmoddi4+0x2c>
 800028e:	f1c3 0120 	rsb	r1, r3, #32
 8000292:	409f      	lsls	r7, r3
 8000294:	fa02 fc03 	lsl.w	ip, r2, r3
 8000298:	409c      	lsls	r4, r3
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	430f      	orrs	r7, r1
 80002a0:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a4:	fa1f fe8c 	uxth.w	lr, ip
 80002a8:	0c22      	lsrs	r2, r4, #16
 80002aa:	fbb7 f6f1 	udiv	r6, r7, r1
 80002ae:	fb01 7716 	mls	r7, r1, r6, r7
 80002b2:	fb06 f00e 	mul.w	r0, r6, lr
 80002b6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ba:	4290      	cmp	r0, r2
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x5c>
 80002be:	eb1c 0202 	adds.w	r2, ip, r2
 80002c2:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x5a>
 80002c8:	4290      	cmp	r0, r2
 80002ca:	f200 8137 	bhi.w	800053c <__udivmoddi4+0x2c8>
 80002ce:	463e      	mov	r6, r7
 80002d0:	1a12      	subs	r2, r2, r0
 80002d2:	b2a4      	uxth	r4, r4
 80002d4:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d8:	fb01 2210 	mls	r2, r1, r0, r2
 80002dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80002e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e4:	45a6      	cmp	lr, r4
 80002e6:	d908      	bls.n	80002fa <__udivmoddi4+0x86>
 80002e8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ec:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f0:	d202      	bcs.n	80002f8 <__udivmoddi4+0x84>
 80002f2:	45a6      	cmp	lr, r4
 80002f4:	f200 811c 	bhi.w	8000530 <__udivmoddi4+0x2bc>
 80002f8:	4610      	mov	r0, r2
 80002fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	2600      	movs	r6, #0
 8000304:	b11d      	cbz	r5, 800030e <__udivmoddi4+0x9a>
 8000306:	40dc      	lsrs	r4, r3
 8000308:	2300      	movs	r3, #0
 800030a:	e9c5 4300 	strd	r4, r3, [r5]
 800030e:	4631      	mov	r1, r6
 8000310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000314:	428b      	cmp	r3, r1
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0xb8>
 8000318:	2d00      	cmp	r5, #0
 800031a:	f000 80fd 	beq.w	8000518 <__udivmoddi4+0x2a4>
 800031e:	2600      	movs	r6, #0
 8000320:	e9c5 0100 	strd	r0, r1, [r5]
 8000324:	4630      	mov	r0, r6
 8000326:	4631      	mov	r1, r6
 8000328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032c:	fab3 f683 	clz	r6, r3
 8000330:	2e00      	cmp	r6, #0
 8000332:	d14b      	bne.n	80003cc <__udivmoddi4+0x158>
 8000334:	428b      	cmp	r3, r1
 8000336:	f0c0 80f2 	bcc.w	800051e <__udivmoddi4+0x2aa>
 800033a:	4282      	cmp	r2, r0
 800033c:	f240 80ef 	bls.w	800051e <__udivmoddi4+0x2aa>
 8000340:	4630      	mov	r0, r6
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0e3      	beq.n	800030e <__udivmoddi4+0x9a>
 8000346:	e9c5 4700 	strd	r4, r7, [r5]
 800034a:	e7e0      	b.n	800030e <__udivmoddi4+0x9a>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xdc>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f382 	clz	r3, r2
 8000354:	2b00      	cmp	r3, #0
 8000356:	f040 809d 	bne.w	8000494 <__udivmoddi4+0x220>
 800035a:	1a89      	subs	r1, r1, r2
 800035c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000360:	b297      	uxth	r7, r2
 8000362:	2601      	movs	r6, #1
 8000364:	0c20      	lsrs	r0, r4, #16
 8000366:	fbb1 f2fe 	udiv	r2, r1, lr
 800036a:	fb0e 1112 	mls	r1, lr, r2, r1
 800036e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000372:	fb07 f002 	mul.w	r0, r7, r2
 8000376:	4288      	cmp	r0, r1
 8000378:	d90f      	bls.n	800039a <__udivmoddi4+0x126>
 800037a:	eb1c 0101 	adds.w	r1, ip, r1
 800037e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000382:	bf2c      	ite	cs
 8000384:	f04f 0901 	movcs.w	r9, #1
 8000388:	f04f 0900 	movcc.w	r9, #0
 800038c:	4288      	cmp	r0, r1
 800038e:	d903      	bls.n	8000398 <__udivmoddi4+0x124>
 8000390:	f1b9 0f00 	cmp.w	r9, #0
 8000394:	f000 80cf 	beq.w	8000536 <__udivmoddi4+0x2c2>
 8000398:	4642      	mov	r2, r8
 800039a:	1a09      	subs	r1, r1, r0
 800039c:	b2a4      	uxth	r4, r4
 800039e:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a6:	fb00 f707 	mul.w	r7, r0, r7
 80003aa:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ae:	42a7      	cmp	r7, r4
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x150>
 80003b2:	eb1c 0404 	adds.w	r4, ip, r4
 80003b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14e>
 80003bc:	42a7      	cmp	r7, r4
 80003be:	f200 80b4 	bhi.w	800052a <__udivmoddi4+0x2b6>
 80003c2:	4608      	mov	r0, r1
 80003c4:	1be4      	subs	r4, r4, r7
 80003c6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003ca:	e79b      	b.n	8000304 <__udivmoddi4+0x90>
 80003cc:	f1c6 0720 	rsb	r7, r6, #32
 80003d0:	40b3      	lsls	r3, r6
 80003d2:	fa01 f406 	lsl.w	r4, r1, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	40f9      	lsrs	r1, r7
 80003dc:	40b2      	lsls	r2, r6
 80003de:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e2:	fa20 f307 	lsr.w	r3, r0, r7
 80003e6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ea:	431c      	orrs	r4, r3
 80003ec:	fa1f fe8c 	uxth.w	lr, ip
 80003f0:	fa00 f306 	lsl.w	r3, r0, r6
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fa:	fb09 1118 	mls	r1, r9, r8, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb08 f00e 	mul.w	r0, r8, lr
 8000406:	4288      	cmp	r0, r1
 8000408:	d90f      	bls.n	800042a <__udivmoddi4+0x1b6>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000412:	bf2c      	ite	cs
 8000414:	f04f 0b01 	movcs.w	fp, #1
 8000418:	f04f 0b00 	movcc.w	fp, #0
 800041c:	4288      	cmp	r0, r1
 800041e:	d903      	bls.n	8000428 <__udivmoddi4+0x1b4>
 8000420:	f1bb 0f00 	cmp.w	fp, #0
 8000424:	f000 808d 	beq.w	8000542 <__udivmoddi4+0x2ce>
 8000428:	46d0      	mov	r8, sl
 800042a:	1a09      	subs	r1, r1, r0
 800042c:	b2a4      	uxth	r4, r4
 800042e:	fbb1 f0f9 	udiv	r0, r1, r9
 8000432:	fb09 1110 	mls	r1, r9, r0, r1
 8000436:	fb00 fe0e 	mul.w	lr, r0, lr
 800043a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043e:	458e      	cmp	lr, r1
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x1de>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 34ff 	add.w	r4, r0, #4294967295
 800044a:	d201      	bcs.n	8000450 <__udivmoddi4+0x1dc>
 800044c:	458e      	cmp	lr, r1
 800044e:	d87f      	bhi.n	8000550 <__udivmoddi4+0x2dc>
 8000450:	4620      	mov	r0, r4
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	eba1 010e 	sub.w	r1, r1, lr
 800045a:	fba0 9802 	umull	r9, r8, r0, r2
 800045e:	4541      	cmp	r1, r8
 8000460:	464c      	mov	r4, r9
 8000462:	46c6      	mov	lr, r8
 8000464:	d302      	bcc.n	800046c <__udivmoddi4+0x1f8>
 8000466:	d106      	bne.n	8000476 <__udivmoddi4+0x202>
 8000468:	454b      	cmp	r3, r9
 800046a:	d204      	bcs.n	8000476 <__udivmoddi4+0x202>
 800046c:	3801      	subs	r0, #1
 800046e:	ebb9 0402 	subs.w	r4, r9, r2
 8000472:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000476:	2d00      	cmp	r5, #0
 8000478:	d070      	beq.n	800055c <__udivmoddi4+0x2e8>
 800047a:	1b1a      	subs	r2, r3, r4
 800047c:	eb61 010e 	sbc.w	r1, r1, lr
 8000480:	fa22 f306 	lsr.w	r3, r2, r6
 8000484:	fa01 f707 	lsl.w	r7, r1, r7
 8000488:	40f1      	lsrs	r1, r6
 800048a:	2600      	movs	r6, #0
 800048c:	431f      	orrs	r7, r3
 800048e:	e9c5 7100 	strd	r7, r1, [r5]
 8000492:	e73c      	b.n	800030e <__udivmoddi4+0x9a>
 8000494:	fa02 fc03 	lsl.w	ip, r2, r3
 8000498:	f1c3 0020 	rsb	r0, r3, #32
 800049c:	fa01 f203 	lsl.w	r2, r1, r3
 80004a0:	fa21 f600 	lsr.w	r6, r1, r0
 80004a4:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a8:	fa24 f100 	lsr.w	r1, r4, r0
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	409c      	lsls	r4, r3
 80004b2:	4311      	orrs	r1, r2
 80004b4:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b8:	0c0a      	lsrs	r2, r1, #16
 80004ba:	fb0e 6610 	mls	r6, lr, r0, r6
 80004be:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004c2:	fb00 f607 	mul.w	r6, r0, r7
 80004c6:	4296      	cmp	r6, r2
 80004c8:	d90e      	bls.n	80004e8 <__udivmoddi4+0x274>
 80004ca:	eb1c 0202 	adds.w	r2, ip, r2
 80004ce:	f100 38ff 	add.w	r8, r0, #4294967295
 80004d2:	bf2c      	ite	cs
 80004d4:	f04f 0901 	movcs.w	r9, #1
 80004d8:	f04f 0900 	movcc.w	r9, #0
 80004dc:	4296      	cmp	r6, r2
 80004de:	d902      	bls.n	80004e6 <__udivmoddi4+0x272>
 80004e0:	f1b9 0f00 	cmp.w	r9, #0
 80004e4:	d031      	beq.n	800054a <__udivmoddi4+0x2d6>
 80004e6:	4640      	mov	r0, r8
 80004e8:	1b92      	subs	r2, r2, r6
 80004ea:	b289      	uxth	r1, r1
 80004ec:	fbb2 f6fe 	udiv	r6, r2, lr
 80004f0:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f8:	fb06 f207 	mul.w	r2, r6, r7
 80004fc:	428a      	cmp	r2, r1
 80004fe:	d907      	bls.n	8000510 <__udivmoddi4+0x29c>
 8000500:	eb1c 0101 	adds.w	r1, ip, r1
 8000504:	f106 38ff 	add.w	r8, r6, #4294967295
 8000508:	d201      	bcs.n	800050e <__udivmoddi4+0x29a>
 800050a:	428a      	cmp	r2, r1
 800050c:	d823      	bhi.n	8000556 <__udivmoddi4+0x2e2>
 800050e:	4646      	mov	r6, r8
 8000510:	1a89      	subs	r1, r1, r2
 8000512:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000516:	e725      	b.n	8000364 <__udivmoddi4+0xf0>
 8000518:	462e      	mov	r6, r5
 800051a:	4628      	mov	r0, r5
 800051c:	e6f7      	b.n	800030e <__udivmoddi4+0x9a>
 800051e:	1a84      	subs	r4, r0, r2
 8000520:	eb61 0303 	sbc.w	r3, r1, r3
 8000524:	2001      	movs	r0, #1
 8000526:	461f      	mov	r7, r3
 8000528:	e70b      	b.n	8000342 <__udivmoddi4+0xce>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e749      	b.n	80003c4 <__udivmoddi4+0x150>
 8000530:	4464      	add	r4, ip
 8000532:	3802      	subs	r0, #2
 8000534:	e6e1      	b.n	80002fa <__udivmoddi4+0x86>
 8000536:	3a02      	subs	r2, #2
 8000538:	4461      	add	r1, ip
 800053a:	e72e      	b.n	800039a <__udivmoddi4+0x126>
 800053c:	3e02      	subs	r6, #2
 800053e:	4462      	add	r2, ip
 8000540:	e6c6      	b.n	80002d0 <__udivmoddi4+0x5c>
 8000542:	f1a8 0802 	sub.w	r8, r8, #2
 8000546:	4461      	add	r1, ip
 8000548:	e76f      	b.n	800042a <__udivmoddi4+0x1b6>
 800054a:	3802      	subs	r0, #2
 800054c:	4462      	add	r2, ip
 800054e:	e7cb      	b.n	80004e8 <__udivmoddi4+0x274>
 8000550:	3802      	subs	r0, #2
 8000552:	4461      	add	r1, ip
 8000554:	e77d      	b.n	8000452 <__udivmoddi4+0x1de>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	e7d9      	b.n	8000510 <__udivmoddi4+0x29c>
 800055c:	462e      	mov	r6, r5
 800055e:	e6d6      	b.n	800030e <__udivmoddi4+0x9a>

08000560 <__aeabi_idiv0>:
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop

08000564 <print_param>:
extern UART_HandleTypeDef huart1;

char msg_formatted[300];
void print_param(char* param_name,uint32_t uint_param)

{
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	6039      	str	r1, [r7, #0]
 sprintf(msg_formatted,"%s:%u\n",param_name,uint_param);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	4909      	ldr	r1, [pc, #36]	; (8000598 <print_param+0x34>)
 8000574:	4809      	ldr	r0, [pc, #36]	; (800059c <print_param+0x38>)
 8000576:	f00e fcb3 	bl	800eee0 <siprintf>
 HAL_UART_Transmit(&huart1, msg_formatted, strlen(msg_formatted),100);
 800057a:	4808      	ldr	r0, [pc, #32]	; (800059c <print_param+0x38>)
 800057c:	f7ff fe5a 	bl	8000234 <strlen>
 8000580:	4603      	mov	r3, r0
 8000582:	b29a      	uxth	r2, r3
 8000584:	2364      	movs	r3, #100	; 0x64
 8000586:	4905      	ldr	r1, [pc, #20]	; (800059c <print_param+0x38>)
 8000588:	4805      	ldr	r0, [pc, #20]	; (80005a0 <print_param+0x3c>)
 800058a:	f007 ff89 	bl	80084a0 <HAL_UART_Transmit>

}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	0800f610 	.word	0x0800f610
 800059c:	20002864 	.word	0x20002864
 80005a0:	20002b60 	.word	0x20002b60

080005a4 <print_str>:

void print_str(char* msg)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	 sprintf(msg_formatted,"%s\n",msg);
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4909      	ldr	r1, [pc, #36]	; (80005d4 <print_str+0x30>)
 80005b0:	4809      	ldr	r0, [pc, #36]	; (80005d8 <print_str+0x34>)
 80005b2:	f00e fc95 	bl	800eee0 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_formatted, strlen(msg_formatted),100);
 80005b6:	4808      	ldr	r0, [pc, #32]	; (80005d8 <print_str+0x34>)
 80005b8:	f7ff fe3c 	bl	8000234 <strlen>
 80005bc:	4603      	mov	r3, r0
 80005be:	b29a      	uxth	r2, r3
 80005c0:	2364      	movs	r3, #100	; 0x64
 80005c2:	4905      	ldr	r1, [pc, #20]	; (80005d8 <print_str+0x34>)
 80005c4:	4805      	ldr	r0, [pc, #20]	; (80005dc <print_str+0x38>)
 80005c6:	f007 ff6b 	bl	80084a0 <HAL_UART_Transmit>
}
 80005ca:	bf00      	nop
 80005cc:	3708      	adds	r7, #8
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	0800f618 	.word	0x0800f618
 80005d8:	20002864 	.word	0x20002864
 80005dc:	20002b60 	.word	0x20002b60

080005e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005e2:	f2ad 5d44 	subw	sp, sp, #1348	; 0x544
 80005e6:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005e8:	f001 f9e5 	bl	80019b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f8f0 	bl	80007d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 fbd6 	bl	8000da0 <MX_GPIO_Init>
  MX_DMA_Init();
 80005f4:	f000 fbaa 	bl	8000d4c <MX_DMA_Init>
  MX_ICACHE_Init();
 80005f8:	f000 f9c6 	bl	8000988 <MX_ICACHE_Init>
  MX_OCTOSPI1_Init();
 80005fc:	f000 fb00 	bl	8000c00 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8000600:	f000 fa66 	bl	8000ad0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000604:	f000 fb3a 	bl	8000c7c <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 8000608:	f000 fb82 	bl	8000d10 <MX_SDMMC1_SD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800060c:	f009 ff60 	bl	800a4d0 <MX_FATFS_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <main+0x3a>
    Error_Handler();
 8000616:	f000 fc81 	bl	8000f1c <Error_Handler>
  }
  MX_I2C1_Init();
 800061a:	f000 f935 	bl	8000888 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 800061e:	f000 f9bf 	bl	80009a0 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 8000622:	f000 fa09 	bl	8000a38 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000626:	f000 fa9f 	bl	8000b68 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 800062a:	f000 f96d 	bl	8000908 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 800062e:	20c8      	movs	r0, #200	; 0xc8
 8000630:	f001 fa38 	bl	8001aa4 <HAL_Delay>
  HAL_UART_Transmit(&huart1, "Start\n", 6, 100);
 8000634:	2364      	movs	r3, #100	; 0x64
 8000636:	2206      	movs	r2, #6
 8000638:	4958      	ldr	r1, [pc, #352]	; (800079c <main+0x1bc>)
 800063a:	4859      	ldr	r0, [pc, #356]	; (80007a0 <main+0x1c0>)
 800063c:	f007 ff30 	bl	80084a0 <HAL_UART_Transmit>
  char tt[100];
  RTC_TimeTypeDef sTimeStamp;
  RTC_DateTypeDef sTimeStampDate;
  uint8_t depth_cmd=0xac;
 8000640:	23ac      	movs	r3, #172	; 0xac
 8000642:	f887 352b 	strb.w	r3, [r7, #1323]	; 0x52b
  uint8_t OUTX_L_XL=0x28;
 8000646:	2328      	movs	r3, #40	; 0x28
 8000648:	f887 352a 	strb.w	r3, [r7, #1322]	; 0x52a
  uint8_t OUTX_H_XL=0x29;
 800064c:	2329      	movs	r3, #41	; 0x29
 800064e:	f887 3529 	strb.w	r3, [r7, #1321]	; 0x529
  uint8_t CTRL1_XL[]={0x10,0x10};
 8000652:	f241 0310 	movw	r3, #4112	; 0x1010
 8000656:	f8a7 34a0 	strh.w	r3, [r7, #1184]	; 0x4a0
  uint8_t who_am_i=0x0f;
 800065a:	230f      	movs	r3, #15
 800065c:	f887 3528 	strb.w	r3, [r7, #1320]	; 0x528
  sTimeStampDate.Date = 14;
  sTimeStampDate.Year = 23;
  HAL_RTC_SetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
  */

  HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8000660:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8000664:	2200      	movs	r2, #0
 8000666:	4619      	mov	r1, r3
 8000668:	484e      	ldr	r0, [pc, #312]	; (80007a4 <main+0x1c4>)
 800066a:	f006 f8f3 	bl	8006854 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 800066e:	f207 43a4 	addw	r3, r7, #1188	; 0x4a4
 8000672:	2200      	movs	r2, #0
 8000674:	4619      	mov	r1, r3
 8000676:	484b      	ldr	r0, [pc, #300]	; (80007a4 <main+0x1c4>)
 8000678:	f006 f948 	bl	800690c <HAL_RTC_GetDate>
  sprintf(tt,"RTC %02u:%02u:%02u %02u:%02u:%02u\n",sTimeStampDate.Date,sTimeStampDate.Month,sTimeStampDate.Year,sTimeStamp.Hours,sTimeStamp.Minutes,sTimeStamp.Seconds);
 800067c:	f897 34a6 	ldrb.w	r3, [r7, #1190]	; 0x4a6
 8000680:	461d      	mov	r5, r3
 8000682:	f897 34a5 	ldrb.w	r3, [r7, #1189]	; 0x4a5
 8000686:	461e      	mov	r6, r3
 8000688:	f897 34a7 	ldrb.w	r3, [r7, #1191]	; 0x4a7
 800068c:	f897 24a8 	ldrb.w	r2, [r7, #1192]	; 0x4a8
 8000690:	f897 14a9 	ldrb.w	r1, [r7, #1193]	; 0x4a9
 8000694:	f897 04aa 	ldrb.w	r0, [r7, #1194]	; 0x4aa
 8000698:	4604      	mov	r4, r0
 800069a:	f207 40bc 	addw	r0, r7, #1212	; 0x4bc
 800069e:	9403      	str	r4, [sp, #12]
 80006a0:	9102      	str	r1, [sp, #8]
 80006a2:	9201      	str	r2, [sp, #4]
 80006a4:	9300      	str	r3, [sp, #0]
 80006a6:	4633      	mov	r3, r6
 80006a8:	462a      	mov	r2, r5
 80006aa:	493f      	ldr	r1, [pc, #252]	; (80007a8 <main+0x1c8>)
 80006ac:	f00e fc18 	bl	800eee0 <siprintf>
  HAL_UART_Transmit(&huart1, tt, strlen(tt),100);
 80006b0:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 80006b4:	4618      	mov	r0, r3
 80006b6:	f7ff fdbd 	bl	8000234 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f207 41bc 	addw	r1, r7, #1212	; 0x4bc
 80006c2:	2364      	movs	r3, #100	; 0x64
 80006c4:	4836      	ldr	r0, [pc, #216]	; (80007a0 <main+0x1c0>)
 80006c6:	f007 feeb 	bl	80084a0 <HAL_UART_Transmit>
  extern uint8_t test_msg[10200];

  FATFS fs;
  FIL fl;
  FRESULT res;
  res=f_mount(&fs,"",1);
 80006ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80006ce:	2201      	movs	r2, #1
 80006d0:	4936      	ldr	r1, [pc, #216]	; (80007ac <main+0x1cc>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f00d fb64 	bl	800dda0 <f_mount>
 80006d8:	4603      	mov	r3, r0
 80006da:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527
  print_param("mount", res);
 80006de:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 80006e2:	4619      	mov	r1, r3
 80006e4:	4832      	ldr	r0, [pc, #200]	; (80007b0 <main+0x1d0>)
 80006e6:	f7ff ff3d 	bl	8000564 <print_param>
  uint32_t btwritten;
  uint32_t tmstmp;

  if(res==FR_OK){
 80006ea:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d153      	bne.n	800079a <main+0x1ba>
	  HAL_UART_Transmit(&huart1, "SM\n", 3,100);
 80006f2:	2364      	movs	r3, #100	; 0x64
 80006f4:	2203      	movs	r2, #3
 80006f6:	492f      	ldr	r1, [pc, #188]	; (80007b4 <main+0x1d4>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <main+0x1c0>)
 80006fa:	f007 fed1 	bl	80084a0 <HAL_UART_Transmit>
   if(f_open(&fl,"testfile",FA_CREATE_ALWAYS|FA_WRITE)==FR_OK){
 80006fe:	f107 0308 	add.w	r3, r7, #8
 8000702:	220a      	movs	r2, #10
 8000704:	492c      	ldr	r1, [pc, #176]	; (80007b8 <main+0x1d8>)
 8000706:	4618      	mov	r0, r3
 8000708:	f00d fb90 	bl	800de2c <f_open>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d143      	bne.n	800079a <main+0x1ba>
	   tmstmp=HAL_GetTick();
 8000712:	f001 f9bb 	bl	8001a8c <HAL_GetTick>
 8000716:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520

	   for(int i=0;i<1;i++){
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8000720:	e01f      	b.n	8000762 <main+0x182>
		   res=f_write(&fl,test_msg,10000,&btwritten);
 8000722:	1d3b      	adds	r3, r7, #4
 8000724:	f107 0008 	add.w	r0, r7, #8
 8000728:	f242 7210 	movw	r2, #10000	; 0x2710
 800072c:	4923      	ldr	r1, [pc, #140]	; (80007bc <main+0x1dc>)
 800072e:	f00d fe5b 	bl	800e3e8 <f_write>
 8000732:	4603      	mov	r3, r0
 8000734:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527
		   if(res!=FR_OK){
 8000738:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 800073c:	2b00      	cmp	r3, #0
 800073e:	d00b      	beq.n	8000758 <main+0x178>
			 print_param("c",i);
 8000740:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8000744:	4619      	mov	r1, r3
 8000746:	481e      	ldr	r0, [pc, #120]	; (80007c0 <main+0x1e0>)
 8000748:	f7ff ff0c 	bl	8000564 <print_param>
			 print_param("r",res);
 800074c:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 8000750:	4619      	mov	r1, r3
 8000752:	481c      	ldr	r0, [pc, #112]	; (80007c4 <main+0x1e4>)
 8000754:	f7ff ff06 	bl	8000564 <print_param>
	   for(int i=0;i<1;i++){
 8000758:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800075c:	3301      	adds	r3, #1
 800075e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8000762:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8000766:	2b00      	cmp	r3, #0
 8000768:	dddb      	ble.n	8000722 <main+0x142>
		   }
	   }

	   tmstmp=HAL_GetTick()-tmstmp;
 800076a:	f001 f98f 	bl	8001a8c <HAL_GetTick>
 800076e:	4602      	mov	r2, r0
 8000770:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8000774:	1ad3      	subs	r3, r2, r3
 8000776:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520

	   print_param("Dlt",tmstmp);
 800077a:	f8d7 1520 	ldr.w	r1, [r7, #1312]	; 0x520
 800077e:	4812      	ldr	r0, [pc, #72]	; (80007c8 <main+0x1e8>)
 8000780:	f7ff fef0 	bl	8000564 <print_param>

	  f_close(&fl);
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4618      	mov	r0, r3
 800078a:	f00e f913 	bl	800e9b4 <f_close>
	  HAL_UART_Transmit(&huart1, "FC\n", 3,100);
 800078e:	2364      	movs	r3, #100	; 0x64
 8000790:	2203      	movs	r2, #3
 8000792:	490e      	ldr	r1, [pc, #56]	; (80007cc <main+0x1ec>)
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <main+0x1c0>)
 8000796:	f007 fe83 	bl	80084a0 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x1ba>
 800079c:	0800f61c 	.word	0x0800f61c
 80007a0:	20002b60 	.word	0x20002b60
 80007a4:	20002d48 	.word	0x20002d48
 80007a8:	0800f624 	.word	0x0800f624
 80007ac:	0800f648 	.word	0x0800f648
 80007b0:	0800f64c 	.word	0x0800f64c
 80007b4:	0800f654 	.word	0x0800f654
 80007b8:	0800f658 	.word	0x0800f658
 80007bc:	20000000 	.word	0x20000000
 80007c0:	0800f664 	.word	0x0800f664
 80007c4:	0800f668 	.word	0x0800f668
 80007c8:	0800f66c 	.word	0x0800f66c
 80007cc:	0800f670 	.word	0x0800f670

080007d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b098      	sub	sp, #96	; 0x60
 80007d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d6:	f107 0318 	add.w	r3, r7, #24
 80007da:	2248      	movs	r2, #72	; 0x48
 80007dc:	2100      	movs	r1, #0
 80007de:	4618      	mov	r0, r3
 80007e0:	f00e fa86 	bl	800ecf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e4:	1d3b      	adds	r3, r7, #4
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80007f2:	2000      	movs	r0, #0
 80007f4:	f003 f900 	bl	80039f8 <HAL_PWREx_ControlVoltageScaling>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80007fe:	f000 fb8d 	bl	8000f1c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000802:	f003 f8db 	bl	80039bc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <SystemClock_Config+0xb4>)
 8000808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800080c:	4a1d      	ldr	r2, [pc, #116]	; (8000884 <SystemClock_Config+0xb4>)
 800080e:	f023 0318 	bic.w	r3, r3, #24
 8000812:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8000816:	2305      	movs	r3, #5
 8000818:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800081a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000820:	2381      	movs	r3, #129	; 0x81
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000828:	2303      	movs	r3, #3
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000830:	2312      	movs	r3, #18
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000834:	2307      	movs	r3, #7
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	4618      	mov	r0, r3
 8000846:	f003 f967 	bl	8003b18 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000850:	f000 fb64 	bl	8000f1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2104      	movs	r1, #4
 800086c:	4618      	mov	r0, r3
 800086e:	f003 fe29 	bl	80044c4 <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000878:	f000 fb50 	bl	8000f1c <Error_Handler>
  }
}
 800087c:	bf00      	nop
 800087e:	3760      	adds	r7, #96	; 0x60
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40021000 	.word	0x40021000

08000888 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800088c:	4b1b      	ldr	r3, [pc, #108]	; (80008fc <MX_I2C1_Init+0x74>)
 800088e:	4a1c      	ldr	r2, [pc, #112]	; (8000900 <MX_I2C1_Init+0x78>)
 8000890:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40D04660;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_I2C1_Init+0x74>)
 8000894:	4a1b      	ldr	r2, [pc, #108]	; (8000904 <MX_I2C1_Init+0x7c>)
 8000896:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000898:	4b18      	ldr	r3, [pc, #96]	; (80008fc <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_I2C1_Init+0x74>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_I2C1_Init+0x74>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008bc:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_I2C1_Init+0x74>)
 80008be:	2200      	movs	r2, #0
 80008c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008c2:	480e      	ldr	r0, [pc, #56]	; (80008fc <MX_I2C1_Init+0x74>)
 80008c4:	f001 febe 	bl	8002644 <HAL_I2C_Init>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ce:	f000 fb25 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <MX_I2C1_Init+0x74>)
 80008d6:	f002 fcfc 	bl	80032d2 <HAL_I2CEx_ConfigAnalogFilter>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e0:	f000 fb1c 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008e4:	2100      	movs	r1, #0
 80008e6:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_I2C1_Init+0x74>)
 80008e8:	f002 fd3e 	bl	8003368 <HAL_I2CEx_ConfigDigitalFilter>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008f2:	f000 fb13 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20002990 	.word	0x20002990
 8000900:	40005400 	.word	0x40005400
 8000904:	40d04660 	.word	0x40d04660

08000908 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 800090c:	4b1b      	ldr	r3, [pc, #108]	; (800097c <MX_I2C4_Init+0x74>)
 800090e:	4a1c      	ldr	r2, [pc, #112]	; (8000980 <MX_I2C4_Init+0x78>)
 8000910:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10F0B6FF;
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_I2C4_Init+0x74>)
 8000914:	4a1b      	ldr	r2, [pc, #108]	; (8000984 <MX_I2C4_Init+0x7c>)
 8000916:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000918:	4b18      	ldr	r3, [pc, #96]	; (800097c <MX_I2C4_Init+0x74>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <MX_I2C4_Init+0x74>)
 8000920:	2201      	movs	r2, #1
 8000922:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000924:	4b15      	ldr	r3, [pc, #84]	; (800097c <MX_I2C4_Init+0x74>)
 8000926:	2200      	movs	r2, #0
 8000928:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <MX_I2C4_Init+0x74>)
 800092c:	2200      	movs	r2, #0
 800092e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <MX_I2C4_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000936:	4b11      	ldr	r3, [pc, #68]	; (800097c <MX_I2C4_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800093c:	4b0f      	ldr	r3, [pc, #60]	; (800097c <MX_I2C4_Init+0x74>)
 800093e:	2200      	movs	r2, #0
 8000940:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000942:	480e      	ldr	r0, [pc, #56]	; (800097c <MX_I2C4_Init+0x74>)
 8000944:	f001 fe7e 	bl	8002644 <HAL_I2C_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800094e:	f000 fae5 	bl	8000f1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4809      	ldr	r0, [pc, #36]	; (800097c <MX_I2C4_Init+0x74>)
 8000956:	f002 fcbc 	bl	80032d2 <HAL_I2CEx_ConfigAnalogFilter>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000960:	f000 fadc 	bl	8000f1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000964:	2100      	movs	r1, #0
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <MX_I2C4_Init+0x74>)
 8000968:	f002 fcfe 	bl	8003368 <HAL_I2CEx_ConfigDigitalFilter>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000972:	f000 fad3 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200029e4 	.word	0x200029e4
 8000980:	40008400 	.word	0x40008400
 8000984:	10f0b6ff 	.word	0x10f0b6ff

08000988 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800098c:	f002 fd38 	bl	8003400 <HAL_ICACHE_Enable>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000996:	f000 fac1 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80009a4:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009a6:	4a23      	ldr	r2, [pc, #140]	; (8000a34 <MX_LPUART1_UART_Init+0x94>)
 80009a8:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b1f      	ldr	r3, [pc, #124]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b1d      	ldr	r3, [pc, #116]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80009be:	4b1c      	ldr	r3, [pc, #112]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b1a      	ldr	r3, [pc, #104]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b19      	ldr	r3, [pc, #100]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d0:	4b17      	ldr	r3, [pc, #92]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009d6:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80009e8:	4811      	ldr	r0, [pc, #68]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009ea:	f007 fd09 	bl	8008400 <HAL_UART_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80009f4:	f000 fa92 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009f8:	2100      	movs	r1, #0
 80009fa:	480d      	ldr	r0, [pc, #52]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 80009fc:	f008 fed3 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a06:	f000 fa89 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4808      	ldr	r0, [pc, #32]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 8000a0e:	f008 ff08 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a18:	f000 fa80 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_LPUART1_UART_Init+0x90>)
 8000a1e:	f008 fe89 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a28:	f000 fa78 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20002a38 	.word	0x20002a38
 8000a34:	40008000 	.word	0x40008000

08000a38 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a3e:	4a23      	ldr	r2, [pc, #140]	; (8000acc <MX_UART4_Init+0x94>)
 8000a40:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000a42:	4b21      	ldr	r3, [pc, #132]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a48:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000a50:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a5e:	220c      	movs	r2, #12
 8000a60:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a68:	4b17      	ldr	r3, [pc, #92]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a74:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7a:	4b13      	ldr	r3, [pc, #76]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000a80:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a82:	f007 fcbd 	bl	8008400 <HAL_UART_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000a8c:	f000 fa46 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a90:	2100      	movs	r1, #0
 8000a92:	480d      	ldr	r0, [pc, #52]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000a94:	f008 fe87 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000a9e:	f000 fa3d 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000aa6:	f008 febc 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ab0:	f000 fa34 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_UART4_Init+0x90>)
 8000ab6:	f008 fe3d 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ac0:	f000 fa2c 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20002acc 	.word	0x20002acc
 8000acc:	40004c00 	.word	0x40004c00

08000ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_USART1_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b1a:	f007 fc71 	bl	8008400 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 f9fa 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b2c:	f008 fe3b 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 f9f1 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b3e:	f008 fe70 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f9e8 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b4e:	f008 fdf1 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f9e0 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20002b60 	.word	0x20002b60
 8000b64:	40013800 	.word	0x40013800

08000b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_USART2_UART_Init+0x94>)
 8000b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b8e:	220c      	movs	r2, #12
 8000b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000bb2:	f007 fc25 	bl	8008400 <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000bbc:	f000 f9ae 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000bc4:	f008 fdef 	bl	80097a6 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000bce:	f000 f9a5 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000bd6:	f008 fe24 	bl	8009822 <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000be0:	f000 f99c 	bl	8000f1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_USART2_UART_Init+0x90>)
 8000be6:	f008 fda5 	bl	8009734 <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000bf0:	f000 f994 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20002bf4 	.word	0x20002bf4
 8000bfc:	40004400 	.word	0x40004400

08000c00 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_OCTOSPI1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c1c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000c24:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c26:	2201      	movs	r2, #1
 8000c28:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000c2a:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_3;
 8000c30:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000c3c:	4b0d      	ldr	r3, [pc, #52]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000c48:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000c60:	4804      	ldr	r0, [pc, #16]	; (8000c74 <MX_OCTOSPI1_Init+0x74>)
 8000c62:	f002 fbdd 	bl	8003420 <HAL_OSPI_Init>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_OCTOSPI1_Init+0x70>
  {
    Error_Handler();
 8000c6c:	f000 f956 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	20002cf0 	.word	0x20002cf0
 8000c78:	44021000 	.word	0x44021000

08000c7c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b086      	sub	sp, #24
 8000c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
 8000c90:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c92:	4b1d      	ldr	r3, [pc, #116]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000c94:	4a1d      	ldr	r2, [pc, #116]	; (8000d0c <MX_RTC_Init+0x90>)
 8000c96:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c98:	4b1b      	ldr	r3, [pc, #108]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c9e:	4b1a      	ldr	r3, [pc, #104]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000ca0:	227f      	movs	r2, #127	; 0x7f
 8000ca2:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000ca4:	4b18      	ldr	r3, [pc, #96]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000ca6:	22ff      	movs	r2, #255	; 0xff
 8000ca8:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000caa:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000cb0:	4b15      	ldr	r3, [pc, #84]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cbe:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cc2:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000cc4:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000cca:	480f      	ldr	r0, [pc, #60]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000ccc:	f005 fd4a 	bl	8006764 <HAL_RTC_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8000cd6:	f000 f921 	bl	8000f1c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8000cea:	463b      	mov	r3, r7
 8000cec:	4619      	mov	r1, r3
 8000cee:	4806      	ldr	r0, [pc, #24]	; (8000d08 <MX_RTC_Init+0x8c>)
 8000cf0:	f005 ff0c 	bl	8006b0c <HAL_RTCEx_PrivilegeModeSet>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8000cfa:	f000 f90f 	bl	8000f1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20002d48 	.word	0x20002d48
 8000d0c:	40002800 	.word	0x40002800

08000d10 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000d14:	4b0b      	ldr	r3, [pc, #44]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d16:	4a0c      	ldr	r2, [pc, #48]	; (8000d48 <MX_SDMMC1_SD_Init+0x38>)
 8000d18:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000d1a:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2c:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000d2e:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000d34:	4b03      	ldr	r3, [pc, #12]	; (8000d44 <MX_SDMMC1_SD_Init+0x34>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */


  /* USER CODE END SDMMC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	20002d70 	.word	0x20002d70
 8000d48:	420c8000 	.word	0x420c8000

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000d52:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d56:	4a11      	ldr	r2, [pc, #68]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6a:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6493      	str	r3, [r2, #72]	; 0x48
 8000d76:	4b09      	ldr	r3, [pc, #36]	; (8000d9c <MX_DMA_Init+0x50>)
 8000d78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	603b      	str	r3, [r7, #0]
 8000d80:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000d82:	2200      	movs	r2, #0
 8000d84:	2100      	movs	r1, #0
 8000d86:	201d      	movs	r0, #29
 8000d88:	f000 ff8b 	bl	8001ca2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000d8c:	201d      	movs	r0, #29
 8000d8e:	f000 ffa2 	bl	8001cd6 <HAL_NVIC_EnableIRQ>

}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	40021000 	.word	0x40021000

08000da0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b08c      	sub	sp, #48	; 0x30
 8000da4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da6:	f107 031c 	add.w	r3, r7, #28
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	4b2f      	ldr	r3, [pc, #188]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a2e      	ldr	r2, [pc, #184]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dbc:	f043 0310 	orr.w	r3, r3, #16
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b2c      	ldr	r3, [pc, #176]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0310 	and.w	r3, r3, #16
 8000dca:	61bb      	str	r3, [r7, #24]
 8000dcc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dce:	4b29      	ldr	r3, [pc, #164]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	4a28      	ldr	r2, [pc, #160]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dd4:	f043 0304 	orr.w	r3, r3, #4
 8000dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dda:	4b26      	ldr	r3, [pc, #152]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	f003 0304 	and.w	r3, r3, #4
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfa:	613b      	str	r3, [r7, #16]
 8000dfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	4a1c      	ldr	r2, [pc, #112]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	4a16      	ldr	r2, [pc, #88]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e1c:	f043 0302 	orr.w	r3, r3, #2
 8000e20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e2e:	4b11      	ldr	r3, [pc, #68]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	4a10      	ldr	r2, [pc, #64]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e34:	f043 0308 	orr.w	r3, r3, #8
 8000e38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3a:	4b0e      	ldr	r3, [pc, #56]	; (8000e74 <MX_GPIO_Init+0xd4>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	f003 0308 	and.w	r3, r3, #8
 8000e42:	607b      	str	r3, [r7, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_MCU_PROG_GPIO_Port, PWR_MCU_PROG_Pin, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2108      	movs	r1, #8
 8000e4a:	480b      	ldr	r0, [pc, #44]	; (8000e78 <MX_GPIO_Init+0xd8>)
 8000e4c:	f001 fbe2 	bl	8002614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWR_MCU_PROG_Pin */
  GPIO_InitStruct.Pin = PWR_MCU_PROG_Pin;
 8000e50:	2308      	movs	r3, #8
 8000e52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e54:	2301      	movs	r3, #1
 8000e56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PWR_MCU_PROG_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	4804      	ldr	r0, [pc, #16]	; (8000e78 <MX_GPIO_Init+0xd8>)
 8000e68:	f001 fa54 	bl	8002314 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e6c:	bf00      	nop
 8000e6e:	3730      	adds	r7, #48	; 0x30
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40021000 	.word	0x40021000
 8000e78:	42021000 	.word	0x42021000

08000e7c <HAL_SD_TxCpltCallback>:
/* USER CODE BEGIN 4 */
uint32_t sd_dma_rx_semaphore;
uint32_t sd_dma_tx_semaphore;

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	sd_dma_tx_semaphore=1;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_SD_TxCpltCallback+0x24>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
	print_param("tcb",hsd->ErrorCode);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4804      	ldr	r0, [pc, #16]	; (8000ea4 <HAL_SD_TxCpltCallback+0x28>)
 8000e92:	f7ff fb67 	bl	8000564 <print_param>
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	20002df0 	.word	0x20002df0
 8000ea4:	0800f674 	.word	0x0800f674

08000ea8 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	sd_dma_rx_semaphore=1;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_SD_RxCpltCallback+0x24>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
	print_param("rCb",hsd->ErrorCode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4804      	ldr	r0, [pc, #16]	; (8000ed0 <HAL_SD_RxCpltCallback+0x28>)
 8000ebe:	f7ff fb51 	bl	8000564 <print_param>

}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20002dec 	.word	0x20002dec
 8000ed0:	0800f678 	.word	0x0800f678

08000ed4 <HAL_SD_ErrorCallback>:
void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  print_param("ecb",hsd->ErrorCode);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480a      	ldr	r0, [pc, #40]	; (8000f0c <HAL_SD_ErrorCallback+0x38>)
 8000ee4:	f7ff fb3e 	bl	8000564 <print_param>
  print_param("STAecb",hsd1.Instance->STA);
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <HAL_SD_ErrorCallback+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4808      	ldr	r0, [pc, #32]	; (8000f14 <HAL_SD_ErrorCallback+0x40>)
 8000ef2:	f7ff fb37 	bl	8000564 <print_param>
  print_param("CLKCR",hsd1.Instance->CLKCR);
 8000ef6:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_SD_ErrorCallback+0x3c>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	685b      	ldr	r3, [r3, #4]
 8000efc:	4619      	mov	r1, r3
 8000efe:	4806      	ldr	r0, [pc, #24]	; (8000f18 <HAL_SD_ErrorCallback+0x44>)
 8000f00:	f7ff fb30 	bl	8000564 <print_param>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	0800f67c 	.word	0x0800f67c
 8000f10:	20002d70 	.word	0x20002d70
 8000f14:	0800f680 	.word	0x0800f680
 8000f18:	0800f688 	.word	0x0800f688

08000f1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, "err", 3,100);
 8000f20:	2364      	movs	r3, #100	; 0x64
 8000f22:	2203      	movs	r2, #3
 8000f24:	4903      	ldr	r1, [pc, #12]	; (8000f34 <Error_Handler+0x18>)
 8000f26:	4804      	ldr	r0, [pc, #16]	; (8000f38 <Error_Handler+0x1c>)
 8000f28:	f007 faba 	bl	80084a0 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2c:	b672      	cpsid	i
}
 8000f2e:	bf00      	nop
  __disable_irq();
  while (1)
 8000f30:	e7fe      	b.n	8000f30 <Error_Handler+0x14>
 8000f32:	bf00      	nop
 8000f34:	0800f690 	.word	0x0800f690
 8000f38:	20002b60 	.word	0x20002b60

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <HAL_MspInit+0x44>)
 8000f44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f46:	4a0e      	ldr	r2, [pc, #56]	; (8000f80 <HAL_MspInit+0x44>)
 8000f48:	f043 0301 	orr.w	r3, r3, #1
 8000f4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f4e:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <HAL_MspInit+0x44>)
 8000f50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f52:	f003 0301 	and.w	r3, r3, #1
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <HAL_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a08      	ldr	r2, [pc, #32]	; (8000f80 <HAL_MspInit+0x44>)
 8000f60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f72:	f002 fd9d 	bl	8003ab0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f76:	bf00      	nop
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b0      	sub	sp, #192	; 0xc0
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	f107 0318 	add.w	r3, r7, #24
 8000fa0:	2294      	movs	r2, #148	; 0x94
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f00d fea3 	bl	800ecf0 <memset>
  if(hi2c->Instance==I2C1)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_I2C_MspInit+0x154>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d14b      	bne.n	800104c <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fb4:	2340      	movs	r3, #64	; 0x40
 8000fb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fbc:	f107 0318 	add.w	r3, r7, #24
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f003 fd63 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000fcc:	f7ff ffa6 	bl	8000f1c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd0:	4b42      	ldr	r3, [pc, #264]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	4a41      	ldr	r2, [pc, #260]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fdc:	4b3f      	ldr	r3, [pc, #252]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8000fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe0:	f003 0302 	and.w	r3, r3, #2
 8000fe4:	617b      	str	r3, [r7, #20]
 8000fe6:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fe8:	23c0      	movs	r3, #192	; 0xc0
 8000fea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fee:	2312      	movs	r3, #18
 8000ff0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001000:	2304      	movs	r3, #4
 8001002:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001006:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800100a:	4619      	mov	r1, r3
 800100c:	4834      	ldr	r0, [pc, #208]	; (80010e0 <HAL_I2C_MspInit+0x15c>)
 800100e:	f001 f981 	bl	8002314 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8001014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8001018:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800101c:	6593      	str	r3, [r2, #88]	; 0x58
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8001020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2037      	movs	r0, #55	; 0x37
 8001030:	f000 fe37 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001034:	2037      	movs	r0, #55	; 0x37
 8001036:	f000 fe4e 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800103a:	2200      	movs	r2, #0
 800103c:	2100      	movs	r1, #0
 800103e:	2038      	movs	r0, #56	; 0x38
 8001040:	f000 fe2f 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001044:	2038      	movs	r0, #56	; 0x38
 8001046:	f000 fe46 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 800104a:	e041      	b.n	80010d0 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C4)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a24      	ldr	r2, [pc, #144]	; (80010e4 <HAL_I2C_MspInit+0x160>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d13c      	bne.n	80010d0 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001056:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800105a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0318 	add.w	r3, r7, #24
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fd11 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 8001070:	f7ff ff54 	bl	8000f1c <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001074:	4b19      	ldr	r3, [pc, #100]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	4a18      	ldr	r2, [pc, #96]	; (80010dc <HAL_I2C_MspInit+0x158>)
 800107a:	f043 0308 	orr.w	r3, r3, #8
 800107e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <HAL_I2C_MspInit+0x158>)
 8001082:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001084:	f003 0308 	and.w	r3, r3, #8
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800108c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001094:	2312      	movs	r3, #18
 8001096:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80010a6:	2304      	movs	r3, #4
 80010a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ac:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <HAL_I2C_MspInit+0x164>)
 80010b4:	f001 f92e 	bl	8002314 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_I2C_MspInit+0x158>)
 80010ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_I2C_MspInit+0x158>)
 80010be:	f043 0302 	orr.w	r3, r3, #2
 80010c2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <HAL_I2C_MspInit+0x158>)
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	f003 0302 	and.w	r3, r3, #2
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
}
 80010d0:	bf00      	nop
 80010d2:	37c0      	adds	r7, #192	; 0xc0
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40005400 	.word	0x40005400
 80010dc:	40021000 	.word	0x40021000
 80010e0:	42020400 	.word	0x42020400
 80010e4:	40008400 	.word	0x40008400
 80010e8:	42020c00 	.word	0x42020c00

080010ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0b4      	sub	sp, #208	; 0xd0
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001104:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001108:	2294      	movs	r2, #148	; 0x94
 800110a:	2100      	movs	r1, #0
 800110c:	4618      	mov	r0, r3
 800110e:	f00d fdef 	bl	800ecf0 <memset>
  if(huart->Instance==LPUART1)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4aac      	ldr	r2, [pc, #688]	; (80013c8 <HAL_UART_MspInit+0x2dc>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d144      	bne.n	80011a6 <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800111c:	2320      	movs	r3, #32
 800111e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001120:	2300      	movs	r3, #0
 8001122:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001124:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001128:	4618      	mov	r0, r3
 800112a:	f003 fcaf 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001134:	f7ff fef2 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001138:	4ba4      	ldr	r3, [pc, #656]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800113a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800113c:	4aa3      	ldr	r2, [pc, #652]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001144:	4ba1      	ldr	r3, [pc, #644]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
 800114e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b9e      	ldr	r3, [pc, #632]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001154:	4a9d      	ldr	r2, [pc, #628]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800115c:	4b9b      	ldr	r3, [pc, #620]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	623b      	str	r3, [r7, #32]
 8001166:	6a3b      	ldr	r3, [r7, #32]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001168:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800116c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001170:	2302      	movs	r3, #2
 8001172:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001182:	2308      	movs	r3, #8
 8001184:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800118c:	4619      	mov	r1, r3
 800118e:	4890      	ldr	r0, [pc, #576]	; (80013d0 <HAL_UART_MspInit+0x2e4>)
 8001190:	f001 f8c0 	bl	8002314 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2042      	movs	r0, #66	; 0x42
 800119a:	f000 fd82 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800119e:	2042      	movs	r0, #66	; 0x42
 80011a0:	f000 fd99 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011a4:	e10c      	b.n	80013c0 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==UART4)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4a8a      	ldr	r2, [pc, #552]	; (80013d4 <HAL_UART_MspInit+0x2e8>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d143      	bne.n	8001238 <HAL_UART_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80011b0:	2308      	movs	r3, #8
 80011b2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80011b4:	2300      	movs	r3, #0
 80011b6:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fc65 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80011c8:	f7ff fea8 	bl	8000f1c <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 80011cc:	4b7f      	ldr	r3, [pc, #508]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d0:	4a7e      	ldr	r2, [pc, #504]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80011d6:	6593      	str	r3, [r2, #88]	; 0x58
 80011d8:	4b7c      	ldr	r3, [pc, #496]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011e0:	61fb      	str	r3, [r7, #28]
 80011e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e4:	4b79      	ldr	r3, [pc, #484]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e8:	4a78      	ldr	r2, [pc, #480]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011ea:	f043 0301 	orr.w	r3, r3, #1
 80011ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f0:	4b76      	ldr	r3, [pc, #472]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 80011f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f4:	f003 0301 	and.w	r3, r3, #1
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011fc:	2303      	movs	r3, #3
 80011fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001202:	2302      	movs	r3, #2
 8001204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120e:	2300      	movs	r3, #0
 8001210:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001214:	2308      	movs	r3, #8
 8001216:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800121e:	4619      	mov	r1, r3
 8001220:	486d      	ldr	r0, [pc, #436]	; (80013d8 <HAL_UART_MspInit+0x2ec>)
 8001222:	f001 f877 	bl	8002314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001226:	2200      	movs	r2, #0
 8001228:	2100      	movs	r1, #0
 800122a:	2040      	movs	r0, #64	; 0x40
 800122c:	f000 fd39 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001230:	2040      	movs	r0, #64	; 0x40
 8001232:	f000 fd50 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 8001236:	e0c3      	b.n	80013c0 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a67      	ldr	r2, [pc, #412]	; (80013dc <HAL_UART_MspInit+0x2f0>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d176      	bne.n	8001330 <HAL_UART_MspInit+0x244>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001242:	2301      	movs	r3, #1
 8001244:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001246:	2300      	movs	r3, #0
 8001248:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800124a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800124e:	4618      	mov	r0, r3
 8001250:	f003 fc1c 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <HAL_UART_MspInit+0x172>
      Error_Handler();
 800125a:	f7ff fe5f 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800125e:	4b5b      	ldr	r3, [pc, #364]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001260:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001268:	6613      	str	r3, [r2, #96]	; 0x60
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800126e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001272:	617b      	str	r3, [r7, #20]
 8001274:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	4b55      	ldr	r3, [pc, #340]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127a:	4a54      	ldr	r2, [pc, #336]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001282:	4b52      	ldr	r3, [pc, #328]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001286:	f003 0301 	and.w	r3, r3, #1
 800128a:	613b      	str	r3, [r7, #16]
 800128c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800128e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001292:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a2:	2300      	movs	r3, #0
 80012a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80012a8:	2307      	movs	r3, #7
 80012aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80012b2:	4619      	mov	r1, r3
 80012b4:	4848      	ldr	r0, [pc, #288]	; (80013d8 <HAL_UART_MspInit+0x2ec>)
 80012b6:	f001 f82d 	bl	8002314 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel1;
 80012ba:	4b49      	ldr	r3, [pc, #292]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012bc:	4a49      	ldr	r2, [pc, #292]	; (80013e4 <HAL_UART_MspInit+0x2f8>)
 80012be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80012c0:	4b47      	ldr	r3, [pc, #284]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012c2:	221a      	movs	r2, #26
 80012c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c6:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012c8:	2210      	movs	r2, #16
 80012ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012cc:	4b44      	ldr	r3, [pc, #272]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d8:	4b41      	ldr	r3, [pc, #260]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012da:	2200      	movs	r2, #0
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012de:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80012e4:	4b3e      	ldr	r3, [pc, #248]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80012ea:	4b3d      	ldr	r3, [pc, #244]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80012f0:	483b      	ldr	r0, [pc, #236]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 80012f2:	f000 fd0b 	bl	8001d0c <HAL_DMA_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <HAL_UART_MspInit+0x214>
      Error_Handler();
 80012fc:	f7ff fe0e 	bl	8000f1c <Error_Handler>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001300:	2110      	movs	r1, #16
 8001302:	4837      	ldr	r0, [pc, #220]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 8001304:	f000 ff73 	bl	80021ee <HAL_DMA_ConfigChannelAttributes>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800130e:	f7ff fe05 	bl	8000f1c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 8001316:	67da      	str	r2, [r3, #124]	; 0x7c
 8001318:	4a31      	ldr	r2, [pc, #196]	; (80013e0 <HAL_UART_MspInit+0x2f4>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	203d      	movs	r0, #61	; 0x3d
 8001324:	f000 fcbd 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001328:	203d      	movs	r0, #61	; 0x3d
 800132a:	f000 fcd4 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 800132e:	e047      	b.n	80013c0 <HAL_UART_MspInit+0x2d4>
  else if(huart->Instance==USART2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a2c      	ldr	r2, [pc, #176]	; (80013e8 <HAL_UART_MspInit+0x2fc>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d142      	bne.n	80013c0 <HAL_UART_MspInit+0x2d4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800133a:	2302      	movs	r3, #2
 800133c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800133e:	2300      	movs	r3, #0
 8001340:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001342:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fba0 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_UART_MspInit+0x26a>
      Error_Handler();
 8001352:	f7ff fde3 	bl	8000f1c <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001356:	4b1d      	ldr	r3, [pc, #116]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135a:	4a1c      	ldr	r2, [pc, #112]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800135c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001360:	6593      	str	r3, [r2, #88]	; 0x58
 8001362:	4b1a      	ldr	r3, [pc, #104]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a16      	ldr	r2, [pc, #88]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b14      	ldr	r3, [pc, #80]	; (80013cc <HAL_UART_MspInit+0x2e0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60bb      	str	r3, [r7, #8]
 8001384:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001386:	230c      	movs	r3, #12
 8001388:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001392:	2300      	movs	r3, #0
 8001394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139e:	2307      	movs	r3, #7
 80013a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80013a8:	4619      	mov	r1, r3
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <HAL_UART_MspInit+0x2ec>)
 80013ac:	f000 ffb2 	bl	8002314 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013b0:	2200      	movs	r2, #0
 80013b2:	2100      	movs	r1, #0
 80013b4:	203e      	movs	r0, #62	; 0x3e
 80013b6:	f000 fc74 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013ba:	203e      	movs	r0, #62	; 0x3e
 80013bc:	f000 fc8b 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
}
 80013c0:	bf00      	nop
 80013c2:	37d0      	adds	r7, #208	; 0xd0
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40008000 	.word	0x40008000
 80013cc:	40021000 	.word	0x40021000
 80013d0:	42020400 	.word	0x42020400
 80013d4:	40004c00 	.word	0x40004c00
 80013d8:	42020000 	.word	0x42020000
 80013dc:	40013800 	.word	0x40013800
 80013e0:	20002c88 	.word	0x20002c88
 80013e4:	40020008 	.word	0x40020008
 80013e8:	40004400 	.word	0x40004400

080013ec <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b0ae      	sub	sp, #184	; 0xb8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	2294      	movs	r2, #148	; 0x94
 800140a:	2100      	movs	r1, #0
 800140c:	4618      	mov	r0, r3
 800140e:	f00d fc6f 	bl	800ecf0 <memset>
  if(hospi->Instance==OCTOSPI1)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a26      	ldr	r2, [pc, #152]	; (80014b0 <HAL_OSPI_MspInit+0xc4>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d145      	bne.n	80014a8 <HAL_OSPI_MspInit+0xbc>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800141c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001420:	613b      	str	r3, [r7, #16]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8001422:	2300      	movs	r3, #0
 8001424:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001428:	f107 0310 	add.w	r3, r7, #16
 800142c:	4618      	mov	r0, r3
 800142e:	f003 fb2d 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8001438:	f7ff fd70 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 800143e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001440:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 8001442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001446:	6513      	str	r3, [r2, #80]	; 0x50
 8001448:	4b1a      	ldr	r3, [pc, #104]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 800144a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800144c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001454:	4b17      	ldr	r3, [pc, #92]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 800145a:	f043 0310 	orr.w	r3, r3, #16
 800145e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001460:	4b14      	ldr	r3, [pc, #80]	; (80014b4 <HAL_OSPI_MspInit+0xc8>)
 8001462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	60bb      	str	r3, [r7, #8]
 800146a:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPI1_IO0
    PE13     ------> OCTOSPI1_IO1
    PE14     ------> OCTOSPI1_IO2
    PE15     ------> OCTOSPI1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800146c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001470:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001480:	2303      	movs	r3, #3
 8001482:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001486:	230a      	movs	r3, #10
 8001488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800148c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001490:	4619      	mov	r1, r3
 8001492:	4809      	ldr	r0, [pc, #36]	; (80014b8 <HAL_OSPI_MspInit+0xcc>)
 8001494:	f000 ff3e 	bl	8002314 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 0, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2100      	movs	r1, #0
 800149c:	204c      	movs	r0, #76	; 0x4c
 800149e:	f000 fc00 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80014a2:	204c      	movs	r0, #76	; 0x4c
 80014a4:	f000 fc17 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80014a8:	bf00      	nop
 80014aa:	37b8      	adds	r7, #184	; 0xb8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	44021000 	.word	0x44021000
 80014b4:	40021000 	.word	0x40021000
 80014b8:	42021000 	.word	0x42021000

080014bc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b0a8      	sub	sp, #160	; 0xa0
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c4:	f107 030c 	add.w	r3, r7, #12
 80014c8:	2294      	movs	r2, #148	; 0x94
 80014ca:	2100      	movs	r1, #0
 80014cc:	4618      	mov	r0, r3
 80014ce:	f00d fc0f 	bl	800ecf0 <memset>
  if(hrtc->Instance==RTC)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a16      	ldr	r2, [pc, #88]	; (8001530 <HAL_RTC_MspInit+0x74>)
 80014d8:	4293      	cmp	r3, r2
 80014da:	d124      	bne.n	8001526 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014e0:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80014e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4618      	mov	r0, r3
 80014f0:	f003 facc 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014fa:	f7ff fd0f 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014fe:	4b0d      	ldr	r3, [pc, #52]	; (8001534 <HAL_RTC_MspInit+0x78>)
 8001500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001504:	4a0b      	ldr	r2, [pc, #44]	; (8001534 <HAL_RTC_MspInit+0x78>)
 8001506:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800150a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_RTC_MspInit+0x78>)
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	4a08      	ldr	r2, [pc, #32]	; (8001534 <HAL_RTC_MspInit+0x78>)
 8001514:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001518:	6593      	str	r3, [r2, #88]	; 0x58
 800151a:	4b06      	ldr	r3, [pc, #24]	; (8001534 <HAL_RTC_MspInit+0x78>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001526:	bf00      	nop
 8001528:	37a0      	adds	r7, #160	; 0xa0
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40002800 	.word	0x40002800
 8001534:	40021000 	.word	0x40021000

08001538 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b0b0      	sub	sp, #192	; 0xc0
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001540:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001544:	2200      	movs	r2, #0
 8001546:	601a      	str	r2, [r3, #0]
 8001548:	605a      	str	r2, [r3, #4]
 800154a:	609a      	str	r2, [r3, #8]
 800154c:	60da      	str	r2, [r3, #12]
 800154e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001550:	f107 0318 	add.w	r3, r7, #24
 8001554:	2294      	movs	r2, #148	; 0x94
 8001556:	2100      	movs	r1, #0
 8001558:	4618      	mov	r0, r3
 800155a:	f00d fbc9 	bl	800ecf0 <memset>
  if(hsd->Instance==SDMMC1)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a3f      	ldr	r2, [pc, #252]	; (8001660 <HAL_SD_MspInit+0x128>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d176      	bne.n	8001656 <HAL_SD_MspInit+0x11e>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8001568:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800156c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLSAI1;
 800156e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001572:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSE;
 8001576:	2303      	movs	r3, #3
 8001578:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 2;
 800157a:	2302      	movs	r3, #2
 800157c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 20;
 800157e:	2314      	movs	r3, #20
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001582:	2307      	movs	r3, #7
 8001584:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV4;
 8001586:	2304      	movs	r3, #4
 8001588:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800158a:	2302      	movs	r3, #2
 800158c:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800158e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001592:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	f107 0318 	add.w	r3, r7, #24
 8001598:	4618      	mov	r0, r3
 800159a:	f003 fa77 	bl	8004a8c <HAL_RCCEx_PeriphCLKConfig>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <HAL_SD_MspInit+0x70>
    {
      Error_Handler();
 80015a4:	f7ff fcba 	bl	8000f1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80015a8:	4b2e      	ldr	r3, [pc, #184]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ac:	4a2d      	ldr	r2, [pc, #180]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015ae:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015bc:	617b      	str	r3, [r7, #20]
 80015be:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c0:	4b28      	ldr	r3, [pc, #160]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015c4:	4a27      	ldr	r2, [pc, #156]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015c6:	f043 0304 	orr.w	r3, r3, #4
 80015ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015cc:	4b25      	ldr	r3, [pc, #148]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d0:	f003 0304 	and.w	r3, r3, #4
 80015d4:	613b      	str	r3, [r7, #16]
 80015d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d8:	4b22      	ldr	r3, [pc, #136]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015dc:	4a21      	ldr	r2, [pc, #132]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015de:	f043 0308 	orr.w	r3, r3, #8
 80015e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <HAL_SD_MspInit+0x12c>)
 80015e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80015f0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80015f4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800160a:	230c      	movs	r3, #12
 800160c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001610:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001614:	4619      	mov	r1, r3
 8001616:	4814      	ldr	r0, [pc, #80]	; (8001668 <HAL_SD_MspInit+0x130>)
 8001618:	f000 fe7c 	bl	8002314 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800161c:	2304      	movs	r3, #4
 800161e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001622:	2302      	movs	r3, #2
 8001624:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001628:	2300      	movs	r3, #0
 800162a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800162e:	2303      	movs	r3, #3
 8001630:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001634:	230c      	movs	r3, #12
 8001636:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800163e:	4619      	mov	r1, r3
 8001640:	480a      	ldr	r0, [pc, #40]	; (800166c <HAL_SD_MspInit+0x134>)
 8001642:	f000 fe67 	bl	8002314 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	204e      	movs	r0, #78	; 0x4e
 800164c:	f000 fb29 	bl	8001ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001650:	204e      	movs	r0, #78	; 0x4e
 8001652:	f000 fb40 	bl	8001cd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001656:	bf00      	nop
 8001658:	37c0      	adds	r7, #192	; 0xc0
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	420c8000 	.word	0x420c8000
 8001664:	40021000 	.word	0x40021000
 8001668:	42020800 	.word	0x42020800
 800166c:	42020c00 	.word	0x42020c00

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 f9d2 	bl	8001a64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Channel1_IRQHandler+0x10>)
 80016ca:	f000 fc82 	bl	8001fd2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20002c88 	.word	0x20002c88

080016d8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <I2C1_EV_IRQHandler+0x10>)
 80016de:	f001 f840 	bl	8002762 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20002990 	.word	0x20002990

080016ec <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <I2C1_ER_IRQHandler+0x10>)
 80016f2:	f001 f850 	bl	8002796 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20002990 	.word	0x20002990

08001700 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <USART1_IRQHandler+0x10>)
 8001706:	f006 ff59 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20002b60 	.word	0x20002b60

08001714 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001718:	4802      	ldr	r0, [pc, #8]	; (8001724 <USART2_IRQHandler+0x10>)
 800171a:	f006 ff4f 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20002bf4 	.word	0x20002bf4

08001728 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 29.
  */
void UART4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <UART4_IRQHandler+0x10>)
 800172e:	f006 ff45 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20002acc 	.word	0x20002acc

0800173c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 31.
  */
void LPUART1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001740:	4802      	ldr	r0, [pc, #8]	; (800174c <LPUART1_IRQHandler+0x10>)
 8001742:	f006 ff3b 	bl	80085bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	20002a38 	.word	0x20002a38

08001750 <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001754:	4802      	ldr	r0, [pc, #8]	; (8001760 <OCTOSPI1_IRQHandler+0x10>)
 8001756:	f001 ff1d 	bl	8003594 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20002cf0 	.word	0x20002cf0

08001764 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001768:	4802      	ldr	r0, [pc, #8]	; (8001774 <SDMMC1_IRQHandler+0x10>)
 800176a:	f005 fc63 	bl	8007034 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20002d70 	.word	0x20002d70

08001778 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001780:	4a14      	ldr	r2, [pc, #80]	; (80017d4 <_sbrk+0x5c>)
 8001782:	4b15      	ldr	r3, [pc, #84]	; (80017d8 <_sbrk+0x60>)
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800178c:	4b13      	ldr	r3, [pc, #76]	; (80017dc <_sbrk+0x64>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d102      	bne.n	800179a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <_sbrk+0x64>)
 8001796:	4a12      	ldr	r2, [pc, #72]	; (80017e0 <_sbrk+0x68>)
 8001798:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800179a:	4b10      	ldr	r3, [pc, #64]	; (80017dc <_sbrk+0x64>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d207      	bcs.n	80017b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017a8:	f00d fa68 	bl	800ec7c <__errno>
 80017ac:	4603      	mov	r3, r0
 80017ae:	220c      	movs	r2, #12
 80017b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295
 80017b6:	e009      	b.n	80017cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017b8:	4b08      	ldr	r3, [pc, #32]	; (80017dc <_sbrk+0x64>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017be:	4b07      	ldr	r3, [pc, #28]	; (80017dc <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	4a05      	ldr	r2, [pc, #20]	; (80017dc <_sbrk+0x64>)
 80017c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ca:	68fb      	ldr	r3, [r7, #12]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3718      	adds	r7, #24
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20030000 	.word	0x20030000
 80017d8:	00000800 	.word	0x00000800
 80017dc:	20002df4 	.word	0x20002df4
 80017e0:	20002e48 	.word	0x20002e48

080017e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <SystemInit+0x20>)
 80017ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <SystemInit+0x20>)
 80017f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800180e:	4b4f      	ldr	r3, [pc, #316]	; (800194c <SystemCoreClockUpdate+0x144>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d107      	bne.n	800182a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 800181a:	4b4c      	ldr	r3, [pc, #304]	; (800194c <SystemCoreClockUpdate+0x144>)
 800181c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001820:	0a1b      	lsrs	r3, r3, #8
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e005      	b.n	8001836 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 800182a:	4b48      	ldr	r3, [pc, #288]	; (800194c <SystemCoreClockUpdate+0x144>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	091b      	lsrs	r3, r3, #4
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001836:	4a46      	ldr	r2, [pc, #280]	; (8001950 <SystemCoreClockUpdate+0x148>)
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800183e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001840:	4b42      	ldr	r3, [pc, #264]	; (800194c <SystemCoreClockUpdate+0x144>)
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	f003 030c 	and.w	r3, r3, #12
 8001848:	2b0c      	cmp	r3, #12
 800184a:	d866      	bhi.n	800191a <SystemCoreClockUpdate+0x112>
 800184c:	a201      	add	r2, pc, #4	; (adr r2, 8001854 <SystemCoreClockUpdate+0x4c>)
 800184e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001852:	bf00      	nop
 8001854:	08001889 	.word	0x08001889
 8001858:	0800191b 	.word	0x0800191b
 800185c:	0800191b 	.word	0x0800191b
 8001860:	0800191b 	.word	0x0800191b
 8001864:	08001891 	.word	0x08001891
 8001868:	0800191b 	.word	0x0800191b
 800186c:	0800191b 	.word	0x0800191b
 8001870:	0800191b 	.word	0x0800191b
 8001874:	08001899 	.word	0x08001899
 8001878:	0800191b 	.word	0x0800191b
 800187c:	0800191b 	.word	0x0800191b
 8001880:	0800191b 	.word	0x0800191b
 8001884:	080018a1 	.word	0x080018a1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001888:	4a32      	ldr	r2, [pc, #200]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	6013      	str	r3, [r2, #0]
      break;
 800188e:	e048      	b.n	8001922 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001890:	4b30      	ldr	r3, [pc, #192]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 8001892:	4a31      	ldr	r2, [pc, #196]	; (8001958 <SystemCoreClockUpdate+0x150>)
 8001894:	601a      	str	r2, [r3, #0]
      break;
 8001896:	e044      	b.n	8001922 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001898:	4b2e      	ldr	r3, [pc, #184]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 800189a:	4a30      	ldr	r2, [pc, #192]	; (800195c <SystemCoreClockUpdate+0x154>)
 800189c:	601a      	str	r2, [r3, #0]
      break;
 800189e:	e040      	b.n	8001922 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018a0:	4b2a      	ldr	r3, [pc, #168]	; (800194c <SystemCoreClockUpdate+0x144>)
 80018a2:	68db      	ldr	r3, [r3, #12]
 80018a4:	f003 0303 	and.w	r3, r3, #3
 80018a8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <SystemCoreClockUpdate+0x144>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	f003 030f 	and.w	r3, r3, #15
 80018b4:	3301      	adds	r3, #1
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d003      	beq.n	80018c6 <SystemCoreClockUpdate+0xbe>
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	2b03      	cmp	r3, #3
 80018c2:	d006      	beq.n	80018d2 <SystemCoreClockUpdate+0xca>
 80018c4:	e00b      	b.n	80018de <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <SystemCoreClockUpdate+0x150>)
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80018ce:	613b      	str	r3, [r7, #16]
          break;
 80018d0:	e00b      	b.n	80018ea <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 80018d2:	4a22      	ldr	r2, [pc, #136]	; (800195c <SystemCoreClockUpdate+0x154>)
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80018da:	613b      	str	r3, [r7, #16]
          break;
 80018dc:	e005      	b.n	80018ea <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 80018de:	697a      	ldr	r2, [r7, #20]
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	613b      	str	r3, [r7, #16]
          break;
 80018e8:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 80018ea:	4b18      	ldr	r3, [pc, #96]	; (800194c <SystemCoreClockUpdate+0x144>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	0a1b      	lsrs	r3, r3, #8
 80018f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 80018fc:	4b13      	ldr	r3, [pc, #76]	; (800194c <SystemCoreClockUpdate+0x144>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	0e5b      	lsrs	r3, r3, #25
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 8001916:	6013      	str	r3, [r2, #0]
      break;
 8001918:	e003      	b.n	8001922 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 800191a:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	6013      	str	r3, [r2, #0]
      break;
 8001920:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <SystemCoreClockUpdate+0x144>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	4a0c      	ldr	r2, [pc, #48]	; (8001960 <SystemCoreClockUpdate+0x158>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001932:	4b08      	ldr	r3, [pc, #32]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	fa22 f303 	lsr.w	r3, r2, r3
 800193c:	4a05      	ldr	r2, [pc, #20]	; (8001954 <SystemCoreClockUpdate+0x14c>)
 800193e:	6013      	str	r3, [r2, #0]
}
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	0800f79c 	.word	0x0800f79c
 8001954:	200027d8 	.word	0x200027d8
 8001958:	00f42400 	.word	0x00f42400
 800195c:	00989680 	.word	0x00989680
 8001960:	0800f784 	.word	0x0800f784

08001964 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800199c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001968:	f7ff ff3c 	bl	80017e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800196c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800196e:	e003      	b.n	8001978 <LoopCopyDataInit>

08001970 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001972:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001974:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001976:	3104      	adds	r1, #4

08001978 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001978:	480a      	ldr	r0, [pc, #40]	; (80019a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800197c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800197e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001980:	d3f6      	bcc.n	8001970 <CopyDataInit>
	ldr	r2, =_sbss
 8001982:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8001984:	e002      	b.n	800198c <LoopFillZerobss>

08001986 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001986:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001988:	f842 3b04 	str.w	r3, [r2], #4

0800198c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <LoopForever+0x16>)
	cmp	r2, r3
 800198e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001990:	d3f9      	bcc.n	8001986 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001992:	f00d f979 	bl	800ec88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001996:	f7fe fe23 	bl	80005e0 <main>

0800199a <LoopForever>:

LoopForever:
    b LoopForever
 800199a:	e7fe      	b.n	800199a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 800199c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80019a0:	0800fc9c 	.word	0x0800fc9c
	ldr	r0, =_sdata
 80019a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019a8:	20002848 	.word	0x20002848
	ldr	r2, =_sbss
 80019ac:	20002848 	.word	0x20002848
	ldr	r3, = _ebss
 80019b0:	20002e48 	.word	0x20002e48

080019b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019b4:	e7fe      	b.n	80019b4 <ADC1_2_IRQHandler>

080019b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b082      	sub	sp, #8
 80019ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80019c0:	2004      	movs	r0, #4
 80019c2:	f000 f963 	bl	8001c8c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80019c6:	f7ff ff1f 	bl	8001808 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019ca:	2007      	movs	r0, #7
 80019cc:	f000 f80e 	bl	80019ec <HAL_InitTick>
 80019d0:	4603      	mov	r3, r0
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	71fb      	strb	r3, [r7, #7]
 80019da:	e001      	b.n	80019e0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019dc:	f7ff faae 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019e0:	79fb      	ldrb	r3, [r7, #7]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
	...

080019ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019f8:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_InitTick+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d023      	beq.n	8001a48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a00:	4b16      	ldr	r3, [pc, #88]	; (8001a5c <HAL_InitTick+0x70>)
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <HAL_InitTick+0x6c>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f96b 	bl	8001cf2 <HAL_SYSTICK_Config>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b07      	cmp	r3, #7
 8001a26:	d809      	bhi.n	8001a3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a30:	f000 f937 	bl	8001ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a34:	4a0a      	ldr	r2, [pc, #40]	; (8001a60 <HAL_InitTick+0x74>)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e007      	b.n	8001a4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
 8001a40:	e004      	b.n	8001a4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	73fb      	strb	r3, [r7, #15]
 8001a46:	e001      	b.n	8001a4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200027e0 	.word	0x200027e0
 8001a5c:	200027d8 	.word	0x200027d8
 8001a60:	200027dc 	.word	0x200027dc

08001a64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_IncTick+0x20>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b06      	ldr	r3, [pc, #24]	; (8001a88 <HAL_IncTick+0x24>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4413      	add	r3, r2
 8001a74:	4a04      	ldr	r2, [pc, #16]	; (8001a88 <HAL_IncTick+0x24>)
 8001a76:	6013      	str	r3, [r2, #0]
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	200027e0 	.word	0x200027e0
 8001a88:	20002df8 	.word	0x20002df8

08001a8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a90:	4b03      	ldr	r3, [pc, #12]	; (8001aa0 <HAL_GetTick+0x14>)
 8001a92:	681b      	ldr	r3, [r3, #0]
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20002df8 	.word	0x20002df8

08001aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff ffee 	bl	8001a8c <HAL_GetTick>
 8001ab0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001abc:	d005      	beq.n	8001aca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001abe:	4b0a      	ldr	r3, [pc, #40]	; (8001ae8 <HAL_Delay+0x44>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	461a      	mov	r2, r3
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4413      	add	r3, r2
 8001ac8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001aca:	bf00      	nop
 8001acc:	f7ff ffde 	bl	8001a8c <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d8f7      	bhi.n	8001acc <HAL_Delay+0x28>
  {
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200027e0 	.word	0x200027e0

08001aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001afc:	4b0c      	ldr	r3, [pc, #48]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b02:	68ba      	ldr	r2, [r7, #8]
 8001b04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1e:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <__NVIC_SetPriorityGrouping+0x44>)
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	60d3      	str	r3, [r2, #12]
}
 8001b24:	bf00      	nop
 8001b26:	3714      	adds	r7, #20
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr
 8001b30:	e000ed00 	.word	0xe000ed00

08001b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_GetPriorityGrouping+0x18>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	0a1b      	lsrs	r3, r3, #8
 8001b3e:	f003 0307 	and.w	r3, r3, #7
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	e000ed00 	.word	0xe000ed00

08001b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b083      	sub	sp, #12
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	db0b      	blt.n	8001b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	f003 021f 	and.w	r2, r3, #31
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <__NVIC_EnableIRQ+0x38>)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	095b      	lsrs	r3, r3, #5
 8001b70:	2001      	movs	r0, #1
 8001b72:	fa00 f202 	lsl.w	r2, r0, r2
 8001b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000e100 	.word	0xe000e100

08001b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	6039      	str	r1, [r7, #0]
 8001b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	db0a      	blt.n	8001bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	b2da      	uxtb	r2, r3
 8001ba4:	490c      	ldr	r1, [pc, #48]	; (8001bd8 <__NVIC_SetPriority+0x4c>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	0152      	lsls	r2, r2, #5
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	440b      	add	r3, r1
 8001bb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bb4:	e00a      	b.n	8001bcc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	4908      	ldr	r1, [pc, #32]	; (8001bdc <__NVIC_SetPriority+0x50>)
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	3b04      	subs	r3, #4
 8001bc4:	0152      	lsls	r2, r2, #5
 8001bc6:	b2d2      	uxtb	r2, r2
 8001bc8:	440b      	add	r3, r1
 8001bca:	761a      	strb	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	370c      	adds	r7, #12
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr
 8001bd8:	e000e100 	.word	0xe000e100
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b089      	sub	sp, #36	; 0x24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bf4:	69fb      	ldr	r3, [r7, #28]
 8001bf6:	f1c3 0307 	rsb	r3, r3, #7
 8001bfa:	2b03      	cmp	r3, #3
 8001bfc:	bf28      	it	cs
 8001bfe:	2303      	movcs	r3, #3
 8001c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3303      	adds	r3, #3
 8001c06:	2b06      	cmp	r3, #6
 8001c08:	d902      	bls.n	8001c10 <NVIC_EncodePriority+0x30>
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3b04      	subs	r3, #4
 8001c0e:	e000      	b.n	8001c12 <NVIC_EncodePriority+0x32>
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	f04f 32ff 	mov.w	r2, #4294967295
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	68bb      	ldr	r3, [r7, #8]
 8001c22:	401a      	ands	r2, r3
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c32:	43d9      	mvns	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c38:	4313      	orrs	r3, r2
         );
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3724      	adds	r7, #36	; 0x24
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
	...

08001c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	3b01      	subs	r3, #1
 8001c54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c58:	d301      	bcc.n	8001c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e00f      	b.n	8001c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <SysTick_Config+0x40>)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c66:	2107      	movs	r1, #7
 8001c68:	f04f 30ff 	mov.w	r0, #4294967295
 8001c6c:	f7ff ff8e 	bl	8001b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c70:	4b05      	ldr	r3, [pc, #20]	; (8001c88 <SysTick_Config+0x40>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c76:	4b04      	ldr	r3, [pc, #16]	; (8001c88 <SysTick_Config+0x40>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3708      	adds	r7, #8
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	e000e010 	.word	0xe000e010

08001c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ff29 	bl	8001aec <__NVIC_SetPriorityGrouping>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b086      	sub	sp, #24
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb0:	f7ff ff40 	bl	8001b34 <__NVIC_GetPriorityGrouping>
 8001cb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	68b9      	ldr	r1, [r7, #8]
 8001cba:	6978      	ldr	r0, [r7, #20]
 8001cbc:	f7ff ff90 	bl	8001be0 <NVIC_EncodePriority>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc6:	4611      	mov	r1, r2
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff ff5f 	bl	8001b8c <__NVIC_SetPriority>
}
 8001cce:	bf00      	nop
 8001cd0:	3718      	adds	r7, #24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b082      	sub	sp, #8
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff ff33 	bl	8001b50 <__NVIC_EnableIRQ>
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b082      	sub	sp, #8
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7ff ffa4 	bl	8001c48 <SysTick_Config>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
	...

08001d0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b084      	sub	sp, #16
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e08d      	b.n	8001e3a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	4b47      	ldr	r3, [pc, #284]	; (8001e44 <HAL_DMA_Init+0x138>)
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d80f      	bhi.n	8001d4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	4b45      	ldr	r3, [pc, #276]	; (8001e48 <HAL_DMA_Init+0x13c>)
 8001d32:	4413      	add	r3, r2
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_DMA_Init+0x140>)
 8001d36:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3a:	091b      	lsrs	r3, r3, #4
 8001d3c:	009a      	lsls	r2, r3, #2
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a42      	ldr	r2, [pc, #264]	; (8001e50 <HAL_DMA_Init+0x144>)
 8001d46:	649a      	str	r2, [r3, #72]	; 0x48
 8001d48:	e00e      	b.n	8001d68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b40      	ldr	r3, [pc, #256]	; (8001e54 <HAL_DMA_Init+0x148>)
 8001d52:	4413      	add	r3, r2
 8001d54:	4a3d      	ldr	r2, [pc, #244]	; (8001e4c <HAL_DMA_Init+0x140>)
 8001d56:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	009a      	lsls	r2, r3, #2
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a3c      	ldr	r2, [pc, #240]	; (8001e58 <HAL_DMA_Init+0x14c>)
 8001d66:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2202      	movs	r2, #2
 8001d6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8001d7e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001d82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	699b      	ldr	r3, [r3, #24]
 8001d9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fa48 	bl	8002250 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001dc8:	d102      	bne.n	8001dd0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd8:	b2d2      	uxtb	r2, r2
 8001dda:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001de4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d010      	beq.n	8001e10 <HAL_DMA_Init+0x104>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b04      	cmp	r3, #4
 8001df4:	d80c      	bhi.n	8001e10 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fa68 	bl	80022cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001e0c:	605a      	str	r2, [r3, #4]
 8001e0e:	e008      	b.n	8001e22 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2200      	movs	r2, #0
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40020407 	.word	0x40020407
 8001e48:	bffdfff8 	.word	0xbffdfff8
 8001e4c:	cccccccd 	.word	0xcccccccd
 8001e50:	40020000 	.word	0x40020000
 8001e54:	bffdfbf8 	.word	0xbffdfbf8
 8001e58:	40020400 	.word	0x40020400

08001e5c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d008      	beq.n	8001e86 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2204      	movs	r2, #4
 8001e78:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e040      	b.n	8001f08 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 020e 	bic.w	r2, r2, #14
 8001e94:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ea4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0201 	bic.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	f003 021c 	and.w	r2, r3, #28
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001ed2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00c      	beq.n	8001ef6 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001ef4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr

08001f14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d005      	beq.n	8001f38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	e047      	b.n	8001fc8 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 020e 	bic.w	r2, r2, #14
 8001f46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0201 	bic.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6c:	f003 021c 	and.w	r2, r3, #28
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f74:	2101      	movs	r1, #1
 8001f76:	fa01 f202 	lsl.w	r2, r1, r2
 8001f7a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f80:	687a      	ldr	r2, [r7, #4]
 8001f82:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001f84:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00c      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f9c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8001fa6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d003      	beq.n	8001fc8 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	6878      	ldr	r0, [r7, #4]
 8001fc6:	4798      	blx	r3
    }
  }
  return status;
 8001fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b084      	sub	sp, #16
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	f003 031c 	and.w	r3, r3, #28
 8001ff2:	2204      	movs	r2, #4
 8001ff4:	409a      	lsls	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d053      	beq.n	80020a6 <HAL_DMA_IRQHandler+0xd4>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f003 0304 	and.w	r3, r3, #4
 8002004:	2b00      	cmp	r3, #0
 8002006:	d04e      	beq.n	80020a6 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d024      	beq.n	8002060 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	f003 021c 	and.w	r2, r3, #28
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002022:	2104      	movs	r1, #4
 8002024:	fa01 f202 	lsl.w	r2, r1, r2
 8002028:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d109      	bne.n	800204c <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203c:	2b00      	cmp	r3, #0
 800203e:	f000 80c0 	beq.w	80021c2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800204a:	e0ba      	b.n	80021c2 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002050:	2b00      	cmp	r3, #0
 8002052:	f000 80b6 	beq.w	80021c2 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800205e:	e0b0      	b.n	80021c2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0320 	and.w	r3, r3, #32
 800206a:	2b00      	cmp	r3, #0
 800206c:	d107      	bne.n	800207e <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0204 	bic.w	r2, r2, #4
 800207c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 021c 	and.w	r2, r3, #28
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800208a:	2104      	movs	r1, #4
 800208c:	fa01 f202 	lsl.w	r2, r1, r2
 8002090:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8093 	beq.w	80021c2 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020a4:	e08d      	b.n	80021c2 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	f003 031c 	and.w	r3, r3, #28
 80020ae:	2202      	movs	r2, #2
 80020b0:	409a      	lsls	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	4013      	ands	r3, r2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d04e      	beq.n	8002158 <HAL_DMA_IRQHandler+0x186>
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d049      	beq.n	8002158 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d018      	beq.n	8002104 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d108      	bne.n	80020f2 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d06e      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80020f0:	e069      	b.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d065      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002102:	e060      	b.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 020a 	bic.w	r2, r2, #10
 8002120:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2201      	movs	r2, #1
 8002126:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800212e:	f003 021c 	and.w	r2, r3, #28
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002136:	2102      	movs	r1, #2
 8002138:	fa01 f202 	lsl.w	r2, r1, r2
 800213c:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	2b00      	cmp	r3, #0
 800214c:	d03b      	beq.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002156:	e036      	b.n	80021c6 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	f003 031c 	and.w	r3, r3, #28
 8002160:	2208      	movs	r2, #8
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	d02e      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1f8>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	2b00      	cmp	r3, #0
 8002174:	d029      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f022 020e 	bic.w	r2, r2, #14
 8002184:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	f003 021c 	and.w	r2, r3, #28
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002192:	2101      	movs	r1, #1
 8002194:	fa01 f202 	lsl.w	r2, r1, r2
 8002198:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2201      	movs	r2, #1
 800219e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d008      	beq.n	80021ca <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80021c0:	e002      	b.n	80021c8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80021c2:	bf00      	nop
 80021c4:	e000      	b.n	80021c8 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80021c6:	bf00      	nop
  return;
 80021c8:	bf00      	nop
 80021ca:	bf00      	nop
}
 80021cc:	3710      	adds	r7, #16
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80021e0:	b2db      	uxtb	r3, r3
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b085      	sub	sp, #20
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021f8:	2300      	movs	r3, #0
 80021fa:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d103      	bne.n	800220a <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	72fb      	strb	r3, [r7, #11]
    return status;
 8002206:	7afb      	ldrb	r3, [r7, #11]
 8002208:	e01b      	b.n	8002242 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	f003 0310 	and.w	r3, r3, #16
 8002218:	2b00      	cmp	r3, #0
 800221a:	d00d      	beq.n	8002238 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d004      	beq.n	8002230 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	e003      	b.n	8002238 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002236:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	68fa      	ldr	r2, [r7, #12]
 800223e:	601a      	str	r2, [r3, #0]

  return status;
 8002240:	7afb      	ldrb	r3, [r7, #11]
}
 8002242:	4618      	mov	r0, r3
 8002244:	3714      	adds	r7, #20
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b17      	ldr	r3, [pc, #92]	; (80022bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d80a      	bhi.n	800227a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002268:	089b      	lsrs	r3, r3, #2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002270:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6513      	str	r3, [r2, #80]	; 0x50
 8002278:	e007      	b.n	800228a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	009a      	lsls	r2, r3, #2
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002284:	4413      	add	r3, r2
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	3b08      	subs	r3, #8
 8002292:	4a0c      	ldr	r2, [pc, #48]	; (80022c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002294:	fba2 2303 	umull	r2, r3, r2, r3
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80022a0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	659a      	str	r2, [r3, #88]	; 0x58
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40020407 	.word	0x40020407
 80022c0:	40020820 	.word	0x40020820
 80022c4:	cccccccd 	.word	0xcccccccd
 80022c8:	40020880 	.word	0x40020880

080022cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80022dc:	68fa      	ldr	r2, [r7, #12]
 80022de:	4b0b      	ldr	r3, [pc, #44]	; (800230c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	461a      	mov	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a08      	ldr	r2, [pc, #32]	; (8002310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80022ee:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3b01      	subs	r3, #1
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	2201      	movs	r2, #1
 80022fa:	409a      	lsls	r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002300:	bf00      	nop
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr
 800230c:	1000823f 	.word	0x1000823f
 8002310:	40020940 	.word	0x40020940

08002314 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002314:	b480      	push	{r7}
 8002316:	b087      	sub	sp, #28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002322:	e158      	b.n	80025d6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	2101      	movs	r1, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa01 f303 	lsl.w	r3, r1, r3
 8002330:	4013      	ands	r3, r2
 8002332:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 814a 	beq.w	80025d0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d005      	beq.n	8002354 <HAL_GPIO_Init+0x40>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f003 0303 	and.w	r3, r3, #3
 8002350:	2b02      	cmp	r3, #2
 8002352:	d130      	bne.n	80023b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	43db      	mvns	r3, r3
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800238a:	2201      	movs	r2, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	f003 0201 	and.w	r2, r3, #1
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	2b03      	cmp	r3, #3
 80023c0:	d017      	beq.n	80023f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	005b      	lsls	r3, r3, #1
 80023e2:	fa02 f303 	lsl.w	r3, r2, r3
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d123      	bne.n	8002446 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	08da      	lsrs	r2, r3, #3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3208      	adds	r2, #8
 8002406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800240a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	220f      	movs	r2, #15
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	43db      	mvns	r3, r3
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4013      	ands	r3, r2
 8002420:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	691a      	ldr	r2, [r3, #16]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	4313      	orrs	r3, r2
 8002436:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	08da      	lsrs	r2, r3, #3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3208      	adds	r2, #8
 8002440:	6939      	ldr	r1, [r7, #16]
 8002442:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	2203      	movs	r2, #3
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	43db      	mvns	r3, r3
 8002458:	693a      	ldr	r2, [r7, #16]
 800245a:	4013      	ands	r3, r2
 800245c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 0203 	and.w	r2, r3, #3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 80a4 	beq.w	80025d0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002488:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3318      	adds	r3, #24
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4a52      	ldr	r2, [pc, #328]	; (80025f8 <HAL_GPIO_Init+0x2e4>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d025      	beq.n	8002500 <HAL_GPIO_Init+0x1ec>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a51      	ldr	r2, [pc, #324]	; (80025fc <HAL_GPIO_Init+0x2e8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d01f      	beq.n	80024fc <HAL_GPIO_Init+0x1e8>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a50      	ldr	r2, [pc, #320]	; (8002600 <HAL_GPIO_Init+0x2ec>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d019      	beq.n	80024f8 <HAL_GPIO_Init+0x1e4>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a4f      	ldr	r2, [pc, #316]	; (8002604 <HAL_GPIO_Init+0x2f0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <HAL_GPIO_Init+0x1e0>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a4e      	ldr	r2, [pc, #312]	; (8002608 <HAL_GPIO_Init+0x2f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1dc>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a4d      	ldr	r2, [pc, #308]	; (800260c <HAL_GPIO_Init+0x2f8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1d8>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a4c      	ldr	r2, [pc, #304]	; (8002610 <HAL_GPIO_Init+0x2fc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1d4>
 80024e4:	2306      	movs	r3, #6
 80024e6:	e00c      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024e8:	2307      	movs	r3, #7
 80024ea:	e00a      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024ec:	2305      	movs	r3, #5
 80024ee:	e008      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f0:	2304      	movs	r3, #4
 80024f2:	e006      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e004      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024f8:	2302      	movs	r3, #2
 80024fa:	e002      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 80024fc:	2301      	movs	r3, #1
 80024fe:	e000      	b.n	8002502 <HAL_GPIO_Init+0x1ee>
 8002500:	2300      	movs	r3, #0
 8002502:	697a      	ldr	r2, [r7, #20]
 8002504:	f002 0203 	and.w	r2, r2, #3
 8002508:	00d2      	lsls	r2, r2, #3
 800250a:	4093      	lsls	r3, r2
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002512:	4938      	ldr	r1, [pc, #224]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	089b      	lsrs	r3, r3, #2
 8002518:	3318      	adds	r3, #24
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002520:	4b34      	ldr	r3, [pc, #208]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	43db      	mvns	r3, r3
 800252a:	693a      	ldr	r2, [r7, #16]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800253c:	693a      	ldr	r2, [r7, #16]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4313      	orrs	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002544:	4a2b      	ldr	r2, [pc, #172]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	43db      	mvns	r3, r3
 8002554:	693a      	ldr	r2, [r7, #16]
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002566:	693a      	ldr	r2, [r7, #16]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4313      	orrs	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800256e:	4a21      	ldr	r2, [pc, #132]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002574:	4b1f      	ldr	r3, [pc, #124]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 8002576:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800257a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	43db      	mvns	r3, r3
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	4013      	ands	r3, r2
 8002584:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002592:	693a      	ldr	r2, [r7, #16]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80025a2:	4b14      	ldr	r3, [pc, #80]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 80025a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	43db      	mvns	r3, r3
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	4013      	ands	r3, r2
 80025b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	4313      	orrs	r3, r2
 80025c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025c8:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <HAL_GPIO_Init+0x2e0>)
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	3301      	adds	r3, #1
 80025d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa22 f303 	lsr.w	r3, r2, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	f47f ae9f 	bne.w	8002324 <HAL_GPIO_Init+0x10>
  }
}
 80025e6:	bf00      	nop
 80025e8:	bf00      	nop
 80025ea:	371c      	adds	r7, #28
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	4002f400 	.word	0x4002f400
 80025f8:	42020000 	.word	0x42020000
 80025fc:	42020400 	.word	0x42020400
 8002600:	42020800 	.word	0x42020800
 8002604:	42020c00 	.word	0x42020c00
 8002608:	42021000 	.word	0x42021000
 800260c:	42021400 	.word	0x42021400
 8002610:	42021800 	.word	0x42021800

08002614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002614:	b480      	push	{r7}
 8002616:	b083      	sub	sp, #12
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	807b      	strh	r3, [r7, #2]
 8002620:	4613      	mov	r3, r2
 8002622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002624:	787b      	ldrb	r3, [r7, #1]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002630:	e002      	b.n	8002638 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e081      	b.n	800275a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800265c:	b2db      	uxtb	r3, r3
 800265e:	2b00      	cmp	r3, #0
 8002660:	d106      	bne.n	8002670 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7fe fc8a 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2224      	movs	r2, #36	; 0x24
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002694:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d107      	bne.n	80026be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e006      	b.n	80026cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d104      	bne.n	80026de <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026dc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6812      	ldr	r2, [r2, #0]
 80026e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68da      	ldr	r2, [r3, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002700:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691a      	ldr	r2, [r3, #16]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	695b      	ldr	r3, [r3, #20]
 800270a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	430a      	orrs	r2, r1
 800271a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69d9      	ldr	r1, [r3, #28]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2220      	movs	r2, #32
 8002746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b084      	sub	sp, #16
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	699b      	ldr	r3, [r3, #24]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277e:	2b00      	cmp	r3, #0
 8002780:	d005      	beq.n	800278e <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002786:	68ba      	ldr	r2, [r7, #8]
 8002788:	68f9      	ldr	r1, [r7, #12]
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	4798      	blx	r3
  }
}
 800278e:	bf00      	nop
 8002790:	3710      	adds	r7, #16
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b086      	sub	sp, #24
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	09db      	lsrs	r3, r3, #7
 80027be:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ca:	f043 0201 	orr.w	r2, r3, #1
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027da:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	0a9b      	lsrs	r3, r3, #10
 80027e0:	f003 0301 	and.w	r3, r3, #1
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d010      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	09db      	lsrs	r3, r3, #7
 80027ec:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00a      	beq.n	800280a <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f8:	f043 0208 	orr.w	r2, r3, #8
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002808:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	0a5b      	lsrs	r3, r3, #9
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	d010      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	09db      	lsrs	r3, r3, #7
 800281a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002826:	f043 0202 	orr.w	r2, r3, #2
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002836:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	f003 030b 	and.w	r3, r3, #11
 8002844:	2b00      	cmp	r3, #0
 8002846:	d003      	beq.n	8002850 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002848:	68f9      	ldr	r1, [r7, #12]
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fb8a 	bl	8002f64 <I2C_ITError>
  }
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	70fb      	strb	r3, [r7, #3]
 800288c:	4613      	mov	r3, r2
 800288e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d101      	bne.n	80028fc <I2C_Slave_ISR_IT+0x24>
 80028f8:	2302      	movs	r3, #2
 80028fa:	e0ec      	b.n	8002ad6 <I2C_Slave_ISR_IT+0x1fe>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	095b      	lsrs	r3, r3, #5
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	2b00      	cmp	r3, #0
 800290e:	d009      	beq.n	8002924 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002918:	2b00      	cmp	r3, #0
 800291a:	d003      	beq.n	8002924 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800291c:	6939      	ldr	r1, [r7, #16]
 800291e:	68f8      	ldr	r0, [r7, #12]
 8002920:	f000 f9c0 	bl	8002ca4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d04d      	beq.n	80029cc <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002938:	2b00      	cmp	r3, #0
 800293a:	d047      	beq.n	80029cc <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002940:	b29b      	uxth	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d128      	bne.n	8002998 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b28      	cmp	r3, #40	; 0x28
 8002950:	d108      	bne.n	8002964 <I2C_Slave_ISR_IT+0x8c>
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002958:	d104      	bne.n	8002964 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800295a:	6939      	ldr	r1, [r7, #16]
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 faab 	bl	8002eb8 <I2C_ITListenCplt>
 8002962:	e032      	b.n	80029ca <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b29      	cmp	r3, #41	; 0x29
 800296e:	d10e      	bne.n	800298e <I2C_Slave_ISR_IT+0xb6>
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002976:	d00a      	beq.n	800298e <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2210      	movs	r2, #16
 800297e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002980:	68f8      	ldr	r0, [r7, #12]
 8002982:	f000 fc06 	bl	8003192 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002986:	68f8      	ldr	r0, [r7, #12]
 8002988:	f000 f92d 	bl	8002be6 <I2C_ITSlaveSeqCplt>
 800298c:	e01d      	b.n	80029ca <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2210      	movs	r2, #16
 8002994:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002996:	e096      	b.n	8002ac6 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2210      	movs	r2, #16
 800299e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a4:	f043 0204 	orr.w	r2, r3, #4
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d004      	beq.n	80029bc <I2C_Slave_ISR_IT+0xe4>
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b8:	f040 8085 	bne.w	8002ac6 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	4619      	mov	r1, r3
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 face 	bl	8002f64 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80029c8:	e07d      	b.n	8002ac6 <I2C_Slave_ISR_IT+0x1ee>
 80029ca:	e07c      	b.n	8002ac6 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	089b      	lsrs	r3, r3, #2
 80029d0:	f003 0301 	and.w	r3, r3, #1
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d030      	beq.n	8002a3a <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d02a      	beq.n	8002a3a <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d018      	beq.n	8002a20 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	b29a      	uxth	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	b29a      	uxth	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d14f      	bne.n	8002aca <I2C_Slave_ISR_IT+0x1f2>
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a30:	d04b      	beq.n	8002aca <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002a32:	68f8      	ldr	r0, [r7, #12]
 8002a34:	f000 f8d7 	bl	8002be6 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002a38:	e047      	b.n	8002aca <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	08db      	lsrs	r3, r3, #3
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	08db      	lsrs	r3, r3, #3
 8002a4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d004      	beq.n	8002a5c <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002a52:	6939      	ldr	r1, [r7, #16]
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f000 f842 	bl	8002ade <I2C_ITAddrCplt>
 8002a5a:	e037      	b.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	085b      	lsrs	r3, r3, #1
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d031      	beq.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	085b      	lsrs	r3, r3, #1
 8002a6c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d02b      	beq.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	781a      	ldrb	r2, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8e:	1c5a      	adds	r2, r3, #1
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	851a      	strh	r2, [r3, #40]	; 0x28
 8002aae:	e00d      	b.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab6:	d002      	beq.n	8002abe <I2C_Slave_ISR_IT+0x1e6>
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d106      	bne.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002abe:	68f8      	ldr	r0, [r7, #12]
 8002ac0:	f000 f891 	bl	8002be6 <I2C_ITSlaveSeqCplt>
 8002ac4:	e002      	b.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002aca:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3718      	adds	r7, #24
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b084      	sub	sp, #16
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002af4:	2b28      	cmp	r3, #40	; 0x28
 8002af6:	d16a      	bne.n	8002bce <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	0c1b      	lsrs	r3, r3, #16
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	0c1b      	lsrs	r3, r3, #16
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b16:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	b29b      	uxth	r3, r3
 8002b20:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b24:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002b32:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	2b02      	cmp	r3, #2
 8002b3a:	d138      	bne.n	8002bae <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002b3c:	897b      	ldrh	r3, [r7, #10]
 8002b3e:	09db      	lsrs	r3, r3, #7
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	89bb      	ldrh	r3, [r7, #12]
 8002b44:	4053      	eors	r3, r2
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f003 0306 	and.w	r3, r3, #6
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d11c      	bne.n	8002b8a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002b50:	897b      	ldrh	r3, [r7, #10]
 8002b52:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d13b      	bne.n	8002bde <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002b7c:	89ba      	ldrh	r2, [r7, #12]
 8002b7e:	7bfb      	ldrb	r3, [r7, #15]
 8002b80:	4619      	mov	r1, r3
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff fe7c 	bl	8002880 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002b88:	e029      	b.n	8002bde <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002b8a:	893b      	ldrh	r3, [r7, #8]
 8002b8c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002b8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fb3f 	bl	8003216 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002ba0:	89ba      	ldrh	r2, [r7, #12]
 8002ba2:	7bfb      	ldrb	r3, [r7, #15]
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f7ff fe6a 	bl	8002880 <HAL_I2C_AddrCallback>
}
 8002bac:	e017      	b.n	8002bde <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002bae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fb2f 	bl	8003216 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002bc0:	89ba      	ldrh	r2, [r7, #12]
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	f7ff fe5a 	bl	8002880 <HAL_I2C_AddrCallback>
}
 8002bcc:	e007      	b.n	8002bde <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	2208      	movs	r2, #8
 8002bd4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0b9b      	lsrs	r3, r3, #14
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d008      	beq.n	8002c1c <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e00d      	b.n	8002c38 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	0bdb      	lsrs	r3, r3, #15
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d007      	beq.n	8002c38 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c36:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b29      	cmp	r3, #41	; 0x29
 8002c42:	d112      	bne.n	8002c6a <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2228      	movs	r2, #40	; 0x28
 8002c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2221      	movs	r2, #33	; 0x21
 8002c50:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002c52:	2101      	movs	r1, #1
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f000 fade 	bl	8003216 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7ff fdf8 	bl	8002858 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002c68:	e017      	b.n	8002c9a <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b2a      	cmp	r3, #42	; 0x2a
 8002c74:	d111      	bne.n	8002c9a <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2228      	movs	r2, #40	; 0x28
 8002c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2222      	movs	r2, #34	; 0x22
 8002c82:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002c84:	2102      	movs	r1, #2
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 fac5 	bl	8003216 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff fde9 	bl	800286c <HAL_I2C_SlaveRxCpltCallback>
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
	...

08002ca4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b21      	cmp	r3, #33	; 0x21
 8002cce:	d002      	beq.n	8002cd6 <I2C_ITSlaveCplt+0x32>
 8002cd0:	7bfb      	ldrb	r3, [r7, #15]
 8002cd2:	2b29      	cmp	r3, #41	; 0x29
 8002cd4:	d108      	bne.n	8002ce8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002cd6:	f248 0101 	movw	r1, #32769	; 0x8001
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa9b 	bl	8003216 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2221      	movs	r2, #33	; 0x21
 8002ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8002ce6:	e00d      	b.n	8002d04 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ce8:	7bfb      	ldrb	r3, [r7, #15]
 8002cea:	2b22      	cmp	r3, #34	; 0x22
 8002cec:	d002      	beq.n	8002cf4 <I2C_ITSlaveCplt+0x50>
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8002cf2:	d107      	bne.n	8002d04 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002cf4:	f248 0102 	movw	r1, #32770	; 0x8002
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f000 fa8c 	bl	8003216 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2222      	movs	r2, #34	; 0x22
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6859      	ldr	r1, [r3, #4]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4b64      	ldr	r3, [pc, #400]	; (8002eb0 <I2C_ITSlaveCplt+0x20c>)
 8002d20:	400b      	ands	r3, r1
 8002d22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f000 fa34 	bl	8003192 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	0b9b      	lsrs	r3, r3, #14
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d013      	beq.n	8002d5e <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d44:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d020      	beq.n	8002d90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d5c:	e018      	b.n	8002d90 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	0bdb      	lsrs	r3, r3, #15
 8002d62:	f003 0301 	and.w	r3, r3, #1
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d012      	beq.n	8002d90 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d78:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d006      	beq.n	8002d90 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002d9c:	697b      	ldr	r3, [r7, #20]
 8002d9e:	f023 0304 	bic.w	r3, r3, #4
 8002da2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	b2d2      	uxtb	r2, r2
 8002db0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db6:	1c5a      	adds	r2, r3, #1
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00c      	beq.n	8002dde <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	b29a      	uxth	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d005      	beq.n	8002df4 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dec:	f043 0204 	orr.w	r2, r3, #4
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d010      	beq.n	8002e2c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e0e:	4619      	mov	r1, r3
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f8a7 	bl	8002f64 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	2b28      	cmp	r3, #40	; 0x28
 8002e20:	d141      	bne.n	8002ea6 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f847 	bl	8002eb8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e2a:	e03c      	b.n	8002ea6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e34:	d014      	beq.n	8002e60 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fed5 	bl	8002be6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <I2C_ITSlaveCplt+0x210>)
 8002e40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2220      	movs	r2, #32
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff fd1f 	bl	800289c <HAL_I2C_ListenCpltCallback>
}
 8002e5e:	e022      	b.n	8002ea6 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e66:	b2db      	uxtb	r3, r3
 8002e68:	2b22      	cmp	r3, #34	; 0x22
 8002e6a:	d10e      	bne.n	8002e8a <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f7ff fcf2 	bl	800286c <HAL_I2C_SlaveRxCpltCallback>
}
 8002e88:	e00d      	b.n	8002ea6 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff fcd9 	bl	8002858 <HAL_I2C_SlaveTxCpltCallback>
}
 8002ea6:	bf00      	nop
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	fe00e800 	.word	0xfe00e800
 8002eb4:	ffff0000 	.word	0xffff0000

08002eb8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a26      	ldr	r2, [pc, #152]	; (8002f60 <I2C_ITListenCplt+0xa8>)
 8002ec6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2220      	movs	r2, #32
 8002ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	089b      	lsrs	r3, r3, #2
 8002ee8:	f003 0301 	and.w	r3, r3, #1
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d022      	beq.n	8002f36 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efa:	b2d2      	uxtb	r2, r2
 8002efc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f02:	1c5a      	adds	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d012      	beq.n	8002f36 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b29a      	uxth	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f043 0204 	orr.w	r2, r3, #4
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002f36:	f248 0103 	movw	r1, #32771	; 0x8003
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f000 f96b 	bl	8003216 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2210      	movs	r2, #16
 8002f46:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f7ff fca3 	bl	800289c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f74:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a6d      	ldr	r2, [pc, #436]	; (8003138 <I2C_ITError+0x1d4>)
 8002f82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	431a      	orrs	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002f96:	7bfb      	ldrb	r3, [r7, #15]
 8002f98:	2b28      	cmp	r3, #40	; 0x28
 8002f9a:	d005      	beq.n	8002fa8 <I2C_ITError+0x44>
 8002f9c:	7bfb      	ldrb	r3, [r7, #15]
 8002f9e:	2b29      	cmp	r3, #41	; 0x29
 8002fa0:	d002      	beq.n	8002fa8 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002fa2:	7bfb      	ldrb	r3, [r7, #15]
 8002fa4:	2b2a      	cmp	r3, #42	; 0x2a
 8002fa6:	d10b      	bne.n	8002fc0 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fa8:	2103      	movs	r1, #3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 f933 	bl	8003216 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2228      	movs	r2, #40	; 0x28
 8002fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a60      	ldr	r2, [pc, #384]	; (800313c <I2C_ITError+0x1d8>)
 8002fbc:	635a      	str	r2, [r3, #52]	; 0x34
 8002fbe:	e030      	b.n	8003022 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002fc0:	f248 0103 	movw	r1, #32771	; 0x8003
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 f926 	bl	8003216 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f8e1 	bl	8003192 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	2b60      	cmp	r3, #96	; 0x60
 8002fda:	d01f      	beq.n	800301c <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	f003 0320 	and.w	r3, r3, #32
 8002fee:	2b20      	cmp	r3, #32
 8002ff0:	d114      	bne.n	800301c <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b10      	cmp	r3, #16
 8002ffe:	d109      	bne.n	8003014 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2210      	movs	r2, #16
 8003006:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f043 0204 	orr.w	r2, r3, #4
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2220      	movs	r2, #32
 800301a:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003026:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302c:	2b00      	cmp	r3, #0
 800302e:	d039      	beq.n	80030a4 <I2C_ITError+0x140>
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	2b11      	cmp	r3, #17
 8003034:	d002      	beq.n	800303c <I2C_ITError+0xd8>
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	2b21      	cmp	r3, #33	; 0x21
 800303a:	d133      	bne.n	80030a4 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003046:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800304a:	d107      	bne.n	800305c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800305a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003060:	4618      	mov	r0, r3
 8003062:	f7ff f8b6 	bl	80021d2 <HAL_DMA_GetState>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d017      	beq.n	800309c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	4a33      	ldr	r2, [pc, #204]	; (8003140 <I2C_ITError+0x1dc>)
 8003072:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	4618      	mov	r0, r3
 8003082:	f7fe ff47 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d04d      	beq.n	8003128 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003096:	4610      	mov	r0, r2
 8003098:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800309a:	e045      	b.n	8003128 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800309c:	6878      	ldr	r0, [r7, #4]
 800309e:	f000 f851 	bl	8003144 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80030a2:	e041      	b.n	8003128 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d039      	beq.n	8003120 <I2C_ITError+0x1bc>
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b12      	cmp	r3, #18
 80030b0:	d002      	beq.n	80030b8 <I2C_ITError+0x154>
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b22      	cmp	r3, #34	; 0x22
 80030b6:	d133      	bne.n	8003120 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c6:	d107      	bne.n	80030d8 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030dc:	4618      	mov	r0, r3
 80030de:	f7ff f878 	bl	80021d2 <HAL_DMA_GetState>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d017      	beq.n	8003118 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ec:	4a14      	ldr	r2, [pc, #80]	; (8003140 <I2C_ITError+0x1dc>)
 80030ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe ff09 	bl	8001f14 <HAL_DMA_Abort_IT>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d011      	beq.n	800312c <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003112:	4610      	mov	r0, r2
 8003114:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003116:	e009      	b.n	800312c <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f000 f813 	bl	8003144 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800311e:	e005      	b.n	800312c <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f000 f80f 	bl	8003144 <I2C_TreatErrorCallback>
  }
}
 8003126:	e002      	b.n	800312e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003128:	bf00      	nop
 800312a:	e000      	b.n	800312e <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800312c:	bf00      	nop
}
 800312e:	bf00      	nop
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	ffff0000 	.word	0xffff0000
 800313c:	080028d9 	.word	0x080028d9
 8003140:	080031db 	.word	0x080031db

08003144 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b60      	cmp	r3, #96	; 0x60
 8003156:	d10e      	bne.n	8003176 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2220      	movs	r2, #32
 800315c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fba8 	bl	80028c4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003174:	e009      	b.n	800318a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f7ff fb93 	bl	80028b0 <HAL_I2C_ErrorCallback>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}

08003192 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	699b      	ldr	r3, [r3, #24]
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d103      	bne.n	80031b0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2200      	movs	r2, #0
 80031ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	699b      	ldr	r3, [r3, #24]
 80031b6:	f003 0301 	and.w	r3, r3, #1
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d007      	beq.n	80031ce <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	619a      	str	r2, [r3, #24]
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr

080031da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b084      	sub	sp, #16
 80031de:	af00      	add	r7, sp, #0
 80031e0:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d003      	beq.n	80031f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f4:	2200      	movs	r2, #0
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003204:	2200      	movs	r2, #0
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ff9b 	bl	8003144 <I2C_TreatErrorCallback>
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003216:	b480      	push	{r7}
 8003218:	b085      	sub	sp, #20
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
 800321e:	460b      	mov	r3, r1
 8003220:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00f      	beq.n	8003250 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003236:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003244:	2b28      	cmp	r3, #40	; 0x28
 8003246:	d003      	beq.n	8003250 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800324e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003250:	887b      	ldrh	r3, [r7, #2]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00f      	beq.n	800327a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003260:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800326e:	2b28      	cmp	r3, #40	; 0x28
 8003270:	d003      	beq.n	800327a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003278:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800327a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800327e:	2b00      	cmp	r3, #0
 8003280:	da03      	bge.n	800328a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003288:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800328a:	887b      	ldrh	r3, [r7, #2]
 800328c:	2b10      	cmp	r3, #16
 800328e:	d103      	bne.n	8003298 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003296:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003298:	887b      	ldrh	r3, [r7, #2]
 800329a:	2b20      	cmp	r3, #32
 800329c:	d103      	bne.n	80032a6 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	f043 0320 	orr.w	r3, r3, #32
 80032a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	2b40      	cmp	r3, #64	; 0x40
 80032aa:	d103      	bne.n	80032b4 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6819      	ldr	r1, [r3, #0]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	43da      	mvns	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	400a      	ands	r2, r1
 80032c4:	601a      	str	r2, [r3, #0]
}
 80032c6:	bf00      	nop
 80032c8:	3714      	adds	r7, #20
 80032ca:	46bd      	mov	sp, r7
 80032cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d0:	4770      	bx	lr

080032d2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80032d2:	b480      	push	{r7}
 80032d4:	b083      	sub	sp, #12
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d138      	bne.n	800335a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e032      	b.n	800335c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2224      	movs	r2, #36	; 0x24
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003324:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f042 0201 	orr.w	r2, r2, #1
 8003344:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003356:	2300      	movs	r3, #0
 8003358:	e000      	b.n	800335c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800335a:	2302      	movs	r3, #2
  }
}
 800335c:	4618      	mov	r0, r3
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003378:	b2db      	uxtb	r3, r3
 800337a:	2b20      	cmp	r3, #32
 800337c:	d139      	bne.n	80033f2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003384:	2b01      	cmp	r3, #1
 8003386:	d101      	bne.n	800338c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003388:	2302      	movs	r3, #2
 800338a:	e033      	b.n	80033f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2224      	movs	r2, #36	; 0x24
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0201 	bic.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033ba:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	021b      	lsls	r3, r3, #8
 80033c0:	68fa      	ldr	r2, [r7, #12]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033ee:	2300      	movs	r3, #0
 80033f0:	e000      	b.n	80033f4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033f2:	2302      	movs	r3, #2
  }
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003404:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_ICACHE_Enable+0x1c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a04      	ldr	r2, [pc, #16]	; (800341c <HAL_ICACHE_Enable+0x1c>)
 800340a:	f043 0301 	orr.w	r3, r3, #1
 800340e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr
 800341c:	40030400 	.word	0x40030400

08003420 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af02      	add	r7, sp, #8
 8003426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003428:	2300      	movs	r3, #0
 800342a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 800342c:	f7fe fb2e 	bl	8001a8c <HAL_GetTick>
 8003430:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d102      	bne.n	800343e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	73fb      	strb	r3, [r7, #15]
 800343c:	e0a2      	b.n	8003584 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003448:	2b00      	cmp	r3, #0
 800344a:	f040 809b 	bne.w	8003584 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fd ffcc 	bl	80013ec <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8003454:	f241 3188 	movw	r1, #5000	; 0x1388
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa2d 	bl	80038b8 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	4b4a      	ldr	r3, [pc, #296]	; (8003590 <HAL_OSPI_Init+0x170>)
 8003466:	4013      	ands	r3, r2
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	68d1      	ldr	r1, [r2, #12]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6912      	ldr	r2, [r2, #16]
 8003470:	3a01      	subs	r2, #1
 8003472:	0412      	lsls	r2, r2, #16
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6952      	ldr	r2, [r2, #20]
 800347a:	3a01      	subs	r2, #1
 800347c:	0212      	lsls	r2, r2, #8
 800347e:	4311      	orrs	r1, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003484:	4311      	orrs	r1, r2
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	69d2      	ldr	r2, [r2, #28]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1a      	ldr	r2, [r3, #32]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0412      	lsls	r2, r2, #16
 80034b4:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034be:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	021a      	lsls	r2, r3, #8
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2120      	movs	r1, #32
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa31 	bl	800394e <OSPI_WaitFlagStateUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d146      	bne.n	8003584 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003504:	1e5a      	subs	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689a      	ldr	r2, [r3, #8]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800352c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	2b02      	cmp	r3, #2
 800355a:	d107      	bne.n	800356c <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f042 0202 	orr.w	r2, r2, #2
 800356a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003574:	d103      	bne.n	800357e <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2201      	movs	r2, #1
 800357a:	64da      	str	r2, [r3, #76]	; 0x4c
 800357c:	e002      	b.n	8003584 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2202      	movs	r2, #2
 8003582:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8003584:	7bfb      	ldrb	r3, [r7, #15]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	f8e0f8f4 	.word	0xf8e0f8f4

08003594 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b086      	sub	sp, #24
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3350      	adds	r3, #80	; 0x50
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035b8:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03a      	beq.n	800363a <HAL_OSPI_IRQHandler+0xa6>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d035      	beq.n	800363a <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b18      	cmp	r3, #24
 80035d2:	d10f      	bne.n	80035f4 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d8:	781a      	ldrb	r2, [r3, #0]
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	1e5a      	subs	r2, r3, #1
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	645a      	str	r2, [r3, #68]	; 0x44
 80035f2:	e012      	b.n	800361a <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	2b28      	cmp	r3, #40	; 0x28
 80035f8:	d10f      	bne.n	800361a <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	7812      	ldrb	r2, [r2, #0]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	1c5a      	adds	r2, r3, #1
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003614:	1e5a      	subs	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	645a      	str	r2, [r3, #68]	; 0x44
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	2b00      	cmp	r3, #0
 8003620:	d107      	bne.n	8003632 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003630:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f904 	bl	8003840 <HAL_OSPI_FifoThresholdCallback>
 8003638:	e0e7      	b.n	800380a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d067      	beq.n	8003714 <HAL_OSPI_IRQHandler+0x180>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d062      	beq.n	8003714 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2b28      	cmp	r3, #40	; 0x28
 8003652:	d131      	bne.n	80036b8 <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003658:	2b00      	cmp	r3, #0
 800365a:	d015      	beq.n	8003688 <HAL_OSPI_IRQHandler+0xf4>
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8003662:	2b00      	cmp	r3, #0
 8003664:	d010      	beq.n	8003688 <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366a:	697a      	ldr	r2, [r7, #20]
 800366c:	7812      	ldrb	r2, [r2, #0]
 800366e:	b2d2      	uxtb	r2, r2
 8003670:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	63da      	str	r2, [r3, #60]	; 0x3c
        hospi->XferCount--;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	645a      	str	r2, [r3, #68]	; 0x44
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003686:	e0bd      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	2b00      	cmp	r3, #0
 800368e:	f040 80b9 	bne.w	8003804 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681a      	ldr	r2, [r3, #0]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80036a8:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	64da      	str	r2, [r3, #76]	; 0x4c

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f8d9 	bl	8003868 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80036b6:	e0a5      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2202      	movs	r2, #2
 80036be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80036ce:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	64da      	str	r2, [r3, #76]	; 0x4c

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2b18      	cmp	r3, #24
 80036da:	d103      	bne.n	80036e4 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f8cd 	bl	800387c <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80036e2:	e08f      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d103      	bne.n	80036f2 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 f8b2 	bl	8003854 <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80036f0:	e088      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f8:	f040 8084 	bne.w	8003804 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003700:	2b00      	cmp	r3, #0
 8003702:	d103      	bne.n	800370c <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 f891 	bl	800382c <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800370a:	e07b      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 800370c:	6878      	ldr	r0, [r7, #4]
 800370e:	f000 f883 	bl	8003818 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003712:	e077      	b.n	8003804 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	f003 0308 	and.w	r3, r3, #8
 800371a:	2b00      	cmp	r3, #0
 800371c:	d01e      	beq.n	800375c <HAL_OSPI_IRQHandler+0x1c8>
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d019      	beq.n	800375c <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2208      	movs	r2, #8
 800372e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00a      	beq.n	8003754 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800374c:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f000 f89b 	bl	8003890 <HAL_OSPI_StatusMatchCallback>
 800375a:	e056      	b.n	800380a <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 800375c:	693b      	ldr	r3, [r7, #16]
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	2b00      	cmp	r3, #0
 8003764:	d03c      	beq.n	80037e0 <HAL_OSPI_IRQHandler+0x24c>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d037      	beq.n	80037e0 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2201      	movs	r2, #1
 8003776:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 8003786:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d01a      	beq.n	80037d2 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0204 	bic.w	r2, r2, #4
 80037aa:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b0:	4a18      	ldr	r2, [pc, #96]	; (8003814 <HAL_OSPI_IRQHandler+0x280>)
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fe fbab 	bl	8001f14 <HAL_DMA_Abort_IT>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d021      	beq.n	8003808 <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f824 	bl	8003818 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80037d0:	e01a      	b.n	8003808 <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 f81d 	bl	8003818 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80037de:	e013      	b.n	8003808 <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	f003 0310 	and.w	r3, r3, #16
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00f      	beq.n	800380a <HAL_OSPI_IRQHandler+0x276>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2210      	movs	r2, #16
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f851 	bl	80038a4 <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003802:	e002      	b.n	800380a <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8003808:	bf00      	nop
}
 800380a:	bf00      	nop
 800380c:	3718      	adds	r7, #24
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	080038d7 	.word	0x080038d7

08003818 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	683a      	ldr	r2, [r7, #0]
 80038c6:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2200      	movs	r2, #0
 80038e8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f2:	d122      	bne.n	800393a <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	6a1b      	ldr	r3, [r3, #32]
 80038fa:	f003 0320 	and.w	r3, r3, #32
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d014      	beq.n	800392c <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2202      	movs	r2, #2
 8003908:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003918:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0202 	orr.w	r2, r2, #2
 8003928:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 800392a:	e00c      	b.n	8003946 <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2202      	movs	r2, #2
 8003930:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_OSPI_AbortCpltCallback(hospi);
 8003932:	68f8      	ldr	r0, [r7, #12]
 8003934:	f7ff ff7a 	bl	800382c <HAL_OSPI_AbortCpltCallback>
}
 8003938:	e005      	b.n	8003946 <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2202      	movs	r2, #2
 800393e:	64da      	str	r2, [r3, #76]	; 0x4c
    HAL_OSPI_ErrorCallback(hospi);
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f7ff ff69 	bl	8003818 <HAL_OSPI_ErrorCallback>
}
 8003946:	bf00      	nop
 8003948:	3710      	adds	r7, #16
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800394e:	b580      	push	{r7, lr}
 8003950:	b084      	sub	sp, #16
 8003952:	af00      	add	r7, sp, #0
 8003954:	60f8      	str	r0, [r7, #12]
 8003956:	60b9      	str	r1, [r7, #8]
 8003958:	603b      	str	r3, [r7, #0]
 800395a:	4613      	mov	r3, r2
 800395c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 800395e:	e01a      	b.n	8003996 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003966:	d016      	beq.n	8003996 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003968:	f7fe f890 	bl	8001a8c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	429a      	cmp	r2, r3
 8003976:	d302      	bcc.n	800397e <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10b      	bne.n	8003996 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800398a:	f043 0201 	orr.w	r2, r3, #1
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e00e      	b.n	80039b4 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	6a1a      	ldr	r2, [r3, #32]
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	4013      	ands	r3, r2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	bf14      	ite	ne
 80039a4:	2301      	movne	r3, #1
 80039a6:	2300      	moveq	r3, #0
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	461a      	mov	r2, r3
 80039ac:	79fb      	ldrb	r3, [r7, #7]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d1d6      	bne.n	8003960 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80039bc:	b480      	push	{r7}
 80039be:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039c0:	4b05      	ldr	r3, [pc, #20]	; (80039d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a04      	ldr	r2, [pc, #16]	; (80039d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80039c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039ca:	6013      	str	r3, [r2, #0]
}
 80039cc:	bf00      	nop
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40007000 	.word	0x40007000

080039dc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80039e0:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_PWREx_GetVoltageRange+0x18>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40007000 	.word	0x40007000

080039f8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b084      	sub	sp, #16
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8003a00:	4b27      	ldr	r3, [pc, #156]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a08:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8003a0a:	f000 f861 	bl	8003ad0 <HAL_PWREx_SMPS_GetEffectiveMode>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a14:	d101      	bne.n	8003a1a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e03e      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8003a1a:	4b21      	ldr	r3, [pc, #132]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d101      	bne.n	8003a2c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e035      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8003a2c:	68ba      	ldr	r2, [r7, #8]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d101      	bne.n	8003a38 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	e02f      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003a38:	4b19      	ldr	r3, [pc, #100]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8003a40:	4917      	ldr	r1, [pc, #92]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8003a48:	4b16      	ldr	r3, [pc, #88]	; (8003aa4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	095b      	lsrs	r3, r3, #5
 8003a4e:	4a16      	ldr	r2, [pc, #88]	; (8003aa8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	09db      	lsrs	r3, r3, #7
 8003a56:	2232      	movs	r2, #50	; 0x32
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	4a13      	ldr	r2, [pc, #76]	; (8003aac <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	08db      	lsrs	r3, r3, #3
 8003a64:	3301      	adds	r3, #1
 8003a66:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a68:	e002      	b.n	8003a70 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7c:	d102      	bne.n	8003a84 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1f2      	bne.n	8003a6a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003a84:	4b06      	ldr	r3, [pc, #24]	; (8003aa0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a90:	d101      	bne.n	8003a96 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e000      	b.n	8003a98 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8003a96:	2300      	movs	r3, #0
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3710      	adds	r7, #16
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40007000 	.word	0x40007000
 8003aa4:	200027d8 	.word	0x200027d8
 8003aa8:	0a7c5ac5 	.word	0x0a7c5ac5
 8003aac:	cccccccd 	.word	0xcccccccd

08003ab0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a04      	ldr	r2, [pc, #16]	; (8003acc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003aba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003abe:	6093      	str	r3, [r2, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40007000 	.word	0x40007000

08003ad0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b083      	sub	sp, #12
 8003ad4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8003ad6:	4b0f      	ldr	r3, [pc, #60]	; (8003b14 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8003ad8:	691b      	ldr	r3, [r3, #16]
 8003ada:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8003ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	e00a      	b.n	8003b04 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d103      	bne.n	8003b00 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8003af8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	e001      	b.n	8003b04 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8003b00:	2300      	movs	r3, #0
 8003b02:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8003b04:	687b      	ldr	r3, [r7, #4]
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	370c      	adds	r7, #12
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40007000 	.word	0x40007000

08003b18 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b088      	sub	sp, #32
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d102      	bne.n	8003b2c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	f000 bcc2 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2c:	4b99      	ldr	r3, [pc, #612]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 030c 	and.w	r3, r3, #12
 8003b34:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b36:	4b97      	ldr	r3, [pc, #604]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	f003 0303 	and.w	r3, r3, #3
 8003b3e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 80e9 	beq.w	8003d20 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d006      	beq.n	8003b62 <HAL_RCC_OscConfig+0x4a>
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	2b0c      	cmp	r3, #12
 8003b58:	f040 8083 	bne.w	8003c62 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d17f      	bne.n	8003c62 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003b62:	4b8c      	ldr	r3, [pc, #560]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d006      	beq.n	8003b7c <HAL_RCC_OscConfig+0x64>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d102      	bne.n	8003b7c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	f000 bc9a 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b80:	4b84      	ldr	r3, [pc, #528]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0308 	and.w	r3, r3, #8
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d004      	beq.n	8003b96 <HAL_RCC_OscConfig+0x7e>
 8003b8c:	4b81      	ldr	r3, [pc, #516]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b94:	e005      	b.n	8003ba2 <HAL_RCC_OscConfig+0x8a>
 8003b96:	4b7f      	ldr	r3, [pc, #508]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003b98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b9c:	091b      	lsrs	r3, r3, #4
 8003b9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d224      	bcs.n	8003bf0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fe9c 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	f000 bc7a 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bbc:	4b75      	ldr	r3, [pc, #468]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a74      	ldr	r2, [pc, #464]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bc2:	f043 0308 	orr.w	r3, r3, #8
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	4b72      	ldr	r3, [pc, #456]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	496f      	ldr	r1, [pc, #444]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bda:	4b6e      	ldr	r3, [pc, #440]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	496a      	ldr	r1, [pc, #424]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bea:	4313      	orrs	r3, r2
 8003bec:	604b      	str	r3, [r1, #4]
 8003bee:	e026      	b.n	8003c3e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bf0:	4b68      	ldr	r3, [pc, #416]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a67      	ldr	r2, [pc, #412]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bf6:	f043 0308 	orr.w	r3, r3, #8
 8003bfa:	6013      	str	r3, [r2, #0]
 8003bfc:	4b65      	ldr	r3, [pc, #404]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	4962      	ldr	r1, [pc, #392]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003c0e:	4b61      	ldr	r3, [pc, #388]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	021b      	lsls	r3, r3, #8
 8003c1c:	495d      	ldr	r1, [pc, #372]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10a      	bne.n	8003c3e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	f000 fe5b 	bl	80048e8 <RCC_SetFlashLatencyFromMSIRange>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	f000 bc39 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003c3e:	f000 fe17 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a54      	ldr	r2, [pc, #336]	; (8003d98 <HAL_RCC_OscConfig+0x280>)
 8003c46:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003c48:	4b54      	ldr	r3, [pc, #336]	; (8003d9c <HAL_RCC_OscConfig+0x284>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fd fecd 	bl	80019ec <HAL_InitTick>
 8003c52:	4603      	mov	r3, r0
 8003c54:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8003c56:	7bfb      	ldrb	r3, [r7, #15]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d060      	beq.n	8003d1e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
 8003c5e:	f000 bc27 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d039      	beq.n	8003cde <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003c6a:	4b4a      	ldr	r3, [pc, #296]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a49      	ldr	r2, [pc, #292]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c70:	f043 0301 	orr.w	r3, r3, #1
 8003c74:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c76:	f7fd ff09 	bl	8001a8c <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c7c:	e00f      	b.n	8003c9e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c7e:	f7fd ff05 	bl	8001a8c <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d908      	bls.n	8003c9e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c8c:	4b41      	ldr	r3, [pc, #260]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d102      	bne.n	8003c9e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	f000 bc09 	b.w	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003c9e:	4b3d      	ldr	r3, [pc, #244]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0e9      	beq.n	8003c7e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003caa:	4b3a      	ldr	r3, [pc, #232]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a39      	ldr	r2, [pc, #228]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	6013      	str	r3, [r2, #0]
 8003cb6:	4b37      	ldr	r3, [pc, #220]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	4934      	ldr	r1, [pc, #208]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cc8:	4b32      	ldr	r3, [pc, #200]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a1b      	ldr	r3, [r3, #32]
 8003cd4:	021b      	lsls	r3, r3, #8
 8003cd6:	492f      	ldr	r1, [pc, #188]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	604b      	str	r3, [r1, #4]
 8003cdc:	e020      	b.n	8003d20 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003cde:	4b2d      	ldr	r3, [pc, #180]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a2c      	ldr	r2, [pc, #176]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003ce4:	f023 0301 	bic.w	r3, r3, #1
 8003ce8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003cea:	f7fd fecf 	bl	8001a8c <HAL_GetTick>
 8003cee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003cf0:	e00e      	b.n	8003d10 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003cf2:	f7fd fecb 	bl	8001a8c <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	1ad3      	subs	r3, r2, r3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d907      	bls.n	8003d10 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d00:	4b24      	ldr	r3, [pc, #144]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0302 	and.w	r3, r3, #2
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e3cf      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 0302 	and.w	r3, r3, #2
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1ea      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x1da>
 8003d1c:	e000      	b.n	8003d20 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d07e      	beq.n	8003e2a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	2b08      	cmp	r3, #8
 8003d30:	d005      	beq.n	8003d3e <HAL_RCC_OscConfig+0x226>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b0c      	cmp	r3, #12
 8003d36:	d10e      	bne.n	8003d56 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	2b03      	cmp	r3, #3
 8003d3c:	d10b      	bne.n	8003d56 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d3e:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d06e      	beq.n	8003e28 <HAL_RCC_OscConfig+0x310>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d16a      	bne.n	8003e28 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	e3ac      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5e:	d106      	bne.n	8003d6e <HAL_RCC_OscConfig+0x256>
 8003d60:	4b0c      	ldr	r3, [pc, #48]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d6a:	6013      	str	r3, [r2, #0]
 8003d6c:	e024      	b.n	8003db8 <HAL_RCC_OscConfig+0x2a0>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d76:	d113      	bne.n	8003da0 <HAL_RCC_OscConfig+0x288>
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a05      	ldr	r2, [pc, #20]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b03      	ldr	r3, [pc, #12]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a02      	ldr	r2, [pc, #8]	; (8003d94 <HAL_RCC_OscConfig+0x27c>)
 8003d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e012      	b.n	8003db8 <HAL_RCC_OscConfig+0x2a0>
 8003d92:	bf00      	nop
 8003d94:	40021000 	.word	0x40021000
 8003d98:	200027d8 	.word	0x200027d8
 8003d9c:	200027dc 	.word	0x200027dc
 8003da0:	4b8b      	ldr	r3, [pc, #556]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a8a      	ldr	r2, [pc, #552]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003da6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	4b88      	ldr	r3, [pc, #544]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a87      	ldr	r2, [pc, #540]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003db6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d019      	beq.n	8003df4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc0:	f7fd fe64 	bl	8001a8c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc6:	e00e      	b.n	8003de6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc8:	f7fd fe60 	bl	8001a8c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b64      	cmp	r3, #100	; 0x64
 8003dd4:	d907      	bls.n	8003de6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dd6:	4b7e      	ldr	r3, [pc, #504]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e364      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de6:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d0ea      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x2b0>
 8003df2:	e01a      	b.n	8003e2a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df4:	f7fd fe4a 	bl	8001a8c <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dfa:	e00e      	b.n	8003e1a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7fd fe46 	bl	8001a8c <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	; 0x64
 8003e08:	d907      	bls.n	8003e1a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0a:	4b71      	ldr	r3, [pc, #452]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d001      	beq.n	8003e1a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e34a      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e1a:	4b6d      	ldr	r3, [pc, #436]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1ea      	bne.n	8003dfc <HAL_RCC_OscConfig+0x2e4>
 8003e26:	e000      	b.n	8003e2a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0302 	and.w	r3, r3, #2
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d06c      	beq.n	8003f10 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d005      	beq.n	8003e48 <HAL_RCC_OscConfig+0x330>
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0c      	cmp	r3, #12
 8003e40:	d119      	bne.n	8003e76 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d116      	bne.n	8003e76 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e48:	4b61      	ldr	r3, [pc, #388]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d005      	beq.n	8003e60 <HAL_RCC_OscConfig+0x348>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68db      	ldr	r3, [r3, #12]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d101      	bne.n	8003e60 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e327      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b5b      	ldr	r3, [pc, #364]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	061b      	lsls	r3, r3, #24
 8003e6e:	4958      	ldr	r1, [pc, #352]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e74:	e04c      	b.n	8003f10 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d029      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e7e:	4b54      	ldr	r3, [pc, #336]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a53      	ldr	r2, [pc, #332]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8a:	f7fd fdff 	bl	8001a8c <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e90:	e00e      	b.n	8003eb0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fd fdfb 	bl	8001a8c <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d907      	bls.n	8003eb0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ea0:	4b4b      	ldr	r3, [pc, #300]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e2ff      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eb0:	4b47      	ldr	r3, [pc, #284]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d0ea      	beq.n	8003e92 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ebc:	4b44      	ldr	r3, [pc, #272]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	061b      	lsls	r3, r3, #24
 8003eca:	4941      	ldr	r1, [pc, #260]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	604b      	str	r3, [r1, #4]
 8003ed0:	e01e      	b.n	8003f10 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ed2:	4b3f      	ldr	r3, [pc, #252]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a3e      	ldr	r2, [pc, #248]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ed8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003edc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ede:	f7fd fdd5 	bl	8001a8c <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ee4:	e00e      	b.n	8003f04 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ee6:	f7fd fdd1 	bl	8001a8c <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d907      	bls.n	8003f04 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ef4:	4b36      	ldr	r3, [pc, #216]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d001      	beq.n	8003f04 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e2d5      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f04:	4b32      	ldr	r3, [pc, #200]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ea      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d062      	beq.n	8003fe2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d038      	beq.n	8003f96 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d108      	bne.n	8003f3e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003f2c:	4b28      	ldr	r3, [pc, #160]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	4a27      	ldr	r2, [pc, #156]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f34:	f023 0310 	bic.w	r3, r3, #16
 8003f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003f3c:	e007      	b.n	8003f4e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003f3e:	4b24      	ldr	r3, [pc, #144]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f46:	f043 0310 	orr.w	r3, r3, #16
 8003f4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b20      	ldr	r3, [pc, #128]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f54:	4a1e      	ldr	r2, [pc, #120]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f56:	f043 0301 	orr.w	r3, r3, #1
 8003f5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fd fd95 	bl	8001a8c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f64:	e00f      	b.n	8003f86 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f66:	f7fd fd91 	bl	8001a8c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b07      	cmp	r3, #7
 8003f72:	d908      	bls.n	8003f86 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f74:	4b16      	ldr	r3, [pc, #88]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e294      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f86:	4b12      	ldr	r3, [pc, #72]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f8c:	f003 0302 	and.w	r3, r3, #2
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d0e8      	beq.n	8003f66 <HAL_RCC_OscConfig+0x44e>
 8003f94:	e025      	b.n	8003fe2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f96:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f9c:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003f9e:	f023 0301 	bic.w	r3, r3, #1
 8003fa2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fd fd71 	bl	8001a8c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fac:	e012      	b.n	8003fd4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fae:	f7fd fd6d 	bl	8001a8c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b07      	cmp	r3, #7
 8003fba:	d90b      	bls.n	8003fd4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fbc:	4b04      	ldr	r3, [pc, #16]	; (8003fd0 <HAL_RCC_OscConfig+0x4b8>)
 8003fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d004      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e270      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
 8003fce:	bf00      	nop
 8003fd0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd4:	4ba8      	ldr	r3, [pc, #672]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8003fd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fda:	f003 0302 	and.w	r3, r3, #2
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d1e5      	bne.n	8003fae <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 812d 	beq.w	800424a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003ff4:	4ba0      	ldr	r3, [pc, #640]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8003ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10d      	bne.n	800401c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004000:	4b9d      	ldr	r3, [pc, #628]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004004:	4a9c      	ldr	r2, [pc, #624]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004006:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800400a:	6593      	str	r3, [r2, #88]	; 0x58
 800400c:	4b9a      	ldr	r3, [pc, #616]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800400e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004014:	60bb      	str	r3, [r7, #8]
 8004016:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004018:	2301      	movs	r3, #1
 800401a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800401c:	4b97      	ldr	r3, [pc, #604]	; (800427c <HAL_RCC_OscConfig+0x764>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d11e      	bne.n	8004066 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004028:	4b94      	ldr	r3, [pc, #592]	; (800427c <HAL_RCC_OscConfig+0x764>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a93      	ldr	r2, [pc, #588]	; (800427c <HAL_RCC_OscConfig+0x764>)
 800402e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004032:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004034:	f7fd fd2a 	bl	8001a8c <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800403a:	e00e      	b.n	800405a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800403c:	f7fd fd26 	bl	8001a8c <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b02      	cmp	r3, #2
 8004048:	d907      	bls.n	800405a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800404a:	4b8c      	ldr	r3, [pc, #560]	; (800427c <HAL_RCC_OscConfig+0x764>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d101      	bne.n	800405a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e22a      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405a:	4b88      	ldr	r3, [pc, #544]	; (800427c <HAL_RCC_OscConfig+0x764>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004062:	2b00      	cmp	r3, #0
 8004064:	d0ea      	beq.n	800403c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b00      	cmp	r3, #0
 8004070:	d01f      	beq.n	80040b2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0304 	and.w	r3, r3, #4
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800407e:	4b7e      	ldr	r3, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004084:	4a7c      	ldr	r2, [pc, #496]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004086:	f043 0304 	orr.w	r3, r3, #4
 800408a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800408e:	4b7a      	ldr	r3, [pc, #488]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	4a78      	ldr	r2, [pc, #480]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800409e:	e018      	b.n	80040d2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040a0:	4b75      	ldr	r3, [pc, #468]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	4a74      	ldr	r2, [pc, #464]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80040b0:	e00f      	b.n	80040d2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80040b2:	4b71      	ldr	r3, [pc, #452]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	4a6f      	ldr	r2, [pc, #444]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040ba:	f023 0301 	bic.w	r3, r3, #1
 80040be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80040c2:	4b6d      	ldr	r3, [pc, #436]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040c8:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040ca:	f023 0304 	bic.w	r3, r3, #4
 80040ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d068      	beq.n	80041ac <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040da:	f7fd fcd7 	bl	8001a8c <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040e0:	e011      	b.n	8004106 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7fd fcd3 	bl	8001a8c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d908      	bls.n	8004106 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f4:	4b60      	ldr	r3, [pc, #384]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80040f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e1d4      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	4b5c      	ldr	r3, [pc, #368]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0e6      	beq.n	80040e2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411c:	2b00      	cmp	r3, #0
 800411e:	d022      	beq.n	8004166 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004120:	4b55      	ldr	r3, [pc, #340]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004126:	4a54      	ldr	r2, [pc, #336]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004130:	e011      	b.n	8004156 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fd fcab 	bl	8001a8c <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004140:	4293      	cmp	r3, r2
 8004142:	d908      	bls.n	8004156 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004144:	4b4c      	ldr	r3, [pc, #304]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414e:	2b00      	cmp	r3, #0
 8004150:	d101      	bne.n	8004156 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e1ac      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0e6      	beq.n	8004132 <HAL_RCC_OscConfig+0x61a>
 8004164:	e068      	b.n	8004238 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004166:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416c:	4a42      	ldr	r2, [pc, #264]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800416e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004176:	e011      	b.n	800419c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fd fc88 	bl	8001a8c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d908      	bls.n	800419c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800418a:	4b3b      	ldr	r3, [pc, #236]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800418c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004190:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004194:	2b00      	cmp	r3, #0
 8004196:	d001      	beq.n	800419c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e189      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800419c:	4b36      	ldr	r3, [pc, #216]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e6      	bne.n	8004178 <HAL_RCC_OscConfig+0x660>
 80041aa:	e045      	b.n	8004238 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ac:	f7fd fc6e 	bl	8001a8c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b2:	e011      	b.n	80041d8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fc6a 	bl	8001a8c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d908      	bls.n	80041d8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041c6:	4b2c      	ldr	r3, [pc, #176]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80041c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e16b      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041d8:	4b27      	ldr	r3, [pc, #156]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80041da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041de:	f003 0302 	and.w	r3, r3, #2
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80041e6:	4b24      	ldr	r3, [pc, #144]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80041e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d021      	beq.n	8004238 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80041f4:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 80041fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004204:	e011      	b.n	800422a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004206:	f7fd fc41 	bl	8001a8c <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	f241 3288 	movw	r2, #5000	; 0x1388
 8004214:	4293      	cmp	r3, r2
 8004216:	d908      	bls.n	800422a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004218:	4b17      	ldr	r3, [pc, #92]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e142      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800422a:	4b13      	ldr	r3, [pc, #76]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e6      	bne.n	8004206 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004238:	7ffb      	ldrb	r3, [r7, #31]
 800423a:	2b01      	cmp	r3, #1
 800423c:	d105      	bne.n	800424a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800423e:	4b0e      	ldr	r3, [pc, #56]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004242:	4a0d      	ldr	r2, [pc, #52]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004244:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004248:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0320 	and.w	r3, r3, #32
 8004252:	2b00      	cmp	r3, #0
 8004254:	d04f      	beq.n	80042f6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d028      	beq.n	80042b0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800425e:	4b06      	ldr	r3, [pc, #24]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_RCC_OscConfig+0x760>)
 8004266:	f043 0301 	orr.w	r3, r3, #1
 800426a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426e:	f7fd fc0d 	bl	8001a8c <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004274:	e014      	b.n	80042a0 <HAL_RCC_OscConfig+0x788>
 8004276:	bf00      	nop
 8004278:	40021000 	.word	0x40021000
 800427c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004280:	f7fd fc04 	bl	8001a8c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d908      	bls.n	80042a0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800428e:	4b8a      	ldr	r3, [pc, #552]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004290:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e107      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80042a0:	4b85      	ldr	r3, [pc, #532]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80042a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d0e8      	beq.n	8004280 <HAL_RCC_OscConfig+0x768>
 80042ae:	e022      	b.n	80042f6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80042b0:	4b81      	ldr	r3, [pc, #516]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80042b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042b6:	4a80      	ldr	r2, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c0:	f7fd fbe4 	bl	8001a8c <HAL_GetTick>
 80042c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042c6:	e00f      	b.n	80042e8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80042c8:	f7fd fbe0 	bl	8001a8c <HAL_GetTick>
 80042cc:	4602      	mov	r2, r0
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	1ad3      	subs	r3, r2, r3
 80042d2:	2b02      	cmp	r3, #2
 80042d4:	d908      	bls.n	80042e8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042d6:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80042d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042dc:	f003 0302 	and.w	r3, r3, #2
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0e3      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80042e8:	4b73      	ldr	r3, [pc, #460]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80042ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1e8      	bne.n	80042c8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 80d7 	beq.w	80044ae <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004300:	4b6d      	ldr	r3, [pc, #436]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004302:	689b      	ldr	r3, [r3, #8]
 8004304:	f003 030c 	and.w	r3, r3, #12
 8004308:	2b0c      	cmp	r3, #12
 800430a:	f000 8091 	beq.w	8004430 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004312:	2b02      	cmp	r3, #2
 8004314:	d166      	bne.n	80043e4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004316:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a67      	ldr	r2, [pc, #412]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800431c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004320:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004322:	f7fd fbb3 	bl	8001a8c <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004328:	e00e      	b.n	8004348 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432a:	f7fd fbaf 	bl	8001a8c <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d907      	bls.n	8004348 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004338:	4b5f      	ldr	r3, [pc, #380]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e0b3      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004348:	4b5b      	ldr	r3, [pc, #364]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1ea      	bne.n	800432a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004354:	4b58      	ldr	r3, [pc, #352]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	4b58      	ldr	r3, [pc, #352]	; (80044bc <HAL_RCC_OscConfig+0x9a4>)
 800435a:	4013      	ands	r3, r2
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004364:	3a01      	subs	r2, #1
 8004366:	0112      	lsls	r2, r2, #4
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800436e:	0212      	lsls	r2, r2, #8
 8004370:	4311      	orrs	r1, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004376:	0852      	lsrs	r2, r2, #1
 8004378:	3a01      	subs	r2, #1
 800437a:	0552      	lsls	r2, r2, #21
 800437c:	4311      	orrs	r1, r2
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004382:	0852      	lsrs	r2, r2, #1
 8004384:	3a01      	subs	r2, #1
 8004386:	0652      	lsls	r2, r2, #25
 8004388:	4311      	orrs	r1, r2
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800438e:	06d2      	lsls	r2, r2, #27
 8004390:	430a      	orrs	r2, r1
 8004392:	4949      	ldr	r1, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004394:	4313      	orrs	r3, r2
 8004396:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004398:	4b47      	ldr	r3, [pc, #284]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a46      	ldr	r2, [pc, #280]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800439e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043a2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043a4:	4b44      	ldr	r3, [pc, #272]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4a43      	ldr	r2, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ae:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043b0:	f7fd fb6c 	bl	8001a8c <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b6:	e00e      	b.n	80043d6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fd fb68 	bl	8001a8c <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d907      	bls.n	80043d6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c6:	4b3c      	ldr	r3, [pc, #240]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e06c      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d6:	4b38      	ldr	r3, [pc, #224]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0ea      	beq.n	80043b8 <HAL_RCC_OscConfig+0x8a0>
 80043e2:	e064      	b.n	80044ae <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b34      	ldr	r3, [pc, #208]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a33      	ldr	r2, [pc, #204]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 80043ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fd fb4c 	bl	8001a8c <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	e00e      	b.n	8004416 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043f8:	f7fd fb48 	bl	8001a8c <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d907      	bls.n	8004416 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004406:	4b2c      	ldr	r3, [pc, #176]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8004412:	2303      	movs	r3, #3
 8004414:	e04c      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004416:	4b28      	ldr	r3, [pc, #160]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d1ea      	bne.n	80043f8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004422:	4b25      	ldr	r3, [pc, #148]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004424:	68da      	ldr	r2, [r3, #12]
 8004426:	4924      	ldr	r1, [pc, #144]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 8004428:	4b25      	ldr	r3, [pc, #148]	; (80044c0 <HAL_RCC_OscConfig+0x9a8>)
 800442a:	4013      	ands	r3, r2
 800442c:	60cb      	str	r3, [r1, #12]
 800442e:	e03e      	b.n	80044ae <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004434:	2b01      	cmp	r3, #1
 8004436:	d101      	bne.n	800443c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e039      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800443c:	4b1e      	ldr	r3, [pc, #120]	; (80044b8 <HAL_RCC_OscConfig+0x9a0>)
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f003 0203 	and.w	r2, r3, #3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	429a      	cmp	r2, r3
 800444e:	d12c      	bne.n	80044aa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800445a:	3b01      	subs	r3, #1
 800445c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d123      	bne.n	80044aa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800446c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d11b      	bne.n	80044aa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800447e:	429a      	cmp	r2, r3
 8004480:	d113      	bne.n	80044aa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800448c:	085b      	lsrs	r3, r3, #1
 800448e:	3b01      	subs	r3, #1
 8004490:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004492:	429a      	cmp	r2, r3
 8004494:	d109      	bne.n	80044aa <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a0:	085b      	lsrs	r3, r3, #1
 80044a2:	3b01      	subs	r3, #1
 80044a4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d001      	beq.n	80044ae <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3720      	adds	r7, #32
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40021000 	.word	0x40021000
 80044bc:	019f800c 	.word	0x019f800c
 80044c0:	feeefffc 	.word	0xfeeefffc

080044c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e11c      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044dc:	4b90      	ldr	r3, [pc, #576]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 030f 	and.w	r3, r3, #15
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	429a      	cmp	r2, r3
 80044e8:	d910      	bls.n	800450c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ea:	4b8d      	ldr	r3, [pc, #564]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 020f 	bic.w	r2, r3, #15
 80044f2:	498b      	ldr	r1, [pc, #556]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fa:	4b89      	ldr	r3, [pc, #548]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 030f 	and.w	r3, r3, #15
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	429a      	cmp	r2, r3
 8004506:	d001      	beq.n	800450c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e104      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b00      	cmp	r3, #0
 8004516:	d010      	beq.n	800453a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	4b81      	ldr	r3, [pc, #516]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004524:	429a      	cmp	r2, r3
 8004526:	d908      	bls.n	800453a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004528:	4b7e      	ldr	r3, [pc, #504]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	497b      	ldr	r1, [pc, #492]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004536:	4313      	orrs	r3, r2
 8004538:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	f000 8085 	beq.w	8004652 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	2b03      	cmp	r3, #3
 800454e:	d11f      	bne.n	8004590 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004550:	4b74      	ldr	r3, [pc, #464]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0da      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004560:	f000 fa26 	bl	80049b0 <RCC_GetSysClockFreqFromPLLSource>
 8004564:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4a6f      	ldr	r2, [pc, #444]	; (8004728 <HAL_RCC_ClockConfig+0x264>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d947      	bls.n	80045fe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800456e:	4b6d      	ldr	r3, [pc, #436]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d141      	bne.n	80045fe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800457a:	4b6a      	ldr	r3, [pc, #424]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004582:	4a68      	ldr	r2, [pc, #416]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004584:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004588:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800458a:	2380      	movs	r3, #128	; 0x80
 800458c:	617b      	str	r3, [r7, #20]
 800458e:	e036      	b.n	80045fe <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b02      	cmp	r3, #2
 8004596:	d107      	bne.n	80045a8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004598:	4b62      	ldr	r3, [pc, #392]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d115      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0b6      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d107      	bne.n	80045c0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b0:	4b5c      	ldr	r3, [pc, #368]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0302 	and.w	r3, r3, #2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d109      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80045bc:	2301      	movs	r3, #1
 80045be:	e0aa      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c0:	4b58      	ldr	r3, [pc, #352]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d101      	bne.n	80045d0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0a2      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80045d0:	f000 f8b0 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80045d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4a53      	ldr	r2, [pc, #332]	; (8004728 <HAL_RCC_ClockConfig+0x264>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d90f      	bls.n	80045fe <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80045de:	4b51      	ldr	r3, [pc, #324]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d109      	bne.n	80045fe <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045ea:	4b4e      	ldr	r3, [pc, #312]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f2:	4a4c      	ldr	r2, [pc, #304]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80045f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045fe:	4b49      	ldr	r3, [pc, #292]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f023 0203 	bic.w	r2, r3, #3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	4946      	ldr	r1, [pc, #280]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800460c:	4313      	orrs	r3, r2
 800460e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004610:	f7fd fa3c 	bl	8001a8c <HAL_GetTick>
 8004614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004616:	e013      	b.n	8004640 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004618:	f7fd fa38 	bl	8001a8c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	f241 3288 	movw	r2, #5000	; 0x1388
 8004626:	4293      	cmp	r3, r2
 8004628:	d90a      	bls.n	8004640 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b3e      	ldr	r3, [pc, #248]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d001      	beq.n	8004640 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e06a      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004640:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	f003 020c 	and.w	r2, r3, #12
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	429a      	cmp	r2, r3
 8004650:	d1e2      	bne.n	8004618 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d105      	bne.n	8004664 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004658:	4b32      	ldr	r3, [pc, #200]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	4a31      	ldr	r2, [pc, #196]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800465e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004662:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b00      	cmp	r3, #0
 800466e:	d010      	beq.n	8004692 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689a      	ldr	r2, [r3, #8]
 8004674:	4b2b      	ldr	r3, [pc, #172]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800467c:	429a      	cmp	r2, r3
 800467e:	d208      	bcs.n	8004692 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004680:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	4925      	ldr	r1, [pc, #148]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004692:	4b23      	ldr	r3, [pc, #140]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	683a      	ldr	r2, [r7, #0]
 800469c:	429a      	cmp	r2, r3
 800469e:	d210      	bcs.n	80046c2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046a0:	4b1f      	ldr	r3, [pc, #124]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f023 020f 	bic.w	r2, r3, #15
 80046a8:	491d      	ldr	r1, [pc, #116]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046b0:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <HAL_RCC_ClockConfig+0x25c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 030f 	and.w	r3, r3, #15
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d001      	beq.n	80046c2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e029      	b.n	8004716 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046ce:	4b15      	ldr	r3, [pc, #84]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	68db      	ldr	r3, [r3, #12]
 80046da:	4912      	ldr	r1, [pc, #72]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0308 	and.w	r3, r3, #8
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d009      	beq.n	8004700 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046ec:	4b0d      	ldr	r3, [pc, #52]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	490a      	ldr	r1, [pc, #40]	; (8004724 <HAL_RCC_ClockConfig+0x260>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004700:	f000 f8b6 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 8004704:	4603      	mov	r3, r0
 8004706:	4a09      	ldr	r2, [pc, #36]	; (800472c <HAL_RCC_ClockConfig+0x268>)
 8004708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <HAL_RCC_ClockConfig+0x26c>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd f96c 	bl	80019ec <HAL_InitTick>
 8004714:	4603      	mov	r3, r0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	40022000 	.word	0x40022000
 8004724:	40021000 	.word	0x40021000
 8004728:	04c4b400 	.word	0x04c4b400
 800472c:	200027d8 	.word	0x200027d8
 8004730:	200027dc 	.word	0x200027dc

08004734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	2300      	movs	r3, #0
 8004740:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004742:	4b47      	ldr	r3, [pc, #284]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800474c:	4b44      	ldr	r3, [pc, #272]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	f003 0303 	and.w	r3, r3, #3
 8004754:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d005      	beq.n	8004768 <HAL_RCC_GetSysClockFreq+0x34>
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	2b0c      	cmp	r3, #12
 8004760:	d121      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d11e      	bne.n	80047a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004768:	4b3d      	ldr	r3, [pc, #244]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0308 	and.w	r3, r3, #8
 8004770:	2b00      	cmp	r3, #0
 8004772:	d107      	bne.n	8004784 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004774:	4b3a      	ldr	r3, [pc, #232]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800477a:	0a1b      	lsrs	r3, r3, #8
 800477c:	f003 030f 	and.w	r3, r3, #15
 8004780:	61fb      	str	r3, [r7, #28]
 8004782:	e005      	b.n	8004790 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004784:	4b36      	ldr	r3, [pc, #216]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f003 030f 	and.w	r3, r3, #15
 800478e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8004790:	4a34      	ldr	r2, [pc, #208]	; (8004864 <HAL_RCC_GetSysClockFreq+0x130>)
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004798:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10d      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d102      	bne.n	80047b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047ac:	4b2e      	ldr	r3, [pc, #184]	; (8004868 <HAL_RCC_GetSysClockFreq+0x134>)
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e004      	b.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d101      	bne.n	80047bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047b8:	4b2c      	ldr	r3, [pc, #176]	; (800486c <HAL_RCC_GetSysClockFreq+0x138>)
 80047ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	2b0c      	cmp	r3, #12
 80047c0:	d146      	bne.n	8004850 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80047c2:	4b27      	ldr	r3, [pc, #156]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047c4:	68db      	ldr	r3, [r3, #12]
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047cc:	4b24      	ldr	r3, [pc, #144]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	091b      	lsrs	r3, r3, #4
 80047d2:	f003 030f 	and.w	r3, r3, #15
 80047d6:	3301      	adds	r3, #1
 80047d8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b02      	cmp	r3, #2
 80047de:	d003      	beq.n	80047e8 <HAL_RCC_GetSysClockFreq+0xb4>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d00d      	beq.n	8004802 <HAL_RCC_GetSysClockFreq+0xce>
 80047e6:	e019      	b.n	800481c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047e8:	4a1f      	ldr	r2, [pc, #124]	; (8004868 <HAL_RCC_GetSysClockFreq+0x134>)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	4a1b      	ldr	r2, [pc, #108]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 80047f2:	68d2      	ldr	r2, [r2, #12]
 80047f4:	0a12      	lsrs	r2, r2, #8
 80047f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80047fa:	fb02 f303 	mul.w	r3, r2, r3
 80047fe:	617b      	str	r3, [r7, #20]
        break;
 8004800:	e019      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004802:	4a1a      	ldr	r2, [pc, #104]	; (800486c <HAL_RCC_GetSysClockFreq+0x138>)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	fbb2 f3f3 	udiv	r3, r2, r3
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 800480c:	68d2      	ldr	r2, [r2, #12]
 800480e:	0a12      	lsrs	r2, r2, #8
 8004810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004814:	fb02 f303 	mul.w	r3, r2, r3
 8004818:	617b      	str	r3, [r7, #20]
        break;
 800481a:	e00c      	b.n	8004836 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800481c:	69fa      	ldr	r2, [r7, #28]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	4a0e      	ldr	r2, [pc, #56]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004826:	68d2      	ldr	r2, [r2, #12]
 8004828:	0a12      	lsrs	r2, r2, #8
 800482a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482e:	fb02 f303 	mul.w	r3, r2, r3
 8004832:	617b      	str	r3, [r7, #20]
        break;
 8004834:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004836:	4b0a      	ldr	r3, [pc, #40]	; (8004860 <HAL_RCC_GetSysClockFreq+0x12c>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	0e5b      	lsrs	r3, r3, #25
 800483c:	f003 0303 	and.w	r3, r3, #3
 8004840:	3301      	adds	r3, #1
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004846:	697a      	ldr	r2, [r7, #20]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	fbb2 f3f3 	udiv	r3, r2, r3
 800484e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004850:	69bb      	ldr	r3, [r7, #24]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3724      	adds	r7, #36	; 0x24
 8004856:	46bd      	mov	sp, r7
 8004858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485c:	4770      	bx	lr
 800485e:	bf00      	nop
 8004860:	40021000 	.word	0x40021000
 8004864:	0800f79c 	.word	0x0800f79c
 8004868:	00f42400 	.word	0x00f42400
 800486c:	00989680 	.word	0x00989680

08004870 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8004874:	f7ff ff5e 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8004878:	4602      	mov	r2, r0
 800487a:	4b05      	ldr	r3, [pc, #20]	; (8004890 <HAL_RCC_GetHCLKFreq+0x20>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	091b      	lsrs	r3, r3, #4
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	4903      	ldr	r1, [pc, #12]	; (8004894 <HAL_RCC_GetHCLKFreq+0x24>)
 8004886:	5ccb      	ldrb	r3, [r1, r3]
 8004888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800488c:	4618      	mov	r0, r3
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40021000 	.word	0x40021000
 8004894:	0800f784 	.word	0x0800f784

08004898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800489c:	f7ff ffe8 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048a0:	4602      	mov	r2, r0
 80048a2:	4b05      	ldr	r3, [pc, #20]	; (80048b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	0a1b      	lsrs	r3, r3, #8
 80048a8:	f003 0307 	and.w	r3, r3, #7
 80048ac:	4903      	ldr	r1, [pc, #12]	; (80048bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ae:	5ccb      	ldrb	r3, [r1, r3]
 80048b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	40021000 	.word	0x40021000
 80048bc:	0800f794 	.word	0x0800f794

080048c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c4:	f7ff ffd4 	bl	8004870 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0adb      	lsrs	r3, r3, #11
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4903      	ldr	r1, [pc, #12]	; (80048e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	40021000 	.word	0x40021000
 80048e4:	0800f794 	.word	0x0800f794

080048e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048f4:	4b2c      	ldr	r3, [pc, #176]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80048f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d003      	beq.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004900:	f7ff f86c 	bl	80039dc <HAL_PWREx_GetVoltageRange>
 8004904:	6138      	str	r0, [r7, #16]
 8004906:	e014      	b.n	8004932 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004908:	4b27      	ldr	r3, [pc, #156]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800490a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800490c:	4a26      	ldr	r2, [pc, #152]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800490e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004912:	6593      	str	r3, [r2, #88]	; 0x58
 8004914:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800491c:	60fb      	str	r3, [r7, #12]
 800491e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004920:	f7ff f85c 	bl	80039dc <HAL_PWREx_GetVoltageRange>
 8004924:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004926:	4b20      	ldr	r3, [pc, #128]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8004928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800492a:	4a1f      	ldr	r2, [pc, #124]	; (80049a8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800492c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004930:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d003      	beq.n	8004940 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800493e:	d10b      	bne.n	8004958 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d919      	bls.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2ba0      	cmp	r3, #160	; 0xa0
 800494a:	d902      	bls.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800494c:	2302      	movs	r3, #2
 800494e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004950:	e013      	b.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8004956:	e010      	b.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b80      	cmp	r3, #128	; 0x80
 800495c:	d902      	bls.n	8004964 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800495e:	2303      	movs	r3, #3
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	e00a      	b.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2b80      	cmp	r3, #128	; 0x80
 8004968:	d102      	bne.n	8004970 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800496a:	2302      	movs	r3, #2
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e004      	b.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2b70      	cmp	r3, #112	; 0x70
 8004974:	d101      	bne.n	800497a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004976:	2301      	movs	r3, #1
 8004978:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800497a:	4b0c      	ldr	r3, [pc, #48]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 020f 	bic.w	r2, r3, #15
 8004982:	490a      	ldr	r1, [pc, #40]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 800498a:	4b08      	ldr	r3, [pc, #32]	; (80049ac <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	429a      	cmp	r2, r3
 8004996:	d001      	beq.n	800499c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e000      	b.n	800499e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40022000 	.word	0x40022000

080049b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b087      	sub	sp, #28
 80049b4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049b6:	4b31      	ldr	r3, [pc, #196]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	f003 0303 	and.w	r3, r3, #3
 80049be:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80049c0:	4b2e      	ldr	r3, [pc, #184]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	091b      	lsrs	r3, r3, #4
 80049c6:	f003 030f 	and.w	r3, r3, #15
 80049ca:	3301      	adds	r3, #1
 80049cc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b03      	cmp	r3, #3
 80049d2:	d015      	beq.n	8004a00 <RCC_GetSysClockFreqFromPLLSource+0x50>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d839      	bhi.n	8004a4e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d01c      	beq.n	8004a1a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d133      	bne.n	8004a4e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80049e6:	4a26      	ldr	r2, [pc, #152]	; (8004a80 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ee:	4a23      	ldr	r2, [pc, #140]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80049f0:	68d2      	ldr	r2, [r2, #12]
 80049f2:	0a12      	lsrs	r2, r2, #8
 80049f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80049f8:	fb02 f303 	mul.w	r3, r2, r3
 80049fc:	613b      	str	r3, [r7, #16]
      break;
 80049fe:	e029      	b.n	8004a54 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a00:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a08:	4a1c      	ldr	r2, [pc, #112]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a0a:	68d2      	ldr	r2, [r2, #12]
 8004a0c:	0a12      	lsrs	r2, r2, #8
 8004a0e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004a12:	fb02 f303 	mul.w	r3, r2, r3
 8004a16:	613b      	str	r3, [r7, #16]
      break;
 8004a18:	e01c      	b.n	8004a54 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004a1a:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d107      	bne.n	8004a36 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a2c:	0a1b      	lsrs	r3, r3, #8
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	617b      	str	r3, [r7, #20]
 8004a34:	e005      	b.n	8004a42 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a36:	4b11      	ldr	r3, [pc, #68]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	091b      	lsrs	r3, r3, #4
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8004a42:	4a11      	ldr	r2, [pc, #68]	; (8004a88 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a4a:	613b      	str	r3, [r7, #16]
        break;
 8004a4c:	e002      	b.n	8004a54 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	613b      	str	r3, [r7, #16]
      break;
 8004a52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8004a54:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	0e5b      	lsrs	r3, r3, #25
 8004a5a:	f003 0303 	and.w	r3, r3, #3
 8004a5e:	3301      	adds	r3, #1
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004a6e:	683b      	ldr	r3, [r7, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	40021000 	.word	0x40021000
 8004a80:	00f42400 	.word	0x00f42400
 8004a84:	00989680 	.word	0x00989680
 8004a88:	0800f79c 	.word	0x0800f79c

08004a8c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a94:	2300      	movs	r3, #0
 8004a96:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a98:	2300      	movs	r3, #0
 8004a9a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d040      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004aac:	2b80      	cmp	r3, #128	; 0x80
 8004aae:	d02a      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ab0:	2b80      	cmp	r3, #128	; 0x80
 8004ab2:	d825      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ab4:	2b60      	cmp	r3, #96	; 0x60
 8004ab6:	d026      	beq.n	8004b06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004ab8:	2b60      	cmp	r3, #96	; 0x60
 8004aba:	d821      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004abc:	2b40      	cmp	r3, #64	; 0x40
 8004abe:	d006      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004ac0:	2b40      	cmp	r3, #64	; 0x40
 8004ac2:	d81d      	bhi.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d009      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004ac8:	2b20      	cmp	r3, #32
 8004aca:	d010      	beq.n	8004aee <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004acc:	e018      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ace:	4b8f      	ldr	r3, [pc, #572]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	4a8e      	ldr	r2, [pc, #568]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ad8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004ada:	e015      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	3304      	adds	r3, #4
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 faf8 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004aec:	e00c      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	3320      	adds	r3, #32
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 fbd5 	bl	80062a4 <RCCEx_PLLSAI2_Config>
 8004afa:	4603      	mov	r3, r0
 8004afc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	77fb      	strb	r3, [r7, #31]
        break;
 8004b04:	e000      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8004b06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b08:	7ffb      	ldrb	r3, [r7, #31]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004b0e:	4b7f      	ldr	r3, [pc, #508]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b14:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b1c:	497b      	ldr	r1, [pc, #492]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004b24:	e001      	b.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b26:	7ffb      	ldrb	r3, [r7, #31]
 8004b28:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d047      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b3e:	d030      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	d82a      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b4a:	d02a      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b50:	d824      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b56:	d008      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b5c:	d81e      	bhi.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004b62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b66:	d010      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004b68:	e018      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b6a:	4b68      	ldr	r3, [pc, #416]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	4a67      	ldr	r2, [pc, #412]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b76:	e015      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f001 faaa 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 8004b84:	4603      	mov	r3, r0
 8004b86:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b88:	e00c      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3320      	adds	r3, #32
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 fb87 	bl	80062a4 <RCCEx_PLLSAI2_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8004b9a:	e003      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	77fb      	strb	r3, [r7, #31]
        break;
 8004ba0:	e000      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8004ba2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ba4:	7ffb      	ldrb	r3, [r7, #31]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004baa:	4b58      	ldr	r3, [pc, #352]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004bb0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb8:	4954      	ldr	r1, [pc, #336]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004bc0:	e001      	b.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bc2:	7ffb      	ldrb	r3, [r7, #31]
 8004bc4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	f000 80ab 	beq.w	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bd8:	4b4c      	ldr	r3, [pc, #304]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10d      	bne.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004be4:	4b49      	ldr	r3, [pc, #292]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be8:	4a48      	ldr	r2, [pc, #288]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bee:	6593      	str	r3, [r2, #88]	; 0x58
 8004bf0:	4b46      	ldr	r3, [pc, #280]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf8:	60fb      	str	r3, [r7, #12]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b43      	ldr	r3, [pc, #268]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a42      	ldr	r2, [pc, #264]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c0c:	f7fc ff3e 	bl	8001a8c <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c12:	e00f      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c14:	f7fc ff3a 	bl	8001a8c <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d908      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c22:	4b3b      	ldr	r3, [pc, #236]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d109      	bne.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8004c32:	e006      	b.n	8004c42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c34:	4b36      	ldr	r3, [pc, #216]	; (8004d10 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0e9      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004c40:	e000      	b.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8004c42:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8004c44:	7ffb      	ldrb	r3, [r7, #31]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d164      	bne.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c4a:	4b30      	ldr	r3, [pc, #192]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c54:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01f      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c62:	69ba      	ldr	r2, [r7, #24]
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d019      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c68:	4b28      	ldr	r3, [pc, #160]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c72:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c74:	4b25      	ldr	r3, [pc, #148]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c7a:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c84:	4b21      	ldr	r3, [pc, #132]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8a:	4a20      	ldr	r2, [pc, #128]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c94:	4a1d      	ldr	r2, [pc, #116]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d01f      	beq.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca6:	f7fc fef1 	bl	8001a8c <HAL_GetTick>
 8004caa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cac:	e012      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fc feed 	bl	8001a8c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d909      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc0:	4b12      	ldr	r3, [pc, #72]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8004cd2:	e007      	b.n	8004ce4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd4:	4b0d      	ldr	r3, [pc, #52]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d0e5      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x222>
 8004ce2:	e000      	b.n	8004ce6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8004ce4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8004ce6:	7ffb      	ldrb	r3, [r7, #31]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10c      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cec:	4b07      	ldr	r3, [pc, #28]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfc:	4903      	ldr	r1, [pc, #12]	; (8004d0c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d04:	e008      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d06:	7ffb      	ldrb	r3, [r7, #31]
 8004d08:	77bb      	strb	r3, [r7, #30]
 8004d0a:	e005      	b.n	8004d18 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8004d0c:	40021000 	.word	0x40021000
 8004d10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d14:	7ffb      	ldrb	r3, [r7, #31]
 8004d16:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d18:	7dfb      	ldrb	r3, [r7, #23]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d105      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b9c      	ldr	r3, [pc, #624]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a9b      	ldr	r2, [pc, #620]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0301 	and.w	r3, r3, #1
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d00a      	beq.n	8004d4c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d36:	4b96      	ldr	r3, [pc, #600]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3c:	f023 0203 	bic.w	r2, r3, #3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d44:	4992      	ldr	r1, [pc, #584]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d00a      	beq.n	8004d6e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d58:	4b8d      	ldr	r3, [pc, #564]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d5e:	f023 020c 	bic.w	r2, r3, #12
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d66:	498a      	ldr	r1, [pc, #552]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0304 	and.w	r3, r3, #4
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00a      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d7a:	4b85      	ldr	r3, [pc, #532]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d88:	4981      	ldr	r1, [pc, #516]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0308 	and.w	r3, r3, #8
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00a      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d9c:	4b7c      	ldr	r3, [pc, #496]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004da2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	4979      	ldr	r1, [pc, #484]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dac:	4313      	orrs	r3, r2
 8004dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d00a      	beq.n	8004dd4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004dbe:	4b74      	ldr	r3, [pc, #464]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dcc:	4970      	ldr	r1, [pc, #448]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0320 	and.w	r3, r3, #32
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d00a      	beq.n	8004df6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004de0:	4b6b      	ldr	r3, [pc, #428]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dee:	4968      	ldr	r1, [pc, #416]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00a      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e02:	4b63      	ldr	r3, [pc, #396]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e10:	495f      	ldr	r1, [pc, #380]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d00a      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e24:	4b5a      	ldr	r3, [pc, #360]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e32:	4957      	ldr	r1, [pc, #348]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8004e46:	4b52      	ldr	r3, [pc, #328]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e54:	494e      	ldr	r1, [pc, #312]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d031      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e6c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e70:	d00e      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004e72:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004e76:	d814      	bhi.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004e80:	d10f      	bne.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e82:	4b43      	ldr	r3, [pc, #268]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	4a42      	ldr	r2, [pc, #264]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004e88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e8c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004e8e:	e00c      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	3304      	adds	r3, #4
 8004e94:	2100      	movs	r1, #0
 8004e96:	4618      	mov	r0, r3
 8004e98:	f001 f91e 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004ea0:	e003      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	77fb      	strb	r3, [r7, #31]
        break;
 8004ea6:	e000      	b.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004ea8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004eaa:	7ffb      	ldrb	r3, [r7, #31]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d10b      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004eb0:	4b37      	ldr	r3, [pc, #220]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ebe:	4934      	ldr	r1, [pc, #208]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ec6:	e001      	b.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ec8:	7ffb      	ldrb	r3, [r7, #31]
 8004eca:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d00a      	beq.n	8004eee <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed8:	4b2d      	ldr	r3, [pc, #180]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ede:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee6:	492a      	ldr	r1, [pc, #168]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d00a      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004efa:	4b25      	ldr	r3, [pc, #148]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f00:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f08:	4921      	ldr	r1, [pc, #132]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f1c:	4b1c      	ldr	r3, [pc, #112]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f22:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	4919      	ldr	r1, [pc, #100]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00a      	beq.n	8004f54 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f3e:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f40:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f44:	f023 0203 	bic.w	r2, r3, #3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	4910      	ldr	r1, [pc, #64]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d02b      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f60:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f6e:	4908      	ldr	r1, [pc, #32]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f70:	4313      	orrs	r3, r2
 8004f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f7e:	d109      	bne.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4a02      	ldr	r2, [pc, #8]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004f86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f8a:	60d3      	str	r3, [r2, #12]
 8004f8c:	e014      	b.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3304      	adds	r3, #4
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f001 f897 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 8004faa:	4603      	mov	r3, r0
 8004fac:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004fae:	7ffb      	ldrb	r3, [r7, #31]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8004fb4:	7ffb      	ldrb	r3, [r7, #31]
 8004fb6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d04a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fc8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004fcc:	d108      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8004fce:	4b70      	ldr	r3, [pc, #448]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004fd4:	4a6e      	ldr	r2, [pc, #440]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fda:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004fde:	e012      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8004fe0:	4b6b      	ldr	r3, [pc, #428]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004fee:	4968      	ldr	r1, [pc, #416]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ff6:	4b66      	ldr	r3, [pc, #408]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ff8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ffc:	4a64      	ldr	r2, [pc, #400]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004ffe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005002:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800500a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800500e:	d10d      	bne.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	3304      	adds	r3, #4
 8005014:	2101      	movs	r1, #1
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f85e 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 800501c:	4603      	mov	r3, r0
 800501e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8005020:	7ffb      	ldrb	r3, [r7, #31]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d019      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8005026:	7ffb      	ldrb	r3, [r7, #31]
 8005028:	77bb      	strb	r3, [r7, #30]
 800502a:	e016      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005030:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005034:	d106      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005036:	4b56      	ldr	r3, [pc, #344]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005038:	68db      	ldr	r3, [r3, #12]
 800503a:	4a55      	ldr	r2, [pc, #340]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800503c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005040:	60d3      	str	r3, [r2, #12]
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800504c:	d105      	bne.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800504e:	4b50      	ldr	r3, [pc, #320]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	4a4f      	ldr	r2, [pc, #316]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005058:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d028      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005066:	4b4a      	ldr	r3, [pc, #296]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005074:	4946      	ldr	r1, [pc, #280]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005084:	d106      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005086:	4b42      	ldr	r3, [pc, #264]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	4a41      	ldr	r2, [pc, #260]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800508c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005090:	60d3      	str	r3, [r2, #12]
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005098:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3304      	adds	r3, #4
 80050a2:	2101      	movs	r1, #1
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 f817 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80050ae:	7ffb      	ldrb	r3, [r7, #31]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80050b4:	7ffb      	ldrb	r3, [r7, #31]
 80050b6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d01e      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050c4:	4b32      	ldr	r3, [pc, #200]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d4:	492e      	ldr	r1, [pc, #184]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050e6:	d10c      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	3304      	adds	r3, #4
 80050ec:	2102      	movs	r1, #2
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fff2 	bl	80060d8 <RCCEx_PLLSAI1_Config>
 80050f4:	4603      	mov	r3, r0
 80050f6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80050f8:	7ffb      	ldrb	r3, [r7, #31]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80050fe:	7ffb      	ldrb	r3, [r7, #31]
 8005100:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800510e:	4b20      	ldr	r3, [pc, #128]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005110:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005114:	f023 0204 	bic.w	r2, r3, #4
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800511e:	491c      	ldr	r1, [pc, #112]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00b      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005132:	4b17      	ldr	r3, [pc, #92]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005134:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005138:	f023 0218 	bic.w	r2, r3, #24
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005142:	4913      	ldr	r1, [pc, #76]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005144:	4313      	orrs	r3, r2
 8005146:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d017      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005156:	4b0e      	ldr	r3, [pc, #56]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800515c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005166:	490a      	ldr	r1, [pc, #40]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005174:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005178:	d105      	bne.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800517a:	4b05      	ldr	r3, [pc, #20]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	4a04      	ldr	r2, [pc, #16]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8005180:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005184:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8005186:	7fbb      	ldrb	r3, [r7, #30]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3720      	adds	r7, #32
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	40021000 	.word	0x40021000

08005194 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b088      	sub	sp, #32
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 800519c:	2300      	movs	r3, #0
 800519e:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80051a6:	d13e      	bne.n	8005226 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80051a8:	4b45      	ldr	r3, [pc, #276]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80051aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b2:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051ba:	d028      	beq.n	800520e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051c2:	f200 8773 	bhi.w	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051cc:	d005      	beq.n	80051da <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051d4:	d00e      	beq.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80051d6:	f000 bf69 	b.w	80060ac <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80051da:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	f040 8763 	bne.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 80051ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051ee:	61fb      	str	r3, [r7, #28]
        break;
 80051f0:	f000 bf5e 	b.w	80060b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80051f4:	4b32      	ldr	r3, [pc, #200]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80051f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b02      	cmp	r3, #2
 8005200:	f040 8758 	bne.w	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 8005204:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005208:	61fb      	str	r3, [r7, #28]
        break;
 800520a:	f000 bf53 	b.w	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800520e:	4b2c      	ldr	r3, [pc, #176]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005216:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800521a:	f040 874d 	bne.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 800521e:	4b29      	ldr	r3, [pc, #164]	; (80052c4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8005220:	61fb      	str	r3, [r7, #28]
        break;
 8005222:	f000 bf49 	b.w	80060b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005226:	4b26      	ldr	r3, [pc, #152]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	f003 0303 	and.w	r3, r3, #3
 800522e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2b03      	cmp	r3, #3
 8005234:	d036      	beq.n	80052a4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	2b03      	cmp	r3, #3
 800523a:	d84b      	bhi.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b01      	cmp	r3, #1
 8005240:	d003      	beq.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	2b02      	cmp	r3, #2
 8005246:	d020      	beq.n	800528a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8005248:	e044      	b.n	80052d4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800524a:	4b1d      	ldr	r3, [pc, #116]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b02      	cmp	r3, #2
 8005254:	d116      	bne.n	8005284 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8005262:	4b17      	ldr	r3, [pc, #92]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	091b      	lsrs	r3, r3, #4
 8005268:	f003 030f 	and.w	r3, r3, #15
 800526c:	e005      	b.n	800527a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800526e:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8005270:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005274:	0a1b      	lsrs	r3, r3, #8
 8005276:	f003 030f 	and.w	r3, r3, #15
 800527a:	4a13      	ldr	r2, [pc, #76]	; (80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8005282:	e02a      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	61bb      	str	r3, [r7, #24]
        break;
 8005288:	e027      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005296:	d102      	bne.n	800529e <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 800529a:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800529c:	e01d      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800529e:	2300      	movs	r3, #0
 80052a0:	61bb      	str	r3, [r7, #24]
        break;
 80052a2:	e01a      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052b0:	d102      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80052b4:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80052b6:	e010      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80052b8:	2300      	movs	r3, #0
 80052ba:	61bb      	str	r3, [r7, #24]
        break;
 80052bc:	e00d      	b.n	80052da <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80052be:	bf00      	nop
 80052c0:	40021000 	.word	0x40021000
 80052c4:	0004c4b4 	.word	0x0004c4b4
 80052c8:	0800f79c 	.word	0x0800f79c
 80052cc:	00f42400 	.word	0x00f42400
 80052d0:	00989680 	.word	0x00989680
      default:
        /* No source */
        pllvco = 0U;
 80052d4:	2300      	movs	r3, #0
 80052d6:	61bb      	str	r3, [r7, #24]
        break;
 80052d8:	bf00      	nop
    }

    switch (PeriphClk)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052e0:	f000 8659 	beq.w	8005f96 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80052ea:	f200 86e7 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f4:	f000 8605 	beq.w	8005f02 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052fe:	f200 86dd 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005308:	f000 8468 	beq.w	8005bdc <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005312:	f200 86d3 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800531c:	f000 8530 	beq.w	8005d80 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005326:	f200 86c9 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005330:	f000 8180 	beq.w	8005634 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800533a:	f200 86bf 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005344:	f000 80c2 	beq.w	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800534e:	f200 86b5 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005358:	f000 842f 	beq.w	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005362:	f200 86ab 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800536c:	f000 83e7 	beq.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005376:	f200 86a1 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	f000 80a4 	beq.w	80054cc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800538a:	f200 8697 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005394:	f000 8092 	beq.w	80054bc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539e:	f200 868d 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053a8:	f000 8080 	beq.w	80054ac <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053b2:	f200 8683 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053bc:	f000 8553 	beq.w	8005e66 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053c6:	f200 8679 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053d0:	f000 84ff 	beq.w	8005dd2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053da:	f200 866f 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053e4:	f000 84a0 	beq.w	8005d28 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053ee:	f200 8665 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2b80      	cmp	r3, #128	; 0x80
 80053f6:	f000 846b 	beq.w	8005cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2b80      	cmp	r3, #128	; 0x80
 80053fe:	f200 865d 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2b20      	cmp	r3, #32
 8005406:	d84b      	bhi.n	80054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 8656 	beq.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	3b01      	subs	r3, #1
 8005414:	2b1f      	cmp	r3, #31
 8005416:	f200 8651 	bhi.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800541a:	a201      	add	r2, pc, #4	; (adr r2, 8005420 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800541c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005420:	08005839 	.word	0x08005839
 8005424:	080058ad 	.word	0x080058ad
 8005428:	080060bd 	.word	0x080060bd
 800542c:	0800593f 	.word	0x0800593f
 8005430:	080060bd 	.word	0x080060bd
 8005434:	080060bd 	.word	0x080060bd
 8005438:	080060bd 	.word	0x080060bd
 800543c:	080059b7 	.word	0x080059b7
 8005440:	080060bd 	.word	0x080060bd
 8005444:	080060bd 	.word	0x080060bd
 8005448:	080060bd 	.word	0x080060bd
 800544c:	080060bd 	.word	0x080060bd
 8005450:	080060bd 	.word	0x080060bd
 8005454:	080060bd 	.word	0x080060bd
 8005458:	080060bd 	.word	0x080060bd
 800545c:	08005a3b 	.word	0x08005a3b
 8005460:	080060bd 	.word	0x080060bd
 8005464:	080060bd 	.word	0x080060bd
 8005468:	080060bd 	.word	0x080060bd
 800546c:	080060bd 	.word	0x080060bd
 8005470:	080060bd 	.word	0x080060bd
 8005474:	080060bd 	.word	0x080060bd
 8005478:	080060bd 	.word	0x080060bd
 800547c:	080060bd 	.word	0x080060bd
 8005480:	080060bd 	.word	0x080060bd
 8005484:	080060bd 	.word	0x080060bd
 8005488:	080060bd 	.word	0x080060bd
 800548c:	080060bd 	.word	0x080060bd
 8005490:	080060bd 	.word	0x080060bd
 8005494:	080060bd 	.word	0x080060bd
 8005498:	080060bd 	.word	0x080060bd
 800549c:	08005abd 	.word	0x08005abd
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	f000 83e8 	beq.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80054a8:	f000 be08 	b.w	80060bc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80054b2:	f001 f857 	bl	8006564 <RCCEx_GetSAIxPeriphCLKFreq>
 80054b6:	61f8      	str	r0, [r7, #28]
        break;
 80054b8:	f000 be03 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80054bc:	69b9      	ldr	r1, [r7, #24]
 80054be:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80054c2:	f001 f84f 	bl	8006564 <RCCEx_GetSAIxPeriphCLKFreq>
 80054c6:	61f8      	str	r0, [r7, #28]
        break;
 80054c8:	f000 bdfb 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80054cc:	4b9c      	ldr	r3, [pc, #624]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80054ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054de:	d015      	beq.n	800550c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80054e6:	f200 8096 	bhi.w	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f0:	d02a      	beq.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054f8:	f200 808d 	bhi.w	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d07f      	beq.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005508:	d04b      	beq.n	80055a2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800550a:	e084      	b.n	8005616 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800550c:	4b8c      	ldr	r3, [pc, #560]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	2b02      	cmp	r3, #2
 8005516:	f040 8081 	bne.w	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800551a:	4b89      	ldr	r3, [pc, #548]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8005526:	4b86      	ldr	r3, [pc, #536]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	091b      	lsrs	r3, r3, #4
 800552c:	f003 030f 	and.w	r3, r3, #15
 8005530:	e005      	b.n	800553e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8005532:	4b83      	ldr	r3, [pc, #524]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005538:	0a1b      	lsrs	r3, r3, #8
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	4a81      	ldr	r2, [pc, #516]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005544:	61fb      	str	r3, [r7, #28]
            break;
 8005546:	e069      	b.n	800561c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005548:	4b7d      	ldr	r3, [pc, #500]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005550:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005554:	d165      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005556:	4b7a      	ldr	r3, [pc, #488]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800555e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005562:	d15e      	bne.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005564:	4b76      	ldr	r3, [pc, #472]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	091b      	lsrs	r3, r3, #4
 800556a:	f003 030f 	and.w	r3, r3, #15
 800556e:	3301      	adds	r3, #1
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005578:	4b71      	ldr	r3, [pc, #452]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800557a:	68db      	ldr	r3, [r3, #12]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005582:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	68ba      	ldr	r2, [r7, #8]
 8005588:	fb03 f202 	mul.w	r2, r3, r2
 800558c:	4b6c      	ldr	r3, [pc, #432]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	0d5b      	lsrs	r3, r3, #21
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	3301      	adds	r3, #1
 8005598:	005b      	lsls	r3, r3, #1
 800559a:	fbb2 f3f3 	udiv	r3, r2, r3
 800559e:	61fb      	str	r3, [r7, #28]
            break;
 80055a0:	e03f      	b.n	8005622 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80055a2:	4b67      	ldr	r3, [pc, #412]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ae:	d13b      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80055b0:	4b63      	ldr	r3, [pc, #396]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055bc:	d134      	bne.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80055be:	f000 ff1d 	bl	80063fc <RCCEx_PLLSAI1_GetVCOFreq>
 80055c2:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80055c4:	4b5e      	ldr	r3, [pc, #376]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	091b      	lsrs	r3, r3, #4
 80055ca:	f003 030f 	and.w	r3, r3, #15
 80055ce:	3301      	adds	r3, #1
 80055d0:	69ba      	ldr	r2, [r7, #24]
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80055d8:	4b59      	ldr	r3, [pc, #356]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80055da:	691b      	ldr	r3, [r3, #16]
 80055dc:	0a1b      	lsrs	r3, r3, #8
 80055de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055e2:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80055e4:	69bb      	ldr	r3, [r7, #24]
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	fb03 f202 	mul.w	r2, r3, r2
 80055ec:	4b54      	ldr	r3, [pc, #336]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80055ee:	691b      	ldr	r3, [r3, #16]
 80055f0:	0d5b      	lsrs	r3, r3, #21
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	3301      	adds	r3, #1
 80055f8:	005b      	lsls	r3, r3, #1
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	61fb      	str	r3, [r7, #28]
            break;
 8005600:	e012      	b.n	8005628 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005602:	4b4f      	ldr	r3, [pc, #316]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005604:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d10e      	bne.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8005610:	4b4d      	ldr	r3, [pc, #308]	; (8005748 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8005612:	61fb      	str	r3, [r7, #28]
            break;
 8005614:	e00b      	b.n	800562e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 8005616:	bf00      	nop
 8005618:	f000 bd53 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800561c:	bf00      	nop
 800561e:	f000 bd50 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005622:	bf00      	nop
 8005624:	f000 bd4d 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005628:	bf00      	nop
 800562a:	f000 bd4a 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800562e:	bf00      	nop
        break;
 8005630:	f000 bd47 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8005634:	4b42      	ldr	r3, [pc, #264]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005636:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800563a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800563e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005642:	d13d      	bne.n	80056c0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005644:	4b3e      	ldr	r3, [pc, #248]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005650:	f040 8536 	bne.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8005654:	4b3a      	ldr	r3, [pc, #232]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800565c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005660:	f040 852e 	bne.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005664:	4b36      	ldr	r3, [pc, #216]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	091b      	lsrs	r3, r3, #4
 800566a:	f003 030f 	and.w	r3, r3, #15
 800566e:	3301      	adds	r3, #1
 8005670:	69ba      	ldr	r2, [r7, #24]
 8005672:	fbb2 f3f3 	udiv	r3, r2, r3
 8005676:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8005678:	4b31      	ldr	r3, [pc, #196]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	0a1b      	lsrs	r3, r3, #8
 800567e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005682:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8005684:	4b2e      	ldr	r3, [pc, #184]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	0edb      	lsrs	r3, r3, #27
 800568a:	f003 031f 	and.w	r3, r3, #31
 800568e:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10a      	bne.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8005696:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d002      	beq.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 80056a2:	2311      	movs	r3, #17
 80056a4:	617b      	str	r3, [r7, #20]
 80056a6:	e001      	b.n	80056ac <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 80056a8:	2307      	movs	r3, #7
 80056aa:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	fb03 f202 	mul.w	r2, r3, r2
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	61fb      	str	r3, [r7, #28]
        break;
 80056bc:	f000 bd00 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80056c0:	4b1f      	ldr	r3, [pc, #124]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80056c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056c6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056d2:	d016      	beq.n	8005702 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80056da:	f200 809e 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056e4:	d032      	beq.n	800574c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056ec:	f200 8095 	bhi.w	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 8087 	beq.w	8005806 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056fe:	d052      	beq.n	80057a6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8005700:	e08b      	b.n	800581a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005702:	4b0f      	ldr	r3, [pc, #60]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	2b02      	cmp	r3, #2
 800570c:	f040 8088 	bne.w	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005710:	4b0b      	ldr	r3, [pc, #44]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0308 	and.w	r3, r3, #8
 8005718:	2b00      	cmp	r3, #0
 800571a:	d005      	beq.n	8005728 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 800571c:	4b08      	ldr	r3, [pc, #32]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	091b      	lsrs	r3, r3, #4
 8005722:	f003 030f 	and.w	r3, r3, #15
 8005726:	e005      	b.n	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800572a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572e:	0a1b      	lsrs	r3, r3, #8
 8005730:	f003 030f 	and.w	r3, r3, #15
 8005734:	4a03      	ldr	r2, [pc, #12]	; (8005744 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8005736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800573a:	61fb      	str	r3, [r7, #28]
              break;
 800573c:	e070      	b.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 800573e:	bf00      	nop
 8005740:	40021000 	.word	0x40021000
 8005744:	0800f79c 	.word	0x0800f79c
 8005748:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800574c:	4baa      	ldr	r3, [pc, #680]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005758:	d165      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 800575a:	4ba7      	ldr	r3, [pc, #668]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800575c:	68db      	ldr	r3, [r3, #12]
 800575e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005762:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005766:	d15e      	bne.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005768:	4ba3      	ldr	r3, [pc, #652]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 030f 	and.w	r3, r3, #15
 8005772:	3301      	adds	r3, #1
 8005774:	69ba      	ldr	r2, [r7, #24]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800577c:	4b9e      	ldr	r3, [pc, #632]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	0a1b      	lsrs	r3, r3, #8
 8005782:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005786:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	68ba      	ldr	r2, [r7, #8]
 800578c:	fb03 f202 	mul.w	r2, r3, r2
 8005790:	4b99      	ldr	r3, [pc, #612]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	0d5b      	lsrs	r3, r3, #21
 8005796:	f003 0303 	and.w	r3, r3, #3
 800579a:	3301      	adds	r3, #1
 800579c:	005b      	lsls	r3, r3, #1
 800579e:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a2:	61fb      	str	r3, [r7, #28]
              break;
 80057a4:	e03f      	b.n	8005826 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80057a6:	4b94      	ldr	r3, [pc, #592]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b2:	d13b      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80057b4:	4b90      	ldr	r3, [pc, #576]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057b6:	691b      	ldr	r3, [r3, #16]
 80057b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c0:	d134      	bne.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80057c2:	f000 fe1b 	bl	80063fc <RCCEx_PLLSAI1_GetVCOFreq>
 80057c6:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80057c8:	4b8b      	ldr	r3, [pc, #556]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	091b      	lsrs	r3, r3, #4
 80057ce:	f003 030f 	and.w	r3, r3, #15
 80057d2:	3301      	adds	r3, #1
 80057d4:	69ba      	ldr	r2, [r7, #24]
 80057d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057da:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80057dc:	4b86      	ldr	r3, [pc, #536]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057de:	691b      	ldr	r3, [r3, #16]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e6:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80057e8:	69bb      	ldr	r3, [r7, #24]
 80057ea:	68ba      	ldr	r2, [r7, #8]
 80057ec:	fb03 f202 	mul.w	r2, r3, r2
 80057f0:	4b81      	ldr	r3, [pc, #516]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	0d5b      	lsrs	r3, r3, #21
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	3301      	adds	r3, #1
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	61fb      	str	r3, [r7, #28]
              break;
 8005804:	e012      	b.n	800582c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8005806:	4b7c      	ldr	r3, [pc, #496]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005808:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800580c:	f003 0302 	and.w	r3, r3, #2
 8005810:	2b02      	cmp	r3, #2
 8005812:	d10e      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8005814:	4b79      	ldr	r3, [pc, #484]	; (80059fc <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8005816:	61fb      	str	r3, [r7, #28]
              break;
 8005818:	e00b      	b.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 800581a:	bf00      	nop
 800581c:	f000 bc50 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005820:	bf00      	nop
 8005822:	f000 bc4d 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005826:	bf00      	nop
 8005828:	f000 bc4a 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 800582c:	bf00      	nop
 800582e:	f000 bc47 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8005832:	bf00      	nop
        break;
 8005834:	f000 bc44 	b.w	80060c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8005838:	4b6f      	ldr	r3, [pc, #444]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800583a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800583e:	f003 0303 	and.w	r3, r3, #3
 8005842:	60fb      	str	r3, [r7, #12]
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b03      	cmp	r3, #3
 8005848:	d827      	bhi.n	800589a <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 800584a:	a201      	add	r2, pc, #4	; (adr r2, 8005850 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005861 	.word	0x08005861
 8005854:	08005869 	.word	0x08005869
 8005858:	08005871 	.word	0x08005871
 800585c:	08005885 	.word	0x08005885
            frequency = HAL_RCC_GetPCLK2Freq();
 8005860:	f7ff f82e 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005864:	61f8      	str	r0, [r7, #28]
            break;
 8005866:	e01f      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8005868:	f7fe ff64 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 800586c:	61f8      	str	r0, [r7, #28]
            break;
 800586e:	e01b      	b.n	80058a8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005870:	4b61      	ldr	r3, [pc, #388]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	d110      	bne.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 800587e:	4b60      	ldr	r3, [pc, #384]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005880:	61fb      	str	r3, [r7, #28]
            break;
 8005882:	e00d      	b.n	80058a0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005884:	4b5c      	ldr	r3, [pc, #368]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f003 0302 	and.w	r3, r3, #2
 800588e:	2b02      	cmp	r3, #2
 8005890:	d109      	bne.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8005892:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005896:	61fb      	str	r3, [r7, #28]
            break;
 8005898:	e005      	b.n	80058a6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 800589a:	bf00      	nop
 800589c:	f000 bc11 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058a0:	bf00      	nop
 80058a2:	f000 bc0e 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80058a6:	bf00      	nop
        break;
 80058a8:	f000 bc0b 	b.w	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80058ac:	4b52      	ldr	r3, [pc, #328]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80058ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058b2:	f003 030c 	and.w	r3, r3, #12
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2b0c      	cmp	r3, #12
 80058bc:	d839      	bhi.n	8005932 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 80058be:	a201      	add	r2, pc, #4	; (adr r2, 80058c4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 80058c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058c4:	080058f9 	.word	0x080058f9
 80058c8:	08005933 	.word	0x08005933
 80058cc:	08005933 	.word	0x08005933
 80058d0:	08005933 	.word	0x08005933
 80058d4:	08005901 	.word	0x08005901
 80058d8:	08005933 	.word	0x08005933
 80058dc:	08005933 	.word	0x08005933
 80058e0:	08005933 	.word	0x08005933
 80058e4:	08005909 	.word	0x08005909
 80058e8:	08005933 	.word	0x08005933
 80058ec:	08005933 	.word	0x08005933
 80058f0:	08005933 	.word	0x08005933
 80058f4:	0800591d 	.word	0x0800591d
            frequency = HAL_RCC_GetPCLK1Freq();
 80058f8:	f7fe ffce 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80058fc:	61f8      	str	r0, [r7, #28]
            break;
 80058fe:	e01d      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005900:	f7fe ff18 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005904:	61f8      	str	r0, [r7, #28]
            break;
 8005906:	e019      	b.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005908:	4b3b      	ldr	r3, [pc, #236]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005910:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005914:	d10f      	bne.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8005916:	4b3a      	ldr	r3, [pc, #232]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005918:	61fb      	str	r3, [r7, #28]
            break;
 800591a:	e00c      	b.n	8005936 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800591c:	4b36      	ldr	r3, [pc, #216]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 800591e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005922:	f003 0302 	and.w	r3, r3, #2
 8005926:	2b02      	cmp	r3, #2
 8005928:	d107      	bne.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 800592a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800592e:	61fb      	str	r3, [r7, #28]
            break;
 8005930:	e003      	b.n	800593a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8005932:	bf00      	nop
 8005934:	e3c5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005936:	bf00      	nop
 8005938:	e3c3      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800593a:	bf00      	nop
        break;
 800593c:	e3c1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800593e:	4b2e      	ldr	r3, [pc, #184]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005944:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2b30      	cmp	r3, #48	; 0x30
 800594e:	d021      	beq.n	8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2b30      	cmp	r3, #48	; 0x30
 8005954:	d829      	bhi.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2b20      	cmp	r3, #32
 800595a:	d011      	beq.n	8005980 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	2b20      	cmp	r3, #32
 8005960:	d823      	bhi.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d003      	beq.n	8005970 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2b10      	cmp	r3, #16
 800596c:	d004      	beq.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 800596e:	e01c      	b.n	80059aa <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe ff92 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005974:	61f8      	str	r0, [r7, #28]
            break;
 8005976:	e01d      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8005978:	f7fe fedc 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 800597c:	61f8      	str	r0, [r7, #28]
            break;
 800597e:	e019      	b.n	80059b4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005980:	4b1d      	ldr	r3, [pc, #116]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005988:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800598c:	d10f      	bne.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 800598e:	4b1c      	ldr	r3, [pc, #112]	; (8005a00 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8005990:	61fb      	str	r3, [r7, #28]
            break;
 8005992:	e00c      	b.n	80059ae <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005994:	4b18      	ldr	r3, [pc, #96]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8005996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d107      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 80059a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059a6:	61fb      	str	r3, [r7, #28]
            break;
 80059a8:	e003      	b.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 80059aa:	bf00      	nop
 80059ac:	e389      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059ae:	bf00      	nop
 80059b0:	e387      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80059b2:	bf00      	nop
        break;
 80059b4:	e385      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80059b6:	4b10      	ldr	r3, [pc, #64]	; (80059f8 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80059b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80059c0:	60fb      	str	r3, [r7, #12]
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2bc0      	cmp	r3, #192	; 0xc0
 80059c6:	d027      	beq.n	8005a18 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2bc0      	cmp	r3, #192	; 0xc0
 80059cc:	d82f      	bhi.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d017      	beq.n	8005a04 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2b80      	cmp	r3, #128	; 0x80
 80059d8:	d829      	bhi.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d003      	beq.n	80059e8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	d004      	beq.n	80059f0 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 80059e6:	e022      	b.n	8005a2e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80059e8:	f7fe ff56 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80059ec:	61f8      	str	r0, [r7, #28]
            break;
 80059ee:	e023      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 80059f0:	f7fe fea0 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80059f4:	61f8      	str	r0, [r7, #28]
            break;
 80059f6:	e01f      	b.n	8005a38 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 80059f8:	40021000 	.word	0x40021000
 80059fc:	02dc6c00 	.word	0x02dc6c00
 8005a00:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a04:	4b99      	ldr	r3, [pc, #612]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a10:	d10f      	bne.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8005a12:	4b97      	ldr	r3, [pc, #604]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a14:	61fb      	str	r3, [r7, #28]
            break;
 8005a16:	e00c      	b.n	8005a32 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a18:	4b94      	ldr	r3, [pc, #592]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d107      	bne.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8005a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2a:	61fb      	str	r3, [r7, #28]
            break;
 8005a2c:	e003      	b.n	8005a36 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8005a2e:	bf00      	nop
 8005a30:	e347      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005a32:	bf00      	nop
 8005a34:	e345      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005a36:	bf00      	nop
        break;
 8005a38:	e343      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8005a3a:	4b8c      	ldr	r3, [pc, #560]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a44:	60fb      	str	r3, [r7, #12]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a4c:	d025      	beq.n	8005a9a <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005a54:	d82c      	bhi.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a5c:	d013      	beq.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a64:	d824      	bhi.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d004      	beq.n	8005a76 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a72:	d004      	beq.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8005a74:	e01c      	b.n	8005ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005a76:	f7fe ff0f 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005a7a:	61f8      	str	r0, [r7, #28]
            break;
 8005a7c:	e01d      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8005a7e:	f7fe fe59 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005a82:	61f8      	str	r0, [r7, #28]
            break;
 8005a84:	e019      	b.n	8005aba <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005a86:	4b79      	ldr	r3, [pc, #484]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a92:	d10f      	bne.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8005a94:	4b76      	ldr	r3, [pc, #472]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005a96:	61fb      	str	r3, [r7, #28]
            break;
 8005a98:	e00c      	b.n	8005ab4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005a9a:	4b74      	ldr	r3, [pc, #464]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b02      	cmp	r3, #2
 8005aa6:	d107      	bne.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8005aa8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005aac:	61fb      	str	r3, [r7, #28]
            break;
 8005aae:	e003      	b.n	8005ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8005ab0:	bf00      	nop
 8005ab2:	e306      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005ab4:	bf00      	nop
 8005ab6:	e304      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005ab8:	bf00      	nop
        break;
 8005aba:	e302      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005abc:	4b6b      	ldr	r3, [pc, #428]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ace:	d025      	beq.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ad6:	d82c      	bhi.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ade:	d013      	beq.n	8005b08 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ae6:	d824      	bhi.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005af4:	d004      	beq.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8005af6:	e01c      	b.n	8005b32 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005af8:	f7fe fece 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005afc:	61f8      	str	r0, [r7, #28]
            break;
 8005afe:	e01d      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8005b00:	f7fe fe18 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005b04:	61f8      	str	r0, [r7, #28]
            break;
 8005b06:	e019      	b.n	8005b3c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005b08:	4b58      	ldr	r3, [pc, #352]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b14:	d10f      	bne.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8005b16:	4b56      	ldr	r3, [pc, #344]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005b18:	61fb      	str	r3, [r7, #28]
            break;
 8005b1a:	e00c      	b.n	8005b36 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005b1c:	4b53      	ldr	r3, [pc, #332]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d107      	bne.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8005b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b2e:	61fb      	str	r3, [r7, #28]
            break;
 8005b30:	e003      	b.n	8005b3a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8005b32:	bf00      	nop
 8005b34:	e2c5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005b36:	bf00      	nop
 8005b38:	e2c3      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005b3a:	bf00      	nop
        break;
 8005b3c:	e2c1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005b3e:	4b4b      	ldr	r3, [pc, #300]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b50:	d007      	beq.n	8005b62 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b58:	d12b      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8005b5a:	f7fe fdeb 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005b5e:	61f8      	str	r0, [r7, #28]
            break;
 8005b60:	e02a      	b.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8005b62:	4b42      	ldr	r3, [pc, #264]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d023      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8005b6e:	f000 fc45 	bl	80063fc <RCCEx_PLLSAI1_GetVCOFreq>
 8005b72:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8005b74:	4b3d      	ldr	r3, [pc, #244]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b76:	691b      	ldr	r3, [r3, #16]
 8005b78:	091b      	lsrs	r3, r3, #4
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	3301      	adds	r3, #1
 8005b80:	69ba      	ldr	r2, [r7, #24]
 8005b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b86:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8005b88:	4b38      	ldr	r3, [pc, #224]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b8a:	691b      	ldr	r3, [r3, #16]
 8005b8c:	0a1b      	lsrs	r3, r3, #8
 8005b8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005b92:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8005b94:	69bb      	ldr	r3, [r7, #24]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	fb03 f202 	mul.w	r2, r3, r2
 8005b9c:	4b33      	ldr	r3, [pc, #204]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005b9e:	691b      	ldr	r3, [r3, #16]
 8005ba0:	0e5b      	lsrs	r3, r3, #25
 8005ba2:	f003 0303 	and.w	r3, r3, #3
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	005b      	lsls	r3, r3, #1
 8005baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bae:	61fb      	str	r3, [r7, #28]
            break;
 8005bb0:	e001      	b.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8005bb2:	bf00      	nop
 8005bb4:	e285      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005bb6:	bf00      	nop
        break;
 8005bb8:	e283      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005bba:	4b2c      	ldr	r3, [pc, #176]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc0:	f003 0304 	and.w	r3, r3, #4
 8005bc4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d103      	bne.n	8005bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8005bcc:	f7fe fe78 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8005bd0:	61f8      	str	r0, [r7, #28]
        break;
 8005bd2:	e276      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8005bd4:	f7fe fdae 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005bd8:	61f8      	str	r0, [r7, #28]
        break;
 8005bda:	e272      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8005bdc:	4b23      	ldr	r3, [pc, #140]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005bde:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005be2:	f003 0318 	and.w	r3, r3, #24
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2b10      	cmp	r3, #16
 8005bec:	d010      	beq.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2b10      	cmp	r3, #16
 8005bf2:	d834      	bhi.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d003      	beq.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2b08      	cmp	r3, #8
 8005bfe:	d024      	beq.n	8005c4a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8005c00:	e02d      	b.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8005c02:	69b9      	ldr	r1, [r7, #24]
 8005c04:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005c08:	f000 fcac 	bl	8006564 <RCCEx_GetSAIxPeriphCLKFreq>
 8005c0c:	61f8      	str	r0, [r7, #28]
            break;
 8005c0e:	e02b      	b.n	8005c68 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8005c10:	4b16      	ldr	r3, [pc, #88]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0302 	and.w	r3, r3, #2
 8005c18:	2b02      	cmp	r3, #2
 8005c1a:	d122      	bne.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8005c1c:	4b13      	ldr	r3, [pc, #76]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f003 0308 	and.w	r3, r3, #8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8005c28:	4b10      	ldr	r3, [pc, #64]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	091b      	lsrs	r3, r3, #4
 8005c2e:	f003 030f 	and.w	r3, r3, #15
 8005c32:	e005      	b.n	8005c40 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8005c34:	4b0d      	ldr	r3, [pc, #52]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005c3a:	0a1b      	lsrs	r3, r3, #8
 8005c3c:	f003 030f 	and.w	r3, r3, #15
 8005c40:	4a0c      	ldr	r2, [pc, #48]	; (8005c74 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8005c42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c46:	61fb      	str	r3, [r7, #28]
            break;
 8005c48:	e00b      	b.n	8005c62 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005c4a:	4b08      	ldr	r3, [pc, #32]	; (8005c6c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c56:	d106      	bne.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8005c58:	4b05      	ldr	r3, [pc, #20]	; (8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8005c5a:	61fb      	str	r3, [r7, #28]
            break;
 8005c5c:	e003      	b.n	8005c66 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8005c5e:	bf00      	nop
 8005c60:	e22f      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c62:	bf00      	nop
 8005c64:	e22d      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005c66:	bf00      	nop
        break;
 8005c68:	e22b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8005c6a:	bf00      	nop
 8005c6c:	40021000 	.word	0x40021000
 8005c70:	00f42400 	.word	0x00f42400
 8005c74:	0800f79c 	.word	0x0800f79c
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8005c78:	4b96      	ldr	r3, [pc, #600]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c82:	60fb      	str	r3, [r7, #12]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c8a:	d013      	beq.n	8005cb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c92:	d819      	bhi.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d004      	beq.n	8005ca4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ca0:	d004      	beq.n	8005cac <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005ca4:	f7fe fdf8 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005ca8:	61f8      	str	r0, [r7, #28]
            break;
 8005caa:	e010      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8005cac:	f7fe fd42 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005cb0:	61f8      	str	r0, [r7, #28]
            break;
 8005cb2:	e00c      	b.n	8005cce <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005cb4:	4b87      	ldr	r3, [pc, #540]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cc0:	d104      	bne.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 8005cc2:	4b85      	ldr	r3, [pc, #532]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005cc4:	61fb      	str	r3, [r7, #28]
            break;
 8005cc6:	e001      	b.n	8005ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8005cc8:	bf00      	nop
 8005cca:	e1fa      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005ccc:	bf00      	nop
        break;
 8005cce:	e1f8      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8005cd0:	4b80      	ldr	r3, [pc, #512]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cda:	60fb      	str	r3, [r7, #12]
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ce2:	d013      	beq.n	8005d0c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cea:	d819      	bhi.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d004      	beq.n	8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cf8:	d004      	beq.n	8005d04 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8005cfa:	e011      	b.n	8005d20 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005cfc:	f7fe fdcc 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005d00:	61f8      	str	r0, [r7, #28]
            break;
 8005d02:	e010      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d04:	f7fe fd16 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005d08:	61f8      	str	r0, [r7, #28]
            break;
 8005d0a:	e00c      	b.n	8005d26 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d0c:	4b71      	ldr	r3, [pc, #452]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d18:	d104      	bne.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8005d1a:	4b6f      	ldr	r3, [pc, #444]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005d1c:	61fb      	str	r3, [r7, #28]
            break;
 8005d1e:	e001      	b.n	8005d24 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8005d20:	bf00      	nop
 8005d22:	e1ce      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d24:	bf00      	nop
        break;
 8005d26:	e1cc      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005d28:	4b6a      	ldr	r3, [pc, #424]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d32:	60fb      	str	r3, [r7, #12]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d3a:	d013      	beq.n	8005d64 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d42:	d819      	bhi.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d004      	beq.n	8005d54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d50:	d004      	beq.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8005d52:	e011      	b.n	8005d78 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005d54:	f7fe fda0 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005d58:	61f8      	str	r0, [r7, #28]
            break;
 8005d5a:	e010      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8005d5c:	f7fe fcea 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005d60:	61f8      	str	r0, [r7, #28]
            break;
 8005d62:	e00c      	b.n	8005d7e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d64:	4b5b      	ldr	r3, [pc, #364]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d70:	d104      	bne.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8005d72:	4b59      	ldr	r3, [pc, #356]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005d74:	61fb      	str	r3, [r7, #28]
            break;
 8005d76:	e001      	b.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8005d78:	bf00      	nop
 8005d7a:	e1a2      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005d7c:	bf00      	nop
        break;
 8005d7e:	e1a0      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8005d80:	4b54      	ldr	r3, [pc, #336]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005d82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	60fb      	str	r3, [r7, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2b02      	cmp	r3, #2
 8005d90:	d011      	beq.n	8005db6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b02      	cmp	r3, #2
 8005d96:	d818      	bhi.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d003      	beq.n	8005da6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d004      	beq.n	8005dae <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8005da4:	e011      	b.n	8005dca <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005da6:	f7fe fd77 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005daa:	61f8      	str	r0, [r7, #28]
            break;
 8005dac:	e010      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8005dae:	f7fe fcc1 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8005db2:	61f8      	str	r0, [r7, #28]
            break;
 8005db4:	e00c      	b.n	8005dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005db6:	4b47      	ldr	r3, [pc, #284]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dc2:	d104      	bne.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8005dc4:	4b44      	ldr	r3, [pc, #272]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005dc6:	61fb      	str	r3, [r7, #28]
            break;
 8005dc8:	e001      	b.n	8005dce <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8005dca:	bf00      	nop
 8005dcc:	e179      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005dce:	bf00      	nop
        break;
 8005dd0:	e177      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8005dd2:	4b40      	ldr	r3, [pc, #256]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005de4:	d02c      	beq.n	8005e40 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005dec:	d833      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005df4:	d01a      	beq.n	8005e2c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005dfc:	d82b      	bhi.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d004      	beq.n	8005e0e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005e0a:	d004      	beq.n	8005e16 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 8005e0c:	e023      	b.n	8005e56 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005e0e:	f7fe fd43 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005e12:	61f8      	str	r0, [r7, #28]
            break;
 8005e14:	e026      	b.n	8005e64 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005e16:	4b2f      	ldr	r3, [pc, #188]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005e18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d11a      	bne.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8005e24:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005e28:	61fb      	str	r3, [r7, #28]
            break;
 8005e2a:	e016      	b.n	8005e5a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005e2c:	4b29      	ldr	r3, [pc, #164]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e38:	d111      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 8005e3a:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005e3c:	61fb      	str	r3, [r7, #28]
            break;
 8005e3e:	e00e      	b.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005e40:	4b24      	ldr	r3, [pc, #144]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d109      	bne.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 8005e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e52:	61fb      	str	r3, [r7, #28]
            break;
 8005e54:	e005      	b.n	8005e62 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 8005e56:	bf00      	nop
 8005e58:	e133      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e5a:	bf00      	nop
 8005e5c:	e131      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e5e:	bf00      	nop
 8005e60:	e12f      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005e62:	bf00      	nop
        break;
 8005e64:	e12d      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005e66:	4b1b      	ldr	r3, [pc, #108]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8005e70:	60fb      	str	r3, [r7, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e78:	d030      	beq.n	8005edc <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005e80:	d837      	bhi.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e88:	d01a      	beq.n	8005ec0 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005e90:	d82f      	bhi.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d004      	beq.n	8005ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e9e:	d004      	beq.n	8005eaa <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8005ea0:	e027      	b.n	8005ef2 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005ea2:	f7fe fcf9 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005ea6:	61f8      	str	r0, [r7, #28]
            break;
 8005ea8:	e02a      	b.n	8005f00 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005eaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d11e      	bne.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8005eb8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005ebc:	61fb      	str	r3, [r7, #28]
            break;
 8005ebe:	e01a      	b.n	8005ef6 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ecc:	d115      	bne.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8005ece:	4b02      	ldr	r3, [pc, #8]	; (8005ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8005ed0:	61fb      	str	r3, [r7, #28]
            break;
 8005ed2:	e012      	b.n	8005efa <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8005ed4:	40021000 	.word	0x40021000
 8005ed8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005edc:	4b7b      	ldr	r3, [pc, #492]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee2:	f003 0302 	and.w	r3, r3, #2
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d109      	bne.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 8005eea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eee:	61fb      	str	r3, [r7, #28]
            break;
 8005ef0:	e005      	b.n	8005efe <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8005ef2:	bf00      	nop
 8005ef4:	e0e5      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005ef6:	bf00      	nop
 8005ef8:	e0e3      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efa:	bf00      	nop
 8005efc:	e0e1      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005efe:	bf00      	nop
        break;
 8005f00:	e0df      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8005f02:	4b72      	ldr	r3, [pc, #456]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f08:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005f0c:	60fb      	str	r3, [r7, #12]
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f14:	d02c      	beq.n	8005f70 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005f1c:	d833      	bhi.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f24:	d01a      	beq.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f2c:	d82b      	bhi.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d004      	beq.n	8005f3e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f3a:	d004      	beq.n	8005f46 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 8005f3c:	e023      	b.n	8005f86 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 8005f3e:	f7fe fcab 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8005f42:	61f8      	str	r0, [r7, #28]
            break;
 8005f44:	e026      	b.n	8005f94 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005f46:	4b61      	ldr	r3, [pc, #388]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d11a      	bne.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 8005f54:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005f58:	61fb      	str	r3, [r7, #28]
            break;
 8005f5a:	e016      	b.n	8005f8a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005f5c:	4b5b      	ldr	r3, [pc, #364]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f68:	d111      	bne.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 8005f6a:	4b59      	ldr	r3, [pc, #356]	; (80060d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8005f6c:	61fb      	str	r3, [r7, #28]
            break;
 8005f6e:	e00e      	b.n	8005f8e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005f70:	4b56      	ldr	r3, [pc, #344]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f76:	f003 0302 	and.w	r3, r3, #2
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d109      	bne.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8005f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f82:	61fb      	str	r3, [r7, #28]
            break;
 8005f84:	e005      	b.n	8005f92 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 8005f86:	bf00      	nop
 8005f88:	e09b      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005f8a:	bf00      	nop
 8005f8c:	e099      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005f8e:	bf00      	nop
 8005f90:	e097      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8005f92:	bf00      	nop
        break;
 8005f94:	e095      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005f96:	4b4d      	ldr	r3, [pc, #308]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f9c:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fa8:	d042      	beq.n	8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fb0:	d874      	bhi.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fbe:	d00a      	beq.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8005fc0:	e06c      	b.n	800609c <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005fc2:	4b42      	ldr	r3, [pc, #264]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fce:	d167      	bne.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8005fd0:	4b40      	ldr	r3, [pc, #256]	; (80060d4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 8005fd2:	61fb      	str	r3, [r7, #28]
            break;
 8005fd4:	e064      	b.n	80060a0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8005fd6:	4b3d      	ldr	r3, [pc, #244]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005fe2:	d15f      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8005fe4:	4b39      	ldr	r3, [pc, #228]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005fec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ff0:	d158      	bne.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005ff2:	4b36      	ldr	r3, [pc, #216]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	091b      	lsrs	r3, r3, #4
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	69ba      	ldr	r2, [r7, #24]
 8006000:	fbb2 f3f3 	udiv	r3, r2, r3
 8006004:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006006:	4b31      	ldr	r3, [pc, #196]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	0a1b      	lsrs	r3, r3, #8
 800600c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006010:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	68ba      	ldr	r2, [r7, #8]
 8006016:	fb03 f202 	mul.w	r2, r3, r2
 800601a:	4b2c      	ldr	r3, [pc, #176]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	0d5b      	lsrs	r3, r3, #21
 8006020:	f003 0303 	and.w	r3, r3, #3
 8006024:	3301      	adds	r3, #1
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	fbb2 f3f3 	udiv	r3, r2, r3
 800602c:	61fb      	str	r3, [r7, #28]
            break;
 800602e:	e039      	b.n	80060a4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006030:	4b26      	ldr	r3, [pc, #152]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d035      	beq.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800603c:	f000 f9de 	bl	80063fc <RCCEx_PLLSAI1_GetVCOFreq>
 8006040:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006042:	4b22      	ldr	r3, [pc, #136]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	091b      	lsrs	r3, r3, #4
 8006048:	f003 030f 	and.w	r3, r3, #15
 800604c:	3301      	adds	r3, #1
 800604e:	69ba      	ldr	r2, [r7, #24]
 8006050:	fbb2 f3f3 	udiv	r3, r2, r3
 8006054:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006056:	4b1d      	ldr	r3, [pc, #116]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	0a1b      	lsrs	r3, r3, #8
 800605c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006060:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8006062:	4b1a      	ldr	r3, [pc, #104]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006064:	691b      	ldr	r3, [r3, #16]
 8006066:	0edb      	lsrs	r3, r3, #27
 8006068:	f003 031f 	and.w	r3, r3, #31
 800606c:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10a      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8006074:	4b15      	ldr	r3, [pc, #84]	; (80060cc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d002      	beq.n	8006086 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8006080:	2311      	movs	r3, #17
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	e001      	b.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 8006086:	2307      	movs	r3, #7
 8006088:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	68ba      	ldr	r2, [r7, #8]
 800608e:	fb03 f202 	mul.w	r2, r3, r2
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	fbb2 f3f3 	udiv	r3, r2, r3
 8006098:	61fb      	str	r3, [r7, #28]
            break;
 800609a:	e005      	b.n	80060a8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 800609c:	bf00      	nop
 800609e:	e010      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060a0:	bf00      	nop
 80060a2:	e00e      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060a4:	bf00      	nop
 80060a6:	e00c      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80060a8:	bf00      	nop
        break;
 80060aa:	e00a      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060ac:	bf00      	nop
 80060ae:	e008      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060b0:	bf00      	nop
 80060b2:	e006      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060b4:	bf00      	nop
 80060b6:	e004      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060b8:	bf00      	nop
 80060ba:	e002      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060bc:	bf00      	nop
 80060be:	e000      	b.n	80060c2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80060c0:	bf00      	nop
    }
  }

  return (frequency);
 80060c2:	69fb      	ldr	r3, [r7, #28]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3720      	adds	r7, #32
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40021000 	.word	0x40021000
 80060d0:	00f42400 	.word	0x00f42400
 80060d4:	00989680 	.word	0x00989680

080060d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2b03      	cmp	r3, #3
 80060ec:	d018      	beq.n	8006120 <RCCEx_PLLSAI1_Config+0x48>
 80060ee:	2b03      	cmp	r3, #3
 80060f0:	d81f      	bhi.n	8006132 <RCCEx_PLLSAI1_Config+0x5a>
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d002      	beq.n	80060fc <RCCEx_PLLSAI1_Config+0x24>
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d009      	beq.n	800610e <RCCEx_PLLSAI1_Config+0x36>
 80060fa:	e01a      	b.n	8006132 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060fc:	4b65      	ldr	r3, [pc, #404]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d117      	bne.n	8006138 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800610c:	e014      	b.n	8006138 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800610e:	4b61      	ldr	r3, [pc, #388]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006116:	2b00      	cmp	r3, #0
 8006118:	d110      	bne.n	800613c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800611e:	e00d      	b.n	800613c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8006120:	4b5c      	ldr	r3, [pc, #368]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006130:	e006      	b.n	8006140 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	73fb      	strb	r3, [r7, #15]
      break;
 8006136:	e004      	b.n	8006142 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006138:	bf00      	nop
 800613a:	e002      	b.n	8006142 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800613c:	bf00      	nop
 800613e:	e000      	b.n	8006142 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8006140:	bf00      	nop
  }

  if (status == HAL_OK)
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	2b00      	cmp	r3, #0
 8006146:	f040 809f 	bne.w	8006288 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800614a:	4b52      	ldr	r3, [pc, #328]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4a51      	ldr	r2, [pc, #324]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006150:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006154:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006156:	f7fb fc99 	bl	8001a8c <HAL_GetTick>
 800615a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800615c:	e00f      	b.n	800617e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800615e:	f7fb fc95 	bl	8001a8c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d908      	bls.n	800617e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800616c:	4b49      	ldr	r3, [pc, #292]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006174:	2b00      	cmp	r3, #0
 8006176:	d009      	beq.n	800618c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8006178:	2303      	movs	r3, #3
 800617a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800617c:	e006      	b.n	800618c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800617e:	4b45      	ldr	r3, [pc, #276]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d1e9      	bne.n	800615e <RCCEx_PLLSAI1_Config+0x86>
 800618a:	e000      	b.n	800618e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800618c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d179      	bne.n	8006288 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d116      	bne.n	80061c8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800619a:	4b3e      	ldr	r3, [pc, #248]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	4b3e      	ldr	r3, [pc, #248]	; (8006298 <RCCEx_PLLSAI1_Config+0x1c0>)
 80061a0:	4013      	ands	r3, r2
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	6892      	ldr	r2, [r2, #8]
 80061a6:	0211      	lsls	r1, r2, #8
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	68d2      	ldr	r2, [r2, #12]
 80061ac:	06d2      	lsls	r2, r2, #27
 80061ae:	4311      	orrs	r1, r2
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	6852      	ldr	r2, [r2, #4]
 80061b4:	3a01      	subs	r2, #1
 80061b6:	0112      	lsls	r2, r2, #4
 80061b8:	4311      	orrs	r1, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6812      	ldr	r2, [r2, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	4934      	ldr	r1, [pc, #208]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	610b      	str	r3, [r1, #16]
 80061c6:	e033      	b.n	8006230 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d118      	bne.n	8006200 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061ce:	4b31      	ldr	r3, [pc, #196]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061d0:	691a      	ldr	r2, [r3, #16]
 80061d2:	4b32      	ldr	r3, [pc, #200]	; (800629c <RCCEx_PLLSAI1_Config+0x1c4>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6892      	ldr	r2, [r2, #8]
 80061da:	0211      	lsls	r1, r2, #8
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6912      	ldr	r2, [r2, #16]
 80061e0:	0852      	lsrs	r2, r2, #1
 80061e2:	3a01      	subs	r2, #1
 80061e4:	0552      	lsls	r2, r2, #21
 80061e6:	4311      	orrs	r1, r2
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6852      	ldr	r2, [r2, #4]
 80061ec:	3a01      	subs	r2, #1
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	4311      	orrs	r1, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	6812      	ldr	r2, [r2, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	4926      	ldr	r1, [pc, #152]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	610b      	str	r3, [r1, #16]
 80061fe:	e017      	b.n	8006230 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006200:	4b24      	ldr	r3, [pc, #144]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006202:	691a      	ldr	r2, [r3, #16]
 8006204:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8006206:	4013      	ands	r3, r2
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	6892      	ldr	r2, [r2, #8]
 800620c:	0211      	lsls	r1, r2, #8
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6952      	ldr	r2, [r2, #20]
 8006212:	0852      	lsrs	r2, r2, #1
 8006214:	3a01      	subs	r2, #1
 8006216:	0652      	lsls	r2, r2, #25
 8006218:	4311      	orrs	r1, r2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	6852      	ldr	r2, [r2, #4]
 800621e:	3a01      	subs	r2, #1
 8006220:	0112      	lsls	r2, r2, #4
 8006222:	4311      	orrs	r1, r2
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	430a      	orrs	r2, r1
 800622a:	491a      	ldr	r1, [pc, #104]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 800622c:	4313      	orrs	r3, r2
 800622e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006230:	4b18      	ldr	r3, [pc, #96]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a17      	ldr	r2, [pc, #92]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006236:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800623a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800623c:	f7fb fc26 	bl	8001a8c <HAL_GetTick>
 8006240:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006242:	e00f      	b.n	8006264 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006244:	f7fb fc22 	bl	8001a8c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	2b02      	cmp	r3, #2
 8006250:	d908      	bls.n	8006264 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006252:	4b10      	ldr	r3, [pc, #64]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8006262:	e006      	b.n	8006272 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006264:	4b0b      	ldr	r3, [pc, #44]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800626c:	2b00      	cmp	r3, #0
 800626e:	d0e9      	beq.n	8006244 <RCCEx_PLLSAI1_Config+0x16c>
 8006270:	e000      	b.n	8006274 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8006272:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8006274:	7bfb      	ldrb	r3, [r7, #15]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d106      	bne.n	8006288 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800627a:	4b06      	ldr	r3, [pc, #24]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 800627c:	691a      	ldr	r2, [r3, #16]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	699b      	ldr	r3, [r3, #24]
 8006282:	4904      	ldr	r1, [pc, #16]	; (8006294 <RCCEx_PLLSAI1_Config+0x1bc>)
 8006284:	4313      	orrs	r3, r2
 8006286:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40021000 	.word	0x40021000
 8006298:	07ff800c 	.word	0x07ff800c
 800629c:	ff9f800c 	.word	0xff9f800c
 80062a0:	f9ff800c 	.word	0xf9ff800c

080062a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b084      	sub	sp, #16
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d018      	beq.n	80062ec <RCCEx_PLLSAI2_Config+0x48>
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d81f      	bhi.n	80062fe <RCCEx_PLLSAI2_Config+0x5a>
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d002      	beq.n	80062c8 <RCCEx_PLLSAI2_Config+0x24>
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d009      	beq.n	80062da <RCCEx_PLLSAI2_Config+0x36>
 80062c6:	e01a      	b.n	80062fe <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80062c8:	4b4a      	ldr	r3, [pc, #296]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d117      	bne.n	8006304 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062d8:	e014      	b.n	8006304 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062da:	4b46      	ldr	r3, [pc, #280]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d110      	bne.n	8006308 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062ea:	e00d      	b.n	8006308 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80062ec:	4b41      	ldr	r3, [pc, #260]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d109      	bne.n	800630c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80062f8:	2301      	movs	r3, #1
 80062fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062fc:	e006      	b.n	800630c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
      break;
 8006302:	e004      	b.n	800630e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006304:	bf00      	nop
 8006306:	e002      	b.n	800630e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8006308:	bf00      	nop
 800630a:	e000      	b.n	800630e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800630c:	bf00      	nop
  }

  if (status == HAL_OK)
 800630e:	7bfb      	ldrb	r3, [r7, #15]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d169      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006314:	4b37      	ldr	r3, [pc, #220]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a36      	ldr	r2, [pc, #216]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 800631a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800631e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006320:	f7fb fbb4 	bl	8001a8c <HAL_GetTick>
 8006324:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006326:	e00f      	b.n	8006348 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006328:	f7fb fbb0 	bl	8001a8c <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d908      	bls.n	8006348 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006336:	4b2f      	ldr	r3, [pc, #188]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d009      	beq.n	8006356 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8006342:	2303      	movs	r3, #3
 8006344:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006346:	e006      	b.n	8006356 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006348:	4b2a      	ldr	r3, [pc, #168]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e9      	bne.n	8006328 <RCCEx_PLLSAI2_Config+0x84>
 8006354:	e000      	b.n	8006358 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8006356:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8006358:	7bfb      	ldrb	r3, [r7, #15]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d144      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d115      	bne.n	8006390 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006364:	4b23      	ldr	r3, [pc, #140]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 8006366:	695a      	ldr	r2, [r3, #20]
 8006368:	4b23      	ldr	r3, [pc, #140]	; (80063f8 <RCCEx_PLLSAI2_Config+0x154>)
 800636a:	4013      	ands	r3, r2
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	6892      	ldr	r2, [r2, #8]
 8006370:	0211      	lsls	r1, r2, #8
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	68d2      	ldr	r2, [r2, #12]
 8006376:	06d2      	lsls	r2, r2, #27
 8006378:	4311      	orrs	r1, r2
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	6852      	ldr	r2, [r2, #4]
 800637e:	3a01      	subs	r2, #1
 8006380:	0112      	lsls	r2, r2, #4
 8006382:	4311      	orrs	r1, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	6812      	ldr	r2, [r2, #0]
 8006388:	430a      	orrs	r2, r1
 800638a:	491a      	ldr	r1, [pc, #104]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 800638c:	4313      	orrs	r3, r2
 800638e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006390:	4b18      	ldr	r3, [pc, #96]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a17      	ldr	r2, [pc, #92]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 8006396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800639a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800639c:	f7fb fb76 	bl	8001a8c <HAL_GetTick>
 80063a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063a2:	e00f      	b.n	80063c4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063a4:	f7fb fb72 	bl	8001a8c <HAL_GetTick>
 80063a8:	4602      	mov	r2, r0
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	1ad3      	subs	r3, r2, r3
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d908      	bls.n	80063c4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d109      	bne.n	80063d2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80063c2:	e006      	b.n	80063d2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063c4:	4b0b      	ldr	r3, [pc, #44]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d0e9      	beq.n	80063a4 <RCCEx_PLLSAI2_Config+0x100>
 80063d0:	e000      	b.n	80063d4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80063d2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80063d4:	7bfb      	ldrb	r3, [r7, #15]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d106      	bne.n	80063e8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80063da:	4b06      	ldr	r3, [pc, #24]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80063dc:	695a      	ldr	r2, [r3, #20]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4904      	ldr	r1, [pc, #16]	; (80063f4 <RCCEx_PLLSAI2_Config+0x150>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80063e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	40021000 	.word	0x40021000
 80063f8:	07ff800c 	.word	0x07ff800c

080063fc <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 8006406:	4b26      	ldr	r3, [pc, #152]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006408:	691b      	ldr	r3, [r3, #16]
 800640a:	f003 0303 	and.w	r3, r3, #3
 800640e:	2b03      	cmp	r3, #3
 8006410:	d02d      	beq.n	800646e <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8006412:	2b03      	cmp	r3, #3
 8006414:	d835      	bhi.n	8006482 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 8006416:	2b01      	cmp	r3, #1
 8006418:	d002      	beq.n	8006420 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 800641a:	2b02      	cmp	r3, #2
 800641c:	d01d      	beq.n	800645a <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800641e:	e030      	b.n	8006482 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006420:	4b1f      	ldr	r3, [pc, #124]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f003 0302 	and.w	r3, r3, #2
 8006428:	2b02      	cmp	r3, #2
 800642a:	d12c      	bne.n	8006486 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800642c:	4b1c      	ldr	r3, [pc, #112]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0308 	and.w	r3, r3, #8
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8006438:	4b19      	ldr	r3, [pc, #100]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	091b      	lsrs	r3, r3, #4
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	e005      	b.n	8006450 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8006444:	4b16      	ldr	r3, [pc, #88]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800644a:	0a1b      	lsrs	r3, r3, #8
 800644c:	f003 030f 	and.w	r3, r3, #15
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8006452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006456:	607b      	str	r3, [r7, #4]
      break;
 8006458:	e015      	b.n	8006486 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800645a:	4b11      	ldr	r3, [pc, #68]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006466:	d110      	bne.n	800648a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8006468:	4b0f      	ldr	r3, [pc, #60]	; (80064a8 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800646a:	607b      	str	r3, [r7, #4]
      break;
 800646c:	e00d      	b.n	800648a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800646e:	4b0c      	ldr	r3, [pc, #48]	; (80064a0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800647a:	d108      	bne.n	800648e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 800647e:	607b      	str	r3, [r7, #4]
      break;
 8006480:	e005      	b.n	800648e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8006482:	bf00      	nop
 8006484:	e004      	b.n	8006490 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8006486:	bf00      	nop
 8006488:	e002      	b.n	8006490 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800648a:	bf00      	nop
 800648c:	e000      	b.n	8006490 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800648e:	bf00      	nop
  }

  return pllvco;
 8006490:	687b      	ldr	r3, [r7, #4]
}
 8006492:	4618      	mov	r0, r3
 8006494:	370c      	adds	r7, #12
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	40021000 	.word	0x40021000
 80064a4:	0800f79c 	.word	0x0800f79c
 80064a8:	00f42400 	.word	0x00f42400
 80064ac:	00989680 	.word	0x00989680

080064b0 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80064b6:	2300      	movs	r3, #0
 80064b8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 80064ba:	4b26      	ldr	r3, [pc, #152]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d02d      	beq.n	8006522 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d835      	bhi.n	8006536 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d002      	beq.n	80064d4 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d01d      	beq.n	800650e <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80064d2:	e030      	b.n	8006536 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80064d4:	4b1f      	ldr	r3, [pc, #124]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d12c      	bne.n	800653a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80064e0:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0308 	and.w	r3, r3, #8
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80064ec:	4b19      	ldr	r3, [pc, #100]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	091b      	lsrs	r3, r3, #4
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	e005      	b.n	8006504 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80064f8:	4b16      	ldr	r3, [pc, #88]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80064fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064fe:	0a1b      	lsrs	r3, r3, #8
 8006500:	f003 030f 	and.w	r3, r3, #15
 8006504:	4a14      	ldr	r2, [pc, #80]	; (8006558 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 8006506:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800650a:	607b      	str	r3, [r7, #4]
      break;
 800650c:	e015      	b.n	800653a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800650e:	4b11      	ldr	r3, [pc, #68]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d110      	bne.n	800653e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800651c:	4b0f      	ldr	r3, [pc, #60]	; (800655c <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 800651e:	607b      	str	r3, [r7, #4]
      break;
 8006520:	e00d      	b.n	800653e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800652a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800652e:	d108      	bne.n	8006542 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8006530:	4b0b      	ldr	r3, [pc, #44]	; (8006560 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 8006532:	607b      	str	r3, [r7, #4]
      break;
 8006534:	e005      	b.n	8006542 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8006536:	bf00      	nop
 8006538:	e004      	b.n	8006544 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800653a:	bf00      	nop
 800653c:	e002      	b.n	8006544 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800653e:	bf00      	nop
 8006540:	e000      	b.n	8006544 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8006542:	bf00      	nop
  }

  return pllvco;
 8006544:	687b      	ldr	r3, [r7, #4]
}
 8006546:	4618      	mov	r0, r3
 8006548:	370c      	adds	r7, #12
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
 8006552:	bf00      	nop
 8006554:	40021000 	.word	0x40021000
 8006558:	0800f79c 	.word	0x0800f79c
 800655c:	00f42400 	.word	0x00f42400
 8006560:	00989680 	.word	0x00989680

08006564 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b088      	sub	sp, #32
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
 800656c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006578:	d10c      	bne.n	8006594 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800657a:	4b78      	ldr	r3, [pc, #480]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800657c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006580:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8006584:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b60      	cmp	r3, #96	; 0x60
 800658a:	d110      	bne.n	80065ae <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800658c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006590:	61fb      	str	r3, [r7, #28]
 8006592:	e00c      	b.n	80065ae <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8006594:	4b71      	ldr	r3, [pc, #452]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006596:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800659a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800659e:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 80065a0:	69bb      	ldr	r3, [r7, #24]
 80065a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065a6:	d102      	bne.n	80065ae <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80065a8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80065ac:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f040 80cd 	bne.w	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80065ba:	69bb      	ldr	r3, [r7, #24]
 80065bc:	2b40      	cmp	r3, #64	; 0x40
 80065be:	d003      	beq.n	80065c8 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065c6:	d13b      	bne.n	8006640 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80065c8:	4b64      	ldr	r3, [pc, #400]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80065d4:	f040 80bb 	bne.w	800674e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80065d8:	4b60      	ldr	r3, [pc, #384]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f000 80b4 	beq.w	800674e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80065e6:	4b5d      	ldr	r3, [pc, #372]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	091b      	lsrs	r3, r3, #4
 80065ec:	f003 030f 	and.w	r3, r3, #15
 80065f0:	3301      	adds	r3, #1
 80065f2:	693a      	ldr	r2, [r7, #16]
 80065f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065f8:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80065fa:	4b58      	ldr	r3, [pc, #352]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	0a1b      	lsrs	r3, r3, #8
 8006600:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006604:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006606:	4b55      	ldr	r3, [pc, #340]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	0edb      	lsrs	r3, r3, #27
 800660c:	f003 031f 	and.w	r3, r3, #31
 8006610:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006618:	4b50      	ldr	r3, [pc, #320]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006620:	2b00      	cmp	r3, #0
 8006622:	d002      	beq.n	800662a <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8006624:	2311      	movs	r3, #17
 8006626:	617b      	str	r3, [r7, #20]
 8006628:	e001      	b.n	800662e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 800662a:	2307      	movs	r3, #7
 800662c:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	68fa      	ldr	r2, [r7, #12]
 8006632:	fb03 f202 	mul.w	r2, r3, r2
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	fbb2 f3f3 	udiv	r3, r2, r3
 800663c:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800663e:	e086      	b.n	800674e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b80      	cmp	r3, #128	; 0x80
 8006644:	d003      	beq.n	800664e <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800664c:	d109      	bne.n	8006662 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800664e:	4b43      	ldr	r3, [pc, #268]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006656:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800665a:	d179      	bne.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 800665c:	4b40      	ldr	r3, [pc, #256]	; (8006760 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 800665e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006660:	e076      	b.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d135      	bne.n	80066d4 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8006668:	4b3c      	ldr	r3, [pc, #240]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d06d      	beq.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006674:	f7ff fec2 	bl	80063fc <RCCEx_PLLSAI1_GetVCOFreq>
 8006678:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800667a:	4b38      	ldr	r3, [pc, #224]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	091b      	lsrs	r3, r3, #4
 8006680:	f003 030f 	and.w	r3, r3, #15
 8006684:	3301      	adds	r3, #1
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	fbb2 f3f3 	udiv	r3, r2, r3
 800668c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800668e:	4b33      	ldr	r3, [pc, #204]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	0a1b      	lsrs	r3, r3, #8
 8006694:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006698:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800669a:	4b30      	ldr	r3, [pc, #192]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	0edb      	lsrs	r3, r3, #27
 80066a0:	f003 031f 	and.w	r3, r3, #31
 80066a4:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d10a      	bne.n	80066c2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80066ac:	4b2b      	ldr	r3, [pc, #172]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d002      	beq.n	80066be <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 80066b8:	2311      	movs	r3, #17
 80066ba:	617b      	str	r3, [r7, #20]
 80066bc:	e001      	b.n	80066c2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 80066be:	2307      	movs	r3, #7
 80066c0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	fb03 f202 	mul.w	r2, r3, r2
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80066d0:	61fb      	str	r3, [r7, #28]
 80066d2:	e03d      	b.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80066d4:	69bb      	ldr	r3, [r7, #24]
 80066d6:	2b20      	cmp	r3, #32
 80066d8:	d003      	beq.n	80066e2 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066e0:	d136      	bne.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80066e2:	4b1e      	ldr	r3, [pc, #120]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d030      	beq.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80066ee:	f7ff fedf 	bl	80064b0 <RCCEx_PLLSAI2_GetVCOFreq>
 80066f2:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80066f4:	4b19      	ldr	r3, [pc, #100]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	3301      	adds	r3, #1
 8006700:	693a      	ldr	r2, [r7, #16]
 8006702:	fbb2 f3f3 	udiv	r3, r2, r3
 8006706:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8006708:	4b14      	ldr	r3, [pc, #80]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	0a1b      	lsrs	r3, r3, #8
 800670e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006712:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8006714:	4b11      	ldr	r3, [pc, #68]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	0edb      	lsrs	r3, r3, #27
 800671a:	f003 031f 	and.w	r3, r3, #31
 800671e:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8006726:	4b0d      	ldr	r3, [pc, #52]	; (800675c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d002      	beq.n	8006738 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8006732:	2311      	movs	r3, #17
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e001      	b.n	800673c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8006738:	2307      	movs	r3, #7
 800673a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	fb03 f202 	mul.w	r2, r3, r2
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	fbb2 f3f3 	udiv	r3, r2, r3
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	e000      	b.n	8006750 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800674e:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8006750:	69fb      	ldr	r3, [r7, #28]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3720      	adds	r7, #32
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	40021000 	.word	0x40021000
 8006760:	00f42400 	.word	0x00f42400

08006764 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d066      	beq.n	8006844 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800677c:	b2db      	uxtb	r3, r3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d106      	bne.n	8006790 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f7fa fe96 	bl	80014bc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68db      	ldr	r3, [r3, #12]
 800679e:	f003 0310 	and.w	r3, r3, #16
 80067a2:	2b10      	cmp	r3, #16
 80067a4:	d045      	beq.n	8006832 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067a6:	4b2a      	ldr	r3, [pc, #168]	; (8006850 <HAL_RTC_Init+0xec>)
 80067a8:	22ca      	movs	r2, #202	; 0xca
 80067aa:	625a      	str	r2, [r3, #36]	; 0x24
 80067ac:	4b28      	ldr	r3, [pc, #160]	; (8006850 <HAL_RTC_Init+0xec>)
 80067ae:	2253      	movs	r2, #83	; 0x53
 80067b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f91c 	bl	80069f0 <RTC_EnterInitMode>
 80067b8:	4603      	mov	r3, r0
 80067ba:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d121      	bne.n	8006806 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 80067c2:	4b23      	ldr	r3, [pc, #140]	; (8006850 <HAL_RTC_Init+0xec>)
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	4a22      	ldr	r2, [pc, #136]	; (8006850 <HAL_RTC_Init+0xec>)
 80067c8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 80067cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067d0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80067d2:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <HAL_RTC_Init+0xec>)
 80067d4:	699a      	ldr	r2, [r3, #24]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6859      	ldr	r1, [r3, #4]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691b      	ldr	r3, [r3, #16]
 80067de:	4319      	orrs	r1, r3
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	430b      	orrs	r3, r1
 80067e6:	491a      	ldr	r1, [pc, #104]	; (8006850 <HAL_RTC_Init+0xec>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	68da      	ldr	r2, [r3, #12]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	041b      	lsls	r3, r3, #16
 80067f6:	4916      	ldr	r1, [pc, #88]	; (8006850 <HAL_RTC_Init+0xec>)
 80067f8:	4313      	orrs	r3, r2
 80067fa:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 f92b 	bl	8006a58 <RTC_ExitInitMode>
 8006802:	4603      	mov	r3, r0
 8006804:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8006806:	7bfb      	ldrb	r3, [r7, #15]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10e      	bne.n	800682a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 800680c:	4b10      	ldr	r3, [pc, #64]	; (8006850 <HAL_RTC_Init+0xec>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a19      	ldr	r1, [r3, #32]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	4319      	orrs	r1, r3
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	695b      	ldr	r3, [r3, #20]
 8006822:	430b      	orrs	r3, r1
 8006824:	490a      	ldr	r1, [pc, #40]	; (8006850 <HAL_RTC_Init+0xec>)
 8006826:	4313      	orrs	r3, r2
 8006828:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682a:	4b09      	ldr	r3, [pc, #36]	; (8006850 <HAL_RTC_Init+0xec>)
 800682c:	22ff      	movs	r2, #255	; 0xff
 800682e:	625a      	str	r2, [r3, #36]	; 0x24
 8006830:	e001      	b.n	8006836 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d103      	bne.n	8006844 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8006844:	7bfb      	ldrb	r3, [r7, #15]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3710      	adds	r7, #16
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	40002800 	.word	0x40002800

08006854 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b086      	sub	sp, #24
 8006858:	af00      	add	r7, sp, #0
 800685a:	60f8      	str	r0, [r7, #12]
 800685c:	60b9      	str	r1, [r7, #8]
 800685e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8006860:	4b29      	ldr	r3, [pc, #164]	; (8006908 <HAL_RTC_GetTime+0xb4>)
 8006862:	689a      	ldr	r2, [r3, #8]
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8006868:	4b27      	ldr	r3, [pc, #156]	; (8006908 <HAL_RTC_GetTime+0xb4>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8006874:	4b24      	ldr	r3, [pc, #144]	; (8006908 <HAL_RTC_GetTime+0xb4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800687c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006880:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	b2db      	uxtb	r3, r3
 8006888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800688c:	b2da      	uxtb	r2, r3
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	0a1b      	lsrs	r3, r3, #8
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068aa:	b2da      	uxtb	r2, r3
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	0d9b      	lsrs	r3, r3, #22
 80068b4:	b2db      	uxtb	r3, r3
 80068b6:	f003 0301 	and.w	r3, r3, #1
 80068ba:	b2da      	uxtb	r2, r3
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d11a      	bne.n	80068fc <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	4618      	mov	r0, r3
 80068cc:	f000 f902 	bl	8006ad4 <RTC_Bcd2ToByte>
 80068d0:	4603      	mov	r3, r0
 80068d2:	461a      	mov	r2, r3
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	785b      	ldrb	r3, [r3, #1]
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f8f9 	bl	8006ad4 <RTC_Bcd2ToByte>
 80068e2:	4603      	mov	r3, r0
 80068e4:	461a      	mov	r2, r3
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	789b      	ldrb	r3, [r3, #2]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f000 f8f0 	bl	8006ad4 <RTC_Bcd2ToByte>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	40002800 	.word	0x40002800

0800690c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b086      	sub	sp, #24
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8006918:	4b22      	ldr	r3, [pc, #136]	; (80069a4 <HAL_RTC_GetDate+0x98>)
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006920:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006924:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	0c1b      	lsrs	r3, r3, #16
 800692a:	b2da      	uxtb	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8006930:	697b      	ldr	r3, [r7, #20]
 8006932:	0a1b      	lsrs	r3, r3, #8
 8006934:	b2db      	uxtb	r3, r3
 8006936:	f003 031f 	and.w	r3, r3, #31
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006948:	b2da      	uxtb	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	0b5b      	lsrs	r3, r3, #13
 8006952:	b2db      	uxtb	r3, r3
 8006954:	f003 0307 	and.w	r3, r3, #7
 8006958:	b2da      	uxtb	r2, r3
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d11a      	bne.n	800699a <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	78db      	ldrb	r3, [r3, #3]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 f8b3 	bl	8006ad4 <RTC_Bcd2ToByte>
 800696e:	4603      	mov	r3, r0
 8006970:	461a      	mov	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	785b      	ldrb	r3, [r3, #1]
 800697a:	4618      	mov	r0, r3
 800697c:	f000 f8aa 	bl	8006ad4 <RTC_Bcd2ToByte>
 8006980:	4603      	mov	r3, r0
 8006982:	461a      	mov	r2, r3
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	789b      	ldrb	r3, [r3, #2]
 800698c:	4618      	mov	r0, r3
 800698e:	f000 f8a1 	bl	8006ad4 <RTC_Bcd2ToByte>
 8006992:	4603      	mov	r3, r0
 8006994:	461a      	mov	r2, r3
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800699a:	2300      	movs	r3, #0
}
 800699c:	4618      	mov	r0, r3
 800699e:	3718      	adds	r7, #24
 80069a0:	46bd      	mov	sp, r7
 80069a2:	bd80      	pop	{r7, pc}
 80069a4:	40002800 	.word	0x40002800

080069a8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <HAL_RTC_WaitForSynchro+0x40>)
 80069b2:	4a0e      	ldr	r2, [pc, #56]	; (80069ec <HAL_RTC_WaitForSynchro+0x44>)
 80069b4:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80069b6:	f7fb f869 	bl	8001a8c <HAL_GetTick>
 80069ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069bc:	e009      	b.n	80069d2 <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069be:	f7fb f865 	bl	8001a8c <HAL_GetTick>
 80069c2:	4602      	mov	r2, r0
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	1ad3      	subs	r3, r2, r3
 80069c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069cc:	d901      	bls.n	80069d2 <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e006      	b.n	80069e0 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_RTC_WaitForSynchro+0x40>)
 80069d4:	68db      	ldr	r3, [r3, #12]
 80069d6:	f003 0320 	and.w	r3, r3, #32
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0ef      	beq.n	80069be <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 80069de:	2300      	movs	r3, #0
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}
 80069e8:	40002800 	.word	0x40002800
 80069ec:	0001005c 	.word	0x0001005c

080069f0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80069f8:	2300      	movs	r3, #0
 80069fa:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80069fc:	4b15      	ldr	r3, [pc, #84]	; (8006a54 <RTC_EnterInitMode+0x64>)
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d120      	bne.n	8006a4a <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a08:	4b12      	ldr	r3, [pc, #72]	; (8006a54 <RTC_EnterInitMode+0x64>)
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	4a11      	ldr	r2, [pc, #68]	; (8006a54 <RTC_EnterInitMode+0x64>)
 8006a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a12:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006a14:	f7fb f83a 	bl	8001a8c <HAL_GetTick>
 8006a18:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a1a:	e00d      	b.n	8006a38 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a1c:	f7fb f836 	bl	8001a8c <HAL_GetTick>
 8006a20:	4602      	mov	r2, r0
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	1ad3      	subs	r3, r2, r3
 8006a26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a2a:	d905      	bls.n	8006a38 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2203      	movs	r2, #3
 8006a34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <RTC_EnterInitMode+0x64>)
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d102      	bne.n	8006a4a <RTC_EnterInitMode+0x5a>
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	2b03      	cmp	r3, #3
 8006a48:	d1e8      	bne.n	8006a1c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	40002800 	.word	0x40002800

08006a58 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a64:	4b1a      	ldr	r3, [pc, #104]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006a6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6e:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006a70:	4b17      	ldr	r3, [pc, #92]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006a72:	699b      	ldr	r3, [r3, #24]
 8006a74:	f003 0320 	and.w	r3, r3, #32
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d10c      	bne.n	8006a96 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff ff93 	bl	80069a8 <HAL_RTC_WaitForSynchro>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01e      	beq.n	8006ac6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2203      	movs	r2, #3
 8006a8c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	73fb      	strb	r3, [r7, #15]
 8006a94:	e017      	b.n	8006ac6 <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006a96:	4b0e      	ldr	r3, [pc, #56]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	4a0d      	ldr	r2, [pc, #52]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006a9c:	f023 0320 	bic.w	r3, r3, #32
 8006aa0:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ff80 	bl	80069a8 <HAL_RTC_WaitForSynchro>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d005      	beq.n	8006aba <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 8006ab6:	2303      	movs	r3, #3
 8006ab8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006aba:	4b05      	ldr	r3, [pc, #20]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006abc:	699b      	ldr	r3, [r3, #24]
 8006abe:	4a04      	ldr	r2, [pc, #16]	; (8006ad0 <RTC_ExitInitMode+0x78>)
 8006ac0:	f043 0320 	orr.w	r3, r3, #32
 8006ac4:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	40002800 	.word	0x40002800

08006ad4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b085      	sub	sp, #20
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8006ade:	79fb      	ldrb	r3, [r7, #7]
 8006ae0:	091b      	lsrs	r3, r3, #4
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	79fb      	ldrb	r3, [r7, #7]
 8006af6:	f003 030f 	and.w	r3, r3, #15
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	4413      	add	r3, r2
 8006afe:	b2db      	uxtb	r3, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681a      	ldr	r2, [r3, #0]
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	490f      	ldr	r1, [pc, #60]	; (8006b5c <HAL_RTCEx_PrivilegeModeSet+0x50>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	490c      	ldr	r1, [pc, #48]	; (8006b60 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 8006b32:	4b0b      	ldr	r3, [pc, #44]	; (8006b60 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b34:	6a1b      	ldr	r3, [r3, #32]
 8006b36:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6919      	ldr	r1, [r3, #16]
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	695b      	ldr	r3, [r3, #20]
 8006b42:	041b      	lsls	r3, r3, #16
 8006b44:	430b      	orrs	r3, r1
 8006b46:	4906      	ldr	r1, [pc, #24]	; (8006b60 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40002800 	.word	0x40002800
 8006b60:	40003400 	.word	0x40003400

08006b64 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b08a      	sub	sp, #40	; 0x28
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d101      	bne.n	8006b76 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006b72:	2301      	movs	r3, #1
 8006b74:	e075      	b.n	8006c62 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d105      	bne.n	8006b8e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7fa fcd5 	bl	8001538 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2204      	movs	r2, #4
 8006b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f868 	bl	8006c6c <HAL_SD_InitCard>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e05d      	b.n	8006c62 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8006ba6:	f107 0308 	add.w	r3, r7, #8
 8006baa:	4619      	mov	r1, r3
 8006bac:	6878      	ldr	r0, [r7, #4]
 8006bae:	f000 fd9b 	bl	80076e8 <HAL_SD_GetCardStatus>
 8006bb2:	4603      	mov	r3, r0
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	e052      	b.n	8006c62 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8006bbc:	7e3b      	ldrb	r3, [r7, #24]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8006bc2:	7e7b      	ldrb	r3, [r7, #25]
 8006bc4:	b2db      	uxtb	r3, r3
 8006bc6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d10a      	bne.n	8006be6 <HAL_SD_Init+0x82>
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d102      	bne.n	8006bdc <HAL_SD_Init+0x78>
 8006bd6:	6a3b      	ldr	r3, [r7, #32]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d004      	beq.n	8006be6 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006be2:	659a      	str	r2, [r3, #88]	; 0x58
 8006be4:	e00b      	b.n	8006bfe <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d104      	bne.n	8006bf8 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006bf4:	659a      	str	r2, [r3, #88]	; 0x58
 8006bf6:	e002      	b.n	8006bfe <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	68db      	ldr	r3, [r3, #12]
 8006c02:	4619      	mov	r1, r3
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fe59 	bl	80078bc <HAL_SD_ConfigWideBusOperation>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d001      	beq.n	8006c14 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8006c10:	2301      	movs	r3, #1
 8006c12:	e026      	b.n	8006c62 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8006c14:	f7fa ff3a 	bl	8001a8c <HAL_GetTick>
 8006c18:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c1a:	e011      	b.n	8006c40 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006c1c:	f7fa ff36 	bl	8001a8c <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c2a:	d109      	bne.n	8006c40 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006c32:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 8006c3c:	2303      	movs	r3, #3
 8006c3e:	e010      	b.n	8006c62 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ff4b 	bl	8007adc <HAL_SD_GetCardState>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	d1e7      	bne.n	8006c1c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2200      	movs	r2, #0
 8006c56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3728      	adds	r7, #40	; 0x28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
	...

08006c6c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006c6c:	b590      	push	{r4, r7, lr}
 8006c6e:	b08d      	sub	sp, #52	; 0x34
 8006c70:	af02      	add	r7, sp, #8
 8006c72:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8006c74:	2300      	movs	r3, #0
 8006c76:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8006c80:	2300      	movs	r3, #0
 8006c82:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8006c84:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8006c88:	f7fe fa84 	bl	8005194 <HAL_RCCEx_GetPeriphCLKFreq>
 8006c8c:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d109      	bne.n	8006ca8 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2201      	movs	r2, #1
 8006c98:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006ca2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e06a      	b.n	8006d7e <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	0a1b      	lsrs	r3, r3, #8
 8006cac:	4a36      	ldr	r2, [pc, #216]	; (8006d88 <HAL_SD_InitCard+0x11c>)
 8006cae:	fba2 2303 	umull	r2, r3, r2, r3
 8006cb2:	091b      	lsrs	r3, r3, #4
 8006cb4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681c      	ldr	r4, [r3, #0]
 8006cba:	466a      	mov	r2, sp
 8006cbc:	f107 0318 	add.w	r3, r7, #24
 8006cc0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8006cc4:	e882 0003 	stmia.w	r2, {r0, r1}
 8006cc8:	f107 030c 	add.w	r3, r7, #12
 8006ccc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cce:	4620      	mov	r0, r4
 8006cd0:	f002 fe34 	bl	800993c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4618      	mov	r0, r3
 8006cda:	f002 fe77 	bl	80099cc <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8006cea:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <HAL_SD_InitCard+0x120>)
 8006cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f7fa fed5 	bl	8001aa4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 ffdc 	bl	8007cb8 <SD_PowerON>
 8006d00:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d00b      	beq.n	8006d20 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02e      	b.n	8006d7e <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 fefb 	bl	8007b1c <SD_InitCard>
 8006d26:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d00b      	beq.n	8006d46 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2201      	movs	r2, #1
 8006d32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d3a:	6a3b      	ldr	r3, [r7, #32]
 8006d3c:	431a      	orrs	r2, r3
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e01b      	b.n	8006d7e <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f002 fed2 	bl	8009af8 <SDMMC_CmdBlockLength>
 8006d54:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8006d56:	6a3b      	ldr	r3, [r7, #32]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00f      	beq.n	8006d7c <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a0b      	ldr	r2, [pc, #44]	; (8006d90 <HAL_SD_InitCard+0x124>)
 8006d62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	431a      	orrs	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2201      	movs	r2, #1
 8006d74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e000      	b.n	8006d7e <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	372c      	adds	r7, #44	; 0x2c
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd90      	pop	{r4, r7, pc}
 8006d86:	bf00      	nop
 8006d88:	014f8b59 	.word	0x014f8b59
 8006d8c:	00012110 	.word	0x00012110
 8006d90:	1fe00fff 	.word	0x1fe00fff

08006d94 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08c      	sub	sp, #48	; 0x30
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d107      	bne.n	8006dbc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006db0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006db8:	2301      	movs	r3, #1
 8006dba:	e08d      	b.n	8006ed8 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006dc2:	b2db      	uxtb	r3, r3
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	f040 8086 	bne.w	8006ed6 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2200      	movs	r2, #0
 8006dce:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006dd0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	441a      	add	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d907      	bls.n	8006dee <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006dea:	2301      	movs	r3, #1
 8006dec:	e074      	b.n	8006ed8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	2203      	movs	r2, #3
 8006df2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	025a      	lsls	r2, r3, #9
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d002      	beq.n	8006e1a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8006e14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e16:	025b      	lsls	r3, r3, #9
 8006e18:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	025b      	lsls	r3, r3, #9
 8006e24:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006e26:	2390      	movs	r3, #144	; 0x90
 8006e28:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8006e2a:	2302      	movs	r3, #2
 8006e2c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006e32:	2300      	movs	r3, #0
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f107 0210 	add.w	r2, r7, #16
 8006e3e:	4611      	mov	r1, r2
 8006e40:	4618      	mov	r0, r3
 8006e42:	f002 fe2d 	bl	8009aa0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e54:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d90a      	bls.n	8006e82 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2282      	movs	r2, #130	; 0x82
 8006e70:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f002 fe83 	bl	8009b84 <SDMMC_CmdReadMultiBlock>
 8006e7e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e80:	e009      	b.n	8006e96 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2281      	movs	r2, #129	; 0x81
 8006e86:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f002 fe55 	bl	8009b3e <SDMMC_CmdReadSingleBlock>
 8006e94:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d012      	beq.n	8006ec2 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	4a0f      	ldr	r2, [pc, #60]	; (8006ee0 <HAL_SD_ReadBlocks_DMA+0x14c>)
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e00a      	b.n	8006ed8 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8006ed0:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	e000      	b.n	8006ed8 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006ed6:	2302      	movs	r3, #2
  }
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3730      	adds	r7, #48	; 0x30
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	1fe00fff 	.word	0x1fe00fff

08006ee4 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08c      	sub	sp, #48	; 0x30
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d107      	bne.n	8006f0c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f00:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006f08:	2301      	movs	r3, #1
 8006f0a:	e08d      	b.n	8007028 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006f12:	b2db      	uxtb	r3, r3
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	f040 8086 	bne.w	8007026 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d907      	bls.n	8006f3e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f32:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	e074      	b.n	8007028 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2203      	movs	r2, #3
 8006f42:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	68ba      	ldr	r2, [r7, #8]
 8006f52:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	025a      	lsls	r2, r3, #9
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d002      	beq.n	8006f6a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	025b      	lsls	r3, r3, #9
 8006f68:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f6e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	025b      	lsls	r3, r3, #9
 8006f74:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8006f76:	2390      	movs	r3, #144	; 0x90
 8006f78:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8006f82:	2300      	movs	r3, #0
 8006f84:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	f107 0210 	add.w	r2, r7, #16
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4618      	mov	r0, r3
 8006f92:	f002 fd85 	bl	8009aa0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	68da      	ldr	r2, [r3, #12]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006fa4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68ba      	ldr	r2, [r7, #8]
 8006fac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d90a      	bls.n	8006fd2 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	22a0      	movs	r2, #160	; 0xa0
 8006fc0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fc8:	4618      	mov	r0, r3
 8006fca:	f002 fe21 	bl	8009c10 <SDMMC_CmdWriteMultiBlock>
 8006fce:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006fd0:	e009      	b.n	8006fe6 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2290      	movs	r2, #144	; 0x90
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 fdf3 	bl	8009bca <SDMMC_CmdWriteSingleBlock>
 8006fe4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 8006fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d012      	beq.n	8007012 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a0f      	ldr	r2, [pc, #60]	; (8007030 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8006ff2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffa:	431a      	orrs	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 800700e:	2301      	movs	r3, #1
 8007010:	e00a      	b.n	8007028 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8007020:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007022:	2300      	movs	r3, #0
 8007024:	e000      	b.n	8007028 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8007026:	2302      	movs	r3, #2
  }
}
 8007028:	4618      	mov	r0, r3
 800702a:	3730      	adds	r7, #48	; 0x30
 800702c:	46bd      	mov	sp, r7
 800702e:	bd80      	pop	{r7, pc}
 8007030:	1fe00fff 	.word	0x1fe00fff

08007034 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007040:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007048:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_SD_IRQHandler+0x2e>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f003 0308 	and.w	r3, r3, #8
 8007056:	2b00      	cmp	r3, #0
 8007058:	d003      	beq.n	8007062 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f001 f918 	bl	8008290 <SD_Read_IT>
 8007060:	e199      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 80ae 	beq.w	80071ce <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f44f 7280 	mov.w	r2, #256	; 0x100
 800707a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007082:	687a      	ldr	r2, [r7, #4]
 8007084:	6812      	ldr	r2, [r2, #0]
 8007086:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 800708a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800708e:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800709e:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68da      	ldr	r2, [r3, #12]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070ae:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f003 0308 	and.w	r3, r3, #8
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d038      	beq.n	800712c <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f003 0302 	and.w	r3, r3, #2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d104      	bne.n	80070ce <HAL_SD_IRQHandler+0x9a>
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f003 0320 	and.w	r3, r3, #32
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d011      	beq.n	80070f2 <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4618      	mov	r0, r3
 80070d4:	f002 fdc0 	bl	8009c58 <SDMMC_CmdStopTransfer>
 80070d8:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7f9 fef1 	bl	8000ed4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a90      	ldr	r2, [pc, #576]	; (8007338 <HAL_SD_IRQHandler+0x304>)
 80070f8:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2200      	movs	r2, #0
 8007106:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d104      	bne.n	800711c <HAL_SD_IRQHandler+0xe8>
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d003      	beq.n	8007124 <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800711c:	6878      	ldr	r0, [r7, #4]
 800711e:	f7f9 fec3 	bl	8000ea8 <HAL_SD_RxCpltCallback>
 8007122:	e138      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8007124:	6878      	ldr	r0, [r7, #4]
 8007126:	f7f9 fea9 	bl	8000e7c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800712a:	e134      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	f000 812f 	beq.w	8007396 <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	2200      	movs	r2, #0
 8007146:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2200      	movs	r2, #0
 800714e:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d104      	bne.n	8007164 <HAL_SD_IRQHandler+0x130>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f003 0320 	and.w	r3, r3, #32
 8007160:	2b00      	cmp	r3, #0
 8007162:	d011      	beq.n	8007188 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4618      	mov	r0, r3
 800716a:	f002 fd75 	bl	8009c58 <SDMMC_CmdStopTransfer>
 800716e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d008      	beq.n	8007188 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 8007182:	6878      	ldr	r0, [r7, #4]
 8007184:	f7f9 fea6 	bl	8000ed4 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f003 0310 	and.w	r3, r3, #16
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_SD_IRQHandler+0x176>
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f003 0320 	and.w	r3, r3, #32
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f7f9 fe66 	bl	8000e7c <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f003 0301 	and.w	r3, r3, #1
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d105      	bne.n	80071c6 <HAL_SD_IRQHandler+0x192>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f000 80e8 	beq.w	8007396 <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7f9 fe6e 	bl	8000ea8 <HAL_SD_RxCpltCallback>
}
 80071cc:	e0e3      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d008      	beq.n	80071ee <HAL_SD_IRQHandler+0x1ba>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f003 0308 	and.w	r3, r3, #8
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d003      	beq.n	80071ee <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f898 	bl	800831c <SD_Write_IT>
 80071ec:	e0d3      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f4:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	f000 809f 	beq.w	800733c <HAL_SD_IRQHandler+0x308>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d005      	beq.n	8007218 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007210:	f043 0202 	orr.w	r2, r3, #2
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800721e:	f003 0308 	and.w	r3, r3, #8
 8007222:	2b00      	cmp	r3, #0
 8007224:	d005      	beq.n	8007232 <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800722a:	f043 0208 	orr.w	r2, r3, #8
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007238:	f003 0320 	and.w	r3, r3, #32
 800723c:	2b00      	cmp	r3, #0
 800723e:	d005      	beq.n	800724c <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007244:	f043 0220 	orr.w	r2, r3, #32
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	f003 0310 	and.w	r3, r3, #16
 8007256:	2b00      	cmp	r3, #0
 8007258:	d005      	beq.n	8007266 <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800725e:	f043 0210 	orr.w	r2, r3, #16
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a33      	ldr	r2, [pc, #204]	; (8007338 <HAL_SD_IRQHandler+0x304>)
 800726c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800727c:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800728c:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800729c:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68da      	ldr	r2, [r3, #12]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072ac:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4618      	mov	r0, r3
 80072b4:	f002 fcd0 	bl	8009c58 <SDMMC_CmdStopTransfer>
 80072b8:	4602      	mov	r2, r0
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072be:	431a      	orrs	r2, r3
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68da      	ldr	r2, [r3, #12]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072d2:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072dc:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f003 0308 	and.w	r3, r3, #8
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d00a      	beq.n	80072fe <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7f9 fdec 	bl	8000ed4 <HAL_SD_ErrorCallback>
}
 80072fc:	e04b      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007304:	2b00      	cmp	r3, #0
 8007306:	d046      	beq.n	8007396 <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730c:	2b00      	cmp	r3, #0
 800730e:	d042      	beq.n	8007396 <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800731e:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2200      	movs	r2, #0
 8007326:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f7f9 fdcf 	bl	8000ed4 <HAL_SD_ErrorCallback>
}
 8007336:	e02e      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
 8007338:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d025      	beq.n	8007396 <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007352:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800735a:	f003 0304 	and.w	r3, r3, #4
 800735e:	2b00      	cmp	r3, #0
 8007360:	d10c      	bne.n	800737c <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f003 0320 	and.w	r3, r3, #32
 8007368:	2b00      	cmp	r3, #0
 800736a:	d003      	beq.n	8007374 <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f001 f83d 	bl	80083ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8007372:	e010      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f001 f825 	bl	80083c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800737a:	e00c      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 0320 	and.w	r3, r3, #32
 8007382:	2b00      	cmp	r3, #0
 8007384:	d003      	beq.n	800738e <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f001 f826 	bl	80083d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800738c:	e003      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 f80e 	bl	80083b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8007394:	e7ff      	b.n	8007396 <HAL_SD_IRQHandler+0x362>
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}
 800739e:	bf00      	nop

080073a0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ae:	0f9b      	lsrs	r3, r3, #30
 80073b0:	b2da      	uxtb	r2, r3
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ba:	0e9b      	lsrs	r3, r3, #26
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	f003 030f 	and.w	r3, r3, #15
 80073c2:	b2da      	uxtb	r2, r3
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073cc:	0e1b      	lsrs	r3, r3, #24
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	f003 0303 	and.w	r3, r3, #3
 80073d4:	b2da      	uxtb	r2, r3
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073de:	0c1b      	lsrs	r3, r3, #16
 80073e0:	b2da      	uxtb	r2, r3
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ea:	0a1b      	lsrs	r3, r3, #8
 80073ec:	b2da      	uxtb	r2, r3
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	b2da      	uxtb	r2, r3
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007400:	0d1b      	lsrs	r3, r3, #20
 8007402:	b29a      	uxth	r2, r3
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800740c:	0c1b      	lsrs	r3, r3, #16
 800740e:	b2db      	uxtb	r3, r3
 8007410:	f003 030f 	and.w	r3, r3, #15
 8007414:	b2da      	uxtb	r2, r3
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800741e:	0bdb      	lsrs	r3, r3, #15
 8007420:	b2db      	uxtb	r3, r3
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	b2da      	uxtb	r2, r3
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007430:	0b9b      	lsrs	r3, r3, #14
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	b2da      	uxtb	r2, r3
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007442:	0b5b      	lsrs	r3, r3, #13
 8007444:	b2db      	uxtb	r3, r3
 8007446:	f003 0301 	and.w	r3, r3, #1
 800744a:	b2da      	uxtb	r2, r3
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007454:	0b1b      	lsrs	r3, r3, #12
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	2200      	movs	r2, #0
 8007466:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	2b00      	cmp	r3, #0
 800746e:	d163      	bne.n	8007538 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007474:	009a      	lsls	r2, r3, #2
 8007476:	f640 73fc 	movw	r3, #4092	; 0xffc
 800747a:	4013      	ands	r3, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8007480:	0f92      	lsrs	r2, r2, #30
 8007482:	431a      	orrs	r2, r3
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800748c:	0edb      	lsrs	r3, r3, #27
 800748e:	b2db      	uxtb	r3, r3
 8007490:	f003 0307 	and.w	r3, r3, #7
 8007494:	b2da      	uxtb	r2, r3
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800749e:	0e1b      	lsrs	r3, r3, #24
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0307 	and.w	r3, r3, #7
 80074a6:	b2da      	uxtb	r2, r3
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074b0:	0d5b      	lsrs	r3, r3, #21
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	f003 0307 	and.w	r3, r3, #7
 80074b8:	b2da      	uxtb	r2, r3
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074c2:	0c9b      	lsrs	r3, r3, #18
 80074c4:	b2db      	uxtb	r3, r3
 80074c6:	f003 0307 	and.w	r3, r3, #7
 80074ca:	b2da      	uxtb	r2, r3
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074d4:	0bdb      	lsrs	r3, r3, #15
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	f003 0307 	and.w	r3, r3, #7
 80074dc:	b2da      	uxtb	r2, r3
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	1c5a      	adds	r2, r3, #1
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	7e1b      	ldrb	r3, [r3, #24]
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f003 0307 	and.w	r3, r3, #7
 80074f6:	3302      	adds	r3, #2
 80074f8:	2201      	movs	r2, #1
 80074fa:	fa02 f303 	lsl.w	r3, r2, r3
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007502:	fb03 f202 	mul.w	r2, r3, r2
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	7a1b      	ldrb	r3, [r3, #8]
 800750e:	b2db      	uxtb	r3, r3
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	2201      	movs	r2, #1
 8007516:	409a      	lsls	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007524:	0a52      	lsrs	r2, r2, #9
 8007526:	fb03 f202 	mul.w	r2, r3, r2
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007534:	655a      	str	r2, [r3, #84]	; 0x54
 8007536:	e031      	b.n	800759c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800753c:	2b01      	cmp	r3, #1
 800753e:	d11d      	bne.n	800757c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007544:	041b      	lsls	r3, r3, #16
 8007546:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800754e:	0c1b      	lsrs	r3, r3, #16
 8007550:	431a      	orrs	r2, r3
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	691b      	ldr	r3, [r3, #16]
 800755a:	3301      	adds	r3, #1
 800755c:	029a      	lsls	r2, r3, #10
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007570:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	655a      	str	r2, [r3, #84]	; 0x54
 800757a:	e00f      	b.n	800759c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a58      	ldr	r2, [pc, #352]	; (80076e4 <HAL_SD_GetCardCSD+0x344>)
 8007582:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007588:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2201      	movs	r2, #1
 8007594:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	e09d      	b.n	80076d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075a0:	0b9b      	lsrs	r3, r3, #14
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0301 	and.w	r3, r3, #1
 80075a8:	b2da      	uxtb	r2, r3
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075b2:	09db      	lsrs	r3, r3, #7
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075ca:	b2da      	uxtb	r2, r3
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075d4:	0fdb      	lsrs	r3, r3, #31
 80075d6:	b2da      	uxtb	r2, r3
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075e0:	0f5b      	lsrs	r3, r3, #29
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	f003 0303 	and.w	r3, r3, #3
 80075e8:	b2da      	uxtb	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80075f2:	0e9b      	lsrs	r3, r3, #26
 80075f4:	b2db      	uxtb	r3, r3
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007604:	0d9b      	lsrs	r3, r3, #22
 8007606:	b2db      	uxtb	r3, r3
 8007608:	f003 030f 	and.w	r3, r3, #15
 800760c:	b2da      	uxtb	r2, r3
 800760e:	683b      	ldr	r3, [r7, #0]
 8007610:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007616:	0d5b      	lsrs	r3, r3, #21
 8007618:	b2db      	uxtb	r3, r3
 800761a:	f003 0301 	and.w	r3, r3, #1
 800761e:	b2da      	uxtb	r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007632:	0c1b      	lsrs	r3, r3, #16
 8007634:	b2db      	uxtb	r3, r3
 8007636:	f003 0301 	and.w	r3, r3, #1
 800763a:	b2da      	uxtb	r2, r3
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007646:	0bdb      	lsrs	r3, r3, #15
 8007648:	b2db      	uxtb	r3, r3
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	b2da      	uxtb	r2, r3
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800765a:	0b9b      	lsrs	r3, r3, #14
 800765c:	b2db      	uxtb	r3, r3
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	b2da      	uxtb	r2, r3
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800766e:	0b5b      	lsrs	r3, r3, #13
 8007670:	b2db      	uxtb	r3, r3
 8007672:	f003 0301 	and.w	r3, r3, #1
 8007676:	b2da      	uxtb	r2, r3
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007682:	0b1b      	lsrs	r3, r3, #12
 8007684:	b2db      	uxtb	r3, r3
 8007686:	f003 0301 	and.w	r3, r3, #1
 800768a:	b2da      	uxtb	r2, r3
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007696:	0a9b      	lsrs	r3, r3, #10
 8007698:	b2db      	uxtb	r3, r3
 800769a:	f003 0303 	and.w	r3, r3, #3
 800769e:	b2da      	uxtb	r2, r3
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	f003 0303 	and.w	r3, r3, #3
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076be:	085b      	lsrs	r3, r3, #1
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr
 80076e4:	1fe00fff 	.word	0x1fe00fff

080076e8 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b094      	sub	sp, #80	; 0x50
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80076f2:	2300      	movs	r3, #0
 80076f4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076fe:	b2db      	uxtb	r3, r3
 8007700:	2b03      	cmp	r3, #3
 8007702:	d101      	bne.n	8007708 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e0a7      	b.n	8007858 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8007708:	f107 0308 	add.w	r3, r7, #8
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 fb60 	bl	8007dd4 <SD_SendSDStatus>
 8007714:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007718:	2b00      	cmp	r3, #0
 800771a:	d011      	beq.n	8007740 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a4f      	ldr	r2, [pc, #316]	; (8007860 <HAL_SD_GetCardStatus+0x178>)
 8007722:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007728:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800772a:	431a      	orrs	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2201      	movs	r2, #1
 8007734:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8007738:	2301      	movs	r3, #1
 800773a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800773e:	e070      	b.n	8007822 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	099b      	lsrs	r3, r3, #6
 8007744:	b2db      	uxtb	r3, r3
 8007746:	f003 0303 	and.w	r3, r3, #3
 800774a:	b2da      	uxtb	r2, r3
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	095b      	lsrs	r3, r3, #5
 8007754:	b2db      	uxtb	r3, r3
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	683b      	ldr	r3, [r7, #0]
 800775e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	0a1b      	lsrs	r3, r3, #8
 8007764:	b29b      	uxth	r3, r3
 8007766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800776a:	b29a      	uxth	r2, r3
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	0e1b      	lsrs	r3, r3, #24
 8007770:	b29b      	uxth	r3, r3
 8007772:	4313      	orrs	r3, r2
 8007774:	b29a      	uxth	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	061a      	lsls	r2, r3, #24
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	021b      	lsls	r3, r3, #8
 8007782:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007786:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	0a1b      	lsrs	r3, r3, #8
 800778c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007790:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	0e1b      	lsrs	r3, r3, #24
 8007796:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	b2da      	uxtb	r2, r3
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	0a1b      	lsrs	r3, r3, #8
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	0d1b      	lsrs	r3, r3, #20
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	f003 030f 	and.w	r3, r3, #15
 80077b8:	b2da      	uxtb	r2, r3
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	0c1b      	lsrs	r3, r3, #16
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077c8:	b29a      	uxth	r2, r3
 80077ca:	697b      	ldr	r3, [r7, #20]
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b29a      	uxth	r2, r3
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80077da:	697b      	ldr	r3, [r7, #20]
 80077dc:	0a9b      	lsrs	r3, r3, #10
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	0a1b      	lsrs	r3, r3, #8
 80077ee:	b2db      	uxtb	r3, r3
 80077f0:	f003 0303 	and.w	r3, r3, #3
 80077f4:	b2da      	uxtb	r2, r3
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	091b      	lsrs	r3, r3, #4
 80077fe:	b2db      	uxtb	r3, r3
 8007800:	f003 030f 	and.w	r3, r3, #15
 8007804:	b2da      	uxtb	r2, r3
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	f003 030f 	and.w	r3, r3, #15
 8007812:	b2da      	uxtb	r2, r3
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8007818:	69bb      	ldr	r3, [r7, #24]
 800781a:	0e1b      	lsrs	r3, r3, #24
 800781c:	b2da      	uxtb	r2, r3
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f44f 7100 	mov.w	r1, #512	; 0x200
 800782a:	4618      	mov	r0, r3
 800782c:	f002 f964 	bl	8009af8 <SDMMC_CmdBlockLength>
 8007830:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8007832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007834:	2b00      	cmp	r3, #0
 8007836:	d00d      	beq.n	8007854 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a08      	ldr	r2, [pc, #32]	; (8007860 <HAL_SD_GetCardStatus+0x178>)
 800783e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007844:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 800784e:	2301      	movs	r3, #1
 8007850:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8007854:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8007858:	4618      	mov	r0, r3
 800785a:	3750      	adds	r7, #80	; 0x50
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	1fe00fff 	.word	0x1fe00fff

08007864 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
 800786c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800789a:	683b      	ldr	r3, [r7, #0]
 800789c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80078ae:	2300      	movs	r3, #0
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80078bc:	b590      	push	{r4, r7, lr}
 80078be:	b08d      	sub	sp, #52	; 0x34
 80078c0:	af02      	add	r7, sp, #8
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 80078c6:	2300      	movs	r3, #0
 80078c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2203      	movs	r2, #3
 80078d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078d8:	2b03      	cmp	r3, #3
 80078da:	d02e      	beq.n	800793a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078e2:	d106      	bne.n	80078f2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	635a      	str	r2, [r3, #52]	; 0x34
 80078f0:	e029      	b.n	8007946 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80078f2:	683b      	ldr	r3, [r7, #0]
 80078f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80078f8:	d10a      	bne.n	8007910 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f000 fb62 	bl	8007fc4 <SD_WideBus_Enable>
 8007900:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007906:	6a3b      	ldr	r3, [r7, #32]
 8007908:	431a      	orrs	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	635a      	str	r2, [r3, #52]	; 0x34
 800790e:	e01a      	b.n	8007946 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d10a      	bne.n	800792c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb9f 	bl	800805a <SD_WideBus_Disable>
 800791c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007922:	6a3b      	ldr	r3, [r7, #32]
 8007924:	431a      	orrs	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	635a      	str	r2, [r3, #52]	; 0x34
 800792a:	e00c      	b.n	8007946 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007930:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	635a      	str	r2, [r3, #52]	; 0x34
 8007938:	e005      	b.n	8007946 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800794a:	2b00      	cmp	r3, #0
 800794c:	d007      	beq.n	800795e <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a5e      	ldr	r2, [pc, #376]	; (8007acc <HAL_SD_ConfigWideBusOperation+0x210>)
 8007954:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007956:	2301      	movs	r3, #1
 8007958:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800795c:	e094      	b.n	8007a88 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800795e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007962:	f7fd fc17 	bl	8005194 <HAL_RCCEx_GetPeriphCLKFreq>
 8007966:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8007968:	69fb      	ldr	r3, [r7, #28]
 800796a:	2b00      	cmp	r3, #0
 800796c:	f000 8083 	beq.w	8007a76 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	691b      	ldr	r3, [r3, #16]
 8007984:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695a      	ldr	r2, [r3, #20]
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4950      	ldr	r1, [pc, #320]	; (8007ad0 <HAL_SD_ConfigWideBusOperation+0x214>)
 800798e:	fba1 1303 	umull	r1, r3, r1, r3
 8007992:	0e1b      	lsrs	r3, r3, #24
 8007994:	429a      	cmp	r2, r3
 8007996:	d303      	bcc.n	80079a0 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	695b      	ldr	r3, [r3, #20]
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	e05a      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079a8:	d103      	bne.n	80079b2 <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	695b      	ldr	r3, [r3, #20]
 80079ae:	61bb      	str	r3, [r7, #24]
 80079b0:	e051      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079ba:	d126      	bne.n	8007a0a <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10e      	bne.n	80079e2 <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	4a43      	ldr	r2, [pc, #268]	; (8007ad4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d906      	bls.n	80079da <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	4a40      	ldr	r2, [pc, #256]	; (8007ad0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079d0:	fba2 2303 	umull	r2, r3, r2, r3
 80079d4:	0e5b      	lsrs	r3, r3, #25
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	e03d      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	695b      	ldr	r3, [r3, #20]
 80079de:	61bb      	str	r3, [r7, #24]
 80079e0:	e039      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	695b      	ldr	r3, [r3, #20]
 80079e6:	005b      	lsls	r3, r3, #1
 80079e8:	69fa      	ldr	r2, [r7, #28]
 80079ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ee:	4a39      	ldr	r2, [pc, #228]	; (8007ad4 <HAL_SD_ConfigWideBusOperation+0x218>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d906      	bls.n	8007a02 <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	4a36      	ldr	r2, [pc, #216]	; (8007ad0 <HAL_SD_ConfigWideBusOperation+0x214>)
 80079f8:	fba2 2303 	umull	r2, r3, r2, r3
 80079fc:	0e5b      	lsrs	r3, r3, #25
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e029      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	695b      	ldr	r3, [r3, #20]
 8007a06:	61bb      	str	r3, [r7, #24]
 8007a08:	e025      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	695b      	ldr	r3, [r3, #20]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d10e      	bne.n	8007a30 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8007a12:	69fb      	ldr	r3, [r7, #28]
 8007a14:	4a30      	ldr	r2, [pc, #192]	; (8007ad8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d906      	bls.n	8007a28 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	4a2c      	ldr	r2, [pc, #176]	; (8007ad0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a22:	0e1b      	lsrs	r3, r3, #24
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e016      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	695b      	ldr	r3, [r3, #20]
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	e012      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	69fa      	ldr	r2, [r7, #28]
 8007a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a3c:	4a26      	ldr	r2, [pc, #152]	; (8007ad8 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d906      	bls.n	8007a50 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	4a22      	ldr	r2, [pc, #136]	; (8007ad0 <HAL_SD_ConfigWideBusOperation+0x214>)
 8007a46:	fba2 2303 	umull	r2, r3, r2, r3
 8007a4a:	0e1b      	lsrs	r3, r3, #24
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e002      	b.n	8007a56 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	695b      	ldr	r3, [r3, #20]
 8007a54:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681c      	ldr	r4, [r3, #0]
 8007a5a:	466a      	mov	r2, sp
 8007a5c:	f107 0314 	add.w	r3, r7, #20
 8007a60:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007a64:	e882 0003 	stmia.w	r2, {r0, r1}
 8007a68:	f107 0308 	add.w	r3, r7, #8
 8007a6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a6e:	4620      	mov	r0, r4
 8007a70:	f001 ff64 	bl	800993c <SDMMC_Init>
 8007a74:	e008      	b.n	8007a88 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007a90:	4618      	mov	r0, r3
 8007a92:	f002 f831 	bl	8009af8 <SDMMC_CmdBlockLength>
 8007a96:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007a98:	6a3b      	ldr	r3, [r7, #32]
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00c      	beq.n	8007ab8 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a0a      	ldr	r2, [pc, #40]	; (8007acc <HAL_SD_ConfigWideBusOperation+0x210>)
 8007aa4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2201      	movs	r2, #1
 8007abc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8007ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	372c      	adds	r7, #44	; 0x2c
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd90      	pop	{r4, r7, pc}
 8007acc:	1fe00fff 	.word	0x1fe00fff
 8007ad0:	55e63b89 	.word	0x55e63b89
 8007ad4:	02faf080 	.word	0x02faf080
 8007ad8:	017d7840 	.word	0x017d7840

08007adc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b086      	sub	sp, #24
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007ae8:	f107 030c 	add.w	r3, r7, #12
 8007aec:	4619      	mov	r1, r3
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fa40 	bl	8007f74 <SD_SendStatus>
 8007af4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d005      	beq.n	8007b08 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	431a      	orrs	r2, r3
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	0a5b      	lsrs	r3, r3, #9
 8007b0c:	f003 030f 	and.w	r3, r3, #15
 8007b10:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007b12:	693b      	ldr	r3, [r7, #16]
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3718      	adds	r7, #24
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b090      	sub	sp, #64	; 0x40
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8007b28:	f7f9 ffb0 	bl	8001a8c <HAL_GetTick>
 8007b2c:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4618      	mov	r0, r3
 8007b34:	f001 ff5b 	bl	80099ee <SDMMC_GetPowerState>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d102      	bne.n	8007b44 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007b3e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007b42:	e0b5      	b.n	8007cb0 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	2b03      	cmp	r3, #3
 8007b4a:	d02e      	beq.n	8007baa <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f002 f9a6 	bl	8009ea2 <SDMMC_CmdSendCID>
 8007b56:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d001      	beq.n	8007b62 <SD_InitCard+0x46>
    {
      return errorstate;
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b60:	e0a6      	b.n	8007cb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2100      	movs	r1, #0
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f001 ff86 	bl	8009a7a <SDMMC_GetResponse>
 8007b6e:	4602      	mov	r2, r0
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	2104      	movs	r1, #4
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f001 ff7d 	bl	8009a7a <SDMMC_GetResponse>
 8007b80:	4602      	mov	r2, r0
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2108      	movs	r1, #8
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	f001 ff74 	bl	8009a7a <SDMMC_GetResponse>
 8007b92:	4602      	mov	r2, r0
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	210c      	movs	r1, #12
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	f001 ff6b 	bl	8009a7a <SDMMC_GetResponse>
 8007ba4:	4602      	mov	r2, r0
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bae:	2b03      	cmp	r3, #3
 8007bb0:	d01d      	beq.n	8007bee <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8007bb2:	e019      	b.n	8007be8 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f107 020a 	add.w	r2, r7, #10
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	f002 f9ae 	bl	8009f20 <SDMMC_CmdSetRelAdd>
 8007bc4:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d001      	beq.n	8007bd0 <SD_InitCard+0xb4>
      {
        return errorstate;
 8007bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bce:	e06f      	b.n	8007cb0 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8007bd0:	f7f9 ff5c 	bl	8001a8c <HAL_GetTick>
 8007bd4:	4602      	mov	r2, r0
 8007bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd8:	1ad3      	subs	r3, r2, r3
 8007bda:	f241 3287 	movw	r2, #4999	; 0x1387
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d902      	bls.n	8007be8 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8007be2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007be6:	e063      	b.n	8007cb0 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8007be8:	897b      	ldrh	r3, [r7, #10]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d0e2      	beq.n	8007bb4 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d036      	beq.n	8007c64 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007bf6:	897b      	ldrh	r3, [r7, #10]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681a      	ldr	r2, [r3, #0]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c06:	041b      	lsls	r3, r3, #16
 8007c08:	4619      	mov	r1, r3
 8007c0a:	4610      	mov	r0, r2
 8007c0c:	f002 f968 	bl	8009ee0 <SDMMC_CmdSendCSD>
 8007c10:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8007c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d001      	beq.n	8007c1c <SD_InitCard+0x100>
    {
      return errorstate;
 8007c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1a:	e049      	b.n	8007cb0 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2100      	movs	r1, #0
 8007c22:	4618      	mov	r0, r3
 8007c24:	f001 ff29 	bl	8009a7a <SDMMC_GetResponse>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2104      	movs	r1, #4
 8007c34:	4618      	mov	r0, r3
 8007c36:	f001 ff20 	bl	8009a7a <SDMMC_GetResponse>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	2108      	movs	r1, #8
 8007c46:	4618      	mov	r0, r3
 8007c48:	f001 ff17 	bl	8009a7a <SDMMC_GetResponse>
 8007c4c:	4602      	mov	r2, r0
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	210c      	movs	r1, #12
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f001 ff0e 	bl	8009a7a <SDMMC_GetResponse>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2104      	movs	r1, #4
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f001 ff05 	bl	8009a7a <SDMMC_GetResponse>
 8007c70:	4603      	mov	r3, r0
 8007c72:	0d1a      	lsrs	r2, r3, #20
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007c78:	f107 030c 	add.w	r3, r7, #12
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f7ff fb8e 	bl	80073a0 <HAL_SD_GetCardCSD>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007c8a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007c8e:	e00f      	b.n	8007cb0 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c98:	041b      	lsls	r3, r3, #16
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	f002 f817 	bl	8009cd0 <SDMMC_CmdSelDesel>
 8007ca2:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8007ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <SD_InitCard+0x192>
  {
    return errorstate;
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	e000      	b.n	8007cb0 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007cae:	2300      	movs	r3, #0
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3740      	adds	r7, #64	; 0x40
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b086      	sub	sp, #24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f002 f820 	bl	8009d16 <SDMMC_CmdGoIdleState>
 8007cd6:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <SD_PowerON+0x2a>
  {
    return errorstate;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	e072      	b.n	8007dc8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f002 f833 	bl	8009d52 <SDMMC_CmdOperCond>
 8007cec:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007cf4:	d10d      	bne.n	8007d12 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f002 f808 	bl	8009d16 <SDMMC_CmdGoIdleState>
 8007d06:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <SD_PowerON+0x60>
    {
      return errorstate;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	e05a      	b.n	8007dc8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2201      	movs	r2, #1
 8007d16:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d137      	bne.n	8007d90 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	2100      	movs	r1, #0
 8007d26:	4618      	mov	r0, r3
 8007d28:	f002 f833 	bl	8009d92 <SDMMC_CmdAppCommand>
 8007d2c:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d02d      	beq.n	8007d90 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d38:	e046      	b.n	8007dc8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	2100      	movs	r1, #0
 8007d40:	4618      	mov	r0, r3
 8007d42:	f002 f826 	bl	8009d92 <SDMMC_CmdAppCommand>
 8007d46:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d001      	beq.n	8007d52 <SD_PowerON+0x9a>
    {
      return errorstate;
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	e03a      	b.n	8007dc8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	491e      	ldr	r1, [pc, #120]	; (8007dd0 <SD_PowerON+0x118>)
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 f83d 	bl	8009dd8 <SDMMC_CmdAppOperCommand>
 8007d5e:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d002      	beq.n	8007d6c <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007d66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007d6a:	e02d      	b.n	8007dc8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2100      	movs	r1, #0
 8007d72:	4618      	mov	r0, r3
 8007d74:	f001 fe81 	bl	8009a7a <SDMMC_GetResponse>
 8007d78:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	0fdb      	lsrs	r3, r3, #31
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d101      	bne.n	8007d86 <SD_PowerON+0xce>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e000      	b.n	8007d88 <SD_PowerON+0xd0>
 8007d86:	2300      	movs	r3, #0
 8007d88:	613b      	str	r3, [r7, #16]

    count++;
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	3301      	adds	r3, #1
 8007d8e:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d802      	bhi.n	8007da0 <SD_PowerON+0xe8>
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d0cc      	beq.n	8007d3a <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d902      	bls.n	8007db0 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007daa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007dae:	e00b      	b.n	8007dc8 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d002      	beq.n	8007dc6 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8007dc6:	2300      	movs	r3, #0
}
 8007dc8:	4618      	mov	r0, r3
 8007dca:	3718      	adds	r7, #24
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	c1100000 	.word	0xc1100000

08007dd4 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b08c      	sub	sp, #48	; 0x30
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007dde:	f7f9 fe55 	bl	8001a8c <HAL_GetTick>
 8007de2:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	2100      	movs	r1, #0
 8007dee:	4618      	mov	r0, r3
 8007df0:	f001 fe43 	bl	8009a7a <SDMMC_GetResponse>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007dfe:	d102      	bne.n	8007e06 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007e00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007e04:	e0b0      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2140      	movs	r1, #64	; 0x40
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f001 fe73 	bl	8009af8 <SDMMC_CmdBlockLength>
 8007e12:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e14:	6a3b      	ldr	r3, [r7, #32]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007e22:	6a3b      	ldr	r3, [r7, #32]
 8007e24:	e0a0      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	041b      	lsls	r3, r3, #16
 8007e30:	4619      	mov	r1, r3
 8007e32:	4610      	mov	r0, r2
 8007e34:	f001 ffad 	bl	8009d92 <SDMMC_CmdAppCommand>
 8007e38:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e3a:	6a3b      	ldr	r3, [r7, #32]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d005      	beq.n	8007e4c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	e08d      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8007e50:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8007e52:	2340      	movs	r3, #64	; 0x40
 8007e54:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8007e56:	2360      	movs	r3, #96	; 0x60
 8007e58:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007e5a:	2302      	movs	r3, #2
 8007e5c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e62:	2301      	movs	r3, #1
 8007e64:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f107 0208 	add.w	r2, r7, #8
 8007e6e:	4611      	mov	r1, r2
 8007e70:	4618      	mov	r0, r3
 8007e72:	f001 fe15 	bl	8009aa0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f002 f895 	bl	8009faa <SDMMC_CmdStatusRegister>
 8007e80:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02b      	beq.n	8007ee0 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	e069      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ea6:	e00d      	b.n	8007ec4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4618      	mov	r0, r3
 8007eae:	f001 fd6f 	bl	8009990 <SDMMC_ReadFIFO>
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eb6:	601a      	str	r2, [r3, #0]
        pData++;
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	3304      	adds	r3, #4
 8007ebc:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8007ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec0:	3301      	adds	r3, #1
 8007ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ec6:	2b07      	cmp	r3, #7
 8007ec8:	d9ee      	bls.n	8007ea8 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007eca:	f7f9 fddf 	bl	8001a8c <HAL_GetTick>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	1ad3      	subs	r3, r2, r3
 8007ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ed8:	d102      	bne.n	8007ee0 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007eda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007ede:	e043      	b.n	8007f68 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ee6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d0d2      	beq.n	8007e94 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef4:	f003 0308 	and.w	r3, r3, #8
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d001      	beq.n	8007f00 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007efc:	2308      	movs	r3, #8
 8007efe:	e033      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f06:	f003 0302 	and.w	r3, r3, #2
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f0e:	2302      	movs	r3, #2
 8007f10:	e02a      	b.n	8007f68 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f18:	f003 0320 	and.w	r3, r3, #32
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d017      	beq.n	8007f50 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8007f20:	2320      	movs	r3, #32
 8007f22:	e021      	b.n	8007f68 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f001 fd31 	bl	8009990 <SDMMC_ReadFIFO>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f32:	601a      	str	r2, [r3, #0]
    pData++;
 8007f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f36:	3304      	adds	r3, #4
 8007f38:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007f3a:	f7f9 fda7 	bl	8001a8c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f48:	d102      	bne.n	8007f50 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007f4a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007f4e:	e00b      	b.n	8007f68 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e2      	bne.n	8007f24 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a03      	ldr	r2, [pc, #12]	; (8007f70 <SD_SendSDStatus+0x19c>)
 8007f64:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3730      	adds	r7, #48	; 0x30
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	18000f3a 	.word	0x18000f3a

08007f74 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d102      	bne.n	8007f8a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8007f84:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f88:	e018      	b.n	8007fbc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681a      	ldr	r2, [r3, #0]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f92:	041b      	lsls	r3, r3, #16
 8007f94:	4619      	mov	r1, r3
 8007f96:	4610      	mov	r0, r2
 8007f98:	f001 ffe4 	bl	8009f64 <SDMMC_CmdSendStatus>
 8007f9c:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	e009      	b.n	8007fbc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	2100      	movs	r1, #0
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f001 fd63 	bl	8009a7a <SDMMC_GetResponse>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b086      	sub	sp, #24
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2100      	movs	r1, #0
 8007fda:	4618      	mov	r0, r3
 8007fdc:	f001 fd4d 	bl	8009a7a <SDMMC_GetResponse>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fe6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007fea:	d102      	bne.n	8007ff2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007fec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007ff0:	e02f      	b.n	8008052 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007ff2:	f107 030c 	add.w	r3, r7, #12
 8007ff6:	4619      	mov	r1, r3
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f000 f879 	bl	80080f0 <SD_FindSCR>
 8007ffe:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	e023      	b.n	8008052 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01c      	beq.n	800804e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681a      	ldr	r2, [r3, #0]
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800801c:	041b      	lsls	r3, r3, #16
 800801e:	4619      	mov	r1, r3
 8008020:	4610      	mov	r0, r2
 8008022:	f001 feb6 	bl	8009d92 <SDMMC_CmdAppCommand>
 8008026:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008028:	697b      	ldr	r3, [r7, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800802e:	697b      	ldr	r3, [r7, #20]
 8008030:	e00f      	b.n	8008052 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2102      	movs	r1, #2
 8008038:	4618      	mov	r0, r3
 800803a:	f001 feed 	bl	8009e18 <SDMMC_CmdBusWidth>
 800803e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d001      	beq.n	800804a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	e003      	b.n	8008052 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800804a:	2300      	movs	r3, #0
 800804c:	e001      	b.n	8008052 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800804e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008052:	4618      	mov	r0, r3
 8008054:	3718      	adds	r7, #24
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b086      	sub	sp, #24
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8008062:	2300      	movs	r3, #0
 8008064:	60fb      	str	r3, [r7, #12]
 8008066:	2300      	movs	r3, #0
 8008068:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	2100      	movs	r1, #0
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fd02 	bl	8009a7a <SDMMC_GetResponse>
 8008076:	4603      	mov	r3, r0
 8008078:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800807c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008080:	d102      	bne.n	8008088 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008082:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008086:	e02f      	b.n	80080e8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008088:	f107 030c 	add.w	r3, r7, #12
 800808c:	4619      	mov	r1, r3
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f82e 	bl	80080f0 <SD_FindSCR>
 8008094:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d001      	beq.n	80080a0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	e023      	b.n	80080e8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01c      	beq.n	80080e4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b2:	041b      	lsls	r3, r3, #16
 80080b4:	4619      	mov	r1, r3
 80080b6:	4610      	mov	r0, r2
 80080b8:	f001 fe6b 	bl	8009d92 <SDMMC_CmdAppCommand>
 80080bc:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d001      	beq.n	80080c8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	e00f      	b.n	80080e8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2100      	movs	r1, #0
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 fea2 	bl	8009e18 <SDMMC_CmdBusWidth>
 80080d4:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	e003      	b.n	80080e8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80080e0:	2300      	movs	r3, #0
 80080e2:	e001      	b.n	80080e8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80080e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	3718      	adds	r7, #24
 80080ec:	46bd      	mov	sp, r7
 80080ee:	bd80      	pop	{r7, pc}

080080f0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b08e      	sub	sp, #56	; 0x38
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80080fa:	f7f9 fcc7 	bl	8001a8c <HAL_GetTick>
 80080fe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8008100:	2300      	movs	r3, #0
 8008102:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8008104:	2300      	movs	r3, #0
 8008106:	60bb      	str	r3, [r7, #8]
 8008108:	2300      	movs	r3, #0
 800810a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2108      	movs	r1, #8
 8008116:	4618      	mov	r0, r3
 8008118:	f001 fcee 	bl	8009af8 <SDMMC_CmdBlockLength>
 800811c:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800811e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008120:	2b00      	cmp	r3, #0
 8008122:	d001      	beq.n	8008128 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008126:	e0ad      	b.n	8008284 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008130:	041b      	lsls	r3, r3, #16
 8008132:	4619      	mov	r1, r3
 8008134:	4610      	mov	r0, r2
 8008136:	f001 fe2c 	bl	8009d92 <SDMMC_CmdAppCommand>
 800813a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800813c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008144:	e09e      	b.n	8008284 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008146:	f04f 33ff 	mov.w	r3, #4294967295
 800814a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800814c:	2308      	movs	r3, #8
 800814e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008150:	2330      	movs	r3, #48	; 0x30
 8008152:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008154:	2302      	movs	r3, #2
 8008156:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008158:	2300      	movs	r3, #0
 800815a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800815c:	2301      	movs	r3, #1
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f107 0210 	add.w	r2, r7, #16
 8008168:	4611      	mov	r1, r2
 800816a:	4618      	mov	r0, r3
 800816c:	f001 fc98 	bl	8009aa0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4618      	mov	r0, r3
 8008176:	f001 fe72 	bl	8009e5e <SDMMC_CmdSendSCR>
 800817a:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 800817c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817e:	2b00      	cmp	r3, #0
 8008180:	d027      	beq.n	80081d2 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8008182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008184:	e07e      	b.n	8008284 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008190:	2b00      	cmp	r3, #0
 8008192:	d113      	bne.n	80081bc <SD_FindSCR+0xcc>
 8008194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008196:	2b00      	cmp	r3, #0
 8008198:	d110      	bne.n	80081bc <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4618      	mov	r0, r3
 80081a0:	f001 fbf6 	bl	8009990 <SDMMC_ReadFIFO>
 80081a4:	4603      	mov	r3, r0
 80081a6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f001 fbef 	bl	8009990 <SDMMC_ReadFIFO>
 80081b2:	4603      	mov	r3, r0
 80081b4:	60fb      	str	r3, [r7, #12]
      index++;
 80081b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081b8:	3301      	adds	r3, #1
 80081ba:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80081bc:	f7f9 fc66 	bl	8001a8c <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081ca:	d102      	bne.n	80081d2 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80081cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80081d0:	e058      	b.n	8008284 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081d8:	f240 532a 	movw	r3, #1322	; 0x52a
 80081dc:	4013      	ands	r3, r2
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d0d1      	beq.n	8008186 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2208      	movs	r2, #8
 80081f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80081f8:	2308      	movs	r3, #8
 80081fa:	e043      	b.n	8008284 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d005      	beq.n	8008216 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2202      	movs	r2, #2
 8008210:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008212:	2302      	movs	r3, #2
 8008214:	e036      	b.n	8008284 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800821c:	f003 0320 	and.w	r3, r3, #32
 8008220:	2b00      	cmp	r3, #0
 8008222:	d005      	beq.n	8008230 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	2220      	movs	r2, #32
 800822a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800822c:	2320      	movs	r3, #32
 800822e:	e029      	b.n	8008284 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a15      	ldr	r2, [pc, #84]	; (800828c <SD_FindSCR+0x19c>)
 8008236:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	061a      	lsls	r2, r3, #24
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	021b      	lsls	r3, r3, #8
 8008240:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008244:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	0a1b      	lsrs	r3, r3, #8
 800824a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 800824e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	0e1b      	lsrs	r3, r3, #24
 8008254:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8008256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008258:	601a      	str	r2, [r3, #0]
    scr++;
 800825a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800825c:	3304      	adds	r3, #4
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	061a      	lsls	r2, r3, #24
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	021b      	lsls	r3, r3, #8
 8008268:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800826c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	0a1b      	lsrs	r3, r3, #8
 8008272:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8008276:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	0e1b      	lsrs	r3, r3, #24
 800827c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800827e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008280:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008282:	2300      	movs	r3, #0
}
 8008284:	4618      	mov	r0, r3
 8008286:	3738      	adds	r7, #56	; 0x38
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	18000f3a 	.word	0x18000f3a

08008290 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8008290:	b580      	push	{r7, lr}
 8008292:	b086      	sub	sp, #24
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800829c:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082a2:	2b1f      	cmp	r3, #31
 80082a4:	d936      	bls.n	8008314 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 80082a6:	2300      	movs	r3, #0
 80082a8:	617b      	str	r3, [r7, #20]
 80082aa:	e027      	b.n	80082fc <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4618      	mov	r0, r3
 80082b2:	f001 fb6d 	bl	8009990 <SDMMC_ReadFIFO>
 80082b6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	3301      	adds	r3, #1
 80082c4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	0a1b      	lsrs	r3, r3, #8
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	3301      	adds	r3, #1
 80082d4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	0c1b      	lsrs	r3, r3, #16
 80082da:	b2da      	uxtb	r2, r3
 80082dc:	693b      	ldr	r3, [r7, #16]
 80082de:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082e0:	693b      	ldr	r3, [r7, #16]
 80082e2:	3301      	adds	r3, #1
 80082e4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	0e1b      	lsrs	r3, r3, #24
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 80082f0:	693b      	ldr	r3, [r7, #16]
 80082f2:	3301      	adds	r3, #1
 80082f4:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 80082f6:	697b      	ldr	r3, [r7, #20]
 80082f8:	3301      	adds	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	2b07      	cmp	r3, #7
 8008300:	d9d4      	bls.n	80082ac <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	693a      	ldr	r2, [r7, #16]
 8008306:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800830c:	f1a3 0220 	sub.w	r2, r3, #32
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 8008314:	bf00      	nop
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b086      	sub	sp, #24
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	2b1f      	cmp	r3, #31
 8008330:	d93a      	bls.n	80083a8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 8008332:	2300      	movs	r3, #0
 8008334:	617b      	str	r3, [r7, #20]
 8008336:	e02b      	b.n	8008390 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	3301      	adds	r3, #1
 8008342:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008344:	693b      	ldr	r3, [r7, #16]
 8008346:	781b      	ldrb	r3, [r3, #0]
 8008348:	021a      	lsls	r2, r3, #8
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	4313      	orrs	r3, r2
 800834e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	3301      	adds	r3, #1
 8008354:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8008356:	693b      	ldr	r3, [r7, #16]
 8008358:	781b      	ldrb	r3, [r3, #0]
 800835a:	041a      	lsls	r2, r3, #16
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	061a      	lsls	r2, r3, #24
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	4313      	orrs	r3, r2
 8008372:	60fb      	str	r3, [r7, #12]
      tmp++;
 8008374:	693b      	ldr	r3, [r7, #16]
 8008376:	3301      	adds	r3, #1
 8008378:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f107 020c 	add.w	r2, r7, #12
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f001 fb10 	bl	80099aa <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800838a:	697b      	ldr	r3, [r7, #20]
 800838c:	3301      	adds	r3, #1
 800838e:	617b      	str	r3, [r7, #20]
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	2b07      	cmp	r3, #7
 8008394:	d9d0      	bls.n	8008338 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	693a      	ldr	r2, [r7, #16]
 800839a:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a1b      	ldr	r3, [r3, #32]
 80083a0:	f1a3 0220 	sub.w	r2, r3, #32
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	621a      	str	r2, [r3, #32]
  }
}
 80083a8:	bf00      	nop
 80083aa:	3718      	adds	r7, #24
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80083cc:	bf00      	nop
 80083ce:	370c      	adds	r7, #12
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80083d8:	b480      	push	{r7}
 80083da:	b083      	sub	sp, #12
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80083e0:	bf00      	nop
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80083f4:	bf00      	nop
 80083f6:	370c      	adds	r7, #12
 80083f8:	46bd      	mov	sp, r7
 80083fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fe:	4770      	bx	lr

08008400 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b082      	sub	sp, #8
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800840e:	2301      	movs	r3, #1
 8008410:	e042      	b.n	8008498 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008418:	2b00      	cmp	r3, #0
 800841a:	d106      	bne.n	800842a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7f8 fe61 	bl	80010ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2224      	movs	r2, #36	; 0x24
 800842e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	681a      	ldr	r2, [r3, #0]
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f022 0201 	bic.w	r2, r2, #1
 8008440:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fbfe 	bl	8008c44 <UART_SetConfig>
 8008448:	4603      	mov	r3, r0
 800844a:	2b01      	cmp	r3, #1
 800844c:	d101      	bne.n	8008452 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e022      	b.n	8008498 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	2b00      	cmp	r3, #0
 8008458:	d002      	beq.n	8008460 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800845a:	6878      	ldr	r0, [r7, #4]
 800845c:	f000 fef2 	bl	8009244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800846e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800847e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681a      	ldr	r2, [r3, #0]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008490:	6878      	ldr	r0, [r7, #4]
 8008492:	f000 ff79 	bl	8009388 <UART_CheckIdleState>
 8008496:	4603      	mov	r3, r0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b08a      	sub	sp, #40	; 0x28
 80084a4:	af02      	add	r7, sp, #8
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	603b      	str	r3, [r7, #0]
 80084ac:	4613      	mov	r3, r2
 80084ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d17b      	bne.n	80085b2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_UART_Transmit+0x26>
 80084c0:	88fb      	ldrh	r3, [r7, #6]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084c6:	2301      	movs	r3, #1
 80084c8:	e074      	b.n	80085b4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	2221      	movs	r2, #33	; 0x21
 80084d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80084da:	f7f9 fad7 	bl	8001a8c <HAL_GetTick>
 80084de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	88fa      	ldrh	r2, [r7, #6]
 80084e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	88fa      	ldrh	r2, [r7, #6]
 80084ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	689b      	ldr	r3, [r3, #8]
 80084f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084f8:	d108      	bne.n	800850c <HAL_UART_Transmit+0x6c>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	691b      	ldr	r3, [r3, #16]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d104      	bne.n	800850c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8008502:	2300      	movs	r3, #0
 8008504:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	61bb      	str	r3, [r7, #24]
 800850a:	e003      	b.n	8008514 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008510:	2300      	movs	r3, #0
 8008512:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008514:	e030      	b.n	8008578 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	2200      	movs	r2, #0
 800851e:	2180      	movs	r1, #128	; 0x80
 8008520:	68f8      	ldr	r0, [r7, #12]
 8008522:	f000 ffdb 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d005      	beq.n	8008538 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	2220      	movs	r2, #32
 8008530:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8008534:	2303      	movs	r3, #3
 8008536:	e03d      	b.n	80085b4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d10b      	bne.n	8008556 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	881b      	ldrh	r3, [r3, #0]
 8008542:	461a      	mov	r2, r3
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800854c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	3302      	adds	r3, #2
 8008552:	61bb      	str	r3, [r7, #24]
 8008554:	e007      	b.n	8008566 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	781a      	ldrb	r2, [r3, #0]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008560:	69fb      	ldr	r3, [r7, #28]
 8008562:	3301      	adds	r3, #1
 8008564:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800856c:	b29b      	uxth	r3, r3
 800856e:	3b01      	subs	r3, #1
 8008570:	b29a      	uxth	r2, r3
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800857e:	b29b      	uxth	r3, r3
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1c8      	bne.n	8008516 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	9300      	str	r3, [sp, #0]
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2200      	movs	r2, #0
 800858c:	2140      	movs	r1, #64	; 0x40
 800858e:	68f8      	ldr	r0, [r7, #12]
 8008590:	f000 ffa4 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 8008594:	4603      	mov	r3, r0
 8008596:	2b00      	cmp	r3, #0
 8008598:	d005      	beq.n	80085a6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2220      	movs	r2, #32
 800859e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 80085a2:	2303      	movs	r3, #3
 80085a4:	e006      	b.n	80085b4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2220      	movs	r2, #32
 80085aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	e000      	b.n	80085b4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80085b2:	2302      	movs	r3, #2
  }
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3720      	adds	r7, #32
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b0ba      	sub	sp, #232	; 0xe8
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	69db      	ldr	r3, [r3, #28]
 80085ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	689b      	ldr	r3, [r3, #8]
 80085de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80085e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80085e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80085ea:	4013      	ands	r3, r2
 80085ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80085f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d11b      	bne.n	8008630 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80085f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085fc:	f003 0320 	and.w	r3, r3, #32
 8008600:	2b00      	cmp	r3, #0
 8008602:	d015      	beq.n	8008630 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008608:	f003 0320 	and.w	r3, r3, #32
 800860c:	2b00      	cmp	r3, #0
 800860e:	d105      	bne.n	800861c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008610:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008614:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d009      	beq.n	8008630 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 82e3 	beq.w	8008bec <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
      }
      return;
 800862e:	e2dd      	b.n	8008bec <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008630:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008634:	2b00      	cmp	r3, #0
 8008636:	f000 8123 	beq.w	8008880 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800863a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800863e:	4b8d      	ldr	r3, [pc, #564]	; (8008874 <HAL_UART_IRQHandler+0x2b8>)
 8008640:	4013      	ands	r3, r2
 8008642:	2b00      	cmp	r3, #0
 8008644:	d106      	bne.n	8008654 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008646:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800864a:	4b8b      	ldr	r3, [pc, #556]	; (8008878 <HAL_UART_IRQHandler+0x2bc>)
 800864c:	4013      	ands	r3, r2
 800864e:	2b00      	cmp	r3, #0
 8008650:	f000 8116 	beq.w	8008880 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	2b00      	cmp	r3, #0
 800865e:	d011      	beq.n	8008684 <HAL_UART_IRQHandler+0xc8>
 8008660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008668:	2b00      	cmp	r3, #0
 800866a:	d00b      	beq.n	8008684 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2201      	movs	r2, #1
 8008672:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867a:	f043 0201 	orr.w	r2, r3, #1
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008684:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008688:	f003 0302 	and.w	r3, r3, #2
 800868c:	2b00      	cmp	r3, #0
 800868e:	d011      	beq.n	80086b4 <HAL_UART_IRQHandler+0xf8>
 8008690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00b      	beq.n	80086b4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2202      	movs	r2, #2
 80086a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086aa:	f043 0204 	orr.w	r2, r3, #4
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086b8:	f003 0304 	and.w	r3, r3, #4
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d011      	beq.n	80086e4 <HAL_UART_IRQHandler+0x128>
 80086c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c4:	f003 0301 	and.w	r3, r3, #1
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d00b      	beq.n	80086e4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2204      	movs	r2, #4
 80086d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086da:	f043 0202 	orr.w	r2, r3, #2
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80086e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d017      	beq.n	8008720 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80086f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80086f4:	f003 0320 	and.w	r3, r3, #32
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d105      	bne.n	8008708 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80086fc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008700:	4b5c      	ldr	r3, [pc, #368]	; (8008874 <HAL_UART_IRQHandler+0x2b8>)
 8008702:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00b      	beq.n	8008720 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	2208      	movs	r2, #8
 800870e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008716:	f043 0208 	orr.w	r2, r3, #8
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008728:	2b00      	cmp	r3, #0
 800872a:	d012      	beq.n	8008752 <HAL_UART_IRQHandler+0x196>
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008730:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d00c      	beq.n	8008752 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008740:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008748:	f043 0220 	orr.w	r2, r3, #32
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008758:	2b00      	cmp	r3, #0
 800875a:	f000 8249 	beq.w	8008bf0 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800875e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008762:	f003 0320 	and.w	r3, r3, #32
 8008766:	2b00      	cmp	r3, #0
 8008768:	d013      	beq.n	8008792 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800876a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800876e:	f003 0320 	and.w	r3, r3, #32
 8008772:	2b00      	cmp	r3, #0
 8008774:	d105      	bne.n	8008782 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008776:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800877a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d007      	beq.n	8008792 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008786:	2b00      	cmp	r3, #0
 8008788:	d003      	beq.n	8008792 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800878e:	6878      	ldr	r0, [r7, #4]
 8008790:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008798:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a6:	2b40      	cmp	r3, #64	; 0x40
 80087a8:	d005      	beq.n	80087b6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087aa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087ae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d054      	beq.n	8008860 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fef7 	bl	80095aa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087c6:	2b40      	cmp	r3, #64	; 0x40
 80087c8:	d146      	bne.n	8008858 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	3308      	adds	r3, #8
 80087d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80087d8:	e853 3f00 	ldrex	r3, [r3]
 80087dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80087e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80087e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80087e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	3308      	adds	r3, #8
 80087f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80087f6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80087fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008806:	e841 2300 	strex	r3, r2, [r1]
 800880a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800880e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d1d9      	bne.n	80087ca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800881c:	2b00      	cmp	r3, #0
 800881e:	d017      	beq.n	8008850 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008826:	4a15      	ldr	r2, [pc, #84]	; (800887c <HAL_UART_IRQHandler+0x2c0>)
 8008828:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008830:	4618      	mov	r0, r3
 8008832:	f7f9 fb6f 	bl	8001f14 <HAL_DMA_Abort_IT>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d019      	beq.n	8008870 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800884a:	4610      	mov	r0, r2
 800884c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800884e:	e00f      	b.n	8008870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f000 f9e1 	bl	8008c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008856:	e00b      	b.n	8008870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f9dd 	bl	8008c18 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800885e:	e007      	b.n	8008870 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 f9d9 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800886e:	e1bf      	b.n	8008bf0 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008870:	bf00      	nop
    return;
 8008872:	e1bd      	b.n	8008bf0 <HAL_UART_IRQHandler+0x634>
 8008874:	10000001 	.word	0x10000001
 8008878:	04000120 	.word	0x04000120
 800887c:	08009677 	.word	0x08009677

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008884:	2b01      	cmp	r3, #1
 8008886:	f040 8153 	bne.w	8008b30 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 0310 	and.w	r3, r3, #16
 8008892:	2b00      	cmp	r3, #0
 8008894:	f000 814c 	beq.w	8008b30 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800889c:	f003 0310 	and.w	r3, r3, #16
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	f000 8145 	beq.w	8008b30 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2210      	movs	r2, #16
 80088ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b8:	2b40      	cmp	r3, #64	; 0x40
 80088ba:	f040 80bb 	bne.w	8008a34 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80088cc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	f000 818f 	beq.w	8008bf4 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80088dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088e0:	429a      	cmp	r2, r3
 80088e2:	f080 8187 	bcs.w	8008bf4 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80088ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f003 0320 	and.w	r3, r3, #32
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f040 8087 	bne.w	8008a12 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800891c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	461a      	mov	r2, r3
 800892a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800892e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008932:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800893a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800893e:	e841 2300 	strex	r3, r2, [r1]
 8008942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800894a:	2b00      	cmp	r3, #0
 800894c:	d1da      	bne.n	8008904 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800895e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008960:	f023 0301 	bic.w	r3, r3, #1
 8008964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	3308      	adds	r3, #8
 800896e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800897a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800897e:	e841 2300 	strex	r3, r2, [r1]
 8008982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008986:	2b00      	cmp	r3, #0
 8008988:	d1e1      	bne.n	800894e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	3308      	adds	r3, #8
 8008990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008994:	e853 3f00 	ldrex	r3, [r3]
 8008998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800899a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800899c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3308      	adds	r3, #8
 80089aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80089ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80089b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80089b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80089b6:	e841 2300 	strex	r3, r2, [r1]
 80089ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80089bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d1e3      	bne.n	800898a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	2220      	movs	r2, #32
 80089c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089d8:	e853 3f00 	ldrex	r3, [r3]
 80089dc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80089de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e0:	f023 0310 	bic.w	r3, r3, #16
 80089e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	461a      	mov	r2, r3
 80089ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80089f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80089f4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80089f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80089fa:	e841 2300 	strex	r3, r2, [r1]
 80089fe:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008a00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1e4      	bne.n	80089d0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7f9 fa25 	bl	8001e5c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2202      	movs	r2, #2
 8008a16:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	1ad3      	subs	r3, r2, r3
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 f8fd 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008a32:	e0df      	b.n	8008bf4 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a40:	b29b      	uxth	r3, r3
 8008a42:	1ad3      	subs	r3, r2, r3
 8008a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008a4e:	b29b      	uxth	r3, r3
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 80d1 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8008a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f000 80cc 	beq.w	8008bf8 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a68:	e853 3f00 	ldrex	r3, [r3]
 8008a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a82:	647b      	str	r3, [r7, #68]	; 0x44
 8008a84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e4      	bne.n	8008a60 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aa0:	e853 3f00 	ldrex	r3, [r3]
 8008aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8008aa6:	6a3b      	ldr	r3, [r7, #32]
 8008aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008aac:	f023 0301 	bic.w	r3, r3, #1
 8008ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	3308      	adds	r3, #8
 8008aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008abe:	633a      	str	r2, [r7, #48]	; 0x30
 8008ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008ac6:	e841 2300 	strex	r3, r2, [r1]
 8008aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d1e1      	bne.n	8008a96 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2220      	movs	r2, #32
 8008ad6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	e853 3f00 	ldrex	r3, [r3]
 8008af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0310 	bic.w	r3, r3, #16
 8008afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008b08:	61fb      	str	r3, [r7, #28]
 8008b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0c:	69b9      	ldr	r1, [r7, #24]
 8008b0e:	69fa      	ldr	r2, [r7, #28]
 8008b10:	e841 2300 	strex	r3, r2, [r1]
 8008b14:	617b      	str	r3, [r7, #20]
   return(result);
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d1e4      	bne.n	8008ae6 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2202      	movs	r2, #2
 8008b20:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008b22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b26:	4619      	mov	r1, r3
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 f87f 	bl	8008c2c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b2e:	e063      	b.n	8008bf8 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d00e      	beq.n	8008b5a <HAL_UART_IRQHandler+0x59e>
 8008b3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b40:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d008      	beq.n	8008b5a <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008b50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fdd0 	bl	80096f8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b58:	e051      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d014      	beq.n	8008b90 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d105      	bne.n	8008b7e <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d008      	beq.n	8008b90 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d03a      	beq.n	8008bfc <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	4798      	blx	r3
    }
    return;
 8008b8e:	e035      	b.n	8008bfc <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d009      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x5f4>
 8008b9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d003      	beq.n	8008bb0 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 fd7a 	bl	80096a2 <UART_EndTransmit_IT>
    return;
 8008bae:	e026      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d009      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x614>
 8008bbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bc0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fda9 	bl	8009720 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bce:	e016      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d010      	beq.n	8008bfe <HAL_UART_IRQHandler+0x642>
 8008bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	da0c      	bge.n	8008bfe <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fd91 	bl	800970c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008bea:	e008      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
      return;
 8008bec:	bf00      	nop
 8008bee:	e006      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
    return;
 8008bf0:	bf00      	nop
 8008bf2:	e004      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
      return;
 8008bf4:	bf00      	nop
 8008bf6:	e002      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
      return;
 8008bf8:	bf00      	nop
 8008bfa:	e000      	b.n	8008bfe <HAL_UART_IRQHandler+0x642>
    return;
 8008bfc:	bf00      	nop
  }
}
 8008bfe:	37e8      	adds	r7, #232	; 0xe8
 8008c00:	46bd      	mov	sp, r7
 8008c02:	bd80      	pop	{r7, pc}

08008c04 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	460b      	mov	r3, r1
 8008c36:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008c38:	bf00      	nop
 8008c3a:	370c      	adds	r7, #12
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c48:	b08c      	sub	sp, #48	; 0x30
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	689a      	ldr	r2, [r3, #8]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	431a      	orrs	r2, r3
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	695b      	ldr	r3, [r3, #20]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	69db      	ldr	r3, [r3, #28]
 8008c68:	4313      	orrs	r3, r2
 8008c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	681a      	ldr	r2, [r3, #0]
 8008c72:	4baa      	ldr	r3, [pc, #680]	; (8008f1c <UART_SetConfig+0x2d8>)
 8008c74:	4013      	ands	r3, r2
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	6812      	ldr	r2, [r2, #0]
 8008c7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c8a:	697b      	ldr	r3, [r7, #20]
 8008c8c:	68da      	ldr	r2, [r3, #12]
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	430a      	orrs	r2, r1
 8008c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	699b      	ldr	r3, [r3, #24]
 8008c9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4a9f      	ldr	r2, [pc, #636]	; (8008f20 <UART_SetConfig+0x2dc>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d004      	beq.n	8008cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008ca6:	697b      	ldr	r3, [r7, #20]
 8008ca8:	6a1b      	ldr	r3, [r3, #32]
 8008caa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008cac:	4313      	orrs	r3, r2
 8008cae:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008cb0:	697b      	ldr	r3, [r7, #20]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	689b      	ldr	r3, [r3, #8]
 8008cb6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8008cba:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8008cbe:	697a      	ldr	r2, [r7, #20]
 8008cc0:	6812      	ldr	r2, [r2, #0]
 8008cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc4:	430b      	orrs	r3, r1
 8008cc6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cce:	f023 010f 	bic.w	r1, r3, #15
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	430a      	orrs	r2, r1
 8008cdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a90      	ldr	r2, [pc, #576]	; (8008f24 <UART_SetConfig+0x2e0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d125      	bne.n	8008d34 <UART_SetConfig+0xf0>
 8008ce8:	4b8f      	ldr	r3, [pc, #572]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008cee:	f003 0303 	and.w	r3, r3, #3
 8008cf2:	2b03      	cmp	r3, #3
 8008cf4:	d81a      	bhi.n	8008d2c <UART_SetConfig+0xe8>
 8008cf6:	a201      	add	r2, pc, #4	; (adr r2, 8008cfc <UART_SetConfig+0xb8>)
 8008cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cfc:	08008d0d 	.word	0x08008d0d
 8008d00:	08008d1d 	.word	0x08008d1d
 8008d04:	08008d15 	.word	0x08008d15
 8008d08:	08008d25 	.word	0x08008d25
 8008d0c:	2301      	movs	r3, #1
 8008d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d12:	e116      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d14:	2302      	movs	r3, #2
 8008d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d1a:	e112      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d1c:	2304      	movs	r3, #4
 8008d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d22:	e10e      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d24:	2308      	movs	r3, #8
 8008d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d2a:	e10a      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d32:	e106      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4a7c      	ldr	r2, [pc, #496]	; (8008f2c <UART_SetConfig+0x2e8>)
 8008d3a:	4293      	cmp	r3, r2
 8008d3c:	d138      	bne.n	8008db0 <UART_SetConfig+0x16c>
 8008d3e:	4b7a      	ldr	r3, [pc, #488]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d44:	f003 030c 	and.w	r3, r3, #12
 8008d48:	2b0c      	cmp	r3, #12
 8008d4a:	d82d      	bhi.n	8008da8 <UART_SetConfig+0x164>
 8008d4c:	a201      	add	r2, pc, #4	; (adr r2, 8008d54 <UART_SetConfig+0x110>)
 8008d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d52:	bf00      	nop
 8008d54:	08008d89 	.word	0x08008d89
 8008d58:	08008da9 	.word	0x08008da9
 8008d5c:	08008da9 	.word	0x08008da9
 8008d60:	08008da9 	.word	0x08008da9
 8008d64:	08008d99 	.word	0x08008d99
 8008d68:	08008da9 	.word	0x08008da9
 8008d6c:	08008da9 	.word	0x08008da9
 8008d70:	08008da9 	.word	0x08008da9
 8008d74:	08008d91 	.word	0x08008d91
 8008d78:	08008da9 	.word	0x08008da9
 8008d7c:	08008da9 	.word	0x08008da9
 8008d80:	08008da9 	.word	0x08008da9
 8008d84:	08008da1 	.word	0x08008da1
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d8e:	e0d8      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d90:	2302      	movs	r3, #2
 8008d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d96:	e0d4      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008d98:	2304      	movs	r3, #4
 8008d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008d9e:	e0d0      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008da0:	2308      	movs	r3, #8
 8008da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008da6:	e0cc      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008da8:	2310      	movs	r3, #16
 8008daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dae:	e0c8      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a5e      	ldr	r2, [pc, #376]	; (8008f30 <UART_SetConfig+0x2ec>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d125      	bne.n	8008e06 <UART_SetConfig+0x1c2>
 8008dba:	4b5b      	ldr	r3, [pc, #364]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008dc0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008dc4:	2b30      	cmp	r3, #48	; 0x30
 8008dc6:	d016      	beq.n	8008df6 <UART_SetConfig+0x1b2>
 8008dc8:	2b30      	cmp	r3, #48	; 0x30
 8008dca:	d818      	bhi.n	8008dfe <UART_SetConfig+0x1ba>
 8008dcc:	2b20      	cmp	r3, #32
 8008dce:	d00a      	beq.n	8008de6 <UART_SetConfig+0x1a2>
 8008dd0:	2b20      	cmp	r3, #32
 8008dd2:	d814      	bhi.n	8008dfe <UART_SetConfig+0x1ba>
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d002      	beq.n	8008dde <UART_SetConfig+0x19a>
 8008dd8:	2b10      	cmp	r3, #16
 8008dda:	d008      	beq.n	8008dee <UART_SetConfig+0x1aa>
 8008ddc:	e00f      	b.n	8008dfe <UART_SetConfig+0x1ba>
 8008dde:	2300      	movs	r3, #0
 8008de0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008de4:	e0ad      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008de6:	2302      	movs	r3, #2
 8008de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dec:	e0a9      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008dee:	2304      	movs	r3, #4
 8008df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008df4:	e0a5      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008df6:	2308      	movs	r3, #8
 8008df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008dfc:	e0a1      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008dfe:	2310      	movs	r3, #16
 8008e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e04:	e09d      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4a4a      	ldr	r2, [pc, #296]	; (8008f34 <UART_SetConfig+0x2f0>)
 8008e0c:	4293      	cmp	r3, r2
 8008e0e:	d125      	bne.n	8008e5c <UART_SetConfig+0x218>
 8008e10:	4b45      	ldr	r3, [pc, #276]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e16:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8008e1c:	d016      	beq.n	8008e4c <UART_SetConfig+0x208>
 8008e1e:	2bc0      	cmp	r3, #192	; 0xc0
 8008e20:	d818      	bhi.n	8008e54 <UART_SetConfig+0x210>
 8008e22:	2b80      	cmp	r3, #128	; 0x80
 8008e24:	d00a      	beq.n	8008e3c <UART_SetConfig+0x1f8>
 8008e26:	2b80      	cmp	r3, #128	; 0x80
 8008e28:	d814      	bhi.n	8008e54 <UART_SetConfig+0x210>
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d002      	beq.n	8008e34 <UART_SetConfig+0x1f0>
 8008e2e:	2b40      	cmp	r3, #64	; 0x40
 8008e30:	d008      	beq.n	8008e44 <UART_SetConfig+0x200>
 8008e32:	e00f      	b.n	8008e54 <UART_SetConfig+0x210>
 8008e34:	2300      	movs	r3, #0
 8008e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e3a:	e082      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e3c:	2302      	movs	r3, #2
 8008e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e42:	e07e      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e44:	2304      	movs	r3, #4
 8008e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e4a:	e07a      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e4c:	2308      	movs	r3, #8
 8008e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e52:	e076      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e54:	2310      	movs	r3, #16
 8008e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e5a:	e072      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a35      	ldr	r2, [pc, #212]	; (8008f38 <UART_SetConfig+0x2f4>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d12a      	bne.n	8008ebc <UART_SetConfig+0x278>
 8008e66:	4b30      	ldr	r3, [pc, #192]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e74:	d01a      	beq.n	8008eac <UART_SetConfig+0x268>
 8008e76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e7a:	d81b      	bhi.n	8008eb4 <UART_SetConfig+0x270>
 8008e7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e80:	d00c      	beq.n	8008e9c <UART_SetConfig+0x258>
 8008e82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e86:	d815      	bhi.n	8008eb4 <UART_SetConfig+0x270>
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d003      	beq.n	8008e94 <UART_SetConfig+0x250>
 8008e8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e90:	d008      	beq.n	8008ea4 <UART_SetConfig+0x260>
 8008e92:	e00f      	b.n	8008eb4 <UART_SetConfig+0x270>
 8008e94:	2300      	movs	r3, #0
 8008e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008e9a:	e052      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008e9c:	2302      	movs	r3, #2
 8008e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008ea2:	e04e      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008ea4:	2304      	movs	r3, #4
 8008ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eaa:	e04a      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008eac:	2308      	movs	r3, #8
 8008eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eb2:	e046      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008eb4:	2310      	movs	r3, #16
 8008eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008eba:	e042      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	4a17      	ldr	r2, [pc, #92]	; (8008f20 <UART_SetConfig+0x2dc>)
 8008ec2:	4293      	cmp	r3, r2
 8008ec4:	d13a      	bne.n	8008f3c <UART_SetConfig+0x2f8>
 8008ec6:	4b18      	ldr	r3, [pc, #96]	; (8008f28 <UART_SetConfig+0x2e4>)
 8008ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ecc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008ed0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008ed4:	d01a      	beq.n	8008f0c <UART_SetConfig+0x2c8>
 8008ed6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008eda:	d81b      	bhi.n	8008f14 <UART_SetConfig+0x2d0>
 8008edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ee0:	d00c      	beq.n	8008efc <UART_SetConfig+0x2b8>
 8008ee2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008ee6:	d815      	bhi.n	8008f14 <UART_SetConfig+0x2d0>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d003      	beq.n	8008ef4 <UART_SetConfig+0x2b0>
 8008eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ef0:	d008      	beq.n	8008f04 <UART_SetConfig+0x2c0>
 8008ef2:	e00f      	b.n	8008f14 <UART_SetConfig+0x2d0>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008efa:	e022      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008efc:	2302      	movs	r3, #2
 8008efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f02:	e01e      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008f04:	2304      	movs	r3, #4
 8008f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f0a:	e01a      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008f0c:	2308      	movs	r3, #8
 8008f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f12:	e016      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008f14:	2310      	movs	r3, #16
 8008f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008f1a:	e012      	b.n	8008f42 <UART_SetConfig+0x2fe>
 8008f1c:	cfff69f3 	.word	0xcfff69f3
 8008f20:	40008000 	.word	0x40008000
 8008f24:	40013800 	.word	0x40013800
 8008f28:	40021000 	.word	0x40021000
 8008f2c:	40004400 	.word	0x40004400
 8008f30:	40004800 	.word	0x40004800
 8008f34:	40004c00 	.word	0x40004c00
 8008f38:	40005000 	.word	0x40005000
 8008f3c:	2310      	movs	r3, #16
 8008f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	4ab0      	ldr	r2, [pc, #704]	; (8009208 <UART_SetConfig+0x5c4>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	f040 809b 	bne.w	8009084 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f4e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008f52:	2b08      	cmp	r3, #8
 8008f54:	d827      	bhi.n	8008fa6 <UART_SetConfig+0x362>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <UART_SetConfig+0x318>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08008f81 	.word	0x08008f81
 8008f60:	08008f89 	.word	0x08008f89
 8008f64:	08008f91 	.word	0x08008f91
 8008f68:	08008fa7 	.word	0x08008fa7
 8008f6c:	08008f97 	.word	0x08008f97
 8008f70:	08008fa7 	.word	0x08008fa7
 8008f74:	08008fa7 	.word	0x08008fa7
 8008f78:	08008fa7 	.word	0x08008fa7
 8008f7c:	08008f9f 	.word	0x08008f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f80:	f7fb fc8a 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8008f84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f86:	e014      	b.n	8008fb2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008f88:	f7fb fc9a 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 8008f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f8e:	e010      	b.n	8008fb2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f90:	4b9e      	ldr	r3, [pc, #632]	; (800920c <UART_SetConfig+0x5c8>)
 8008f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008f94:	e00d      	b.n	8008fb2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f96:	f7fb fbcd 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 8008f9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008f9c:	e009      	b.n	8008fb2 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008fa4:	e005      	b.n	8008fb2 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008faa:	2301      	movs	r3, #1
 8008fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	f000 8130 	beq.w	800921a <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fbe:	4a94      	ldr	r2, [pc, #592]	; (8009210 <UART_SetConfig+0x5cc>)
 8008fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8008fcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	005b      	lsls	r3, r3, #1
 8008fd6:	4413      	add	r3, r2
 8008fd8:	69ba      	ldr	r2, [r7, #24]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d305      	bcc.n	8008fea <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fe4:	69ba      	ldr	r2, [r7, #24]
 8008fe6:	429a      	cmp	r2, r3
 8008fe8:	d903      	bls.n	8008ff2 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8008fea:	2301      	movs	r3, #1
 8008fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008ff0:	e113      	b.n	800921a <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	60bb      	str	r3, [r7, #8]
 8008ff8:	60fa      	str	r2, [r7, #12]
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffe:	4a84      	ldr	r2, [pc, #528]	; (8009210 <UART_SetConfig+0x5cc>)
 8009000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009004:	b29b      	uxth	r3, r3
 8009006:	2200      	movs	r2, #0
 8009008:	603b      	str	r3, [r7, #0]
 800900a:	607a      	str	r2, [r7, #4]
 800900c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009014:	f7f7 f916 	bl	8000244 <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4610      	mov	r0, r2
 800901e:	4619      	mov	r1, r3
 8009020:	f04f 0200 	mov.w	r2, #0
 8009024:	f04f 0300 	mov.w	r3, #0
 8009028:	020b      	lsls	r3, r1, #8
 800902a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800902e:	0202      	lsls	r2, r0, #8
 8009030:	6979      	ldr	r1, [r7, #20]
 8009032:	6849      	ldr	r1, [r1, #4]
 8009034:	0849      	lsrs	r1, r1, #1
 8009036:	2000      	movs	r0, #0
 8009038:	460c      	mov	r4, r1
 800903a:	4605      	mov	r5, r0
 800903c:	eb12 0804 	adds.w	r8, r2, r4
 8009040:	eb43 0905 	adc.w	r9, r3, r5
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	469a      	mov	sl, r3
 800904c:	4693      	mov	fp, r2
 800904e:	4652      	mov	r2, sl
 8009050:	465b      	mov	r3, fp
 8009052:	4640      	mov	r0, r8
 8009054:	4649      	mov	r1, r9
 8009056:	f7f7 f8f5 	bl	8000244 <__aeabi_uldivmod>
 800905a:	4602      	mov	r2, r0
 800905c:	460b      	mov	r3, r1
 800905e:	4613      	mov	r3, r2
 8009060:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009062:	6a3b      	ldr	r3, [r7, #32]
 8009064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009068:	d308      	bcc.n	800907c <UART_SetConfig+0x438>
 800906a:	6a3b      	ldr	r3, [r7, #32]
 800906c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009070:	d204      	bcs.n	800907c <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6a3a      	ldr	r2, [r7, #32]
 8009078:	60da      	str	r2, [r3, #12]
 800907a:	e0ce      	b.n	800921a <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009082:	e0ca      	b.n	800921a <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009084:	697b      	ldr	r3, [r7, #20]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800908c:	d166      	bne.n	800915c <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800908e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009092:	2b08      	cmp	r3, #8
 8009094:	d827      	bhi.n	80090e6 <UART_SetConfig+0x4a2>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <UART_SetConfig+0x458>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	080090c1 	.word	0x080090c1
 80090a0:	080090c9 	.word	0x080090c9
 80090a4:	080090d1 	.word	0x080090d1
 80090a8:	080090e7 	.word	0x080090e7
 80090ac:	080090d7 	.word	0x080090d7
 80090b0:	080090e7 	.word	0x080090e7
 80090b4:	080090e7 	.word	0x080090e7
 80090b8:	080090e7 	.word	0x080090e7
 80090bc:	080090df 	.word	0x080090df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80090c0:	f7fb fbea 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 80090c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090c6:	e014      	b.n	80090f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80090c8:	f7fb fbfa 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 80090cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090ce:	e010      	b.n	80090f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80090d0:	4b4e      	ldr	r3, [pc, #312]	; (800920c <UART_SetConfig+0x5c8>)
 80090d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090d4:	e00d      	b.n	80090f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80090d6:	f7fb fb2d 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80090da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80090dc:	e009      	b.n	80090f2 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80090e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80090e4:	e005      	b.n	80090f2 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80090e6:	2300      	movs	r3, #0
 80090e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80090ea:	2301      	movs	r3, #1
 80090ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80090f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	f000 8090 	beq.w	800921a <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090fa:	697b      	ldr	r3, [r7, #20]
 80090fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fe:	4a44      	ldr	r2, [pc, #272]	; (8009210 <UART_SetConfig+0x5cc>)
 8009100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009104:	461a      	mov	r2, r3
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	fbb3 f3f2 	udiv	r3, r3, r2
 800910c:	005a      	lsls	r2, r3, #1
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	085b      	lsrs	r3, r3, #1
 8009114:	441a      	add	r2, r3
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	fbb2 f3f3 	udiv	r3, r2, r3
 800911e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	2b0f      	cmp	r3, #15
 8009124:	d916      	bls.n	8009154 <UART_SetConfig+0x510>
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800912c:	d212      	bcs.n	8009154 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800912e:	6a3b      	ldr	r3, [r7, #32]
 8009130:	b29b      	uxth	r3, r3
 8009132:	f023 030f 	bic.w	r3, r3, #15
 8009136:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009138:	6a3b      	ldr	r3, [r7, #32]
 800913a:	085b      	lsrs	r3, r3, #1
 800913c:	b29b      	uxth	r3, r3
 800913e:	f003 0307 	and.w	r3, r3, #7
 8009142:	b29a      	uxth	r2, r3
 8009144:	8bfb      	ldrh	r3, [r7, #30]
 8009146:	4313      	orrs	r3, r2
 8009148:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	8bfa      	ldrh	r2, [r7, #30]
 8009150:	60da      	str	r2, [r3, #12]
 8009152:	e062      	b.n	800921a <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009154:	2301      	movs	r3, #1
 8009156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800915a:	e05e      	b.n	800921a <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800915c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009160:	2b08      	cmp	r3, #8
 8009162:	d828      	bhi.n	80091b6 <UART_SetConfig+0x572>
 8009164:	a201      	add	r2, pc, #4	; (adr r2, 800916c <UART_SetConfig+0x528>)
 8009166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800916a:	bf00      	nop
 800916c:	08009191 	.word	0x08009191
 8009170:	08009199 	.word	0x08009199
 8009174:	080091a1 	.word	0x080091a1
 8009178:	080091b7 	.word	0x080091b7
 800917c:	080091a7 	.word	0x080091a7
 8009180:	080091b7 	.word	0x080091b7
 8009184:	080091b7 	.word	0x080091b7
 8009188:	080091b7 	.word	0x080091b7
 800918c:	080091af 	.word	0x080091af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009190:	f7fb fb82 	bl	8004898 <HAL_RCC_GetPCLK1Freq>
 8009194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009196:	e014      	b.n	80091c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009198:	f7fb fb92 	bl	80048c0 <HAL_RCC_GetPCLK2Freq>
 800919c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800919e:	e010      	b.n	80091c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80091a0:	4b1a      	ldr	r3, [pc, #104]	; (800920c <UART_SetConfig+0x5c8>)
 80091a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091a4:	e00d      	b.n	80091c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80091a6:	f7fb fac5 	bl	8004734 <HAL_RCC_GetSysClockFreq>
 80091aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80091ac:	e009      	b.n	80091c2 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80091ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80091b4:	e005      	b.n	80091c2 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80091b6:	2300      	movs	r3, #0
 80091b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80091c0:	bf00      	nop
    }

    if (pclk != 0U)
 80091c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d028      	beq.n	800921a <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091cc:	4a10      	ldr	r2, [pc, #64]	; (8009210 <UART_SetConfig+0x5cc>)
 80091ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80091d2:	461a      	mov	r2, r3
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	085b      	lsrs	r3, r3, #1
 80091e0:	441a      	add	r2, r3
 80091e2:	697b      	ldr	r3, [r7, #20]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091ec:	6a3b      	ldr	r3, [r7, #32]
 80091ee:	2b0f      	cmp	r3, #15
 80091f0:	d910      	bls.n	8009214 <UART_SetConfig+0x5d0>
 80091f2:	6a3b      	ldr	r3, [r7, #32]
 80091f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091f8:	d20c      	bcs.n	8009214 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091fa:	6a3b      	ldr	r3, [r7, #32]
 80091fc:	b29a      	uxth	r2, r3
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	60da      	str	r2, [r3, #12]
 8009204:	e009      	b.n	800921a <UART_SetConfig+0x5d6>
 8009206:	bf00      	nop
 8009208:	40008000 	.word	0x40008000
 800920c:	00f42400 	.word	0x00f42400
 8009210:	0800f7dc 	.word	0x0800f7dc
      }
      else
      {
        ret = HAL_ERROR;
 8009214:	2301      	movs	r3, #1
 8009216:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800921a:	697b      	ldr	r3, [r7, #20]
 800921c:	2201      	movs	r2, #1
 800921e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	2201      	movs	r2, #1
 8009226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	2200      	movs	r2, #0
 800922e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	2200      	movs	r2, #0
 8009234:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009236:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800923a:	4618      	mov	r0, r3
 800923c:	3730      	adds	r7, #48	; 0x30
 800923e:	46bd      	mov	sp, r7
 8009240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009250:	f003 0301 	and.w	r3, r3, #1
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00a      	beq.n	800926e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	430a      	orrs	r2, r1
 800926c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009272:	f003 0302 	and.w	r3, r3, #2
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	430a      	orrs	r2, r1
 800928e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b00      	cmp	r3, #0
 800929a:	d00a      	beq.n	80092b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	430a      	orrs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b6:	f003 0308 	and.w	r3, r3, #8
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00a      	beq.n	80092d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	430a      	orrs	r2, r1
 80092d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00a      	beq.n	80092f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	430a      	orrs	r2, r1
 80092f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092fa:	f003 0320 	and.w	r3, r3, #32
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d00a      	beq.n	8009318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	430a      	orrs	r2, r1
 8009316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800931c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009320:	2b00      	cmp	r3, #0
 8009322:	d01a      	beq.n	800935a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	430a      	orrs	r2, r1
 8009338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800933e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009342:	d10a      	bne.n	800935a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685b      	ldr	r3, [r3, #4]
 800934a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800935e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00a      	beq.n	800937c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	430a      	orrs	r2, r1
 800937a:	605a      	str	r2, [r3, #4]
  }
}
 800937c:	bf00      	nop
 800937e:	370c      	adds	r7, #12
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b098      	sub	sp, #96	; 0x60
 800938c:	af02      	add	r7, sp, #8
 800938e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009398:	f7f8 fb78 	bl	8001a8c <HAL_GetTick>
 800939c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f003 0308 	and.w	r3, r3, #8
 80093a8:	2b08      	cmp	r3, #8
 80093aa:	d12f      	bne.n	800940c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80093b0:	9300      	str	r3, [sp, #0]
 80093b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80093b4:	2200      	movs	r2, #0
 80093b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 f88e 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 80093c0:	4603      	mov	r3, r0
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d022      	beq.n	800940c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	e853 3f00 	ldrex	r3, [r3]
 80093d2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80093da:	653b      	str	r3, [r7, #80]	; 0x50
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	461a      	mov	r2, r3
 80093e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093e4:	647b      	str	r3, [r7, #68]	; 0x44
 80093e6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e6      	bne.n	80093c6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2220      	movs	r2, #32
 80093fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009408:	2303      	movs	r3, #3
 800940a:	e063      	b.n	80094d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	f003 0304 	and.w	r3, r3, #4
 8009416:	2b04      	cmp	r3, #4
 8009418:	d149      	bne.n	80094ae <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800941a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800941e:	9300      	str	r3, [sp, #0]
 8009420:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009422:	2200      	movs	r2, #0
 8009424:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009428:	6878      	ldr	r0, [r7, #4]
 800942a:	f000 f857 	bl	80094dc <UART_WaitOnFlagUntilTimeout>
 800942e:	4603      	mov	r3, r0
 8009430:	2b00      	cmp	r3, #0
 8009432:	d03c      	beq.n	80094ae <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800943a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800943c:	e853 3f00 	ldrex	r3, [r3]
 8009440:	623b      	str	r3, [r7, #32]
   return(result);
 8009442:	6a3b      	ldr	r3, [r7, #32]
 8009444:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009448:	64fb      	str	r3, [r7, #76]	; 0x4c
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	461a      	mov	r2, r3
 8009450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009452:	633b      	str	r3, [r7, #48]	; 0x30
 8009454:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800945a:	e841 2300 	strex	r3, r2, [r1]
 800945e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009462:	2b00      	cmp	r3, #0
 8009464:	d1e6      	bne.n	8009434 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	3308      	adds	r3, #8
 800946c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800946e:	693b      	ldr	r3, [r7, #16]
 8009470:	e853 3f00 	ldrex	r3, [r3]
 8009474:	60fb      	str	r3, [r7, #12]
   return(result);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	f023 0301 	bic.w	r3, r3, #1
 800947c:	64bb      	str	r3, [r7, #72]	; 0x48
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3308      	adds	r3, #8
 8009484:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009486:	61fa      	str	r2, [r7, #28]
 8009488:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800948a:	69b9      	ldr	r1, [r7, #24]
 800948c:	69fa      	ldr	r2, [r7, #28]
 800948e:	e841 2300 	strex	r3, r2, [r1]
 8009492:	617b      	str	r3, [r7, #20]
   return(result);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1e5      	bne.n	8009466 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2220      	movs	r2, #32
 800949e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80094aa:	2303      	movs	r3, #3
 80094ac:	e012      	b.n	80094d4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3758      	adds	r7, #88	; 0x58
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	603b      	str	r3, [r7, #0]
 80094e8:	4613      	mov	r3, r2
 80094ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094ec:	e049      	b.n	8009582 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094ee:	69bb      	ldr	r3, [r7, #24]
 80094f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094f4:	d045      	beq.n	8009582 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094f6:	f7f8 fac9 	bl	8001a8c <HAL_GetTick>
 80094fa:	4602      	mov	r2, r0
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	1ad3      	subs	r3, r2, r3
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	429a      	cmp	r2, r3
 8009504:	d302      	bcc.n	800950c <UART_WaitOnFlagUntilTimeout+0x30>
 8009506:	69bb      	ldr	r3, [r7, #24]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d101      	bne.n	8009510 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800950c:	2303      	movs	r3, #3
 800950e:	e048      	b.n	80095a2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f003 0304 	and.w	r3, r3, #4
 800951a:	2b00      	cmp	r3, #0
 800951c:	d031      	beq.n	8009582 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b08      	cmp	r3, #8
 800952a:	d110      	bne.n	800954e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	2208      	movs	r2, #8
 8009532:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009534:	68f8      	ldr	r0, [r7, #12]
 8009536:	f000 f838 	bl	80095aa <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2208      	movs	r2, #8
 800953e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2200      	movs	r2, #0
 8009546:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800954a:	2301      	movs	r3, #1
 800954c:	e029      	b.n	80095a2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	69db      	ldr	r3, [r3, #28]
 8009554:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009558:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800955c:	d111      	bne.n	8009582 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009566:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009568:	68f8      	ldr	r0, [r7, #12]
 800956a:	f000 f81e 	bl	80095aa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2220      	movs	r2, #32
 8009572:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800957e:	2303      	movs	r3, #3
 8009580:	e00f      	b.n	80095a2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	69da      	ldr	r2, [r3, #28]
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	4013      	ands	r3, r2
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	429a      	cmp	r2, r3
 8009590:	bf0c      	ite	eq
 8009592:	2301      	moveq	r3, #1
 8009594:	2300      	movne	r3, #0
 8009596:	b2db      	uxtb	r3, r3
 8009598:	461a      	mov	r2, r3
 800959a:	79fb      	ldrb	r3, [r7, #7]
 800959c:	429a      	cmp	r2, r3
 800959e:	d0a6      	beq.n	80094ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80095a0:	2300      	movs	r3, #0
}
 80095a2:	4618      	mov	r0, r3
 80095a4:	3710      	adds	r7, #16
 80095a6:	46bd      	mov	sp, r7
 80095a8:	bd80      	pop	{r7, pc}

080095aa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095aa:	b480      	push	{r7}
 80095ac:	b095      	sub	sp, #84	; 0x54
 80095ae:	af00      	add	r7, sp, #0
 80095b0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80095c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80095c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	461a      	mov	r2, r3
 80095ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d0:	643b      	str	r3, [r7, #64]	; 0x40
 80095d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80095d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80095de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e6      	bne.n	80095b2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3308      	adds	r3, #8
 80095ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	6a3b      	ldr	r3, [r7, #32]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80095f4:	69fb      	ldr	r3, [r7, #28]
 80095f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80095fa:	f023 0301 	bic.w	r3, r3, #1
 80095fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3308      	adds	r3, #8
 8009606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009608:	62fa      	str	r2, [r7, #44]	; 0x2c
 800960a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800960e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e3      	bne.n	80095e4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009620:	2b01      	cmp	r3, #1
 8009622:	d118      	bne.n	8009656 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	e853 3f00 	ldrex	r3, [r3]
 8009630:	60bb      	str	r3, [r7, #8]
   return(result);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	f023 0310 	bic.w	r3, r3, #16
 8009638:	647b      	str	r3, [r7, #68]	; 0x44
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	461a      	mov	r2, r3
 8009640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009642:	61bb      	str	r3, [r7, #24]
 8009644:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6979      	ldr	r1, [r7, #20]
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	613b      	str	r3, [r7, #16]
   return(result);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e6      	bne.n	8009624 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2220      	movs	r2, #32
 800965a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	675a      	str	r2, [r3, #116]	; 0x74
}
 800966a:	bf00      	nop
 800966c:	3754      	adds	r7, #84	; 0x54
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b084      	sub	sp, #16
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009694:	68f8      	ldr	r0, [r7, #12]
 8009696:	f7ff fabf 	bl	8008c18 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800969a:	bf00      	nop
 800969c:	3710      	adds	r7, #16
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd80      	pop	{r7, pc}

080096a2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80096a2:	b580      	push	{r7, lr}
 80096a4:	b088      	sub	sp, #32
 80096a6:	af00      	add	r7, sp, #0
 80096a8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	e853 3f00 	ldrex	r3, [r3]
 80096b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80096b8:	68bb      	ldr	r3, [r7, #8]
 80096ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80096be:	61fb      	str	r3, [r7, #28]
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	461a      	mov	r2, r3
 80096c6:	69fb      	ldr	r3, [r7, #28]
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096cc:	6979      	ldr	r1, [r7, #20]
 80096ce:	69ba      	ldr	r2, [r7, #24]
 80096d0:	e841 2300 	strex	r3, r2, [r1]
 80096d4:	613b      	str	r3, [r7, #16]
   return(result);
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d1e6      	bne.n	80096aa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	2220      	movs	r2, #32
 80096e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2200      	movs	r2, #0
 80096e8:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff fa8a 	bl	8008c04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096f0:	bf00      	nop
 80096f2:	3720      	adds	r7, #32
 80096f4:	46bd      	mov	sp, r7
 80096f6:	bd80      	pop	{r7, pc}

080096f8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800970c:	b480      	push	{r7}
 800970e:	b083      	sub	sp, #12
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009714:	bf00      	nop
 8009716:	370c      	adds	r7, #12
 8009718:	46bd      	mov	sp, r7
 800971a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971e:	4770      	bx	lr

08009720 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009728:	bf00      	nop
 800972a:	370c      	adds	r7, #12
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009734:	b480      	push	{r7}
 8009736:	b085      	sub	sp, #20
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009742:	2b01      	cmp	r3, #1
 8009744:	d101      	bne.n	800974a <HAL_UARTEx_DisableFifoMode+0x16>
 8009746:	2302      	movs	r3, #2
 8009748:	e027      	b.n	800979a <HAL_UARTEx_DisableFifoMode+0x66>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2224      	movs	r2, #36	; 0x24
 8009756:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681a      	ldr	r2, [r3, #0]
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f022 0201 	bic.w	r2, r2, #1
 8009770:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009778:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68fa      	ldr	r2, [r7, #12]
 8009786:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2220      	movs	r2, #32
 800978c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009798:	2300      	movs	r3, #0
}
 800979a:	4618      	mov	r0, r3
 800979c:	3714      	adds	r7, #20
 800979e:	46bd      	mov	sp, r7
 80097a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a4:	4770      	bx	lr

080097a6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80097b6:	2b01      	cmp	r3, #1
 80097b8:	d101      	bne.n	80097be <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097ba:	2302      	movs	r3, #2
 80097bc:	e02d      	b.n	800981a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2224      	movs	r2, #36	; 0x24
 80097ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	681a      	ldr	r2, [r3, #0]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f022 0201 	bic.w	r2, r2, #1
 80097e4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	683a      	ldr	r2, [r7, #0]
 80097f6:	430a      	orrs	r2, r1
 80097f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f000 f850 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2220      	movs	r2, #32
 800980c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3710      	adds	r7, #16
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b084      	sub	sp, #16
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009832:	2b01      	cmp	r3, #1
 8009834:	d101      	bne.n	800983a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009836:	2302      	movs	r3, #2
 8009838:	e02d      	b.n	8009896 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	2201      	movs	r2, #1
 800983e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2224      	movs	r2, #36	; 0x24
 8009846:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	681a      	ldr	r2, [r3, #0]
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	f022 0201 	bic.w	r2, r2, #1
 8009860:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	683a      	ldr	r2, [r7, #0]
 8009872:	430a      	orrs	r2, r1
 8009874:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009876:	6878      	ldr	r0, [r7, #4]
 8009878:	f000 f812 	bl	80098a0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2220      	movs	r2, #32
 8009888:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009894:	2300      	movs	r3, #0
}
 8009896:	4618      	mov	r0, r3
 8009898:	3710      	adds	r7, #16
 800989a:	46bd      	mov	sp, r7
 800989c:	bd80      	pop	{r7, pc}
	...

080098a0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098a0:	b480      	push	{r7}
 80098a2:	b085      	sub	sp, #20
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d108      	bne.n	80098c2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2201      	movs	r2, #1
 80098b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2201      	movs	r2, #1
 80098bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098c0:	e031      	b.n	8009926 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098c2:	2308      	movs	r3, #8
 80098c4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098c6:	2308      	movs	r3, #8
 80098c8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	0e5b      	lsrs	r3, r3, #25
 80098d2:	b2db      	uxtb	r3, r3
 80098d4:	f003 0307 	and.w	r3, r3, #7
 80098d8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	0f5b      	lsrs	r3, r3, #29
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	f003 0307 	and.w	r3, r3, #7
 80098e8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ea:	7bbb      	ldrb	r3, [r7, #14]
 80098ec:	7b3a      	ldrb	r2, [r7, #12]
 80098ee:	4911      	ldr	r1, [pc, #68]	; (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 80098f0:	5c8a      	ldrb	r2, [r1, r2]
 80098f2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80098f6:	7b3a      	ldrb	r2, [r7, #12]
 80098f8:	490f      	ldr	r1, [pc, #60]	; (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 80098fa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098fc:	fb93 f3f2 	sdiv	r3, r3, r2
 8009900:	b29a      	uxth	r2, r3
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009908:	7bfb      	ldrb	r3, [r7, #15]
 800990a:	7b7a      	ldrb	r2, [r7, #13]
 800990c:	4909      	ldr	r1, [pc, #36]	; (8009934 <UARTEx_SetNbDataToProcess+0x94>)
 800990e:	5c8a      	ldrb	r2, [r1, r2]
 8009910:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009914:	7b7a      	ldrb	r2, [r7, #13]
 8009916:	4908      	ldr	r1, [pc, #32]	; (8009938 <UARTEx_SetNbDataToProcess+0x98>)
 8009918:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800991a:	fb93 f3f2 	sdiv	r3, r3, r2
 800991e:	b29a      	uxth	r2, r3
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	0800f7f4 	.word	0x0800f7f4
 8009938:	0800f7fc 	.word	0x0800f7fc

0800993c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800993c:	b084      	sub	sp, #16
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	f107 001c 	add.w	r0, r7, #28
 800994a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800994e:	2300      	movs	r3, #0
 8009950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8009952:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8009954:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8009956:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8009958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800995a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800995c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800995e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 8009962:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8009964:	68fa      	ldr	r2, [r7, #12]
 8009966:	4313      	orrs	r3, r2
 8009968:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	685a      	ldr	r2, [r3, #4]
 800996e:	4b07      	ldr	r3, [pc, #28]	; (800998c <SDMMC_Init+0x50>)
 8009970:	4013      	ands	r3, r2
 8009972:	68fa      	ldr	r2, [r7, #12]
 8009974:	431a      	orrs	r2, r3
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3714      	adds	r7, #20
 8009980:	46bd      	mov	sp, r7
 8009982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009986:	b004      	add	sp, #16
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop
 800998c:	ffc02c00 	.word	0xffc02c00

08009990 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800999e:	4618      	mov	r0, r3
 80099a0:	370c      	adds	r7, #12
 80099a2:	46bd      	mov	sp, r7
 80099a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a8:	4770      	bx	lr

080099aa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80099aa:	b480      	push	{r7}
 80099ac:	b083      	sub	sp, #12
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	6078      	str	r0, [r7, #4]
 80099b2:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	681a      	ldr	r2, [r3, #0]
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80099be:	2300      	movs	r3, #0
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	370c      	adds	r7, #12
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr

080099cc <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 80099cc:	b480      	push	{r7}
 80099ce:	b083      	sub	sp, #12
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f043 0203 	orr.w	r2, r3, #3
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80099e0:	2300      	movs	r3, #0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	370c      	adds	r7, #12
 80099e6:	46bd      	mov	sp, r7
 80099e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ec:	4770      	bx	lr

080099ee <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80099ee:	b480      	push	{r7}
 80099f0:	b083      	sub	sp, #12
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	f003 0303 	and.w	r3, r3, #3
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	370c      	adds	r7, #12
 8009a02:	46bd      	mov	sp, r7
 8009a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a08:	4770      	bx	lr
	...

08009a0c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b085      	sub	sp, #20
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009a16:	2300      	movs	r3, #0
 8009a18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009a1a:	683b      	ldr	r3, [r7, #0]
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009a2a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8009a30:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8009a36:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68da      	ldr	r2, [r3, #12]
 8009a42:	4b06      	ldr	r3, [pc, #24]	; (8009a5c <SDMMC_SendCommand+0x50>)
 8009a44:	4013      	ands	r3, r2
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	431a      	orrs	r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009a4e:	2300      	movs	r3, #0
}
 8009a50:	4618      	mov	r0, r3
 8009a52:	3714      	adds	r7, #20
 8009a54:	46bd      	mov	sp, r7
 8009a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5a:	4770      	bx	lr
 8009a5c:	fffee0c0 	.word	0xfffee0c0

08009a60 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	691b      	ldr	r3, [r3, #16]
 8009a6c:	b2db      	uxtb	r3, r3
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	370c      	adds	r7, #12
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b085      	sub	sp, #20
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	3314      	adds	r3, #20
 8009a88:	461a      	mov	r2, r3
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	4413      	add	r3, r2
 8009a8e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	681b      	ldr	r3, [r3, #0]
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	3714      	adds	r7, #20
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b085      	sub	sp, #20
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009aaa:	2300      	movs	r3, #0
 8009aac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	681a      	ldr	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	685a      	ldr	r2, [r3, #4]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009ac6:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8009acc:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009ace:	683b      	ldr	r3, [r7, #0]
 8009ad0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8009ad2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8009ad4:	68fa      	ldr	r2, [r7, #12]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ade:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	431a      	orrs	r2, r3
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009aea:	2300      	movs	r3, #0

}
 8009aec:	4618      	mov	r0, r3
 8009aee:	3714      	adds	r7, #20
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b088      	sub	sp, #32
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
 8009b00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009b06:	2310      	movs	r3, #16
 8009b08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b0a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b10:	2300      	movs	r3, #0
 8009b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b18:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b1a:	f107 0308 	add.w	r3, r7, #8
 8009b1e:	4619      	mov	r1, r3
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f7ff ff73 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009b26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b2a:	2110      	movs	r1, #16
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 fa5f 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009b32:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b34:	69fb      	ldr	r3, [r7, #28]
}
 8009b36:	4618      	mov	r0, r3
 8009b38:	3720      	adds	r7, #32
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bd80      	pop	{r7, pc}

08009b3e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b3e:	b580      	push	{r7, lr}
 8009b40:	b088      	sub	sp, #32
 8009b42:	af00      	add	r7, sp, #0
 8009b44:	6078      	str	r0, [r7, #4]
 8009b46:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009b4c:	2311      	movs	r3, #17
 8009b4e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009b5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009b60:	f107 0308 	add.w	r3, r7, #8
 8009b64:	4619      	mov	r1, r3
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7ff ff50 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b70:	2111      	movs	r1, #17
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa3c 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009b78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b7a:	69fb      	ldr	r3, [r7, #28]
}
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	3720      	adds	r7, #32
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b088      	sub	sp, #32
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009b92:	2312      	movs	r3, #18
 8009b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ba0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ba4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ba6:	f107 0308 	add.w	r3, r7, #8
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f7ff ff2d 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bb6:	2112      	movs	r1, #18
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 fa19 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009bc0:	69fb      	ldr	r3, [r7, #28]
}
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	3720      	adds	r7, #32
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	bd80      	pop	{r7, pc}

08009bca <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009bca:	b580      	push	{r7, lr}
 8009bcc:	b088      	sub	sp, #32
 8009bce:	af00      	add	r7, sp, #0
 8009bd0:	6078      	str	r0, [r7, #4]
 8009bd2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009bd8:	2318      	movs	r3, #24
 8009bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009be2:	2300      	movs	r3, #0
 8009be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009be6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009bea:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009bec:	f107 0308 	add.w	r3, r7, #8
 8009bf0:	4619      	mov	r1, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f7ff ff0a 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bfc:	2118      	movs	r1, #24
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f9f6 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c06:	69fb      	ldr	r3, [r7, #28]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3720      	adds	r7, #32
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}

08009c10 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b088      	sub	sp, #32
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	6078      	str	r0, [r7, #4]
 8009c18:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009c1a:	683b      	ldr	r3, [r7, #0]
 8009c1c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009c1e:	2319      	movs	r3, #25
 8009c20:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c22:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c30:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c32:	f107 0308 	add.w	r3, r7, #8
 8009c36:	4619      	mov	r1, r3
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f7ff fee7 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009c3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c42:	2119      	movs	r1, #25
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f000 f9d3 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c4c:	69fb      	ldr	r3, [r7, #28]
}
 8009c4e:	4618      	mov	r0, r3
 8009c50:	3720      	adds	r7, #32
 8009c52:	46bd      	mov	sp, r7
 8009c54:	bd80      	pop	{r7, pc}
	...

08009c58 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009c60:	2300      	movs	r3, #0
 8009c62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009c64:	230c      	movs	r3, #12
 8009c66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c76:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c90:	f107 0308 	add.w	r3, r7, #8
 8009c94:	4619      	mov	r1, r3
 8009c96:	6878      	ldr	r0, [r7, #4]
 8009c98:	f7ff feb8 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009c9c:	4a0b      	ldr	r2, [pc, #44]	; (8009ccc <SDMMC_CmdStopTransfer+0x74>)
 8009c9e:	210c      	movs	r1, #12
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f000 f9a5 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009ca6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8009cb4:	69fb      	ldr	r3, [r7, #28]
 8009cb6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009cba:	d101      	bne.n	8009cc0 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8009cc0:	69fb      	ldr	r3, [r7, #28]
}
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	3720      	adds	r7, #32
 8009cc6:	46bd      	mov	sp, r7
 8009cc8:	bd80      	pop	{r7, pc}
 8009cca:	bf00      	nop
 8009ccc:	05f5e100 	.word	0x05f5e100

08009cd0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b088      	sub	sp, #32
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009cde:	2307      	movs	r3, #7
 8009ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ce2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ce8:	2300      	movs	r3, #0
 8009cea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009cf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cf2:	f107 0308 	add.w	r3, r7, #8
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f7ff fe87 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009cfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d02:	2107      	movs	r1, #7
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f000 f973 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009d0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d0c:	69fb      	ldr	r3, [r7, #28]
}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b088      	sub	sp, #32
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009d22:	2300      	movs	r3, #0
 8009d24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009d26:	2300      	movs	r3, #0
 8009d28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d34:	f107 0308 	add.w	r3, r7, #8
 8009d38:	4619      	mov	r1, r3
 8009d3a:	6878      	ldr	r0, [r7, #4]
 8009d3c:	f7ff fe66 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009d40:	6878      	ldr	r0, [r7, #4]
 8009d42:	f000 fb97 	bl	800a474 <SDMMC_GetCmdError>
 8009d46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d48:	69fb      	ldr	r3, [r7, #28]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3720      	adds	r7, #32
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b088      	sub	sp, #32
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009d5a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009d5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009d60:	2308      	movs	r3, #8
 8009d62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009d68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009d72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d74:	f107 0308 	add.w	r3, r7, #8
 8009d78:	4619      	mov	r1, r3
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f7ff fe46 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 fb29 	bl	800a3d8 <SDMMC_GetCmdResp7>
 8009d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d88:	69fb      	ldr	r3, [r7, #28]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3720      	adds	r7, #32
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b088      	sub	sp, #32
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	6078      	str	r0, [r7, #4]
 8009d9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009da0:	2337      	movs	r3, #55	; 0x37
 8009da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009da4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009da8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009daa:	2300      	movs	r3, #0
 8009dac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009db2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009db4:	f107 0308 	add.w	r3, r7, #8
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7ff fe26 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dc4:	2137      	movs	r1, #55	; 0x37
 8009dc6:	6878      	ldr	r0, [r7, #4]
 8009dc8:	f000 f912 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009dcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dce:	69fb      	ldr	r3, [r7, #28]
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3720      	adds	r7, #32
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b088      	sub	sp, #32
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009de6:	2329      	movs	r3, #41	; 0x29
 8009de8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009df0:	2300      	movs	r3, #0
 8009df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009df8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dfa:	f107 0308 	add.w	r3, r7, #8
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f7ff fe03 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 fa2e 	bl	800a268 <SDMMC_GetCmdResp3>
 8009e0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e0e:	69fb      	ldr	r3, [r7, #28]
}
 8009e10:	4618      	mov	r0, r3
 8009e12:	3720      	adds	r7, #32
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}

08009e18 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	b088      	sub	sp, #32
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
 8009e20:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8009e26:	2306      	movs	r3, #6
 8009e28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e30:	2300      	movs	r3, #0
 8009e32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e38:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e3a:	f107 0308 	add.w	r3, r7, #8
 8009e3e:	4619      	mov	r1, r3
 8009e40:	6878      	ldr	r0, [r7, #4]
 8009e42:	f7ff fde3 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8009e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e4a:	2106      	movs	r1, #6
 8009e4c:	6878      	ldr	r0, [r7, #4]
 8009e4e:	f000 f8cf 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009e52:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e54:	69fb      	ldr	r3, [r7, #28]
}
 8009e56:	4618      	mov	r0, r3
 8009e58:	3720      	adds	r7, #32
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b088      	sub	sp, #32
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8009e66:	2300      	movs	r3, #0
 8009e68:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8009e6a:	2333      	movs	r3, #51	; 0x33
 8009e6c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e6e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e72:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e74:	2300      	movs	r3, #0
 8009e76:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009e7c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e7e:	f107 0308 	add.w	r3, r7, #8
 8009e82:	4619      	mov	r1, r3
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	f7ff fdc1 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8009e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e8e:	2133      	movs	r1, #51	; 0x33
 8009e90:	6878      	ldr	r0, [r7, #4]
 8009e92:	f000 f8ad 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009e96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e98:	69fb      	ldr	r3, [r7, #28]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3720      	adds	r7, #32
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b088      	sub	sp, #32
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009eae:	2302      	movs	r3, #2
 8009eb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009eb2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009eb6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ebc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ec0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ec2:	f107 0308 	add.w	r3, r7, #8
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f7ff fd9f 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009ece:	6878      	ldr	r0, [r7, #4]
 8009ed0:	f000 f980 	bl	800a1d4 <SDMMC_GetCmdResp2>
 8009ed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ed6:	69fb      	ldr	r3, [r7, #28]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3720      	adds	r7, #32
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ee0:	b580      	push	{r7, lr}
 8009ee2:	b088      	sub	sp, #32
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009eea:	683b      	ldr	r3, [r7, #0]
 8009eec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009eee:	2309      	movs	r3, #9
 8009ef0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009ef2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009ef6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f02:	f107 0308 	add.w	r3, r7, #8
 8009f06:	4619      	mov	r1, r3
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f7ff fd7f 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f0e:	6878      	ldr	r0, [r7, #4]
 8009f10:	f000 f960 	bl	800a1d4 <SDMMC_GetCmdResp2>
 8009f14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f16:	69fb      	ldr	r3, [r7, #28]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3720      	adds	r7, #32
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	bd80      	pop	{r7, pc}

08009f20 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b088      	sub	sp, #32
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
 8009f28:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f40:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f42:	f107 0308 	add.w	r3, r7, #8
 8009f46:	4619      	mov	r1, r3
 8009f48:	6878      	ldr	r0, [r7, #4]
 8009f4a:	f7ff fd5f 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	2103      	movs	r1, #3
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f9c8 	bl	800a2e8 <SDMMC_GetCmdResp6>
 8009f58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f5a:	69fb      	ldr	r3, [r7, #28]
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	3720      	adds	r7, #32
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b088      	sub	sp, #32
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
 8009f6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009f72:	230d      	movs	r3, #13
 8009f74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f86:	f107 0308 	add.w	r3, r7, #8
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff fd3d 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8009f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f96:	210d      	movs	r1, #13
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 f829 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009f9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fa0:	69fb      	ldr	r3, [r7, #28]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3720      	adds	r7, #32
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	b088      	sub	sp, #32
 8009fae:	af00      	add	r7, sp, #0
 8009fb0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8009fb6:	230d      	movs	r3, #13
 8009fb8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fba:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009fbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009fc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fca:	f107 0308 	add.w	r3, r7, #8
 8009fce:	4619      	mov	r1, r3
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f7ff fd1b 	bl	8009a0c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8009fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fda:	210d      	movs	r1, #13
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f000 f807 	bl	8009ff0 <SDMMC_GetCmdResp1>
 8009fe2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fe4:	69fb      	ldr	r3, [r7, #28]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3720      	adds	r7, #32
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b088      	sub	sp, #32
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	60f8      	str	r0, [r7, #12]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	607a      	str	r2, [r7, #4]
 8009ffc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8009ffe:	4b70      	ldr	r3, [pc, #448]	; (800a1c0 <SDMMC_GetCmdResp1+0x1d0>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a70      	ldr	r2, [pc, #448]	; (800a1c4 <SDMMC_GetCmdResp1+0x1d4>)
 800a004:	fba2 2303 	umull	r2, r3, r2, r3
 800a008:	0a5a      	lsrs	r2, r3, #9
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	fb02 f303 	mul.w	r3, r2, r3
 800a010:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	1e5a      	subs	r2, r3, #1
 800a016:	61fa      	str	r2, [r7, #28]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d102      	bne.n	800a022 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a01c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a020:	e0c9      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a026:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800a028:	69ba      	ldr	r2, [r7, #24]
 800a02a:	4b67      	ldr	r3, [pc, #412]	; (800a1c8 <SDMMC_GetCmdResp1+0x1d8>)
 800a02c:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d0ef      	beq.n	800a012 <SDMMC_GetCmdResp1+0x22>
 800a032:	69bb      	ldr	r3, [r7, #24]
 800a034:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d1ea      	bne.n	800a012 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a040:	f003 0304 	and.w	r3, r3, #4
 800a044:	2b00      	cmp	r3, #0
 800a046:	d004      	beq.n	800a052 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	2204      	movs	r2, #4
 800a04c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a04e:	2304      	movs	r3, #4
 800a050:	e0b1      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a056:	f003 0301 	and.w	r3, r3, #1
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d004      	beq.n	800a068 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a064:	2301      	movs	r3, #1
 800a066:	e0a6      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4a58      	ldr	r2, [pc, #352]	; (800a1cc <SDMMC_GetCmdResp1+0x1dc>)
 800a06c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	f7ff fcf6 	bl	8009a60 <SDMMC_GetCommandResponse>
 800a074:	4603      	mov	r3, r0
 800a076:	461a      	mov	r2, r3
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d001      	beq.n	800a082 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a07e:	2301      	movs	r3, #1
 800a080:	e099      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a082:	2100      	movs	r1, #0
 800a084:	68f8      	ldr	r0, [r7, #12]
 800a086:	f7ff fcf8 	bl	8009a7a <SDMMC_GetResponse>
 800a08a:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a08c:	697a      	ldr	r2, [r7, #20]
 800a08e:	4b50      	ldr	r3, [pc, #320]	; (800a1d0 <SDMMC_GetCmdResp1+0x1e0>)
 800a090:	4013      	ands	r3, r2
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a096:	2300      	movs	r3, #0
 800a098:	e08d      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	da02      	bge.n	800a0a6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0a4:	e087      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0a6:	697b      	ldr	r3, [r7, #20]
 800a0a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d001      	beq.n	800a0b4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0b0:	2340      	movs	r3, #64	; 0x40
 800a0b2:	e080      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a0b4:	697b      	ldr	r3, [r7, #20]
 800a0b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a0be:	2380      	movs	r3, #128	; 0x80
 800a0c0:	e079      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a0c2:	697b      	ldr	r3, [r7, #20]
 800a0c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d002      	beq.n	800a0d2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a0cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a0d0:	e071      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a0d2:	697b      	ldr	r3, [r7, #20]
 800a0d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d002      	beq.n	800a0e2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a0dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a0e0:	e069      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a0ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0f0:	e061      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d002      	beq.n	800a102 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a0fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a100:	e059      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a102:	697b      	ldr	r3, [r7, #20]
 800a104:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a10c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a110:	e051      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a112:	697b      	ldr	r3, [r7, #20]
 800a114:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d002      	beq.n	800a122 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a11c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a120:	e049      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a122:	697b      	ldr	r3, [r7, #20]
 800a124:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d002      	beq.n	800a132 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a12c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a130:	e041      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d002      	beq.n	800a142 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a13c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a140:	e039      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a142:	697b      	ldr	r3, [r7, #20]
 800a144:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d002      	beq.n	800a152 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a14c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a150:	e031      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a15c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a160:	e029      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a162:	697b      	ldr	r3, [r7, #20]
 800a164:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d002      	beq.n	800a172 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a16c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a170:	e021      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d002      	beq.n	800a182 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a17c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a180:	e019      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a182:	697b      	ldr	r3, [r7, #20]
 800a184:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a18c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a190:	e011      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d002      	beq.n	800a1a2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a19c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1a0:	e009      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1a2:	697b      	ldr	r3, [r7, #20]
 800a1a4:	f003 0308 	and.w	r3, r3, #8
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d002      	beq.n	800a1b2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1ac:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1b0:	e001      	b.n	800a1b6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3720      	adds	r7, #32
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	200027d8 	.word	0x200027d8
 800a1c4:	10624dd3 	.word	0x10624dd3
 800a1c8:	00200045 	.word	0x00200045
 800a1cc:	002000c5 	.word	0x002000c5
 800a1d0:	fdffe008 	.word	0xfdffe008

0800a1d4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b085      	sub	sp, #20
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a1dc:	4b1f      	ldr	r3, [pc, #124]	; (800a25c <SDMMC_GetCmdResp2+0x88>)
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1f      	ldr	r2, [pc, #124]	; (800a260 <SDMMC_GetCmdResp2+0x8c>)
 800a1e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a1e6:	0a5b      	lsrs	r3, r3, #9
 800a1e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ec:	fb02 f303 	mul.w	r3, r2, r3
 800a1f0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	1e5a      	subs	r2, r3, #1
 800a1f6:	60fa      	str	r2, [r7, #12]
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d102      	bne.n	800a202 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a1fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a200:	e026      	b.n	800a250 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a206:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d0ef      	beq.n	800a1f2 <SDMMC_GetCmdResp2+0x1e>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d1ea      	bne.n	800a1f2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a220:	f003 0304 	and.w	r3, r3, #4
 800a224:	2b00      	cmp	r3, #0
 800a226:	d004      	beq.n	800a232 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2204      	movs	r2, #4
 800a22c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a22e:	2304      	movs	r3, #4
 800a230:	e00e      	b.n	800a250 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a236:	f003 0301 	and.w	r3, r3, #1
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d004      	beq.n	800a248 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a244:	2301      	movs	r3, #1
 800a246:	e003      	b.n	800a250 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	4a06      	ldr	r2, [pc, #24]	; (800a264 <SDMMC_GetCmdResp2+0x90>)
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr
 800a25c:	200027d8 	.word	0x200027d8
 800a260:	10624dd3 	.word	0x10624dd3
 800a264:	002000c5 	.word	0x002000c5

0800a268 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a270:	4b1a      	ldr	r3, [pc, #104]	; (800a2dc <SDMMC_GetCmdResp3+0x74>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a1a      	ldr	r2, [pc, #104]	; (800a2e0 <SDMMC_GetCmdResp3+0x78>)
 800a276:	fba2 2303 	umull	r2, r3, r2, r3
 800a27a:	0a5b      	lsrs	r3, r3, #9
 800a27c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a280:	fb02 f303 	mul.w	r3, r2, r3
 800a284:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	1e5a      	subs	r2, r3, #1
 800a28a:	60fa      	str	r2, [r7, #12]
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d102      	bne.n	800a296 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a290:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a294:	e01b      	b.n	800a2ce <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a29a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a29c:	68bb      	ldr	r3, [r7, #8]
 800a29e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d0ef      	beq.n	800a286 <SDMMC_GetCmdResp3+0x1e>
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d1ea      	bne.n	800a286 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b4:	f003 0304 	and.w	r3, r3, #4
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d004      	beq.n	800a2c6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	2204      	movs	r2, #4
 800a2c0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a2c2:	2304      	movs	r3, #4
 800a2c4:	e003      	b.n	800a2ce <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a06      	ldr	r2, [pc, #24]	; (800a2e4 <SDMMC_GetCmdResp3+0x7c>)
 800a2ca:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a2cc:	2300      	movs	r3, #0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3714      	adds	r7, #20
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d8:	4770      	bx	lr
 800a2da:	bf00      	nop
 800a2dc:	200027d8 	.word	0x200027d8
 800a2e0:	10624dd3 	.word	0x10624dd3
 800a2e4:	002000c5 	.word	0x002000c5

0800a2e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b088      	sub	sp, #32
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a2f6:	4b35      	ldr	r3, [pc, #212]	; (800a3cc <SDMMC_GetCmdResp6+0xe4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	4a35      	ldr	r2, [pc, #212]	; (800a3d0 <SDMMC_GetCmdResp6+0xe8>)
 800a2fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a300:	0a5b      	lsrs	r3, r3, #9
 800a302:	f241 3288 	movw	r2, #5000	; 0x1388
 800a306:	fb02 f303 	mul.w	r3, r2, r3
 800a30a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800a30c:	69fb      	ldr	r3, [r7, #28]
 800a30e:	1e5a      	subs	r2, r3, #1
 800a310:	61fa      	str	r2, [r7, #28]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d102      	bne.n	800a31c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a31a:	e052      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a320:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a322:	69bb      	ldr	r3, [r7, #24]
 800a324:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0ef      	beq.n	800a30c <SDMMC_GetCmdResp6+0x24>
 800a32c:	69bb      	ldr	r3, [r7, #24]
 800a32e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a332:	2b00      	cmp	r3, #0
 800a334:	d1ea      	bne.n	800a30c <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a33a:	f003 0304 	and.w	r3, r3, #4
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d004      	beq.n	800a34c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2204      	movs	r2, #4
 800a346:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a348:	2304      	movs	r3, #4
 800a34a:	e03a      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a350:	f003 0301 	and.w	r3, r3, #1
 800a354:	2b00      	cmp	r3, #0
 800a356:	d004      	beq.n	800a362 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	2201      	movs	r2, #1
 800a35c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a35e:	2301      	movs	r3, #1
 800a360:	e02f      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a362:	68f8      	ldr	r0, [r7, #12]
 800a364:	f7ff fb7c 	bl	8009a60 <SDMMC_GetCommandResponse>
 800a368:	4603      	mov	r3, r0
 800a36a:	461a      	mov	r2, r3
 800a36c:	7afb      	ldrb	r3, [r7, #11]
 800a36e:	4293      	cmp	r3, r2
 800a370:	d001      	beq.n	800a376 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a372:	2301      	movs	r3, #1
 800a374:	e025      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	4a16      	ldr	r2, [pc, #88]	; (800a3d4 <SDMMC_GetCmdResp6+0xec>)
 800a37a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a37c:	2100      	movs	r1, #0
 800a37e:	68f8      	ldr	r0, [r7, #12]
 800a380:	f7ff fb7b 	bl	8009a7a <SDMMC_GetResponse>
 800a384:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	0c1b      	lsrs	r3, r3, #16
 800a394:	b29a      	uxth	r2, r3
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800a39a:	2300      	movs	r3, #0
 800a39c:	e011      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d002      	beq.n	800a3ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3ac:	e009      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d002      	beq.n	800a3be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3bc:	e001      	b.n	800a3c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	3720      	adds	r7, #32
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
 800a3ca:	bf00      	nop
 800a3cc:	200027d8 	.word	0x200027d8
 800a3d0:	10624dd3 	.word	0x10624dd3
 800a3d4:	002000c5 	.word	0x002000c5

0800a3d8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	b085      	sub	sp, #20
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a3e0:	4b22      	ldr	r3, [pc, #136]	; (800a46c <SDMMC_GetCmdResp7+0x94>)
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	4a22      	ldr	r2, [pc, #136]	; (800a470 <SDMMC_GetCmdResp7+0x98>)
 800a3e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ea:	0a5b      	lsrs	r3, r3, #9
 800a3ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f0:	fb02 f303 	mul.w	r3, r2, r3
 800a3f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	1e5a      	subs	r2, r3, #1
 800a3fa:	60fa      	str	r2, [r7, #12]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d102      	bne.n	800a406 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a404:	e02c      	b.n	800a460 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a40a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a40c:	68bb      	ldr	r3, [r7, #8]
 800a40e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800a412:	2b00      	cmp	r3, #0
 800a414:	d0ef      	beq.n	800a3f6 <SDMMC_GetCmdResp7+0x1e>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1ea      	bne.n	800a3f6 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	f003 0304 	and.w	r3, r3, #4
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d004      	beq.n	800a436 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2204      	movs	r2, #4
 800a430:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a432:	2304      	movs	r3, #4
 800a434:	e014      	b.n	800a460 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43a:	f003 0301 	and.w	r3, r3, #1
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d004      	beq.n	800a44c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2201      	movs	r2, #1
 800a446:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a448:	2301      	movs	r3, #1
 800a44a:	e009      	b.n	800a460 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a454:	2b00      	cmp	r3, #0
 800a456:	d002      	beq.n	800a45e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	2240      	movs	r2, #64	; 0x40
 800a45c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a45e:	2300      	movs	r3, #0

}
 800a460:	4618      	mov	r0, r3
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr
 800a46c:	200027d8 	.word	0x200027d8
 800a470:	10624dd3 	.word	0x10624dd3

0800a474 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a474:	b480      	push	{r7}
 800a476:	b085      	sub	sp, #20
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800a47c:	4b11      	ldr	r3, [pc, #68]	; (800a4c4 <SDMMC_GetCmdError+0x50>)
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a11      	ldr	r2, [pc, #68]	; (800a4c8 <SDMMC_GetCmdError+0x54>)
 800a482:	fba2 2303 	umull	r2, r3, r2, r3
 800a486:	0a5b      	lsrs	r3, r3, #9
 800a488:	f241 3288 	movw	r2, #5000	; 0x1388
 800a48c:	fb02 f303 	mul.w	r3, r2, r3
 800a490:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	1e5a      	subs	r2, r3, #1
 800a496:	60fa      	str	r2, [r7, #12]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d102      	bne.n	800a4a2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a49c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4a0:	e009      	b.n	800a4b6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0f1      	beq.n	800a492 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	4a06      	ldr	r2, [pc, #24]	; (800a4cc <SDMMC_GetCmdError+0x58>)
 800a4b2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800a4b4:	2300      	movs	r3, #0
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	3714      	adds	r7, #20
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop
 800a4c4:	200027d8 	.word	0x200027d8
 800a4c8:	10624dd3 	.word	0x10624dd3
 800a4cc:	002000c5 	.word	0x002000c5

0800a4d0 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800a4d4:	4907      	ldr	r1, [pc, #28]	; (800a4f4 <MX_FATFS_Init+0x24>)
 800a4d6:	4808      	ldr	r0, [pc, #32]	; (800a4f8 <MX_FATFS_Init+0x28>)
 800a4d8:	f004 fae2 	bl	800eaa0 <FATFS_LinkDriver>
 800a4dc:	4603      	mov	r3, r0
 800a4de:	2b00      	cmp	r3, #0
 800a4e0:	d002      	beq.n	800a4e8 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800a4e6:	e003      	b.n	800a4f0 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a4e8:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <MX_FATFS_Init+0x2c>)
 800a4ea:	2201      	movs	r2, #1
 800a4ec:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a4ee:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	bd80      	pop	{r7, pc}
 800a4f4:	20002dfc 	.word	0x20002dfc
 800a4f8:	0800f804 	.word	0x0800f804
 800a4fc:	20002e00 	.word	0x20002e00

0800a500 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a500:	b480      	push	{r7}
 800a502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a504:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a506:	4618      	mov	r0, r3
 800a508:	46bd      	mov	sp, r7
 800a50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a50e:	4770      	bx	lr

0800a510 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b098      	sub	sp, #96	; 0x60
 800a514:	af00      	add	r7, sp, #0
 800a516:	4603      	mov	r3, r0
 800a518:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_initialize */
  Stat = STA_NOINIT;
 800a51a:	4b23      	ldr	r3, [pc, #140]	; (800a5a8 <SD_initialize+0x98>)
 800a51c:	2201      	movs	r2, #1
 800a51e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef res1;
  HAL_SD_CardCSDTypeDef CSD;
  HAL_SD_CardInfoTypeDef pCardInfo;


  print_str("Init");
 800a520:	4822      	ldr	r0, [pc, #136]	; (800a5ac <SD_initialize+0x9c>)
 800a522:	f7f6 f83f 	bl	80005a4 <print_str>
  while(HAL_SD_Init(&hsd1)!=HAL_OK){
 800a526:	bf00      	nop
 800a528:	4821      	ldr	r0, [pc, #132]	; (800a5b0 <SD_initialize+0xa0>)
 800a52a:	f7fc fb1b 	bl	8006b64 <HAL_SD_Init>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d003      	beq.n	800a53c <SD_initialize+0x2c>

	  print_str("Error");
 800a534:	481f      	ldr	r0, [pc, #124]	; (800a5b4 <SD_initialize+0xa4>)
 800a536:	f7f6 f835 	bl	80005a4 <print_str>
	  while(1){};
 800a53a:	e7fe      	b.n	800a53a <SD_initialize+0x2a>
  }

  HAL_SD_GetCardInfo(&hsd1, &pCardInfo);
 800a53c:	f107 030c 	add.w	r3, r7, #12
 800a540:	4619      	mov	r1, r3
 800a542:	481b      	ldr	r0, [pc, #108]	; (800a5b0 <SD_initialize+0xa0>)
 800a544:	f7fd f98e 	bl	8007864 <HAL_SD_GetCardInfo>

  print_param("type",pCardInfo.CardType);
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	4619      	mov	r1, r3
 800a54c:	481a      	ldr	r0, [pc, #104]	; (800a5b8 <SD_initialize+0xa8>)
 800a54e:	f7f6 f809 	bl	8000564 <print_param>
  print_param("ver",pCardInfo.CardVersion);
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	4619      	mov	r1, r3
 800a556:	4819      	ldr	r0, [pc, #100]	; (800a5bc <SD_initialize+0xac>)
 800a558:	f7f6 f804 	bl	8000564 <print_param>
  print_param("class",pCardInfo.Class);
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	4619      	mov	r1, r3
 800a560:	4817      	ldr	r0, [pc, #92]	; (800a5c0 <SD_initialize+0xb0>)
 800a562:	f7f5 ffff 	bl	8000564 <print_param>
  print_param("BlockNbr",pCardInfo.BlockNbr);
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	4619      	mov	r1, r3
 800a56a:	4816      	ldr	r0, [pc, #88]	; (800a5c4 <SD_initialize+0xb4>)
 800a56c:	f7f5 fffa 	bl	8000564 <print_param>
  print_param("BlockSize",pCardInfo.BlockSize);
 800a570:	6a3b      	ldr	r3, [r7, #32]
 800a572:	4619      	mov	r1, r3
 800a574:	4814      	ldr	r0, [pc, #80]	; (800a5c8 <SD_initialize+0xb8>)
 800a576:	f7f5 fff5 	bl	8000564 <print_param>
  print_param("LogBlockNbr",pCardInfo.LogBlockNbr);
 800a57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a57c:	4619      	mov	r1, r3
 800a57e:	4813      	ldr	r0, [pc, #76]	; (800a5cc <SD_initialize+0xbc>)
 800a580:	f7f5 fff0 	bl	8000564 <print_param>
  print_param("LogBlockSize",pCardInfo.LogBlockSize);
 800a584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a586:	4619      	mov	r1, r3
 800a588:	4811      	ldr	r0, [pc, #68]	; (800a5d0 <SD_initialize+0xc0>)
 800a58a:	f7f5 ffeb 	bl	8000564 <print_param>


  print_param("Speed",hsd1.SdCard.CardSpeed);
 800a58e:	4b08      	ldr	r3, [pc, #32]	; (800a5b0 <SD_initialize+0xa0>)
 800a590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a592:	4619      	mov	r1, r3
 800a594:	480f      	ldr	r0, [pc, #60]	; (800a5d4 <SD_initialize+0xc4>)
 800a596:	f7f5 ffe5 	bl	8000564 <print_param>

  return res1;
 800a59a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  /* USER CODE END SD_initialize */
}
 800a59e:	4618      	mov	r0, r3
 800a5a0:	3760      	adds	r7, #96	; 0x60
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	bd80      	pop	{r7, pc}
 800a5a6:	bf00      	nop
 800a5a8:	200027e1 	.word	0x200027e1
 800a5ac:	0800f694 	.word	0x0800f694
 800a5b0:	20002d70 	.word	0x20002d70
 800a5b4:	0800f69c 	.word	0x0800f69c
 800a5b8:	0800f6a4 	.word	0x0800f6a4
 800a5bc:	0800f6ac 	.word	0x0800f6ac
 800a5c0:	0800f6b0 	.word	0x0800f6b0
 800a5c4:	0800f6b8 	.word	0x0800f6b8
 800a5c8:	0800f6c4 	.word	0x0800f6c4
 800a5cc:	0800f6d0 	.word	0x0800f6d0
 800a5d0:	0800f6dc 	.word	0x0800f6dc
 800a5d4:	0800f6ec 	.word	0x0800f6ec

0800a5d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b084      	sub	sp, #16
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	4603      	mov	r3, r0
 800a5e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_status */
  Stat = STA_NOINIT;
 800a5e2:	4b06      	ldr	r3, [pc, #24]	; (800a5fc <SD_status+0x24>)
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	701a      	strb	r2, [r3, #0]
  HAL_SD_CardStateTypeDef pStatus;
  /* Place for user code (may require BSP functions/defines to be added to the project) */
  pStatus=HAL_SD_GetCardState(&hsd1);
 800a5e8:	4805      	ldr	r0, [pc, #20]	; (800a600 <SD_status+0x28>)
 800a5ea:	f7fd fa77 	bl	8007adc <HAL_SD_GetCardState>
 800a5ee:	60f8      	str	r0, [r7, #12]
  return RES_OK;
 800a5f0:	2300      	movs	r3, #0
  /* USER CODE END SD_status */
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3710      	adds	r7, #16
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	200027e1 	.word	0x200027e1
 800a600:	20002d70 	.word	0x20002d70

0800a604 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b086      	sub	sp, #24
 800a608:	af00      	add	r7, sp, #0
 800a60a:	60b9      	str	r1, [r7, #8]
 800a60c:	607a      	str	r2, [r7, #4]
 800a60e:	603b      	str	r3, [r7, #0]
 800a610:	4603      	mov	r3, r0
 800a612:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_read */
  uint32_t tickstart;
  sd_dma_rx_semaphore=0;
 800a614:	4b17      	ldr	r3, [pc, #92]	; (800a674 <SD_read+0x70>)
 800a616:	2200      	movs	r2, #0
 800a618:	601a      	str	r2, [r3, #0]

  if(HAL_SD_ReadBlocks_DMA(&hsd1, buff, sector, count)==HAL_OK){
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	687a      	ldr	r2, [r7, #4]
 800a61e:	68b9      	ldr	r1, [r7, #8]
 800a620:	4815      	ldr	r0, [pc, #84]	; (800a678 <SD_read+0x74>)
 800a622:	f7fc fbb7 	bl	8006d94 <HAL_SD_ReadBlocks_DMA>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d11e      	bne.n	800a66a <SD_read+0x66>
   tickstart = HAL_GetTick();
 800a62c:	f7f7 fa2e 	bl	8001a8c <HAL_GetTick>
 800a630:	6178      	str	r0, [r7, #20]
   while (sd_dma_rx_semaphore==0)
 800a632:	e00e      	b.n	800a652 <SD_read+0x4e>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 800a634:	f7f7 fa2a 	bl	8001a8c <HAL_GetTick>
 800a638:	4602      	mov	r2, r0
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	1ad3      	subs	r3, r2, r3
 800a63e:	f242 720f 	movw	r2, #9999	; 0x270f
 800a642:	4293      	cmp	r3, r2
 800a644:	d905      	bls.n	800a652 <SD_read+0x4e>
    	print_param("rerr",0);
 800a646:	2100      	movs	r1, #0
 800a648:	480c      	ldr	r0, [pc, #48]	; (800a67c <SD_read+0x78>)
 800a64a:	f7f5 ff8b 	bl	8000564 <print_param>
    	return RES_ERROR;
 800a64e:	2301      	movs	r3, #1
 800a650:	e00c      	b.n	800a66c <SD_read+0x68>
   while (sd_dma_rx_semaphore==0)
 800a652:	4b08      	ldr	r3, [pc, #32]	; (800a674 <SD_read+0x70>)
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d0ec      	beq.n	800a634 <SD_read+0x30>
    }
   }
   if(HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER){
 800a65a:	4807      	ldr	r0, [pc, #28]	; (800a678 <SD_read+0x74>)
 800a65c:	f7fd fa3e 	bl	8007adc <HAL_SD_GetCardState>
 800a660:	4603      	mov	r3, r0
 800a662:	2b04      	cmp	r3, #4
 800a664:	d101      	bne.n	800a66a <SD_read+0x66>
     //print_str("rok",0);
     return RES_OK;
 800a666:	2300      	movs	r3, #0
 800a668:	e000      	b.n	800a66c <SD_read+0x68>
   }
  }
  return RES_ERROR;
 800a66a:	2301      	movs	r3, #1
  /* USER CODE END SD_read */
}
 800a66c:	4618      	mov	r0, r3
 800a66e:	3718      	adds	r7, #24
 800a670:	46bd      	mov	sp, r7
 800a672:	bd80      	pop	{r7, pc}
 800a674:	20002dec 	.word	0x20002dec
 800a678:	20002d70 	.word	0x20002d70
 800a67c:	0800f6f4 	.word	0x0800f6f4

0800a680 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800a680:	b580      	push	{r7, lr}
 800a682:	b086      	sub	sp, #24
 800a684:	af00      	add	r7, sp, #0
 800a686:	60b9      	str	r1, [r7, #8]
 800a688:	607a      	str	r2, [r7, #4]
 800a68a:	603b      	str	r3, [r7, #0]
 800a68c:	4603      	mov	r3, r0
 800a68e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_write */

  uint32_t tickstart;
  sd_dma_tx_semaphore=0;
 800a690:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <SD_write+0x90>)
 800a692:	2200      	movs	r2, #0
 800a694:	601a      	str	r2, [r3, #0]
  print_param("write_cnt",count);
 800a696:	6839      	ldr	r1, [r7, #0]
 800a698:	481e      	ldr	r0, [pc, #120]	; (800a714 <SD_write+0x94>)
 800a69a:	f7f5 ff63 	bl	8000564 <print_param>
  print_param("write_sect",sector);
 800a69e:	6879      	ldr	r1, [r7, #4]
 800a6a0:	481d      	ldr	r0, [pc, #116]	; (800a718 <SD_write+0x98>)
 800a6a2:	f7f5 ff5f 	bl	8000564 <print_param>

  print_param("STAwr",hsd1.Instance->STA);
 800a6a6:	4b1d      	ldr	r3, [pc, #116]	; (800a71c <SD_write+0x9c>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	481c      	ldr	r0, [pc, #112]	; (800a720 <SD_write+0xa0>)
 800a6b0:	f7f5 ff58 	bl	8000564 <print_param>
  print_param("CLKCR",hsd1.Instance->CLKCR);
 800a6b4:	4b19      	ldr	r3, [pc, #100]	; (800a71c <SD_write+0x9c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	4619      	mov	r1, r3
 800a6bc:	4819      	ldr	r0, [pc, #100]	; (800a724 <SD_write+0xa4>)
 800a6be:	f7f5 ff51 	bl	8000564 <print_param>

  if(HAL_SD_WriteBlocks_DMA(&hsd1, buff, sector, count)==HAL_OK){
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	687a      	ldr	r2, [r7, #4]
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	4814      	ldr	r0, [pc, #80]	; (800a71c <SD_write+0x9c>)
 800a6ca:	f7fc fc0b 	bl	8006ee4 <HAL_SD_WriteBlocks_DMA>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d117      	bne.n	800a704 <SD_write+0x84>
   tickstart = HAL_GetTick();
 800a6d4:	f7f7 f9da 	bl	8001a8c <HAL_GetTick>
 800a6d8:	6178      	str	r0, [r7, #20]
   while (sd_dma_tx_semaphore==0)
 800a6da:	e00d      	b.n	800a6f8 <SD_write+0x78>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 800a6dc:	f7f7 f9d6 	bl	8001a8c <HAL_GetTick>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	1ad3      	subs	r3, r2, r3
 800a6e6:	f242 720f 	movw	r2, #9999	; 0x270f
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d904      	bls.n	800a6f8 <SD_write+0x78>
    	print_str("write_err");
 800a6ee:	480e      	ldr	r0, [pc, #56]	; (800a728 <SD_write+0xa8>)
 800a6f0:	f7f5 ff58 	bl	80005a4 <print_str>
    	return RES_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e006      	b.n	800a706 <SD_write+0x86>
   while (sd_dma_tx_semaphore==0)
 800a6f8:	4b05      	ldr	r3, [pc, #20]	; (800a710 <SD_write+0x90>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d0ed      	beq.n	800a6dc <SD_write+0x5c>
    }
   }
   return RES_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	e000      	b.n	800a706 <SD_write+0x86>

  }
  return RES_ERROR;
 800a704:	2301      	movs	r3, #1
  /* USER CODE END SD_write */
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	20002df0 	.word	0x20002df0
 800a714:	0800f6fc 	.word	0x0800f6fc
 800a718:	0800f708 	.word	0x0800f708
 800a71c:	20002d70 	.word	0x20002d70
 800a720:	0800f714 	.word	0x0800f714
 800a724:	0800f71c 	.word	0x0800f71c
 800a728:	0800f724 	.word	0x0800f724

0800a72c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b08c      	sub	sp, #48	; 0x30
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	603a      	str	r2, [r7, #0]
 800a736:	71fb      	strb	r3, [r7, #7]
 800a738:	460b      	mov	r3, r1
 800a73a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN SD_ioctl */
  DRESULT res = RES_ERROR;
 800a73c:	2301      	movs	r3, #1
 800a73e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_SD_CardInfoTypeDef  CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a742:	4b26      	ldr	r3, [pc, #152]	; (800a7dc <SD_ioctl+0xb0>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	b2db      	uxtb	r3, r3
 800a748:	f003 0301 	and.w	r3, r3, #1
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d001      	beq.n	800a754 <SD_ioctl+0x28>
 800a750:	2303      	movs	r3, #3
 800a752:	e03f      	b.n	800a7d4 <SD_ioctl+0xa8>

  switch (cmd)
 800a754:	79bb      	ldrb	r3, [r7, #6]
 800a756:	2b03      	cmp	r3, #3
 800a758:	d837      	bhi.n	800a7ca <SD_ioctl+0x9e>
 800a75a:	a201      	add	r2, pc, #4	; (adr r2, 800a760 <SD_ioctl+0x34>)
 800a75c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a760:	0800a771 	.word	0x0800a771
 800a764:	0800a779 	.word	0x0800a779
 800a768:	0800a793 	.word	0x0800a793
 800a76c:	0800a7af 	.word	0x0800a7af
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a776:	e02b      	b.n	800a7d0 <SD_ioctl+0xa4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800a778:	f107 0308 	add.w	r3, r7, #8
 800a77c:	4619      	mov	r1, r3
 800a77e:	4818      	ldr	r0, [pc, #96]	; (800a7e0 <SD_ioctl+0xb4>)
 800a780:	f7fd f870 	bl	8007864 <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a784:	6a3a      	ldr	r2, [r7, #32]
 800a786:	683b      	ldr	r3, [r7, #0]
 800a788:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a790:	e01e      	b.n	800a7d0 <SD_ioctl+0xa4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800a792:	f107 0308 	add.w	r3, r7, #8
 800a796:	4619      	mov	r1, r3
 800a798:	4811      	ldr	r0, [pc, #68]	; (800a7e0 <SD_ioctl+0xb4>)
 800a79a:	f7fd f863 	bl	8007864 <HAL_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a79e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7ac:	e010      	b.n	800a7d0 <SD_ioctl+0xa4>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800a7ae:	f107 0308 	add.w	r3, r7, #8
 800a7b2:	4619      	mov	r1, r3
 800a7b4:	480a      	ldr	r0, [pc, #40]	; (800a7e0 <SD_ioctl+0xb4>)
 800a7b6:	f7fd f855 	bl	8007864 <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	0a5a      	lsrs	r2, r3, #9
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800a7c8:	e002      	b.n	800a7d0 <SD_ioctl+0xa4>

  default:
    res = RES_PARERR;
 800a7ca:	2304      	movs	r3, #4
 800a7cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800a7d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE END SD_ioctl */
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3730      	adds	r7, #48	; 0x30
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	bd80      	pop	{r7, pc}
 800a7dc:	200027e1 	.word	0x200027e1
 800a7e0:	20002d70 	.word	0x20002d70

0800a7e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	4a08      	ldr	r2, [pc, #32]	; (800a814 <disk_status+0x30>)
 800a7f2:	009b      	lsls	r3, r3, #2
 800a7f4:	4413      	add	r3, r2
 800a7f6:	685b      	ldr	r3, [r3, #4]
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	79fa      	ldrb	r2, [r7, #7]
 800a7fc:	4905      	ldr	r1, [pc, #20]	; (800a814 <disk_status+0x30>)
 800a7fe:	440a      	add	r2, r1
 800a800:	7a12      	ldrb	r2, [r2, #8]
 800a802:	4610      	mov	r0, r2
 800a804:	4798      	blx	r3
 800a806:	4603      	mov	r3, r0
 800a808:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3710      	adds	r7, #16
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	20002e2c 	.word	0x20002e2c

0800a818 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a822:	2300      	movs	r3, #0
 800a824:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	4a0d      	ldr	r2, [pc, #52]	; (800a860 <disk_initialize+0x48>)
 800a82a:	5cd3      	ldrb	r3, [r2, r3]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d111      	bne.n	800a854 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a830:	79fb      	ldrb	r3, [r7, #7]
 800a832:	4a0b      	ldr	r2, [pc, #44]	; (800a860 <disk_initialize+0x48>)
 800a834:	2101      	movs	r1, #1
 800a836:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a838:	79fb      	ldrb	r3, [r7, #7]
 800a83a:	4a09      	ldr	r2, [pc, #36]	; (800a860 <disk_initialize+0x48>)
 800a83c:	009b      	lsls	r3, r3, #2
 800a83e:	4413      	add	r3, r2
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	79fa      	ldrb	r2, [r7, #7]
 800a846:	4906      	ldr	r1, [pc, #24]	; (800a860 <disk_initialize+0x48>)
 800a848:	440a      	add	r2, r1
 800a84a:	7a12      	ldrb	r2, [r2, #8]
 800a84c:	4610      	mov	r0, r2
 800a84e:	4798      	blx	r3
 800a850:	4603      	mov	r3, r0
 800a852:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a854:	7bfb      	ldrb	r3, [r7, #15]
}
 800a856:	4618      	mov	r0, r3
 800a858:	3710      	adds	r7, #16
 800a85a:	46bd      	mov	sp, r7
 800a85c:	bd80      	pop	{r7, pc}
 800a85e:	bf00      	nop
 800a860:	20002e2c 	.word	0x20002e2c

0800a864 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a864:	b590      	push	{r4, r7, lr}
 800a866:	b087      	sub	sp, #28
 800a868:	af00      	add	r7, sp, #0
 800a86a:	60b9      	str	r1, [r7, #8]
 800a86c:	607a      	str	r2, [r7, #4]
 800a86e:	603b      	str	r3, [r7, #0]
 800a870:	4603      	mov	r3, r0
 800a872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a874:	7bfb      	ldrb	r3, [r7, #15]
 800a876:	4a0a      	ldr	r2, [pc, #40]	; (800a8a0 <disk_read+0x3c>)
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	689c      	ldr	r4, [r3, #8]
 800a880:	7bfb      	ldrb	r3, [r7, #15]
 800a882:	4a07      	ldr	r2, [pc, #28]	; (800a8a0 <disk_read+0x3c>)
 800a884:	4413      	add	r3, r2
 800a886:	7a18      	ldrb	r0, [r3, #8]
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	68b9      	ldr	r1, [r7, #8]
 800a88e:	47a0      	blx	r4
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]
  return res;
 800a894:	7dfb      	ldrb	r3, [r7, #23]
}
 800a896:	4618      	mov	r0, r3
 800a898:	371c      	adds	r7, #28
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd90      	pop	{r4, r7, pc}
 800a89e:	bf00      	nop
 800a8a0:	20002e2c 	.word	0x20002e2c

0800a8a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a8a4:	b590      	push	{r4, r7, lr}
 800a8a6:	b087      	sub	sp, #28
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	60b9      	str	r1, [r7, #8]
 800a8ac:	607a      	str	r2, [r7, #4]
 800a8ae:	603b      	str	r3, [r7, #0]
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <disk_write+0x3c>)
 800a8b8:	009b      	lsls	r3, r3, #2
 800a8ba:	4413      	add	r3, r2
 800a8bc:	685b      	ldr	r3, [r3, #4]
 800a8be:	68dc      	ldr	r4, [r3, #12]
 800a8c0:	7bfb      	ldrb	r3, [r7, #15]
 800a8c2:	4a07      	ldr	r2, [pc, #28]	; (800a8e0 <disk_write+0x3c>)
 800a8c4:	4413      	add	r3, r2
 800a8c6:	7a18      	ldrb	r0, [r3, #8]
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	68b9      	ldr	r1, [r7, #8]
 800a8ce:	47a0      	blx	r4
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800a8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	371c      	adds	r7, #28
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd90      	pop	{r4, r7, pc}
 800a8de:	bf00      	nop
 800a8e0:	20002e2c 	.word	0x20002e2c

0800a8e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b084      	sub	sp, #16
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	603a      	str	r2, [r7, #0]
 800a8ee:	71fb      	strb	r3, [r7, #7]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800a8f4:	79fb      	ldrb	r3, [r7, #7]
 800a8f6:	4a09      	ldr	r2, [pc, #36]	; (800a91c <disk_ioctl+0x38>)
 800a8f8:	009b      	lsls	r3, r3, #2
 800a8fa:	4413      	add	r3, r2
 800a8fc:	685b      	ldr	r3, [r3, #4]
 800a8fe:	691b      	ldr	r3, [r3, #16]
 800a900:	79fa      	ldrb	r2, [r7, #7]
 800a902:	4906      	ldr	r1, [pc, #24]	; (800a91c <disk_ioctl+0x38>)
 800a904:	440a      	add	r2, r1
 800a906:	7a10      	ldrb	r0, [r2, #8]
 800a908:	79b9      	ldrb	r1, [r7, #6]
 800a90a:	683a      	ldr	r2, [r7, #0]
 800a90c:	4798      	blx	r3
 800a90e:	4603      	mov	r3, r0
 800a910:	73fb      	strb	r3, [r7, #15]
  return res;
 800a912:	7bfb      	ldrb	r3, [r7, #15]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3710      	adds	r7, #16
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}
 800a91c:	20002e2c 	.word	0x20002e2c

0800a920 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a920:	b480      	push	{r7}
 800a922:	b085      	sub	sp, #20
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	3301      	adds	r3, #1
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a930:	89fb      	ldrh	r3, [r7, #14]
 800a932:	021b      	lsls	r3, r3, #8
 800a934:	b21a      	sxth	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	781b      	ldrb	r3, [r3, #0]
 800a93a:	b21b      	sxth	r3, r3
 800a93c:	4313      	orrs	r3, r2
 800a93e:	b21b      	sxth	r3, r3
 800a940:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a942:	89fb      	ldrh	r3, [r7, #14]
}
 800a944:	4618      	mov	r0, r3
 800a946:	3714      	adds	r7, #20
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr

0800a950 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a950:	b480      	push	{r7}
 800a952:	b085      	sub	sp, #20
 800a954:	af00      	add	r7, sp, #0
 800a956:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	3303      	adds	r3, #3
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	3202      	adds	r2, #2
 800a968:	7812      	ldrb	r2, [r2, #0]
 800a96a:	4313      	orrs	r3, r2
 800a96c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	021b      	lsls	r3, r3, #8
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	3201      	adds	r2, #1
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	4313      	orrs	r3, r2
 800a97a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	021b      	lsls	r3, r3, #8
 800a980:	687a      	ldr	r2, [r7, #4]
 800a982:	7812      	ldrb	r2, [r2, #0]
 800a984:	4313      	orrs	r3, r2
 800a986:	60fb      	str	r3, [r7, #12]
	return rv;
 800a988:	68fb      	ldr	r3, [r7, #12]
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3714      	adds	r7, #20
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr

0800a996 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800a996:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800a99a:	b09d      	sub	sp, #116	; 0x74
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800a9a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9a2:	3307      	adds	r3, #7
 800a9a4:	781b      	ldrb	r3, [r3, #0]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	469a      	mov	sl, r3
 800a9ac:	4693      	mov	fp, r2
 800a9ae:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800a9b2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a9b6:	f04f 0000 	mov.w	r0, #0
 800a9ba:	f04f 0100 	mov.w	r1, #0
 800a9be:	0219      	lsls	r1, r3, #8
 800a9c0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9c4:	0210      	lsls	r0, r2, #8
 800a9c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c8:	3306      	adds	r3, #6
 800a9ca:	781b      	ldrb	r3, [r3, #0]
 800a9cc:	b2db      	uxtb	r3, r3
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	461c      	mov	r4, r3
 800a9d2:	4615      	mov	r5, r2
 800a9d4:	ea40 0804 	orr.w	r8, r0, r4
 800a9d8:	ea41 0905 	orr.w	r9, r1, r5
 800a9dc:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800a9e0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800a9e4:	f04f 0000 	mov.w	r0, #0
 800a9e8:	f04f 0100 	mov.w	r1, #0
 800a9ec:	0219      	lsls	r1, r3, #8
 800a9ee:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800a9f2:	0210      	lsls	r0, r2, #8
 800a9f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9f6:	3305      	adds	r3, #5
 800a9f8:	781b      	ldrb	r3, [r3, #0]
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	65bb      	str	r3, [r7, #88]	; 0x58
 800aa00:	65fa      	str	r2, [r7, #92]	; 0x5c
 800aa02:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800aa06:	4623      	mov	r3, r4
 800aa08:	4303      	orrs	r3, r0
 800aa0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa0c:	462b      	mov	r3, r5
 800aa0e:	430b      	orrs	r3, r1
 800aa10:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa12:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800aa16:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800aa1a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800aa1e:	f04f 0000 	mov.w	r0, #0
 800aa22:	f04f 0100 	mov.w	r1, #0
 800aa26:	0219      	lsls	r1, r3, #8
 800aa28:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa2c:	0210      	lsls	r0, r2, #8
 800aa2e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa30:	3304      	adds	r3, #4
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2200      	movs	r2, #0
 800aa38:	653b      	str	r3, [r7, #80]	; 0x50
 800aa3a:	657a      	str	r2, [r7, #84]	; 0x54
 800aa3c:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800aa40:	4623      	mov	r3, r4
 800aa42:	4303      	orrs	r3, r0
 800aa44:	623b      	str	r3, [r7, #32]
 800aa46:	462b      	mov	r3, r5
 800aa48:	430b      	orrs	r3, r1
 800aa4a:	627b      	str	r3, [r7, #36]	; 0x24
 800aa4c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800aa50:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800aa54:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800aa58:	f04f 0000 	mov.w	r0, #0
 800aa5c:	f04f 0100 	mov.w	r1, #0
 800aa60:	0219      	lsls	r1, r3, #8
 800aa62:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aa66:	0210      	lsls	r0, r2, #8
 800aa68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aa6a:	3303      	adds	r3, #3
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2200      	movs	r2, #0
 800aa72:	64bb      	str	r3, [r7, #72]	; 0x48
 800aa74:	64fa      	str	r2, [r7, #76]	; 0x4c
 800aa76:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800aa7a:	4623      	mov	r3, r4
 800aa7c:	4303      	orrs	r3, r0
 800aa7e:	61bb      	str	r3, [r7, #24]
 800aa80:	462b      	mov	r3, r5
 800aa82:	430b      	orrs	r3, r1
 800aa84:	61fb      	str	r3, [r7, #28]
 800aa86:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800aa8a:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800aa8e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800aa92:	f04f 0000 	mov.w	r0, #0
 800aa96:	f04f 0100 	mov.w	r1, #0
 800aa9a:	0219      	lsls	r1, r3, #8
 800aa9c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800aaa0:	0210      	lsls	r0, r2, #8
 800aaa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aaa4:	3302      	adds	r3, #2
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	2200      	movs	r2, #0
 800aaac:	643b      	str	r3, [r7, #64]	; 0x40
 800aaae:	647a      	str	r2, [r7, #68]	; 0x44
 800aab0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800aab4:	4623      	mov	r3, r4
 800aab6:	4303      	orrs	r3, r0
 800aab8:	613b      	str	r3, [r7, #16]
 800aaba:	462b      	mov	r3, r5
 800aabc:	430b      	orrs	r3, r1
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800aac4:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800aac8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800aacc:	f04f 0200 	mov.w	r2, #0
 800aad0:	f04f 0300 	mov.w	r3, #0
 800aad4:	020b      	lsls	r3, r1, #8
 800aad6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800aada:	0202      	lsls	r2, r0, #8
 800aadc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800aade:	3101      	adds	r1, #1
 800aae0:	7809      	ldrb	r1, [r1, #0]
 800aae2:	b2c9      	uxtb	r1, r1
 800aae4:	2000      	movs	r0, #0
 800aae6:	63b9      	str	r1, [r7, #56]	; 0x38
 800aae8:	63f8      	str	r0, [r7, #60]	; 0x3c
 800aaea:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800aaee:	4621      	mov	r1, r4
 800aaf0:	4311      	orrs	r1, r2
 800aaf2:	60b9      	str	r1, [r7, #8]
 800aaf4:	4629      	mov	r1, r5
 800aaf6:	4319      	orrs	r1, r3
 800aaf8:	60f9      	str	r1, [r7, #12]
 800aafa:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800aafe:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800ab02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ab06:	f04f 0200 	mov.w	r2, #0
 800ab0a:	f04f 0300 	mov.w	r3, #0
 800ab0e:	020b      	lsls	r3, r1, #8
 800ab10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab14:	0202      	lsls	r2, r0, #8
 800ab16:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800ab18:	7809      	ldrb	r1, [r1, #0]
 800ab1a:	b2c9      	uxtb	r1, r1
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	6339      	str	r1, [r7, #48]	; 0x30
 800ab20:	6378      	str	r0, [r7, #52]	; 0x34
 800ab22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800ab26:	4621      	mov	r1, r4
 800ab28:	4311      	orrs	r1, r2
 800ab2a:	6039      	str	r1, [r7, #0]
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	4319      	orrs	r1, r3
 800ab30:	6079      	str	r1, [r7, #4]
 800ab32:	e9d7 3400 	ldrd	r3, r4, [r7]
 800ab36:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800ab3a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800ab3e:	4610      	mov	r0, r2
 800ab40:	4619      	mov	r1, r3
 800ab42:	3774      	adds	r7, #116	; 0x74
 800ab44:	46bd      	mov	sp, r7
 800ab46:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800ab4a:	4770      	bx	lr

0800ab4c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
 800ab54:	460b      	mov	r3, r1
 800ab56:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	607a      	str	r2, [r7, #4]
 800ab5e:	887a      	ldrh	r2, [r7, #2]
 800ab60:	b2d2      	uxtb	r2, r2
 800ab62:	701a      	strb	r2, [r3, #0]
 800ab64:	887b      	ldrh	r3, [r7, #2]
 800ab66:	0a1b      	lsrs	r3, r3, #8
 800ab68:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	607a      	str	r2, [r7, #4]
 800ab70:	887a      	ldrh	r2, [r7, #2]
 800ab72:	b2d2      	uxtb	r2, r2
 800ab74:	701a      	strb	r2, [r3, #0]
}
 800ab76:	bf00      	nop
 800ab78:	370c      	adds	r7, #12
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr

0800ab82 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ab82:	b480      	push	{r7}
 800ab84:	b083      	sub	sp, #12
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	1c5a      	adds	r2, r3, #1
 800ab90:	607a      	str	r2, [r7, #4]
 800ab92:	683a      	ldr	r2, [r7, #0]
 800ab94:	b2d2      	uxtb	r2, r2
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	0a1b      	lsrs	r3, r3, #8
 800ab9c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	1c5a      	adds	r2, r3, #1
 800aba2:	607a      	str	r2, [r7, #4]
 800aba4:	683a      	ldr	r2, [r7, #0]
 800aba6:	b2d2      	uxtb	r2, r2
 800aba8:	701a      	strb	r2, [r3, #0]
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	0a1b      	lsrs	r3, r3, #8
 800abae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	1c5a      	adds	r2, r3, #1
 800abb4:	607a      	str	r2, [r7, #4]
 800abb6:	683a      	ldr	r2, [r7, #0]
 800abb8:	b2d2      	uxtb	r2, r2
 800abba:	701a      	strb	r2, [r3, #0]
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	0a1b      	lsrs	r3, r3, #8
 800abc0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	607a      	str	r2, [r7, #4]
 800abc8:	683a      	ldr	r2, [r7, #0]
 800abca:	b2d2      	uxtb	r2, r2
 800abcc:	701a      	strb	r2, [r3, #0]
}
 800abce:	bf00      	nop
 800abd0:	370c      	adds	r7, #12
 800abd2:	46bd      	mov	sp, r7
 800abd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd8:	4770      	bx	lr

0800abda <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800abda:	b480      	push	{r7}
 800abdc:	b085      	sub	sp, #20
 800abde:	af00      	add	r7, sp, #0
 800abe0:	60f8      	str	r0, [r7, #12]
 800abe2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	1c5a      	adds	r2, r3, #1
 800abea:	60fa      	str	r2, [r7, #12]
 800abec:	783a      	ldrb	r2, [r7, #0]
 800abee:	701a      	strb	r2, [r3, #0]
 800abf0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abf4:	f04f 0200 	mov.w	r2, #0
 800abf8:	f04f 0300 	mov.w	r3, #0
 800abfc:	0a02      	lsrs	r2, r0, #8
 800abfe:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac02:	0a0b      	lsrs	r3, r1, #8
 800ac04:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	60fa      	str	r2, [r7, #12]
 800ac0e:	783a      	ldrb	r2, [r7, #0]
 800ac10:	701a      	strb	r2, [r3, #0]
 800ac12:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac16:	f04f 0200 	mov.w	r2, #0
 800ac1a:	f04f 0300 	mov.w	r3, #0
 800ac1e:	0a02      	lsrs	r2, r0, #8
 800ac20:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac24:	0a0b      	lsrs	r3, r1, #8
 800ac26:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	1c5a      	adds	r2, r3, #1
 800ac2e:	60fa      	str	r2, [r7, #12]
 800ac30:	783a      	ldrb	r2, [r7, #0]
 800ac32:	701a      	strb	r2, [r3, #0]
 800ac34:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac38:	f04f 0200 	mov.w	r2, #0
 800ac3c:	f04f 0300 	mov.w	r3, #0
 800ac40:	0a02      	lsrs	r2, r0, #8
 800ac42:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac46:	0a0b      	lsrs	r3, r1, #8
 800ac48:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	1c5a      	adds	r2, r3, #1
 800ac50:	60fa      	str	r2, [r7, #12]
 800ac52:	783a      	ldrb	r2, [r7, #0]
 800ac54:	701a      	strb	r2, [r3, #0]
 800ac56:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac5a:	f04f 0200 	mov.w	r2, #0
 800ac5e:	f04f 0300 	mov.w	r3, #0
 800ac62:	0a02      	lsrs	r2, r0, #8
 800ac64:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac68:	0a0b      	lsrs	r3, r1, #8
 800ac6a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	1c5a      	adds	r2, r3, #1
 800ac72:	60fa      	str	r2, [r7, #12]
 800ac74:	783a      	ldrb	r2, [r7, #0]
 800ac76:	701a      	strb	r2, [r3, #0]
 800ac78:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac7c:	f04f 0200 	mov.w	r2, #0
 800ac80:	f04f 0300 	mov.w	r3, #0
 800ac84:	0a02      	lsrs	r2, r0, #8
 800ac86:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800ac8a:	0a0b      	lsrs	r3, r1, #8
 800ac8c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	1c5a      	adds	r2, r3, #1
 800ac94:	60fa      	str	r2, [r7, #12]
 800ac96:	783a      	ldrb	r2, [r7, #0]
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ac9e:	f04f 0200 	mov.w	r2, #0
 800aca2:	f04f 0300 	mov.w	r3, #0
 800aca6:	0a02      	lsrs	r2, r0, #8
 800aca8:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acac:	0a0b      	lsrs	r3, r1, #8
 800acae:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	1c5a      	adds	r2, r3, #1
 800acb6:	60fa      	str	r2, [r7, #12]
 800acb8:	783a      	ldrb	r2, [r7, #0]
 800acba:	701a      	strb	r2, [r3, #0]
 800acbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 800acc0:	f04f 0200 	mov.w	r2, #0
 800acc4:	f04f 0300 	mov.w	r3, #0
 800acc8:	0a02      	lsrs	r2, r0, #8
 800acca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800acce:	0a0b      	lsrs	r3, r1, #8
 800acd0:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	1c5a      	adds	r2, r3, #1
 800acd8:	60fa      	str	r2, [r7, #12]
 800acda:	783a      	ldrb	r2, [r7, #0]
 800acdc:	701a      	strb	r2, [r3, #0]
}
 800acde:	bf00      	nop
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800acea:	b480      	push	{r7}
 800acec:	b087      	sub	sp, #28
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	60b9      	str	r1, [r7, #8]
 800acf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800acfa:	68bb      	ldr	r3, [r7, #8]
 800acfc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d00d      	beq.n	800ad20 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800ad04:	693a      	ldr	r2, [r7, #16]
 800ad06:	1c53      	adds	r3, r2, #1
 800ad08:	613b      	str	r3, [r7, #16]
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	1c59      	adds	r1, r3, #1
 800ad0e:	6179      	str	r1, [r7, #20]
 800ad10:	7812      	ldrb	r2, [r2, #0]
 800ad12:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	3b01      	subs	r3, #1
 800ad18:	607b      	str	r3, [r7, #4]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d1f1      	bne.n	800ad04 <mem_cpy+0x1a>
	}
}
 800ad20:	bf00      	nop
 800ad22:	371c      	adds	r7, #28
 800ad24:	46bd      	mov	sp, r7
 800ad26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2a:	4770      	bx	lr

0800ad2c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800ad2c:	b480      	push	{r7}
 800ad2e:	b087      	sub	sp, #28
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	60f8      	str	r0, [r7, #12]
 800ad34:	60b9      	str	r1, [r7, #8]
 800ad36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800ad3c:	697b      	ldr	r3, [r7, #20]
 800ad3e:	1c5a      	adds	r2, r3, #1
 800ad40:	617a      	str	r2, [r7, #20]
 800ad42:	68ba      	ldr	r2, [r7, #8]
 800ad44:	b2d2      	uxtb	r2, r2
 800ad46:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3b01      	subs	r3, #1
 800ad4c:	607b      	str	r3, [r7, #4]
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d1f3      	bne.n	800ad3c <mem_set+0x10>
}
 800ad54:	bf00      	nop
 800ad56:	bf00      	nop
 800ad58:	371c      	adds	r7, #28
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad60:	4770      	bx	lr

0800ad62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800ad62:	b480      	push	{r7}
 800ad64:	b089      	sub	sp, #36	; 0x24
 800ad66:	af00      	add	r7, sp, #0
 800ad68:	60f8      	str	r0, [r7, #12]
 800ad6a:	60b9      	str	r1, [r7, #8]
 800ad6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	61fb      	str	r3, [r7, #28]
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800ad76:	2300      	movs	r3, #0
 800ad78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	1c5a      	adds	r2, r3, #1
 800ad7e:	61fa      	str	r2, [r7, #28]
 800ad80:	781b      	ldrb	r3, [r3, #0]
 800ad82:	4619      	mov	r1, r3
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	61ba      	str	r2, [r7, #24]
 800ad8a:	781b      	ldrb	r3, [r3, #0]
 800ad8c:	1acb      	subs	r3, r1, r3
 800ad8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	3b01      	subs	r3, #1
 800ad94:	607b      	str	r3, [r7, #4]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d002      	beq.n	800ada2 <mem_cmp+0x40>
 800ad9c:	697b      	ldr	r3, [r7, #20]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0eb      	beq.n	800ad7a <mem_cmp+0x18>

	return r;
 800ada2:	697b      	ldr	r3, [r7, #20]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3724      	adds	r7, #36	; 0x24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adae:	4770      	bx	lr

0800adb0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800adb0:	b480      	push	{r7}
 800adb2:	b083      	sub	sp, #12
 800adb4:	af00      	add	r7, sp, #0
 800adb6:	6078      	str	r0, [r7, #4]
 800adb8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800adba:	e002      	b.n	800adc2 <chk_chr+0x12>
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	3301      	adds	r3, #1
 800adc0:	607b      	str	r3, [r7, #4]
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d005      	beq.n	800add6 <chk_chr+0x26>
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	461a      	mov	r2, r3
 800add0:	683b      	ldr	r3, [r7, #0]
 800add2:	4293      	cmp	r3, r2
 800add4:	d1f2      	bne.n	800adbc <chk_chr+0xc>
	return *str;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	781b      	ldrb	r3, [r3, #0]
}
 800adda:	4618      	mov	r0, r3
 800addc:	370c      	adds	r7, #12
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
	...

0800ade8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
 800adf0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800adf2:	2300      	movs	r3, #0
 800adf4:	60bb      	str	r3, [r7, #8]
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	60fb      	str	r3, [r7, #12]
 800adfa:	e029      	b.n	800ae50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800adfc:	4a27      	ldr	r2, [pc, #156]	; (800ae9c <chk_lock+0xb4>)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	011b      	lsls	r3, r3, #4
 800ae02:	4413      	add	r3, r2
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d01d      	beq.n	800ae46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae0a:	4a24      	ldr	r2, [pc, #144]	; (800ae9c <chk_lock+0xb4>)
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	011b      	lsls	r3, r3, #4
 800ae10:	4413      	add	r3, r2
 800ae12:	681a      	ldr	r2, [r3, #0]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d116      	bne.n	800ae4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ae1c:	4a1f      	ldr	r2, [pc, #124]	; (800ae9c <chk_lock+0xb4>)
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	011b      	lsls	r3, r3, #4
 800ae22:	4413      	add	r3, r2
 800ae24:	3304      	adds	r3, #4
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d10c      	bne.n	800ae4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae30:	4a1a      	ldr	r2, [pc, #104]	; (800ae9c <chk_lock+0xb4>)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	011b      	lsls	r3, r3, #4
 800ae36:	4413      	add	r3, r2
 800ae38:	3308      	adds	r3, #8
 800ae3a:	681a      	ldr	r2, [r3, #0]
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d102      	bne.n	800ae4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ae44:	e007      	b.n	800ae56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ae46:	2301      	movs	r3, #1
 800ae48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	3301      	adds	r3, #1
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	68fb      	ldr	r3, [r7, #12]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d9d2      	bls.n	800adfc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2b02      	cmp	r3, #2
 800ae5a:	d109      	bne.n	800ae70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d102      	bne.n	800ae68 <chk_lock+0x80>
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	2b02      	cmp	r3, #2
 800ae66:	d101      	bne.n	800ae6c <chk_lock+0x84>
 800ae68:	2300      	movs	r3, #0
 800ae6a:	e010      	b.n	800ae8e <chk_lock+0xa6>
 800ae6c:	2312      	movs	r3, #18
 800ae6e:	e00e      	b.n	800ae8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d108      	bne.n	800ae88 <chk_lock+0xa0>
 800ae76:	4a09      	ldr	r2, [pc, #36]	; (800ae9c <chk_lock+0xb4>)
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	011b      	lsls	r3, r3, #4
 800ae7c:	4413      	add	r3, r2
 800ae7e:	330c      	adds	r3, #12
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae86:	d101      	bne.n	800ae8c <chk_lock+0xa4>
 800ae88:	2310      	movs	r3, #16
 800ae8a:	e000      	b.n	800ae8e <chk_lock+0xa6>
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
 800ae9a:	bf00      	nop
 800ae9c:	20002e0c 	.word	0x20002e0c

0800aea0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800aea0:	b480      	push	{r7}
 800aea2:	b083      	sub	sp, #12
 800aea4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800aea6:	2300      	movs	r3, #0
 800aea8:	607b      	str	r3, [r7, #4]
 800aeaa:	e002      	b.n	800aeb2 <enq_lock+0x12>
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	3301      	adds	r3, #1
 800aeb0:	607b      	str	r3, [r7, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	2b01      	cmp	r3, #1
 800aeb6:	d806      	bhi.n	800aec6 <enq_lock+0x26>
 800aeb8:	4a09      	ldr	r2, [pc, #36]	; (800aee0 <enq_lock+0x40>)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	011b      	lsls	r3, r3, #4
 800aebe:	4413      	add	r3, r2
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d1f2      	bne.n	800aeac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2b02      	cmp	r3, #2
 800aeca:	bf14      	ite	ne
 800aecc:	2301      	movne	r3, #1
 800aece:	2300      	moveq	r3, #0
 800aed0:	b2db      	uxtb	r3, r3
}
 800aed2:	4618      	mov	r0, r3
 800aed4:	370c      	adds	r7, #12
 800aed6:	46bd      	mov	sp, r7
 800aed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aedc:	4770      	bx	lr
 800aede:	bf00      	nop
 800aee0:	20002e0c 	.word	0x20002e0c

0800aee4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800aee4:	b480      	push	{r7}
 800aee6:	b085      	sub	sp, #20
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800aeee:	2300      	movs	r3, #0
 800aef0:	60fb      	str	r3, [r7, #12]
 800aef2:	e01f      	b.n	800af34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800aef4:	4a41      	ldr	r2, [pc, #260]	; (800affc <inc_lock+0x118>)
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	011b      	lsls	r3, r3, #4
 800aefa:	4413      	add	r3, r2
 800aefc:	681a      	ldr	r2, [r3, #0]
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	429a      	cmp	r2, r3
 800af04:	d113      	bne.n	800af2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800af06:	4a3d      	ldr	r2, [pc, #244]	; (800affc <inc_lock+0x118>)
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	011b      	lsls	r3, r3, #4
 800af0c:	4413      	add	r3, r2
 800af0e:	3304      	adds	r3, #4
 800af10:	681a      	ldr	r2, [r3, #0]
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800af16:	429a      	cmp	r2, r3
 800af18:	d109      	bne.n	800af2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800af1a:	4a38      	ldr	r2, [pc, #224]	; (800affc <inc_lock+0x118>)
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	011b      	lsls	r3, r3, #4
 800af20:	4413      	add	r3, r2
 800af22:	3308      	adds	r3, #8
 800af24:	681a      	ldr	r2, [r3, #0]
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d006      	beq.n	800af3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	3301      	adds	r3, #1
 800af32:	60fb      	str	r3, [r7, #12]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d9dc      	bls.n	800aef4 <inc_lock+0x10>
 800af3a:	e000      	b.n	800af3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800af3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	2b02      	cmp	r3, #2
 800af42:	d132      	bne.n	800afaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800af44:	2300      	movs	r3, #0
 800af46:	60fb      	str	r3, [r7, #12]
 800af48:	e002      	b.n	800af50 <inc_lock+0x6c>
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	3301      	adds	r3, #1
 800af4e:	60fb      	str	r3, [r7, #12]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d806      	bhi.n	800af64 <inc_lock+0x80>
 800af56:	4a29      	ldr	r2, [pc, #164]	; (800affc <inc_lock+0x118>)
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	011b      	lsls	r3, r3, #4
 800af5c:	4413      	add	r3, r2
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	2b00      	cmp	r3, #0
 800af62:	d1f2      	bne.n	800af4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	2b02      	cmp	r3, #2
 800af68:	d101      	bne.n	800af6e <inc_lock+0x8a>
 800af6a:	2300      	movs	r3, #0
 800af6c:	e040      	b.n	800aff0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	4922      	ldr	r1, [pc, #136]	; (800affc <inc_lock+0x118>)
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	011b      	lsls	r3, r3, #4
 800af78:	440b      	add	r3, r1
 800af7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	689a      	ldr	r2, [r3, #8]
 800af80:	491e      	ldr	r1, [pc, #120]	; (800affc <inc_lock+0x118>)
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	011b      	lsls	r3, r3, #4
 800af86:	440b      	add	r3, r1
 800af88:	3304      	adds	r3, #4
 800af8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af90:	491a      	ldr	r1, [pc, #104]	; (800affc <inc_lock+0x118>)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	011b      	lsls	r3, r3, #4
 800af96:	440b      	add	r3, r1
 800af98:	3308      	adds	r3, #8
 800af9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800af9c:	4a17      	ldr	r2, [pc, #92]	; (800affc <inc_lock+0x118>)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	011b      	lsls	r3, r3, #4
 800afa2:	4413      	add	r3, r2
 800afa4:	330c      	adds	r3, #12
 800afa6:	2200      	movs	r2, #0
 800afa8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d009      	beq.n	800afc4 <inc_lock+0xe0>
 800afb0:	4a12      	ldr	r2, [pc, #72]	; (800affc <inc_lock+0x118>)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	011b      	lsls	r3, r3, #4
 800afb6:	4413      	add	r3, r2
 800afb8:	330c      	adds	r3, #12
 800afba:	881b      	ldrh	r3, [r3, #0]
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d001      	beq.n	800afc4 <inc_lock+0xe0>
 800afc0:	2300      	movs	r3, #0
 800afc2:	e015      	b.n	800aff0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d108      	bne.n	800afdc <inc_lock+0xf8>
 800afca:	4a0c      	ldr	r2, [pc, #48]	; (800affc <inc_lock+0x118>)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	011b      	lsls	r3, r3, #4
 800afd0:	4413      	add	r3, r2
 800afd2:	330c      	adds	r3, #12
 800afd4:	881b      	ldrh	r3, [r3, #0]
 800afd6:	3301      	adds	r3, #1
 800afd8:	b29a      	uxth	r2, r3
 800afda:	e001      	b.n	800afe0 <inc_lock+0xfc>
 800afdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800afe0:	4906      	ldr	r1, [pc, #24]	; (800affc <inc_lock+0x118>)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	011b      	lsls	r3, r3, #4
 800afe6:	440b      	add	r3, r1
 800afe8:	330c      	adds	r3, #12
 800afea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
}
 800aff0:	4618      	mov	r0, r3
 800aff2:	3714      	adds	r7, #20
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20002e0c 	.word	0x20002e0c

0800b000 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b000:	b480      	push	{r7}
 800b002:	b085      	sub	sp, #20
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	607b      	str	r3, [r7, #4]
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b01      	cmp	r3, #1
 800b012:	d825      	bhi.n	800b060 <dec_lock+0x60>
		n = Files[i].ctr;
 800b014:	4a17      	ldr	r2, [pc, #92]	; (800b074 <dec_lock+0x74>)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	011b      	lsls	r3, r3, #4
 800b01a:	4413      	add	r3, r2
 800b01c:	330c      	adds	r3, #12
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b022:	89fb      	ldrh	r3, [r7, #14]
 800b024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b028:	d101      	bne.n	800b02e <dec_lock+0x2e>
 800b02a:	2300      	movs	r3, #0
 800b02c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b02e:	89fb      	ldrh	r3, [r7, #14]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <dec_lock+0x3a>
 800b034:	89fb      	ldrh	r3, [r7, #14]
 800b036:	3b01      	subs	r3, #1
 800b038:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b03a:	4a0e      	ldr	r2, [pc, #56]	; (800b074 <dec_lock+0x74>)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	011b      	lsls	r3, r3, #4
 800b040:	4413      	add	r3, r2
 800b042:	330c      	adds	r3, #12
 800b044:	89fa      	ldrh	r2, [r7, #14]
 800b046:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b048:	89fb      	ldrh	r3, [r7, #14]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d105      	bne.n	800b05a <dec_lock+0x5a>
 800b04e:	4a09      	ldr	r2, [pc, #36]	; (800b074 <dec_lock+0x74>)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	4413      	add	r3, r2
 800b056:	2200      	movs	r2, #0
 800b058:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	737b      	strb	r3, [r7, #13]
 800b05e:	e001      	b.n	800b064 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b060:	2302      	movs	r3, #2
 800b062:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b064:	7b7b      	ldrb	r3, [r7, #13]
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20002e0c 	.word	0x20002e0c

0800b078 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b080:	2300      	movs	r3, #0
 800b082:	60fb      	str	r3, [r7, #12]
 800b084:	e010      	b.n	800b0a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b086:	4a0d      	ldr	r2, [pc, #52]	; (800b0bc <clear_lock+0x44>)
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	011b      	lsls	r3, r3, #4
 800b08c:	4413      	add	r3, r2
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	429a      	cmp	r2, r3
 800b094:	d105      	bne.n	800b0a2 <clear_lock+0x2a>
 800b096:	4a09      	ldr	r2, [pc, #36]	; (800b0bc <clear_lock+0x44>)
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	011b      	lsls	r3, r3, #4
 800b09c:	4413      	add	r3, r2
 800b09e:	2200      	movs	r2, #0
 800b0a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	3301      	adds	r3, #1
 800b0a6:	60fb      	str	r3, [r7, #12]
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	2b01      	cmp	r3, #1
 800b0ac:	d9eb      	bls.n	800b086 <clear_lock+0xe>
	}
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	3714      	adds	r7, #20
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ba:	4770      	bx	lr
 800b0bc:	20002e0c 	.word	0x20002e0c

0800b0c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b086      	sub	sp, #24
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	78db      	ldrb	r3, [r3, #3]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d034      	beq.n	800b13e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	7858      	ldrb	r0, [r3, #1]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	697a      	ldr	r2, [r7, #20]
 800b0e8:	f7ff fbdc 	bl	800a8a4 <disk_write>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	d002      	beq.n	800b0f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b0f2:	2301      	movs	r3, #1
 800b0f4:	73fb      	strb	r3, [r7, #15]
 800b0f6:	e022      	b.n	800b13e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b102:	697a      	ldr	r2, [r7, #20]
 800b104:	1ad2      	subs	r2, r2, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d217      	bcs.n	800b13e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	789b      	ldrb	r3, [r3, #2]
 800b112:	613b      	str	r3, [r7, #16]
 800b114:	e010      	b.n	800b138 <sync_window+0x78>
					wsect += fs->fsize;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	697a      	ldr	r2, [r7, #20]
 800b11c:	4413      	add	r3, r2
 800b11e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	7858      	ldrb	r0, [r3, #1]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b12a:	2301      	movs	r3, #1
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	f7ff fbb9 	bl	800a8a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	3b01      	subs	r3, #1
 800b136:	613b      	str	r3, [r7, #16]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	2b01      	cmp	r3, #1
 800b13c:	d8eb      	bhi.n	800b116 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
 800b150:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	683a      	ldr	r2, [r7, #0]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d01b      	beq.n	800b198 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b160:	6878      	ldr	r0, [r7, #4]
 800b162:	f7ff ffad 	bl	800b0c0 <sync_window>
 800b166:	4603      	mov	r3, r0
 800b168:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d113      	bne.n	800b198 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	7858      	ldrb	r0, [r3, #1]
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b17a:	2301      	movs	r3, #1
 800b17c:	683a      	ldr	r2, [r7, #0]
 800b17e:	f7ff fb71 	bl	800a864 <disk_read>
 800b182:	4603      	mov	r3, r0
 800b184:	2b00      	cmp	r3, #0
 800b186:	d004      	beq.n	800b192 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b188:	f04f 33ff 	mov.w	r3, #4294967295
 800b18c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b18e:	2301      	movs	r3, #1
 800b190:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	683a      	ldr	r2, [r7, #0]
 800b196:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800b198:	7bfb      	ldrb	r3, [r7, #15]
}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3710      	adds	r7, #16
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
	...

0800b1a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b084      	sub	sp, #16
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f7ff ff87 	bl	800b0c0 <sync_window>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d158      	bne.n	800b26e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	2b03      	cmp	r3, #3
 800b1c2:	d148      	bne.n	800b256 <sync_fs+0xb2>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	791b      	ldrb	r3, [r3, #4]
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d144      	bne.n	800b256 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	3338      	adds	r3, #56	; 0x38
 800b1d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fda8 	bl	800ad2c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	3338      	adds	r3, #56	; 0x38
 800b1e0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b1e4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7ff fcaf 	bl	800ab4c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	3338      	adds	r3, #56	; 0x38
 800b1f2:	4921      	ldr	r1, [pc, #132]	; (800b278 <sync_fs+0xd4>)
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f7ff fcc4 	bl	800ab82 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b1fa:	687b      	ldr	r3, [r7, #4]
 800b1fc:	3338      	adds	r3, #56	; 0x38
 800b1fe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b202:	491e      	ldr	r1, [pc, #120]	; (800b27c <sync_fs+0xd8>)
 800b204:	4618      	mov	r0, r3
 800b206:	f7ff fcbc 	bl	800ab82 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	3338      	adds	r3, #56	; 0x38
 800b20e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	699b      	ldr	r3, [r3, #24]
 800b216:	4619      	mov	r1, r3
 800b218:	4610      	mov	r0, r2
 800b21a:	f7ff fcb2 	bl	800ab82 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	3338      	adds	r3, #56	; 0x38
 800b222:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	695b      	ldr	r3, [r3, #20]
 800b22a:	4619      	mov	r1, r3
 800b22c:	4610      	mov	r0, r2
 800b22e:	f7ff fca8 	bl	800ab82 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	7858      	ldrb	r0, [r3, #1]
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b24a:	2301      	movs	r3, #1
 800b24c:	f7ff fb2a 	bl	800a8a4 <disk_write>
			fs->fsi_flag = 0;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	785b      	ldrb	r3, [r3, #1]
 800b25a:	2200      	movs	r2, #0
 800b25c:	2100      	movs	r1, #0
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fb40 	bl	800a8e4 <disk_ioctl>
 800b264:	4603      	mov	r3, r0
 800b266:	2b00      	cmp	r3, #0
 800b268:	d001      	beq.n	800b26e <sync_fs+0xca>
 800b26a:	2301      	movs	r3, #1
 800b26c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b270:	4618      	mov	r0, r3
 800b272:	3710      	adds	r7, #16
 800b274:	46bd      	mov	sp, r7
 800b276:	bd80      	pop	{r7, pc}
 800b278:	41615252 	.word	0x41615252
 800b27c:	61417272 	.word	0x61417272

0800b280 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b280:	b480      	push	{r7}
 800b282:	b083      	sub	sp, #12
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	3b02      	subs	r3, #2
 800b28e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	69db      	ldr	r3, [r3, #28]
 800b294:	3b02      	subs	r3, #2
 800b296:	683a      	ldr	r2, [r7, #0]
 800b298:	429a      	cmp	r2, r3
 800b29a:	d301      	bcc.n	800b2a0 <clust2sect+0x20>
 800b29c:	2300      	movs	r3, #0
 800b29e:	e008      	b.n	800b2b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	895b      	ldrh	r3, [r3, #10]
 800b2a4:	461a      	mov	r2, r3
 800b2a6:	683b      	ldr	r3, [r7, #0]
 800b2a8:	fb03 f202 	mul.w	r2, r3, r2
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b2b0:	4413      	add	r3, r2
}
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	370c      	adds	r7, #12
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2bc:	4770      	bx	lr
	...

0800b2c0 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b088      	sub	sp, #32
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
 800b2c8:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b2ca:	6879      	ldr	r1, [r7, #4]
 800b2cc:	6809      	ldr	r1, [r1, #0]
 800b2ce:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b2d0:	6839      	ldr	r1, [r7, #0]
 800b2d2:	2901      	cmp	r1, #1
 800b2d4:	d904      	bls.n	800b2e0 <get_fat+0x20>
 800b2d6:	69b9      	ldr	r1, [r7, #24]
 800b2d8:	69c9      	ldr	r1, [r1, #28]
 800b2da:	6838      	ldr	r0, [r7, #0]
 800b2dc:	4288      	cmp	r0, r1
 800b2de:	d302      	bcc.n	800b2e6 <get_fat+0x26>
		val = 1;	/* Internal error */
 800b2e0:	2301      	movs	r3, #1
 800b2e2:	61fb      	str	r3, [r7, #28]
 800b2e4:	e101      	b.n	800b4ea <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b2e6:	f04f 31ff 	mov.w	r1, #4294967295
 800b2ea:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800b2ec:	69b9      	ldr	r1, [r7, #24]
 800b2ee:	7809      	ldrb	r1, [r1, #0]
 800b2f0:	3901      	subs	r1, #1
 800b2f2:	2903      	cmp	r1, #3
 800b2f4:	f200 80ed 	bhi.w	800b4d2 <get_fat+0x212>
 800b2f8:	a001      	add	r0, pc, #4	; (adr r0, 800b300 <get_fat+0x40>)
 800b2fa:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b2fe:	bf00      	nop
 800b300:	0800b311 	.word	0x0800b311
 800b304:	0800b399 	.word	0x0800b399
 800b308:	0800b3cf 	.word	0x0800b3cf
 800b30c:	0800b407 	.word	0x0800b407
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b310:	683b      	ldr	r3, [r7, #0]
 800b312:	60fb      	str	r3, [r7, #12]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	085b      	lsrs	r3, r3, #1
 800b318:	68fa      	ldr	r2, [r7, #12]
 800b31a:	4413      	add	r3, r2
 800b31c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b31e:	69bb      	ldr	r3, [r7, #24]
 800b320:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	0a5b      	lsrs	r3, r3, #9
 800b326:	4413      	add	r3, r2
 800b328:	4619      	mov	r1, r3
 800b32a:	69b8      	ldr	r0, [r7, #24]
 800b32c:	f7ff ff0c 	bl	800b148 <move_window>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	f040 80d0 	bne.w	800b4d8 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	1c5a      	adds	r2, r3, #1
 800b33c:	60fa      	str	r2, [r7, #12]
 800b33e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b342:	69ba      	ldr	r2, [r7, #24]
 800b344:	4413      	add	r3, r2
 800b346:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b34a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	0a5b      	lsrs	r3, r3, #9
 800b354:	4413      	add	r3, r2
 800b356:	4619      	mov	r1, r3
 800b358:	69b8      	ldr	r0, [r7, #24]
 800b35a:	f7ff fef5 	bl	800b148 <move_window>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b00      	cmp	r3, #0
 800b362:	f040 80bb 	bne.w	800b4dc <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	4413      	add	r3, r2
 800b370:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b374:	021b      	lsls	r3, r3, #8
 800b376:	461a      	mov	r2, r3
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b37e:	683b      	ldr	r3, [r7, #0]
 800b380:	f003 0301 	and.w	r3, r3, #1
 800b384:	2b00      	cmp	r3, #0
 800b386:	d002      	beq.n	800b38e <get_fat+0xce>
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	091b      	lsrs	r3, r3, #4
 800b38c:	e002      	b.n	800b394 <get_fat+0xd4>
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b394:	61fb      	str	r3, [r7, #28]
			break;
 800b396:	e0a8      	b.n	800b4ea <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	0a1b      	lsrs	r3, r3, #8
 800b3a0:	4413      	add	r3, r2
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	69b8      	ldr	r0, [r7, #24]
 800b3a6:	f7ff fecf 	bl	800b148 <move_window>
 800b3aa:	4603      	mov	r3, r0
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f040 8097 	bne.w	800b4e0 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b3c0:	4413      	add	r3, r2
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7ff faac 	bl	800a920 <ld_word>
 800b3c8:	4603      	mov	r3, r0
 800b3ca:	61fb      	str	r3, [r7, #28]
			break;
 800b3cc:	e08d      	b.n	800b4ea <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b3d2:	683b      	ldr	r3, [r7, #0]
 800b3d4:	09db      	lsrs	r3, r3, #7
 800b3d6:	4413      	add	r3, r2
 800b3d8:	4619      	mov	r1, r3
 800b3da:	69b8      	ldr	r0, [r7, #24]
 800b3dc:	f7ff feb4 	bl	800b148 <move_window>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d17e      	bne.n	800b4e4 <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	009b      	lsls	r3, r3, #2
 800b3f0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b3f4:	4413      	add	r3, r2
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7ff faaa 	bl	800a950 <ld_dword>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b402:	61fb      	str	r3, [r7, #28]
			break;
 800b404:	e071      	b.n	800b4ea <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800b406:	6879      	ldr	r1, [r7, #4]
 800b408:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b40c:	4301      	orrs	r1, r0
 800b40e:	d060      	beq.n	800b4d2 <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800b410:	6879      	ldr	r1, [r7, #4]
 800b412:	6889      	ldr	r1, [r1, #8]
 800b414:	6838      	ldr	r0, [r7, #0]
 800b416:	1a41      	subs	r1, r0, r1
 800b418:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800b41a:	6879      	ldr	r1, [r7, #4]
 800b41c:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800b420:	1e42      	subs	r2, r0, #1
 800b422:	f141 33ff 	adc.w	r3, r1, #4294967295
 800b426:	f04f 0000 	mov.w	r0, #0
 800b42a:	f04f 0100 	mov.w	r1, #0
 800b42e:	0a50      	lsrs	r0, r2, #9
 800b430:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800b434:	0a59      	lsrs	r1, r3, #9
 800b436:	4602      	mov	r2, r0
 800b438:	69bb      	ldr	r3, [r7, #24]
 800b43a:	895b      	ldrh	r3, [r3, #10]
 800b43c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b440:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	79db      	ldrb	r3, [r3, #7]
 800b446:	2b02      	cmp	r3, #2
 800b448:	d10e      	bne.n	800b468 <get_fat+0x1a8>
					if (cofs <= clen) {
 800b44a:	697a      	ldr	r2, [r7, #20]
 800b44c:	693b      	ldr	r3, [r7, #16]
 800b44e:	429a      	cmp	r2, r3
 800b450:	d80a      	bhi.n	800b468 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800b452:	697a      	ldr	r2, [r7, #20]
 800b454:	693b      	ldr	r3, [r7, #16]
 800b456:	429a      	cmp	r2, r3
 800b458:	d002      	beq.n	800b460 <get_fat+0x1a0>
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	3301      	adds	r3, #1
 800b45e:	e001      	b.n	800b464 <get_fat+0x1a4>
 800b460:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b464:	61fb      	str	r3, [r7, #28]
						break;
 800b466:	e040      	b.n	800b4ea <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	79db      	ldrb	r3, [r3, #7]
 800b46c:	2b03      	cmp	r3, #3
 800b46e:	d108      	bne.n	800b482 <get_fat+0x1c2>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	699b      	ldr	r3, [r3, #24]
 800b474:	697a      	ldr	r2, [r7, #20]
 800b476:	429a      	cmp	r2, r3
 800b478:	d203      	bcs.n	800b482 <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800b47a:	683b      	ldr	r3, [r7, #0]
 800b47c:	3301      	adds	r3, #1
 800b47e:	61fb      	str	r3, [r7, #28]
					break;
 800b480:	e033      	b.n	800b4ea <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	79db      	ldrb	r3, [r3, #7]
 800b486:	2b02      	cmp	r3, #2
 800b488:	d023      	beq.n	800b4d2 <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	69db      	ldr	r3, [r3, #28]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d003      	beq.n	800b49a <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800b492:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b496:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800b498:	e027      	b.n	800b4ea <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b49e:	683b      	ldr	r3, [r7, #0]
 800b4a0:	09db      	lsrs	r3, r3, #7
 800b4a2:	4413      	add	r3, r2
 800b4a4:	4619      	mov	r1, r3
 800b4a6:	69b8      	ldr	r0, [r7, #24]
 800b4a8:	f7ff fe4e 	bl	800b148 <move_window>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d11a      	bne.n	800b4e8 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800b4b2:	69bb      	ldr	r3, [r7, #24]
 800b4b4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	009b      	lsls	r3, r3, #2
 800b4bc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b4c0:	4413      	add	r3, r2
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	f7ff fa44 	bl	800a950 <ld_dword>
 800b4c8:	4603      	mov	r3, r0
 800b4ca:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b4ce:	61fb      	str	r3, [r7, #28]
					break;
 800b4d0:	e00b      	b.n	800b4ea <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	61fb      	str	r3, [r7, #28]
 800b4d6:	e008      	b.n	800b4ea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4d8:	bf00      	nop
 800b4da:	e006      	b.n	800b4ea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4dc:	bf00      	nop
 800b4de:	e004      	b.n	800b4ea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b4e0:	bf00      	nop
 800b4e2:	e002      	b.n	800b4ea <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4e4:	bf00      	nop
 800b4e6:	e000      	b.n	800b4ea <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b4e8:	bf00      	nop
		}
	}

	return val;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b4f4:	b590      	push	{r4, r7, lr}
 800b4f6:	b089      	sub	sp, #36	; 0x24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b500:	2302      	movs	r3, #2
 800b502:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2b01      	cmp	r3, #1
 800b508:	f240 80d6 	bls.w	800b6b8 <put_fat+0x1c4>
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	69db      	ldr	r3, [r3, #28]
 800b510:	68ba      	ldr	r2, [r7, #8]
 800b512:	429a      	cmp	r2, r3
 800b514:	f080 80d0 	bcs.w	800b6b8 <put_fat+0x1c4>
		switch (fs->fs_type) {
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	781b      	ldrb	r3, [r3, #0]
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	f300 80d4 	bgt.w	800b6ca <put_fat+0x1d6>
 800b522:	2b03      	cmp	r3, #3
 800b524:	f280 8093 	bge.w	800b64e <put_fat+0x15a>
 800b528:	2b01      	cmp	r3, #1
 800b52a:	d002      	beq.n	800b532 <put_fat+0x3e>
 800b52c:	2b02      	cmp	r3, #2
 800b52e:	d06e      	beq.n	800b60e <put_fat+0x11a>
 800b530:	e0cb      	b.n	800b6ca <put_fat+0x1d6>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	61bb      	str	r3, [r7, #24]
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	085b      	lsrs	r3, r3, #1
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4413      	add	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b544:	69bb      	ldr	r3, [r7, #24]
 800b546:	0a5b      	lsrs	r3, r3, #9
 800b548:	4413      	add	r3, r2
 800b54a:	4619      	mov	r1, r3
 800b54c:	68f8      	ldr	r0, [r7, #12]
 800b54e:	f7ff fdfb 	bl	800b148 <move_window>
 800b552:	4603      	mov	r3, r0
 800b554:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b556:	7ffb      	ldrb	r3, [r7, #31]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	f040 80af 	bne.w	800b6bc <put_fat+0x1c8>
			p = fs->win + bc++ % SS(fs);
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b564:	69bb      	ldr	r3, [r7, #24]
 800b566:	1c59      	adds	r1, r3, #1
 800b568:	61b9      	str	r1, [r7, #24]
 800b56a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b56e:	4413      	add	r3, r2
 800b570:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b572:	68bb      	ldr	r3, [r7, #8]
 800b574:	f003 0301 	and.w	r3, r3, #1
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00d      	beq.n	800b598 <put_fat+0xa4>
 800b57c:	697b      	ldr	r3, [r7, #20]
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b25b      	sxtb	r3, r3
 800b582:	f003 030f 	and.w	r3, r3, #15
 800b586:	b25a      	sxtb	r2, r3
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	b2db      	uxtb	r3, r3
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	b25b      	sxtb	r3, r3
 800b590:	4313      	orrs	r3, r2
 800b592:	b25b      	sxtb	r3, r3
 800b594:	b2db      	uxtb	r3, r3
 800b596:	e001      	b.n	800b59c <put_fat+0xa8>
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	b2db      	uxtb	r3, r3
 800b59c:	697a      	ldr	r2, [r7, #20]
 800b59e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	2201      	movs	r2, #1
 800b5a4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b5aa:	69bb      	ldr	r3, [r7, #24]
 800b5ac:	0a5b      	lsrs	r3, r3, #9
 800b5ae:	4413      	add	r3, r2
 800b5b0:	4619      	mov	r1, r3
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fdc8 	bl	800b148 <move_window>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b5bc:	7ffb      	ldrb	r3, [r7, #31]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d17e      	bne.n	800b6c0 <put_fat+0x1cc>
			p = fs->win + bc % SS(fs);
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5ce:	4413      	add	r3, r2
 800b5d0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d003      	beq.n	800b5e4 <put_fat+0xf0>
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	091b      	lsrs	r3, r3, #4
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	e00e      	b.n	800b602 <put_fat+0x10e>
 800b5e4:	697b      	ldr	r3, [r7, #20]
 800b5e6:	781b      	ldrb	r3, [r3, #0]
 800b5e8:	b25b      	sxtb	r3, r3
 800b5ea:	f023 030f 	bic.w	r3, r3, #15
 800b5ee:	b25a      	sxtb	r2, r3
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	0a1b      	lsrs	r3, r3, #8
 800b5f4:	b25b      	sxtb	r3, r3
 800b5f6:	f003 030f 	and.w	r3, r3, #15
 800b5fa:	b25b      	sxtb	r3, r3
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	b25b      	sxtb	r3, r3
 800b600:	b2db      	uxtb	r3, r3
 800b602:	697a      	ldr	r2, [r7, #20]
 800b604:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2201      	movs	r2, #1
 800b60a:	70da      	strb	r2, [r3, #3]
			break;
 800b60c:	e05d      	b.n	800b6ca <put_fat+0x1d6>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	0a1b      	lsrs	r3, r3, #8
 800b616:	4413      	add	r3, r2
 800b618:	4619      	mov	r1, r3
 800b61a:	68f8      	ldr	r0, [r7, #12]
 800b61c:	f7ff fd94 	bl	800b148 <move_window>
 800b620:	4603      	mov	r3, r0
 800b622:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b624:	7ffb      	ldrb	r3, [r7, #31]
 800b626:	2b00      	cmp	r3, #0
 800b628:	d14c      	bne.n	800b6c4 <put_fat+0x1d0>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	005b      	lsls	r3, r3, #1
 800b634:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b638:	4413      	add	r3, r2
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	b292      	uxth	r2, r2
 800b63e:	4611      	mov	r1, r2
 800b640:	4618      	mov	r0, r3
 800b642:	f7ff fa83 	bl	800ab4c <st_word>
			fs->wflag = 1;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	2201      	movs	r2, #1
 800b64a:	70da      	strb	r2, [r3, #3]
			break;
 800b64c:	e03d      	b.n	800b6ca <put_fat+0x1d6>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	09db      	lsrs	r3, r3, #7
 800b656:	4413      	add	r3, r2
 800b658:	4619      	mov	r1, r3
 800b65a:	68f8      	ldr	r0, [r7, #12]
 800b65c:	f7ff fd74 	bl	800b148 <move_window>
 800b660:	4603      	mov	r3, r0
 800b662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b664:	7ffb      	ldrb	r3, [r7, #31]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d12e      	bne.n	800b6c8 <put_fat+0x1d4>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	781b      	ldrb	r3, [r3, #0]
 800b66e:	2b04      	cmp	r3, #4
 800b670:	d012      	beq.n	800b698 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	009b      	lsls	r3, r3, #2
 800b682:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b686:	4413      	add	r3, r2
 800b688:	4618      	mov	r0, r3
 800b68a:	f7ff f961 	bl	800a950 <ld_dword>
 800b68e:	4603      	mov	r3, r0
 800b690:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b694:	4323      	orrs	r3, r4
 800b696:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800b69e:	68bb      	ldr	r3, [r7, #8]
 800b6a0:	009b      	lsls	r3, r3, #2
 800b6a2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b6a6:	4413      	add	r3, r2
 800b6a8:	6879      	ldr	r1, [r7, #4]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7ff fa69 	bl	800ab82 <st_dword>
			fs->wflag = 1;
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	70da      	strb	r2, [r3, #3]
			break;
 800b6b6:	e008      	b.n	800b6ca <put_fat+0x1d6>
		}
	}
 800b6b8:	bf00      	nop
 800b6ba:	e006      	b.n	800b6ca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800b6bc:	bf00      	nop
 800b6be:	e004      	b.n	800b6ca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800b6c0:	bf00      	nop
 800b6c2:	e002      	b.n	800b6ca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800b6c4:	bf00      	nop
 800b6c6:	e000      	b.n	800b6ca <put_fat+0x1d6>
			if (res != FR_OK) break;
 800b6c8:	bf00      	nop
	return res;
 800b6ca:	7ffb      	ldrb	r3, [r7, #31]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3724      	adds	r7, #36	; 0x24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd90      	pop	{r4, r7, pc}

0800b6d4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b08a      	sub	sp, #40	; 0x28
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	60f8      	str	r0, [r7, #12]
 800b6dc:	60b9      	str	r1, [r7, #8]
 800b6de:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	3b02      	subs	r3, #2
 800b6e4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	69db      	ldr	r3, [r3, #28]
 800b6ea:	3b02      	subs	r3, #2
 800b6ec:	68ba      	ldr	r2, [r7, #8]
 800b6ee:	429a      	cmp	r2, r3
 800b6f0:	d301      	bcc.n	800b6f6 <find_bitmap+0x22>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800b6f6:	68bb      	ldr	r3, [r7, #8]
 800b6f8:	61fb      	str	r3, [r7, #28]
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	61bb      	str	r3, [r7, #24]
 800b6fe:	2300      	movs	r3, #0
 800b700:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b706:	69fb      	ldr	r3, [r7, #28]
 800b708:	0b1b      	lsrs	r3, r3, #12
 800b70a:	4413      	add	r3, r2
 800b70c:	4619      	mov	r1, r3
 800b70e:	68f8      	ldr	r0, [r7, #12]
 800b710:	f7ff fd1a 	bl	800b148 <move_window>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d002      	beq.n	800b720 <find_bitmap+0x4c>
 800b71a:	f04f 33ff 	mov.w	r3, #4294967295
 800b71e:	e051      	b.n	800b7c4 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	08db      	lsrs	r3, r3, #3
 800b724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b728:	623b      	str	r3, [r7, #32]
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	f003 0307 	and.w	r3, r3, #7
 800b730:	2201      	movs	r2, #1
 800b732:	fa02 f303 	lsl.w	r3, r2, r3
 800b736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	6a3b      	ldr	r3, [r7, #32]
 800b73e:	4413      	add	r3, r2
 800b740:	3338      	adds	r3, #56	; 0x38
 800b742:	781a      	ldrb	r2, [r3, #0]
 800b744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b748:	4013      	ands	r3, r2
 800b74a:	74fb      	strb	r3, [r7, #19]
 800b74c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	3301      	adds	r3, #1
 800b75a:	61fb      	str	r3, [r7, #28]
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	69db      	ldr	r3, [r3, #28]
 800b760:	3b02      	subs	r3, #2
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	429a      	cmp	r2, r3
 800b766:	d307      	bcc.n	800b778 <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800b768:	2300      	movs	r3, #0
 800b76a:	61fb      	str	r3, [r7, #28]
 800b76c:	2300      	movs	r3, #0
 800b76e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800b772:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b776:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800b778:	7cfb      	ldrb	r3, [r7, #19]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d109      	bne.n	800b792 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	3301      	adds	r3, #1
 800b782:	617b      	str	r3, [r7, #20]
 800b784:	697a      	ldr	r2, [r7, #20]
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d106      	bne.n	800b79a <find_bitmap+0xc6>
 800b78c:	69bb      	ldr	r3, [r7, #24]
 800b78e:	3302      	adds	r3, #2
 800b790:	e018      	b.n	800b7c4 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	61bb      	str	r3, [r7, #24]
 800b796:	2300      	movs	r3, #0
 800b798:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	429a      	cmp	r2, r3
 800b7a0:	d101      	bne.n	800b7a6 <find_bitmap+0xd2>
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	e00e      	b.n	800b7c4 <find_bitmap+0xf0>
			} while (bm);
 800b7a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d1c5      	bne.n	800b73a <find_bitmap+0x66>
			bm = 1;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800b7b4:	6a3b      	ldr	r3, [r7, #32]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	623b      	str	r3, [r7, #32]
 800b7ba:	6a3b      	ldr	r3, [r7, #32]
 800b7bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b7c0:	d3bb      	bcc.n	800b73a <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800b7c2:	e79e      	b.n	800b702 <find_bitmap+0x2e>
	}
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3728      	adds	r7, #40	; 0x28
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}

0800b7cc <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	60f8      	str	r0, [r7, #12]
 800b7d4:	60b9      	str	r1, [r7, #8]
 800b7d6:	607a      	str	r2, [r7, #4]
 800b7d8:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	3b02      	subs	r3, #2
 800b7de:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	0b1b      	lsrs	r3, r3, #12
 800b7e8:	4413      	add	r3, r2
 800b7ea:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	08db      	lsrs	r3, r3, #3
 800b7f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b7f4:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800b7f6:	68bb      	ldr	r3, [r7, #8]
 800b7f8:	f003 0307 	and.w	r3, r3, #7
 800b7fc:	2201      	movs	r2, #1
 800b7fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b802:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b804:	697b      	ldr	r3, [r7, #20]
 800b806:	1c5a      	adds	r2, r3, #1
 800b808:	617a      	str	r2, [r7, #20]
 800b80a:	4619      	mov	r1, r3
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f7ff fc9b 	bl	800b148 <move_window>
 800b812:	4603      	mov	r3, r0
 800b814:	2b00      	cmp	r3, #0
 800b816:	d001      	beq.n	800b81c <change_bitmap+0x50>
 800b818:	2301      	movs	r3, #1
 800b81a:	e03d      	b.n	800b898 <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	4413      	add	r3, r2
 800b822:	3338      	adds	r3, #56	; 0x38
 800b824:	781a      	ldrb	r2, [r3, #0]
 800b826:	7ffb      	ldrb	r3, [r7, #31]
 800b828:	4013      	ands	r3, r2
 800b82a:	b2db      	uxtb	r3, r3
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bf14      	ite	ne
 800b830:	2301      	movne	r3, #1
 800b832:	2300      	moveq	r3, #0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	461a      	mov	r2, r3
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d101      	bne.n	800b842 <change_bitmap+0x76>
 800b83e:	2302      	movs	r3, #2
 800b840:	e02a      	b.n	800b898 <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800b842:	68fa      	ldr	r2, [r7, #12]
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	4413      	add	r3, r2
 800b848:	3338      	adds	r3, #56	; 0x38
 800b84a:	781a      	ldrb	r2, [r3, #0]
 800b84c:	7ffb      	ldrb	r3, [r7, #31]
 800b84e:	4053      	eors	r3, r2
 800b850:	b2d9      	uxtb	r1, r3
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	4413      	add	r3, r2
 800b858:	3338      	adds	r3, #56	; 0x38
 800b85a:	460a      	mov	r2, r1
 800b85c:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	2201      	movs	r2, #1
 800b862:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	3b01      	subs	r3, #1
 800b868:	607b      	str	r3, [r7, #4]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d101      	bne.n	800b874 <change_bitmap+0xa8>
 800b870:	2300      	movs	r3, #0
 800b872:	e011      	b.n	800b898 <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800b874:	7ffb      	ldrb	r3, [r7, #31]
 800b876:	005b      	lsls	r3, r3, #1
 800b878:	77fb      	strb	r3, [r7, #31]
 800b87a:	7ffb      	ldrb	r3, [r7, #31]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d1cd      	bne.n	800b81c <change_bitmap+0x50>
			bm = 1;
 800b880:	2301      	movs	r3, #1
 800b882:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800b884:	69bb      	ldr	r3, [r7, #24]
 800b886:	3301      	adds	r3, #1
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	69bb      	ldr	r3, [r7, #24]
 800b88c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b890:	d3c4      	bcc.n	800b81c <change_bitmap+0x50>
		i = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800b896:	e7b5      	b.n	800b804 <change_bitmap+0x38>
	}
}
 800b898:	4618      	mov	r0, r3
 800b89a:	3720      	adds	r7, #32
 800b89c:	46bd      	mov	sp, r7
 800b89e:	bd80      	pop	{r7, pc}

0800b8a0 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b086      	sub	sp, #24
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	79db      	ldrb	r3, [r3, #7]
 800b8ac:	2b03      	cmp	r3, #3
 800b8ae:	d121      	bne.n	800b8f4 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	689b      	ldr	r3, [r3, #8]
 800b8b4:	617b      	str	r3, [r7, #20]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	613b      	str	r3, [r7, #16]
 800b8bc:	e014      	b.n	800b8e8 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	6818      	ldr	r0, [r3, #0]
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	6979      	ldr	r1, [r7, #20]
 800b8ca:	f7ff fe13 	bl	800b4f4 <put_fat>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d001      	beq.n	800b8dc <fill_first_frag+0x3c>
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	e00c      	b.n	800b8f6 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800b8dc:	697b      	ldr	r3, [r7, #20]
 800b8de:	3301      	adds	r3, #1
 800b8e0:	617b      	str	r3, [r7, #20]
 800b8e2:	693b      	ldr	r3, [r7, #16]
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	613b      	str	r3, [r7, #16]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d1e7      	bne.n	800b8be <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	2200      	movs	r2, #0
 800b8f2:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3718      	adds	r7, #24
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}

0800b8fe <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800b8fe:	b580      	push	{r7, lr}
 800b900:	b086      	sub	sp, #24
 800b902:	af00      	add	r7, sp, #0
 800b904:	60f8      	str	r0, [r7, #12]
 800b906:	60b9      	str	r1, [r7, #8]
 800b908:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b90a:	e020      	b.n	800b94e <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6818      	ldr	r0, [r3, #0]
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	69db      	ldr	r3, [r3, #28]
 800b914:	68ba      	ldr	r2, [r7, #8]
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	1c59      	adds	r1, r3, #1
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	69db      	ldr	r3, [r3, #28]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d905      	bls.n	800b92e <fill_last_frag+0x30>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	69db      	ldr	r3, [r3, #28]
 800b926:	68ba      	ldr	r2, [r7, #8]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	3302      	adds	r3, #2
 800b92c:	e000      	b.n	800b930 <fill_last_frag+0x32>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	461a      	mov	r2, r3
 800b932:	f7ff fddf 	bl	800b4f4 <put_fat>
 800b936:	4603      	mov	r3, r0
 800b938:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d001      	beq.n	800b944 <fill_last_frag+0x46>
 800b940:	7dfb      	ldrb	r3, [r7, #23]
 800b942:	e009      	b.n	800b958 <fill_last_frag+0x5a>
		obj->n_frag--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	69db      	ldr	r3, [r3, #28]
 800b948:	1e5a      	subs	r2, r3, #1
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	69db      	ldr	r3, [r3, #28]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1da      	bne.n	800b90c <fill_last_frag+0xe>
	}
	return FR_OK;
 800b956:	2300      	movs	r3, #0
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b08a      	sub	sp, #40	; 0x28
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b96c:	2300      	movs	r3, #0
 800b96e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800b976:	68bb      	ldr	r3, [r7, #8]
 800b978:	627b      	str	r3, [r7, #36]	; 0x24
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d904      	bls.n	800b98e <remove_chain+0x2e>
 800b984:	69bb      	ldr	r3, [r7, #24]
 800b986:	69db      	ldr	r3, [r3, #28]
 800b988:	68ba      	ldr	r2, [r7, #8]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	d301      	bcc.n	800b992 <remove_chain+0x32>
 800b98e:	2302      	movs	r3, #2
 800b990:	e096      	b.n	800bac0 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	2b00      	cmp	r3, #0
 800b996:	d014      	beq.n	800b9c2 <remove_chain+0x62>
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	781b      	ldrb	r3, [r3, #0]
 800b99c:	2b04      	cmp	r3, #4
 800b99e:	d103      	bne.n	800b9a8 <remove_chain+0x48>
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	79db      	ldrb	r3, [r3, #7]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d00c      	beq.n	800b9c2 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b9a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b9ac:	6879      	ldr	r1, [r7, #4]
 800b9ae:	69b8      	ldr	r0, [r7, #24]
 800b9b0:	f7ff fda0 	bl	800b4f4 <put_fat>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b9b8:	7ffb      	ldrb	r3, [r7, #31]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d001      	beq.n	800b9c2 <remove_chain+0x62>
 800b9be:	7ffb      	ldrb	r3, [r7, #31]
 800b9c0:	e07e      	b.n	800bac0 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b9c2:	68b9      	ldr	r1, [r7, #8]
 800b9c4:	68f8      	ldr	r0, [r7, #12]
 800b9c6:	f7ff fc7b 	bl	800b2c0 <get_fat>
 800b9ca:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d055      	beq.n	800ba7e <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b9d2:	697b      	ldr	r3, [r7, #20]
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <remove_chain+0x7c>
 800b9d8:	2302      	movs	r3, #2
 800b9da:	e071      	b.n	800bac0 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9e2:	d101      	bne.n	800b9e8 <remove_chain+0x88>
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	e06b      	b.n	800bac0 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	781b      	ldrb	r3, [r3, #0]
 800b9ec:	2b04      	cmp	r3, #4
 800b9ee:	d00b      	beq.n	800ba08 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	68b9      	ldr	r1, [r7, #8]
 800b9f4:	69b8      	ldr	r0, [r7, #24]
 800b9f6:	f7ff fd7d 	bl	800b4f4 <put_fat>
 800b9fa:	4603      	mov	r3, r0
 800b9fc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b9fe:	7ffb      	ldrb	r3, [r7, #31]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d001      	beq.n	800ba08 <remove_chain+0xa8>
 800ba04:	7ffb      	ldrb	r3, [r7, #31]
 800ba06:	e05b      	b.n	800bac0 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ba08:	69bb      	ldr	r3, [r7, #24]
 800ba0a:	699a      	ldr	r2, [r3, #24]
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	69db      	ldr	r3, [r3, #28]
 800ba10:	3b02      	subs	r3, #2
 800ba12:	429a      	cmp	r2, r3
 800ba14:	d20b      	bcs.n	800ba2e <remove_chain+0xce>
			fs->free_clst++;
 800ba16:	69bb      	ldr	r3, [r7, #24]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	69bb      	ldr	r3, [r7, #24]
 800ba1e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	791b      	ldrb	r3, [r3, #4]
 800ba24:	f043 0301 	orr.w	r3, r3, #1
 800ba28:	b2da      	uxtb	r2, r3
 800ba2a:	69bb      	ldr	r3, [r7, #24]
 800ba2c:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800ba2e:	6a3b      	ldr	r3, [r7, #32]
 800ba30:	3301      	adds	r3, #1
 800ba32:	697a      	ldr	r2, [r7, #20]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d102      	bne.n	800ba3e <remove_chain+0xde>
			ecl = nxt;
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	623b      	str	r3, [r7, #32]
 800ba3c:	e017      	b.n	800ba6e <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800ba3e:	69bb      	ldr	r3, [r7, #24]
 800ba40:	781b      	ldrb	r3, [r3, #0]
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	d10f      	bne.n	800ba66 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800ba46:	6a3a      	ldr	r2, [r7, #32]
 800ba48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4a:	1ad3      	subs	r3, r2, r3
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	2300      	movs	r3, #0
 800ba50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ba52:	69b8      	ldr	r0, [r7, #24]
 800ba54:	f7ff feba 	bl	800b7cc <change_bitmap>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800ba5c:	7ffb      	ldrb	r3, [r7, #31]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d001      	beq.n	800ba66 <remove_chain+0x106>
 800ba62:	7ffb      	ldrb	r3, [r7, #31]
 800ba64:	e02c      	b.n	800bac0 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800ba66:	697b      	ldr	r3, [r7, #20]
 800ba68:	623b      	str	r3, [r7, #32]
 800ba6a:	6a3b      	ldr	r3, [r7, #32]
 800ba6c:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ba72:	69bb      	ldr	r3, [r7, #24]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	68ba      	ldr	r2, [r7, #8]
 800ba78:	429a      	cmp	r2, r3
 800ba7a:	d3a2      	bcc.n	800b9c2 <remove_chain+0x62>
 800ba7c:	e000      	b.n	800ba80 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800ba7e:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800ba80:	69bb      	ldr	r3, [r7, #24]
 800ba82:	781b      	ldrb	r3, [r3, #0]
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d11a      	bne.n	800babe <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d103      	bne.n	800ba96 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800ba8e:	68fb      	ldr	r3, [r7, #12]
 800ba90:	2200      	movs	r2, #0
 800ba92:	71da      	strb	r2, [r3, #7]
 800ba94:	e013      	b.n	800babe <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	79db      	ldrb	r3, [r3, #7]
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d10f      	bne.n	800babe <remove_chain+0x15e>
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d30a      	bcc.n	800babe <remove_chain+0x15e>
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	689a      	ldr	r2, [r3, #8]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	699b      	ldr	r3, [r3, #24]
 800bab0:	4413      	add	r3, r2
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d802      	bhi.n	800babe <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2202      	movs	r2, #2
 800babc:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800babe:	2300      	movs	r3, #0
}
 800bac0:	4618      	mov	r0, r3
 800bac2:	3728      	adds	r7, #40	; 0x28
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}

0800bac8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b088      	sub	sp, #32
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d10d      	bne.n	800bafa <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800bade:	693b      	ldr	r3, [r7, #16]
 800bae0:	695b      	ldr	r3, [r3, #20]
 800bae2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800bae4:	69bb      	ldr	r3, [r7, #24]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d004      	beq.n	800baf4 <create_chain+0x2c>
 800baea:	693b      	ldr	r3, [r7, #16]
 800baec:	69db      	ldr	r3, [r3, #28]
 800baee:	69ba      	ldr	r2, [r7, #24]
 800baf0:	429a      	cmp	r2, r3
 800baf2:	d31b      	bcc.n	800bb2c <create_chain+0x64>
 800baf4:	2301      	movs	r3, #1
 800baf6:	61bb      	str	r3, [r7, #24]
 800baf8:	e018      	b.n	800bb2c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f7ff fbdf 	bl	800b2c0 <get_fat>
 800bb02:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	2b01      	cmp	r3, #1
 800bb08:	d801      	bhi.n	800bb0e <create_chain+0x46>
 800bb0a:	2301      	movs	r3, #1
 800bb0c:	e0d9      	b.n	800bcc2 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb14:	d101      	bne.n	800bb1a <create_chain+0x52>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	e0d3      	b.n	800bcc2 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800bb1a:	693b      	ldr	r3, [r7, #16]
 800bb1c:	69db      	ldr	r3, [r3, #28]
 800bb1e:	68fa      	ldr	r2, [r7, #12]
 800bb20:	429a      	cmp	r2, r3
 800bb22:	d201      	bcs.n	800bb28 <create_chain+0x60>
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	e0cc      	b.n	800bcc2 <create_chain+0x1fa>
		scl = clst;
 800bb28:	683b      	ldr	r3, [r7, #0]
 800bb2a:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	781b      	ldrb	r3, [r3, #0]
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d164      	bne.n	800bbfe <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800bb34:	2201      	movs	r2, #1
 800bb36:	69b9      	ldr	r1, [r7, #24]
 800bb38:	6938      	ldr	r0, [r7, #16]
 800bb3a:	f7ff fdcb 	bl	800b6d4 <find_bitmap>
 800bb3e:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d003      	beq.n	800bb4e <create_chain+0x86>
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb4c:	d101      	bne.n	800bb52 <create_chain+0x8a>
 800bb4e:	69fb      	ldr	r3, [r7, #28]
 800bb50:	e0b7      	b.n	800bcc2 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800bb52:	2301      	movs	r3, #1
 800bb54:	2201      	movs	r2, #1
 800bb56:	69f9      	ldr	r1, [r7, #28]
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f7ff fe37 	bl	800b7cc <change_bitmap>
 800bb5e:	4603      	mov	r3, r0
 800bb60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800bb62:	7dfb      	ldrb	r3, [r7, #23]
 800bb64:	2b02      	cmp	r3, #2
 800bb66:	d101      	bne.n	800bb6c <create_chain+0xa4>
 800bb68:	2301      	movs	r3, #1
 800bb6a:	e0aa      	b.n	800bcc2 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800bb6c:	7dfb      	ldrb	r3, [r7, #23]
 800bb6e:	2b01      	cmp	r3, #1
 800bb70:	d102      	bne.n	800bb78 <create_chain+0xb0>
 800bb72:	f04f 33ff 	mov.w	r3, #4294967295
 800bb76:	e0a4      	b.n	800bcc2 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d103      	bne.n	800bb86 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	2202      	movs	r2, #2
 800bb82:	71da      	strb	r2, [r3, #7]
 800bb84:	e011      	b.n	800bbaa <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	79db      	ldrb	r3, [r3, #7]
 800bb8a:	2b02      	cmp	r3, #2
 800bb8c:	d10d      	bne.n	800bbaa <create_chain+0xe2>
 800bb8e:	69bb      	ldr	r3, [r7, #24]
 800bb90:	3301      	adds	r3, #1
 800bb92:	69fa      	ldr	r2, [r7, #28]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d008      	beq.n	800bbaa <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	689b      	ldr	r3, [r3, #8]
 800bb9c:	69ba      	ldr	r2, [r7, #24]
 800bb9e:	1ad2      	subs	r2, r2, r3
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2203      	movs	r2, #3
 800bba8:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	79db      	ldrb	r3, [r3, #7]
 800bbae:	2b02      	cmp	r3, #2
 800bbb0:	d064      	beq.n	800bc7c <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	3301      	adds	r3, #1
 800bbb6:	69fa      	ldr	r2, [r7, #28]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d10b      	bne.n	800bbd4 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	69db      	ldr	r3, [r3, #28]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d003      	beq.n	800bbcc <create_chain+0x104>
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	69db      	ldr	r3, [r3, #28]
 800bbc8:	3301      	adds	r3, #1
 800bbca:	e000      	b.n	800bbce <create_chain+0x106>
 800bbcc:	2302      	movs	r3, #2
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	61d3      	str	r3, [r2, #28]
 800bbd2:	e053      	b.n	800bc7c <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d102      	bne.n	800bbe2 <create_chain+0x11a>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2201      	movs	r2, #1
 800bbe0:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800bbe2:	69fa      	ldr	r2, [r7, #28]
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff fe89 	bl	800b8fe <fill_last_frag>
 800bbec:	4603      	mov	r3, r0
 800bbee:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800bbf0:	7dfb      	ldrb	r3, [r7, #23]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d142      	bne.n	800bc7c <create_chain+0x1b4>
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	61da      	str	r2, [r3, #28]
 800bbfc:	e03e      	b.n	800bc7c <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	3301      	adds	r3, #1
 800bc06:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800bc08:	693b      	ldr	r3, [r7, #16]
 800bc0a:	69db      	ldr	r3, [r3, #28]
 800bc0c:	69fa      	ldr	r2, [r7, #28]
 800bc0e:	429a      	cmp	r2, r3
 800bc10:	d307      	bcc.n	800bc22 <create_chain+0x15a>
				ncl = 2;
 800bc12:	2302      	movs	r3, #2
 800bc14:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800bc16:	69fa      	ldr	r2, [r7, #28]
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	429a      	cmp	r2, r3
 800bc1c:	d901      	bls.n	800bc22 <create_chain+0x15a>
 800bc1e:	2300      	movs	r3, #0
 800bc20:	e04f      	b.n	800bcc2 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800bc22:	69f9      	ldr	r1, [r7, #28]
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7ff fb4b 	bl	800b2c0 <get_fat>
 800bc2a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d00e      	beq.n	800bc50 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d003      	beq.n	800bc40 <create_chain+0x178>
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3e:	d101      	bne.n	800bc44 <create_chain+0x17c>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	e03e      	b.n	800bcc2 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800bc44:	69fa      	ldr	r2, [r7, #28]
 800bc46:	69bb      	ldr	r3, [r7, #24]
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d1da      	bne.n	800bc02 <create_chain+0x13a>
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	e038      	b.n	800bcc2 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800bc50:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800bc52:	f04f 32ff 	mov.w	r2, #4294967295
 800bc56:	69f9      	ldr	r1, [r7, #28]
 800bc58:	6938      	ldr	r0, [r7, #16]
 800bc5a:	f7ff fc4b 	bl	800b4f4 <put_fat>
 800bc5e:	4603      	mov	r3, r0
 800bc60:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d109      	bne.n	800bc7c <create_chain+0x1b4>
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d006      	beq.n	800bc7c <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800bc6e:	69fa      	ldr	r2, [r7, #28]
 800bc70:	6839      	ldr	r1, [r7, #0]
 800bc72:	6938      	ldr	r0, [r7, #16]
 800bc74:	f7ff fc3e 	bl	800b4f4 <put_fat>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800bc7c:	7dfb      	ldrb	r3, [r7, #23]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d116      	bne.n	800bcb0 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800bc82:	693b      	ldr	r3, [r7, #16]
 800bc84:	69fa      	ldr	r2, [r7, #28]
 800bc86:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	699a      	ldr	r2, [r3, #24]
 800bc8c:	693b      	ldr	r3, [r7, #16]
 800bc8e:	69db      	ldr	r3, [r3, #28]
 800bc90:	3b02      	subs	r3, #2
 800bc92:	429a      	cmp	r2, r3
 800bc94:	d804      	bhi.n	800bca0 <create_chain+0x1d8>
 800bc96:	693b      	ldr	r3, [r7, #16]
 800bc98:	699b      	ldr	r3, [r3, #24]
 800bc9a:	1e5a      	subs	r2, r3, #1
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800bca0:	693b      	ldr	r3, [r7, #16]
 800bca2:	791b      	ldrb	r3, [r3, #4]
 800bca4:	f043 0301 	orr.w	r3, r3, #1
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	711a      	strb	r2, [r3, #4]
 800bcae:	e007      	b.n	800bcc0 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800bcb0:	7dfb      	ldrb	r3, [r7, #23]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d102      	bne.n	800bcbc <create_chain+0x1f4>
 800bcb6:	f04f 33ff 	mov.w	r3, #4294967295
 800bcba:	e000      	b.n	800bcbe <create_chain+0x1f6>
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800bcc0:	69fb      	ldr	r3, [r7, #28]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800bcca:	b5b0      	push	{r4, r5, r7, lr}
 800bccc:	b088      	sub	sp, #32
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	60f8      	str	r0, [r7, #12]
 800bcd2:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bce0:	3304      	adds	r3, #4
 800bce2:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800bce4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bce8:	f04f 0000 	mov.w	r0, #0
 800bcec:	f04f 0100 	mov.w	r1, #0
 800bcf0:	0a50      	lsrs	r0, r2, #9
 800bcf2:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800bcf6:	0a59      	lsrs	r1, r3, #9
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	895b      	ldrh	r3, [r3, #10]
 800bcfc:	b29b      	uxth	r3, r3
 800bcfe:	2200      	movs	r2, #0
 800bd00:	461c      	mov	r4, r3
 800bd02:	4615      	mov	r5, r2
 800bd04:	4622      	mov	r2, r4
 800bd06:	462b      	mov	r3, r5
 800bd08:	f7f4 fa9c 	bl	8000244 <__aeabi_uldivmod>
 800bd0c:	4602      	mov	r2, r0
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4613      	mov	r3, r2
 800bd12:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd14:	69bb      	ldr	r3, [r7, #24]
 800bd16:	1d1a      	adds	r2, r3, #4
 800bd18:	61ba      	str	r2, [r7, #24]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800bd1e:	693b      	ldr	r3, [r7, #16]
 800bd20:	2b00      	cmp	r3, #0
 800bd22:	d101      	bne.n	800bd28 <clmt_clust+0x5e>
 800bd24:	2300      	movs	r3, #0
 800bd26:	e010      	b.n	800bd4a <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800bd28:	69fa      	ldr	r2, [r7, #28]
 800bd2a:	693b      	ldr	r3, [r7, #16]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d307      	bcc.n	800bd40 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800bd30:	69fa      	ldr	r2, [r7, #28]
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	1ad3      	subs	r3, r2, r3
 800bd36:	61fb      	str	r3, [r7, #28]
 800bd38:	69bb      	ldr	r3, [r7, #24]
 800bd3a:	3304      	adds	r3, #4
 800bd3c:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800bd3e:	e7e9      	b.n	800bd14 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800bd40:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800bd42:	69bb      	ldr	r3, [r7, #24]
 800bd44:	681a      	ldr	r2, [r3, #0]
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	4413      	add	r3, r2
}
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	3720      	adds	r7, #32
 800bd4e:	46bd      	mov	sp, r7
 800bd50:	bdb0      	pop	{r4, r5, r7, pc}

0800bd52 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800bd52:	b580      	push	{r7, lr}
 800bd54:	b086      	sub	sp, #24
 800bd56:	af00      	add	r7, sp, #0
 800bd58:	6078      	str	r0, [r7, #4]
 800bd5a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800bd62:	693b      	ldr	r3, [r7, #16]
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	2b04      	cmp	r3, #4
 800bd68:	d102      	bne.n	800bd70 <dir_sdi+0x1e>
 800bd6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd6e:	e001      	b.n	800bd74 <dir_sdi+0x22>
 800bd70:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bd74:	683b      	ldr	r3, [r7, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d904      	bls.n	800bd84 <dir_sdi+0x32>
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	f003 031f 	and.w	r3, r3, #31
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d001      	beq.n	800bd88 <dir_sdi+0x36>
		return FR_INT_ERR;
 800bd84:	2302      	movs	r3, #2
 800bd86:	e066      	b.n	800be56 <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	683a      	ldr	r2, [r7, #0]
 800bd8c:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	689b      	ldr	r3, [r3, #8]
 800bd92:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800bd94:	697b      	ldr	r3, [r7, #20]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d109      	bne.n	800bdae <dir_sdi+0x5c>
 800bd9a:	693b      	ldr	r3, [r7, #16]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d905      	bls.n	800bdae <dir_sdi+0x5c>
		clst = fs->dirbase;
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bda6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10c      	bne.n	800bdce <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	095b      	lsrs	r3, r3, #5
 800bdb8:	693a      	ldr	r2, [r7, #16]
 800bdba:	8912      	ldrh	r2, [r2, #8]
 800bdbc:	4293      	cmp	r3, r2
 800bdbe:	d301      	bcc.n	800bdc4 <dir_sdi+0x72>
 800bdc0:	2302      	movs	r3, #2
 800bdc2:	e048      	b.n	800be56 <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	639a      	str	r2, [r3, #56]	; 0x38
 800bdcc:	e029      	b.n	800be22 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800bdce:	693b      	ldr	r3, [r7, #16]
 800bdd0:	895b      	ldrh	r3, [r3, #10]
 800bdd2:	025b      	lsls	r3, r3, #9
 800bdd4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bdd6:	e019      	b.n	800be0c <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	6979      	ldr	r1, [r7, #20]
 800bddc:	4618      	mov	r0, r3
 800bdde:	f7ff fa6f 	bl	800b2c0 <get_fat>
 800bde2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdea:	d101      	bne.n	800bdf0 <dir_sdi+0x9e>
 800bdec:	2301      	movs	r3, #1
 800bdee:	e032      	b.n	800be56 <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	2b01      	cmp	r3, #1
 800bdf4:	d904      	bls.n	800be00 <dir_sdi+0xae>
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	697a      	ldr	r2, [r7, #20]
 800bdfc:	429a      	cmp	r2, r3
 800bdfe:	d301      	bcc.n	800be04 <dir_sdi+0xb2>
 800be00:	2302      	movs	r3, #2
 800be02:	e028      	b.n	800be56 <dir_sdi+0x104>
			ofs -= csz;
 800be04:	683a      	ldr	r2, [r7, #0]
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1ad3      	subs	r3, r2, r3
 800be0a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800be0c:	683a      	ldr	r2, [r7, #0]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	429a      	cmp	r2, r3
 800be12:	d2e1      	bcs.n	800bdd8 <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800be14:	6979      	ldr	r1, [r7, #20]
 800be16:	6938      	ldr	r0, [r7, #16]
 800be18:	f7ff fa32 	bl	800b280 <clust2sect>
 800be1c:	4602      	mov	r2, r0
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	697a      	ldr	r2, [r7, #20]
 800be26:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <dir_sdi+0xe2>
 800be30:	2302      	movs	r3, #2
 800be32:	e010      	b.n	800be56 <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	0a5b      	lsrs	r3, r3, #9
 800be3c:	441a      	add	r2, r3
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800be42:	693b      	ldr	r3, [r7, #16]
 800be44:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be4e:	441a      	add	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b086      	sub	sp, #24
 800be62:	af00      	add	r7, sp, #0
 800be64:	6078      	str	r0, [r7, #4]
 800be66:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be72:	3320      	adds	r3, #32
 800be74:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d00b      	beq.n	800be96 <dir_next+0x38>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	2b04      	cmp	r3, #4
 800be84:	d102      	bne.n	800be8c <dir_next+0x2e>
 800be86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8a:	e001      	b.n	800be90 <dir_next+0x32>
 800be8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	429a      	cmp	r2, r3
 800be94:	d801      	bhi.n	800be9a <dir_next+0x3c>
 800be96:	2304      	movs	r3, #4
 800be98:	e0b2      	b.n	800c000 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	f040 80a0 	bne.w	800bfe6 <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800beaa:	1c5a      	adds	r2, r3, #1
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d10b      	bne.n	800bed0 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800beb8:	68bb      	ldr	r3, [r7, #8]
 800beba:	095b      	lsrs	r3, r3, #5
 800bebc:	68fa      	ldr	r2, [r7, #12]
 800bebe:	8912      	ldrh	r2, [r2, #8]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	f0c0 8090 	bcc.w	800bfe6 <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	639a      	str	r2, [r3, #56]	; 0x38
 800becc:	2304      	movs	r3, #4
 800bece:	e097      	b.n	800c000 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	0a5b      	lsrs	r3, r3, #9
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	8952      	ldrh	r2, [r2, #10]
 800bed8:	3a01      	subs	r2, #1
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 8082 	bne.w	800bfe6 <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bee2:	687a      	ldr	r2, [r7, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bee8:	4619      	mov	r1, r3
 800beea:	4610      	mov	r0, r2
 800beec:	f7ff f9e8 	bl	800b2c0 <get_fat>
 800bef0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bef2:	697b      	ldr	r3, [r7, #20]
 800bef4:	2b01      	cmp	r3, #1
 800bef6:	d801      	bhi.n	800befc <dir_next+0x9e>
 800bef8:	2302      	movs	r3, #2
 800befa:	e081      	b.n	800c000 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf02:	d101      	bne.n	800bf08 <dir_next+0xaa>
 800bf04:	2301      	movs	r3, #1
 800bf06:	e07b      	b.n	800c000 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	69db      	ldr	r3, [r3, #28]
 800bf0c:	697a      	ldr	r2, [r7, #20]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d35f      	bcc.n	800bfd2 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d104      	bne.n	800bf22 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	639a      	str	r2, [r3, #56]	; 0x38
 800bf1e:	2304      	movs	r3, #4
 800bf20:	e06e      	b.n	800c000 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf28:	4619      	mov	r1, r3
 800bf2a:	4610      	mov	r0, r2
 800bf2c:	f7ff fdcc 	bl	800bac8 <create_chain>
 800bf30:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <dir_next+0xde>
 800bf38:	2307      	movs	r3, #7
 800bf3a:	e061      	b.n	800c000 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	2b01      	cmp	r3, #1
 800bf40:	d101      	bne.n	800bf46 <dir_next+0xe8>
 800bf42:	2302      	movs	r3, #2
 800bf44:	e05c      	b.n	800c000 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4c:	d101      	bne.n	800bf52 <dir_next+0xf4>
 800bf4e:	2301      	movs	r3, #1
 800bf50:	e056      	b.n	800c000 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	79db      	ldrb	r3, [r3, #7]
 800bf56:	f043 0304 	orr.w	r3, r3, #4
 800bf5a:	b2da      	uxtb	r2, r3
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bf60:	68f8      	ldr	r0, [r7, #12]
 800bf62:	f7ff f8ad 	bl	800b0c0 <sync_window>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d001      	beq.n	800bf70 <dir_next+0x112>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e047      	b.n	800c000 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3338      	adds	r3, #56	; 0x38
 800bf74:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bf78:	2100      	movs	r1, #0
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	f7fe fed6 	bl	800ad2c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bf80:	2300      	movs	r3, #0
 800bf82:	613b      	str	r3, [r7, #16]
 800bf84:	6979      	ldr	r1, [r7, #20]
 800bf86:	68f8      	ldr	r0, [r7, #12]
 800bf88:	f7ff f97a 	bl	800b280 <clust2sect>
 800bf8c:	4602      	mov	r2, r0
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	635a      	str	r2, [r3, #52]	; 0x34
 800bf92:	e012      	b.n	800bfba <dir_next+0x15c>
						fs->wflag = 1;
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	2201      	movs	r2, #1
 800bf98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bf9a:	68f8      	ldr	r0, [r7, #12]
 800bf9c:	f7ff f890 	bl	800b0c0 <sync_window>
 800bfa0:	4603      	mov	r3, r0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d001      	beq.n	800bfaa <dir_next+0x14c>
 800bfa6:	2301      	movs	r3, #1
 800bfa8:	e02a      	b.n	800c000 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	3301      	adds	r3, #1
 800bfae:	613b      	str	r3, [r7, #16]
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfb4:	1c5a      	adds	r2, r3, #1
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	635a      	str	r2, [r3, #52]	; 0x34
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	895b      	ldrh	r3, [r3, #10]
 800bfbe:	461a      	mov	r2, r3
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d3e6      	bcc.n	800bf94 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad2      	subs	r2, r2, r3
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800bfd8:	6979      	ldr	r1, [r7, #20]
 800bfda:	68f8      	ldr	r0, [r7, #12]
 800bfdc:	f7ff f950 	bl	800b280 <clust2sect>
 800bfe0:	4602      	mov	r2, r0
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	68ba      	ldr	r2, [r7, #8]
 800bfea:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800bff2:	68bb      	ldr	r3, [r7, #8]
 800bff4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff8:	441a      	add	r2, r3
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800bffe:	2300      	movs	r3, #0
}
 800c000:	4618      	mov	r0, r3
 800c002:	3718      	adds	r7, #24
 800c004:	46bd      	mov	sp, r7
 800c006:	bd80      	pop	{r7, pc}

0800c008 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800c018:	2100      	movs	r1, #0
 800c01a:	6878      	ldr	r0, [r7, #4]
 800c01c:	f7ff fe99 	bl	800bd52 <dir_sdi>
 800c020:	4603      	mov	r3, r0
 800c022:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c024:	7dfb      	ldrb	r3, [r7, #23]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d140      	bne.n	800c0ac <dir_alloc+0xa4>
		n = 0;
 800c02a:	2300      	movs	r3, #0
 800c02c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c032:	4619      	mov	r1, r3
 800c034:	68f8      	ldr	r0, [r7, #12]
 800c036:	f7ff f887 	bl	800b148 <move_window>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d132      	bne.n	800c0aa <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	781b      	ldrb	r3, [r3, #0]
 800c048:	2b04      	cmp	r3, #4
 800c04a:	d108      	bne.n	800c05e <dir_alloc+0x56>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c050:	781b      	ldrb	r3, [r3, #0]
 800c052:	b25b      	sxtb	r3, r3
 800c054:	43db      	mvns	r3, r3
 800c056:	b2db      	uxtb	r3, r3
 800c058:	09db      	lsrs	r3, r3, #7
 800c05a:	b2db      	uxtb	r3, r3
 800c05c:	e00f      	b.n	800c07e <dir_alloc+0x76>
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2be5      	cmp	r3, #229	; 0xe5
 800c066:	d004      	beq.n	800c072 <dir_alloc+0x6a>
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	d101      	bne.n	800c076 <dir_alloc+0x6e>
 800c072:	2301      	movs	r3, #1
 800c074:	e000      	b.n	800c078 <dir_alloc+0x70>
 800c076:	2300      	movs	r3, #0
 800c078:	f003 0301 	and.w	r3, r3, #1
 800c07c:	b2db      	uxtb	r3, r3
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d007      	beq.n	800c092 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3301      	adds	r3, #1
 800c086:	613b      	str	r3, [r7, #16]
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	429a      	cmp	r2, r3
 800c08e:	d102      	bne.n	800c096 <dir_alloc+0x8e>
 800c090:	e00c      	b.n	800c0ac <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800c092:	2300      	movs	r3, #0
 800c094:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800c096:	2101      	movs	r1, #1
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f7ff fee0 	bl	800be5e <dir_next>
 800c09e:	4603      	mov	r3, r0
 800c0a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800c0a2:	7dfb      	ldrb	r3, [r7, #23]
 800c0a4:	2b00      	cmp	r3, #0
 800c0a6:	d0c2      	beq.n	800c02e <dir_alloc+0x26>
 800c0a8:	e000      	b.n	800c0ac <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800c0aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800c0ac:	7dfb      	ldrb	r3, [r7, #23]
 800c0ae:	2b04      	cmp	r3, #4
 800c0b0:	d101      	bne.n	800c0b6 <dir_alloc+0xae>
 800c0b2:	2307      	movs	r3, #7
 800c0b4:	75fb      	strb	r3, [r7, #23]
	return res;
 800c0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3718      	adds	r7, #24
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	6078      	str	r0, [r7, #4]
 800c0c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	331a      	adds	r3, #26
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f7fe fc26 	bl	800a920 <ld_word>
 800c0d4:	4603      	mov	r3, r0
 800c0d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	2b03      	cmp	r3, #3
 800c0de:	d109      	bne.n	800c0f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	3314      	adds	r3, #20
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f7fe fc1b 	bl	800a920 <ld_word>
 800c0ea:	4603      	mov	r3, r0
 800c0ec:	041b      	lsls	r3, r3, #16
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3710      	adds	r7, #16
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}

0800c0fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800c0fe:	b580      	push	{r7, lr}
 800c100:	b084      	sub	sp, #16
 800c102:	af00      	add	r7, sp, #0
 800c104:	60f8      	str	r0, [r7, #12]
 800c106:	60b9      	str	r1, [r7, #8]
 800c108:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	331a      	adds	r3, #26
 800c10e:	687a      	ldr	r2, [r7, #4]
 800c110:	b292      	uxth	r2, r2
 800c112:	4611      	mov	r1, r2
 800c114:	4618      	mov	r0, r3
 800c116:	f7fe fd19 	bl	800ab4c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	781b      	ldrb	r3, [r3, #0]
 800c11e:	2b03      	cmp	r3, #3
 800c120:	d109      	bne.n	800c136 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	f103 0214 	add.w	r2, r3, #20
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	0c1b      	lsrs	r3, r3, #16
 800c12c:	b29b      	uxth	r3, r3
 800c12e:	4619      	mov	r1, r3
 800c130:	4610      	mov	r0, r2
 800c132:	f7fe fd0b 	bl	800ab4c <st_word>
	}
}
 800c136:	bf00      	nop
 800c138:	3710      	adds	r7, #16
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}
	...

0800c140 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800c140:	b590      	push	{r4, r7, lr}
 800c142:	b087      	sub	sp, #28
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
 800c148:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	331a      	adds	r3, #26
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fe fbe6 	bl	800a920 <ld_word>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <cmp_lfn+0x1e>
 800c15a:	2300      	movs	r3, #0
 800c15c:	e059      	b.n	800c212 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c166:	1e5a      	subs	r2, r3, #1
 800c168:	4613      	mov	r3, r2
 800c16a:	005b      	lsls	r3, r3, #1
 800c16c:	4413      	add	r3, r2
 800c16e:	009b      	lsls	r3, r3, #2
 800c170:	4413      	add	r3, r2
 800c172:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c174:	2301      	movs	r3, #1
 800c176:	81fb      	strh	r3, [r7, #14]
 800c178:	2300      	movs	r3, #0
 800c17a:	613b      	str	r3, [r7, #16]
 800c17c:	e033      	b.n	800c1e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c17e:	4a27      	ldr	r2, [pc, #156]	; (800c21c <cmp_lfn+0xdc>)
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	4413      	add	r3, r2
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	4413      	add	r3, r2
 800c18c:	4618      	mov	r0, r3
 800c18e:	f7fe fbc7 	bl	800a920 <ld_word>
 800c192:	4603      	mov	r3, r0
 800c194:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c196:	89fb      	ldrh	r3, [r7, #14]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d01a      	beq.n	800c1d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800c19c:	697b      	ldr	r3, [r7, #20]
 800c19e:	2bfe      	cmp	r3, #254	; 0xfe
 800c1a0:	d812      	bhi.n	800c1c8 <cmp_lfn+0x88>
 800c1a2:	89bb      	ldrh	r3, [r7, #12]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f002 fcc7 	bl	800eb38 <ff_wtoupper>
 800c1aa:	4603      	mov	r3, r0
 800c1ac:	461c      	mov	r4, r3
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	1c5a      	adds	r2, r3, #1
 800c1b2:	617a      	str	r2, [r7, #20]
 800c1b4:	005b      	lsls	r3, r3, #1
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	881b      	ldrh	r3, [r3, #0]
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f002 fcbb 	bl	800eb38 <ff_wtoupper>
 800c1c2:	4603      	mov	r3, r0
 800c1c4:	429c      	cmp	r4, r3
 800c1c6:	d001      	beq.n	800c1cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	e022      	b.n	800c212 <cmp_lfn+0xd2>
			}
			wc = uc;
 800c1cc:	89bb      	ldrh	r3, [r7, #12]
 800c1ce:	81fb      	strh	r3, [r7, #14]
 800c1d0:	e006      	b.n	800c1e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c1d2:	89bb      	ldrh	r3, [r7, #12]
 800c1d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c1d8:	4293      	cmp	r3, r2
 800c1da:	d001      	beq.n	800c1e0 <cmp_lfn+0xa0>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	e018      	b.n	800c212 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	3301      	adds	r3, #1
 800c1e4:	613b      	str	r3, [r7, #16]
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b0c      	cmp	r3, #12
 800c1ea:	d9c8      	bls.n	800c17e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800c1ec:	683b      	ldr	r3, [r7, #0]
 800c1ee:	781b      	ldrb	r3, [r3, #0]
 800c1f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d00b      	beq.n	800c210 <cmp_lfn+0xd0>
 800c1f8:	89fb      	ldrh	r3, [r7, #14]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d008      	beq.n	800c210 <cmp_lfn+0xd0>
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	4413      	add	r3, r2
 800c206:	881b      	ldrh	r3, [r3, #0]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d001      	beq.n	800c210 <cmp_lfn+0xd0>
 800c20c:	2300      	movs	r3, #0
 800c20e:	e000      	b.n	800c212 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800c210:	2301      	movs	r3, #1
}
 800c212:	4618      	mov	r0, r3
 800c214:	371c      	adds	r7, #28
 800c216:	46bd      	mov	sp, r7
 800c218:	bd90      	pop	{r4, r7, pc}
 800c21a:	bf00      	nop
 800c21c:	0800f898 	.word	0x0800f898

0800c220 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b086      	sub	sp, #24
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800c22a:	683b      	ldr	r3, [r7, #0]
 800c22c:	331a      	adds	r3, #26
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe fb76 	bl	800a920 <ld_word>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	d001      	beq.n	800c23e <pick_lfn+0x1e>
 800c23a:	2300      	movs	r3, #0
 800c23c:	e04d      	b.n	800c2da <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c246:	1e5a      	subs	r2, r3, #1
 800c248:	4613      	mov	r3, r2
 800c24a:	005b      	lsls	r3, r3, #1
 800c24c:	4413      	add	r3, r2
 800c24e:	009b      	lsls	r3, r3, #2
 800c250:	4413      	add	r3, r2
 800c252:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c254:	2301      	movs	r3, #1
 800c256:	81fb      	strh	r3, [r7, #14]
 800c258:	2300      	movs	r3, #0
 800c25a:	613b      	str	r3, [r7, #16]
 800c25c:	e028      	b.n	800c2b0 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800c25e:	4a21      	ldr	r2, [pc, #132]	; (800c2e4 <pick_lfn+0xc4>)
 800c260:	693b      	ldr	r3, [r7, #16]
 800c262:	4413      	add	r3, r2
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	461a      	mov	r2, r3
 800c268:	683b      	ldr	r3, [r7, #0]
 800c26a:	4413      	add	r3, r2
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fe fb57 	bl	800a920 <ld_word>
 800c272:	4603      	mov	r3, r0
 800c274:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800c276:	89fb      	ldrh	r3, [r7, #14]
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d00f      	beq.n	800c29c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	2bfe      	cmp	r3, #254	; 0xfe
 800c280:	d901      	bls.n	800c286 <pick_lfn+0x66>
 800c282:	2300      	movs	r3, #0
 800c284:	e029      	b.n	800c2da <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800c286:	89bb      	ldrh	r3, [r7, #12]
 800c288:	81fb      	strh	r3, [r7, #14]
 800c28a:	697b      	ldr	r3, [r7, #20]
 800c28c:	1c5a      	adds	r2, r3, #1
 800c28e:	617a      	str	r2, [r7, #20]
 800c290:	005b      	lsls	r3, r3, #1
 800c292:	687a      	ldr	r2, [r7, #4]
 800c294:	4413      	add	r3, r2
 800c296:	89fa      	ldrh	r2, [r7, #14]
 800c298:	801a      	strh	r2, [r3, #0]
 800c29a:	e006      	b.n	800c2aa <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800c29c:	89bb      	ldrh	r3, [r7, #12]
 800c29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d001      	beq.n	800c2aa <pick_lfn+0x8a>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	e017      	b.n	800c2da <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	3301      	adds	r3, #1
 800c2ae:	613b      	str	r3, [r7, #16]
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	2b0c      	cmp	r3, #12
 800c2b4:	d9d3      	bls.n	800c25e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800c2b6:	683b      	ldr	r3, [r7, #0]
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800c2c2:	697b      	ldr	r3, [r7, #20]
 800c2c4:	2bfe      	cmp	r3, #254	; 0xfe
 800c2c6:	d901      	bls.n	800c2cc <pick_lfn+0xac>
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	e006      	b.n	800c2da <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	005b      	lsls	r3, r3, #1
 800c2d0:	687a      	ldr	r2, [r7, #4]
 800c2d2:	4413      	add	r3, r2
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800c2d8:	2301      	movs	r3, #1
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3718      	adds	r7, #24
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	0800f898 	.word	0x0800f898

0800c2e8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b088      	sub	sp, #32
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	4611      	mov	r1, r2
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	460b      	mov	r3, r1
 800c2f8:	71fb      	strb	r3, [r7, #7]
 800c2fa:	4613      	mov	r3, r2
 800c2fc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	330d      	adds	r3, #13
 800c302:	79ba      	ldrb	r2, [r7, #6]
 800c304:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800c306:	68bb      	ldr	r3, [r7, #8]
 800c308:	330b      	adds	r3, #11
 800c30a:	220f      	movs	r2, #15
 800c30c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	330c      	adds	r3, #12
 800c312:	2200      	movs	r2, #0
 800c314:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	331a      	adds	r3, #26
 800c31a:	2100      	movs	r1, #0
 800c31c:	4618      	mov	r0, r3
 800c31e:	f7fe fc15 	bl	800ab4c <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800c322:	79fb      	ldrb	r3, [r7, #7]
 800c324:	1e5a      	subs	r2, r3, #1
 800c326:	4613      	mov	r3, r2
 800c328:	005b      	lsls	r3, r3, #1
 800c32a:	4413      	add	r3, r2
 800c32c:	009b      	lsls	r3, r3, #2
 800c32e:	4413      	add	r3, r2
 800c330:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800c332:	2300      	movs	r3, #0
 800c334:	82fb      	strh	r3, [r7, #22]
 800c336:	2300      	movs	r3, #0
 800c338:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800c33a:	8afb      	ldrh	r3, [r7, #22]
 800c33c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c340:	4293      	cmp	r3, r2
 800c342:	d007      	beq.n	800c354 <put_lfn+0x6c>
 800c344:	69fb      	ldr	r3, [r7, #28]
 800c346:	1c5a      	adds	r2, r3, #1
 800c348:	61fa      	str	r2, [r7, #28]
 800c34a:	005b      	lsls	r3, r3, #1
 800c34c:	68fa      	ldr	r2, [r7, #12]
 800c34e:	4413      	add	r3, r2
 800c350:	881b      	ldrh	r3, [r3, #0]
 800c352:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800c354:	4a17      	ldr	r2, [pc, #92]	; (800c3b4 <put_lfn+0xcc>)
 800c356:	69bb      	ldr	r3, [r7, #24]
 800c358:	4413      	add	r3, r2
 800c35a:	781b      	ldrb	r3, [r3, #0]
 800c35c:	461a      	mov	r2, r3
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	4413      	add	r3, r2
 800c362:	8afa      	ldrh	r2, [r7, #22]
 800c364:	4611      	mov	r1, r2
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe fbf0 	bl	800ab4c <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800c36c:	8afb      	ldrh	r3, [r7, #22]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <put_lfn+0x90>
 800c372:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c376:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800c378:	69bb      	ldr	r3, [r7, #24]
 800c37a:	3301      	adds	r3, #1
 800c37c:	61bb      	str	r3, [r7, #24]
 800c37e:	69bb      	ldr	r3, [r7, #24]
 800c380:	2b0c      	cmp	r3, #12
 800c382:	d9da      	bls.n	800c33a <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800c384:	8afb      	ldrh	r3, [r7, #22]
 800c386:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c38a:	4293      	cmp	r3, r2
 800c38c:	d006      	beq.n	800c39c <put_lfn+0xb4>
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	005b      	lsls	r3, r3, #1
 800c392:	68fa      	ldr	r2, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	881b      	ldrh	r3, [r3, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d103      	bne.n	800c3a4 <put_lfn+0xbc>
 800c39c:	79fb      	ldrb	r3, [r7, #7]
 800c39e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3a2:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	79fa      	ldrb	r2, [r7, #7]
 800c3a8:	701a      	strb	r2, [r3, #0]
}
 800c3aa:	bf00      	nop
 800c3ac:	3720      	adds	r7, #32
 800c3ae:	46bd      	mov	sp, r7
 800c3b0:	bd80      	pop	{r7, pc}
 800c3b2:	bf00      	nop
 800c3b4:	0800f898 	.word	0x0800f898

0800c3b8 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b08c      	sub	sp, #48	; 0x30
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	60f8      	str	r0, [r7, #12]
 800c3c0:	60b9      	str	r1, [r7, #8]
 800c3c2:	607a      	str	r2, [r7, #4]
 800c3c4:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800c3c6:	220b      	movs	r2, #11
 800c3c8:	68b9      	ldr	r1, [r7, #8]
 800c3ca:	68f8      	ldr	r0, [r7, #12]
 800c3cc:	f7fe fc8d 	bl	800acea <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	2b05      	cmp	r3, #5
 800c3d4:	d92b      	bls.n	800c42e <gen_numname+0x76>
		sr = seq;
 800c3d6:	683b      	ldr	r3, [r7, #0]
 800c3d8:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800c3da:	e022      	b.n	800c422 <gen_numname+0x6a>
			wc = *lfn++;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	1c9a      	adds	r2, r3, #2
 800c3e0:	607a      	str	r2, [r7, #4]
 800c3e2:	881b      	ldrh	r3, [r3, #0]
 800c3e4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c3ea:	e017      	b.n	800c41c <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	005a      	lsls	r2, r3, #1
 800c3f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3f2:	f003 0301 	and.w	r3, r3, #1
 800c3f6:	4413      	add	r3, r2
 800c3f8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800c3fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c3fc:	085b      	lsrs	r3, r3, #1
 800c3fe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800c400:	69fb      	ldr	r3, [r7, #28]
 800c402:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c406:	2b00      	cmp	r3, #0
 800c408:	d005      	beq.n	800c416 <gen_numname+0x5e>
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800c410:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800c414:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800c416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c418:	3301      	adds	r3, #1
 800c41a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41e:	2b0f      	cmp	r3, #15
 800c420:	d9e4      	bls.n	800c3ec <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	881b      	ldrh	r3, [r3, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d1d8      	bne.n	800c3dc <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800c42a:	69fb      	ldr	r3, [r7, #28]
 800c42c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800c42e:	2307      	movs	r3, #7
 800c430:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	b2db      	uxtb	r3, r3
 800c436:	f003 030f 	and.w	r3, r3, #15
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	3330      	adds	r3, #48	; 0x30
 800c43e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800c442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c446:	2b39      	cmp	r3, #57	; 0x39
 800c448:	d904      	bls.n	800c454 <gen_numname+0x9c>
 800c44a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800c44e:	3307      	adds	r3, #7
 800c450:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800c454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c456:	1e5a      	subs	r2, r3, #1
 800c458:	62ba      	str	r2, [r7, #40]	; 0x28
 800c45a:	3330      	adds	r3, #48	; 0x30
 800c45c:	443b      	add	r3, r7
 800c45e:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800c462:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	091b      	lsrs	r3, r3, #4
 800c46a:	603b      	str	r3, [r7, #0]
	} while (seq);
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d1df      	bne.n	800c432 <gen_numname+0x7a>
	ns[i] = '~';
 800c472:	f107 0214 	add.w	r2, r7, #20
 800c476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c478:	4413      	add	r3, r2
 800c47a:	227e      	movs	r2, #126	; 0x7e
 800c47c:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800c47e:	2300      	movs	r3, #0
 800c480:	627b      	str	r3, [r7, #36]	; 0x24
 800c482:	e002      	b.n	800c48a <gen_numname+0xd2>
 800c484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c486:	3301      	adds	r3, #1
 800c488:	627b      	str	r3, [r7, #36]	; 0x24
 800c48a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c48c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c48e:	429a      	cmp	r2, r3
 800c490:	d205      	bcs.n	800c49e <gen_numname+0xe6>
 800c492:	68fa      	ldr	r2, [r7, #12]
 800c494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c496:	4413      	add	r3, r2
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	2b20      	cmp	r3, #32
 800c49c:	d1f2      	bne.n	800c484 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800c49e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a0:	2b07      	cmp	r3, #7
 800c4a2:	d807      	bhi.n	800c4b4 <gen_numname+0xfc>
 800c4a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4a6:	1c5a      	adds	r2, r3, #1
 800c4a8:	62ba      	str	r2, [r7, #40]	; 0x28
 800c4aa:	3330      	adds	r3, #48	; 0x30
 800c4ac:	443b      	add	r3, r7
 800c4ae:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800c4b2:	e000      	b.n	800c4b6 <gen_numname+0xfe>
 800c4b4:	2120      	movs	r1, #32
 800c4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4b8:	1c5a      	adds	r2, r3, #1
 800c4ba:	627a      	str	r2, [r7, #36]	; 0x24
 800c4bc:	68fa      	ldr	r2, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	460a      	mov	r2, r1
 800c4c2:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4c6:	2b07      	cmp	r3, #7
 800c4c8:	d9e9      	bls.n	800c49e <gen_numname+0xe6>
}
 800c4ca:	bf00      	nop
 800c4cc:	bf00      	nop
 800c4ce:	3730      	adds	r7, #48	; 0x30
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}

0800c4d4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800c4d4:	b480      	push	{r7}
 800c4d6:	b085      	sub	sp, #20
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800c4e0:	230b      	movs	r3, #11
 800c4e2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800c4e4:	7bfb      	ldrb	r3, [r7, #15]
 800c4e6:	b2da      	uxtb	r2, r3
 800c4e8:	0852      	lsrs	r2, r2, #1
 800c4ea:	01db      	lsls	r3, r3, #7
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	b2da      	uxtb	r2, r3
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	1c59      	adds	r1, r3, #1
 800c4f4:	6079      	str	r1, [r7, #4]
 800c4f6:	781b      	ldrb	r3, [r3, #0]
 800c4f8:	4413      	add	r3, r2
 800c4fa:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	60bb      	str	r3, [r7, #8]
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2b00      	cmp	r3, #0
 800c506:	d1ed      	bne.n	800c4e4 <sum_sfn+0x10>
	return sum;
 800c508:	7bfb      	ldrb	r3, [r7, #15]
}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3714      	adds	r7, #20
 800c50e:	46bd      	mov	sp, r7
 800c510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c514:	4770      	bx	lr

0800c516 <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800c516:	b480      	push	{r7}
 800c518:	b087      	sub	sp, #28
 800c51a:	af00      	add	r7, sp, #0
 800c51c:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3301      	adds	r3, #1
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	3301      	adds	r3, #1
 800c526:	015b      	lsls	r3, r3, #5
 800c528:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800c52a:	2300      	movs	r3, #0
 800c52c:	827b      	strh	r3, [r7, #18]
 800c52e:	2300      	movs	r3, #0
 800c530:	617b      	str	r3, [r7, #20]
 800c532:	e018      	b.n	800c566 <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	2b02      	cmp	r3, #2
 800c538:	d103      	bne.n	800c542 <xdir_sum+0x2c>
			i++;
 800c53a:	697b      	ldr	r3, [r7, #20]
 800c53c:	3301      	adds	r3, #1
 800c53e:	617b      	str	r3, [r7, #20]
 800c540:	e00e      	b.n	800c560 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800c542:	8a7b      	ldrh	r3, [r7, #18]
 800c544:	03db      	lsls	r3, r3, #15
 800c546:	b29a      	uxth	r2, r3
 800c548:	8a7b      	ldrh	r3, [r7, #18]
 800c54a:	085b      	lsrs	r3, r3, #1
 800c54c:	b29b      	uxth	r3, r3
 800c54e:	4413      	add	r3, r2
 800c550:	b29a      	uxth	r2, r3
 800c552:	6879      	ldr	r1, [r7, #4]
 800c554:	697b      	ldr	r3, [r7, #20]
 800c556:	440b      	add	r3, r1
 800c558:	781b      	ldrb	r3, [r3, #0]
 800c55a:	b29b      	uxth	r3, r3
 800c55c:	4413      	add	r3, r2
 800c55e:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800c560:	697b      	ldr	r3, [r7, #20]
 800c562:	3301      	adds	r3, #1
 800c564:	617b      	str	r3, [r7, #20]
 800c566:	697a      	ldr	r2, [r7, #20]
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	429a      	cmp	r2, r3
 800c56c:	d3e2      	bcc.n	800c534 <xdir_sum+0x1e>
		}
	}
	return sum;
 800c56e:	8a7b      	ldrh	r3, [r7, #18]
}
 800c570:	4618      	mov	r0, r3
 800c572:	371c      	adds	r7, #28
 800c574:	46bd      	mov	sp, r7
 800c576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c57a:	4770      	bx	lr

0800c57c <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800c57c:	b580      	push	{r7, lr}
 800c57e:	b084      	sub	sp, #16
 800c580:	af00      	add	r7, sp, #0
 800c582:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800c584:	2300      	movs	r3, #0
 800c586:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800c588:	e01f      	b.n	800c5ca <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800c58a:	89bb      	ldrh	r3, [r7, #12]
 800c58c:	4618      	mov	r0, r3
 800c58e:	f002 fad3 	bl	800eb38 <ff_wtoupper>
 800c592:	4603      	mov	r3, r0
 800c594:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800c596:	89fb      	ldrh	r3, [r7, #14]
 800c598:	03db      	lsls	r3, r3, #15
 800c59a:	b29a      	uxth	r2, r3
 800c59c:	89fb      	ldrh	r3, [r7, #14]
 800c59e:	085b      	lsrs	r3, r3, #1
 800c5a0:	b29b      	uxth	r3, r3
 800c5a2:	4413      	add	r3, r2
 800c5a4:	b29a      	uxth	r2, r3
 800c5a6:	89bb      	ldrh	r3, [r7, #12]
 800c5a8:	b2db      	uxtb	r3, r3
 800c5aa:	b29b      	uxth	r3, r3
 800c5ac:	4413      	add	r3, r2
 800c5ae:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800c5b0:	89fb      	ldrh	r3, [r7, #14]
 800c5b2:	03db      	lsls	r3, r3, #15
 800c5b4:	b29a      	uxth	r2, r3
 800c5b6:	89fb      	ldrh	r3, [r7, #14]
 800c5b8:	085b      	lsrs	r3, r3, #1
 800c5ba:	b29b      	uxth	r3, r3
 800c5bc:	4413      	add	r3, r2
 800c5be:	b29a      	uxth	r2, r3
 800c5c0:	89bb      	ldrh	r3, [r7, #12]
 800c5c2:	0a1b      	lsrs	r3, r3, #8
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4413      	add	r3, r2
 800c5c8:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	1c9a      	adds	r2, r3, #2
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	881b      	ldrh	r3, [r3, #0]
 800c5d2:	81bb      	strh	r3, [r7, #12]
 800c5d4:	89bb      	ldrh	r3, [r7, #12]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1d7      	bne.n	800c58a <xname_sum+0xe>
	}
	return sum;
 800c5da:	89fb      	ldrh	r3, [r7, #14]
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800c5e4:	b590      	push	{r4, r7, lr}
 800c5e6:	b087      	sub	sp, #28
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681a      	ldr	r2, [r3, #0]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	4610      	mov	r0, r2
 800c600:	f7fe fda2 	bl	800b148 <move_window>
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
 800c60a:	2b00      	cmp	r3, #0
 800c60c:	d001      	beq.n	800c612 <load_xdir+0x2e>
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	e09f      	b.n	800c752 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	2b85      	cmp	r3, #133	; 0x85
 800c61a:	d001      	beq.n	800c620 <load_xdir+0x3c>
 800c61c:	2302      	movs	r3, #2
 800c61e:	e098      	b.n	800c752 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c624:	2220      	movs	r2, #32
 800c626:	4619      	mov	r1, r3
 800c628:	6938      	ldr	r0, [r7, #16]
 800c62a:	f7fe fb5e 	bl	800acea <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	3301      	adds	r3, #1
 800c632:	781b      	ldrb	r3, [r3, #0]
 800c634:	3301      	adds	r3, #1
 800c636:	015b      	lsls	r3, r3, #5
 800c638:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b5f      	cmp	r3, #95	; 0x5f
 800c63e:	d903      	bls.n	800c648 <load_xdir+0x64>
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c646:	d901      	bls.n	800c64c <load_xdir+0x68>
 800c648:	2302      	movs	r3, #2
 800c64a:	e082      	b.n	800c752 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800c64c:	2100      	movs	r1, #0
 800c64e:	6878      	ldr	r0, [r7, #4]
 800c650:	f7ff fc05 	bl	800be5e <dir_next>
 800c654:	4603      	mov	r3, r0
 800c656:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	2b00      	cmp	r3, #0
 800c65c:	d001      	beq.n	800c662 <load_xdir+0x7e>
 800c65e:	7bfb      	ldrb	r3, [r7, #15]
 800c660:	e077      	b.n	800c752 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681a      	ldr	r2, [r3, #0]
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c66a:	4619      	mov	r1, r3
 800c66c:	4610      	mov	r0, r2
 800c66e:	f7fe fd6b 	bl	800b148 <move_window>
 800c672:	4603      	mov	r3, r0
 800c674:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800c676:	7bfb      	ldrb	r3, [r7, #15]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d001      	beq.n	800c680 <load_xdir+0x9c>
 800c67c:	7bfb      	ldrb	r3, [r7, #15]
 800c67e:	e068      	b.n	800c752 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	2bc0      	cmp	r3, #192	; 0xc0
 800c688:	d001      	beq.n	800c68e <load_xdir+0xaa>
 800c68a:	2302      	movs	r3, #2
 800c68c:	e061      	b.n	800c752 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	f103 0020 	add.w	r0, r3, #32
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c698:	2220      	movs	r2, #32
 800c69a:	4619      	mov	r1, r3
 800c69c:	f7fe fb25 	bl	800acea <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800c6a0:	693b      	ldr	r3, [r7, #16]
 800c6a2:	3323      	adds	r3, #35	; 0x23
 800c6a4:	781b      	ldrb	r3, [r3, #0]
 800c6a6:	332c      	adds	r3, #44	; 0x2c
 800c6a8:	4a2c      	ldr	r2, [pc, #176]	; (800c75c <load_xdir+0x178>)
 800c6aa:	fba2 2303 	umull	r2, r3, r2, r3
 800c6ae:	08db      	lsrs	r3, r3, #3
 800c6b0:	015b      	lsls	r3, r3, #5
 800c6b2:	68ba      	ldr	r2, [r7, #8]
 800c6b4:	429a      	cmp	r2, r3
 800c6b6:	d201      	bcs.n	800c6bc <load_xdir+0xd8>
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	e04a      	b.n	800c752 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800c6bc:	2340      	movs	r3, #64	; 0x40
 800c6be:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800c6c0:	2100      	movs	r1, #0
 800c6c2:	6878      	ldr	r0, [r7, #4]
 800c6c4:	f7ff fbcb 	bl	800be5e <dir_next>
 800c6c8:	4603      	mov	r3, r0
 800c6ca:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c6cc:	7bfb      	ldrb	r3, [r7, #15]
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	d001      	beq.n	800c6d6 <load_xdir+0xf2>
 800c6d2:	7bfb      	ldrb	r3, [r7, #15]
 800c6d4:	e03d      	b.n	800c752 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681a      	ldr	r2, [r3, #0]
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6de:	4619      	mov	r1, r3
 800c6e0:	4610      	mov	r0, r2
 800c6e2:	f7fe fd31 	bl	800b148 <move_window>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <load_xdir+0x110>
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
 800c6f2:	e02e      	b.n	800c752 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c6f8:	781b      	ldrb	r3, [r3, #0]
 800c6fa:	2bc1      	cmp	r3, #193	; 0xc1
 800c6fc:	d001      	beq.n	800c702 <load_xdir+0x11e>
 800c6fe:	2302      	movs	r3, #2
 800c700:	e027      	b.n	800c752 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c708:	d208      	bcs.n	800c71c <load_xdir+0x138>
 800c70a:	693a      	ldr	r2, [r7, #16]
 800c70c:	697b      	ldr	r3, [r7, #20]
 800c70e:	18d0      	adds	r0, r2, r3
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c714:	2220      	movs	r2, #32
 800c716:	4619      	mov	r1, r3
 800c718:	f7fe fae7 	bl	800acea <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	3320      	adds	r3, #32
 800c720:	617b      	str	r3, [r7, #20]
 800c722:	697a      	ldr	r2, [r7, #20]
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	429a      	cmp	r2, r3
 800c728:	d3ca      	bcc.n	800c6c0 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800c730:	d80e      	bhi.n	800c750 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800c732:	6938      	ldr	r0, [r7, #16]
 800c734:	f7ff feef 	bl	800c516 <xdir_sum>
 800c738:	4603      	mov	r3, r0
 800c73a:	461c      	mov	r4, r3
 800c73c:	693b      	ldr	r3, [r7, #16]
 800c73e:	3302      	adds	r3, #2
 800c740:	4618      	mov	r0, r3
 800c742:	f7fe f8ed 	bl	800a920 <ld_word>
 800c746:	4603      	mov	r3, r0
 800c748:	429c      	cmp	r4, r3
 800c74a:	d001      	beq.n	800c750 <load_xdir+0x16c>
 800c74c:	2302      	movs	r3, #2
 800c74e:	e000      	b.n	800c752 <load_xdir+0x16e>
	}
	return FR_OK;
 800c750:	2300      	movs	r3, #0
}
 800c752:	4618      	mov	r0, r3
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	bd90      	pop	{r4, r7, pc}
 800c75a:	bf00      	nop
 800c75c:	88888889 	.word	0x88888889

0800c760 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800c760:	b5b0      	push	{r4, r5, r7, lr}
 800c762:	b084      	sub	sp, #16
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800c76a:	6839      	ldr	r1, [r7, #0]
 800c76c:	6808      	ldr	r0, [r1, #0]
 800c76e:	6879      	ldr	r1, [r7, #4]
 800c770:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800c772:	6839      	ldr	r1, [r7, #0]
 800c774:	6a08      	ldr	r0, [r1, #32]
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800c77a:	6839      	ldr	r1, [r7, #0]
 800c77c:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c77e:	b2c8      	uxtb	r0, r1
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800c784:	6839      	ldr	r1, [r7, #0]
 800c786:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800c788:	2000      	movs	r0, #0
 800c78a:	460c      	mov	r4, r1
 800c78c:	4605      	mov	r5, r0
 800c78e:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800c792:	2300      	movs	r3, #0
 800c794:	6879      	ldr	r1, [r7, #4]
 800c796:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7a6:	4619      	mov	r1, r3
 800c7a8:	6878      	ldr	r0, [r7, #4]
 800c7aa:	f7ff fad2 	bl	800bd52 <dir_sdi>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d104      	bne.n	800c7c2 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f7ff ff13 	bl	800c5e4 <load_xdir>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800c7c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bdb0      	pop	{r4, r5, r7, pc}

0800c7cc <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800c7cc:	b590      	push	{r4, r7, lr}
 800c7ce:	b087      	sub	sp, #28
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	691b      	ldr	r3, [r3, #16]
 800c7da:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	1c9c      	adds	r4, r3, #2
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff fe98 	bl	800c516 <xdir_sum>
 800c7e6:	4603      	mov	r3, r0
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f7fe f9ae 	bl	800ab4c <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	3301      	adds	r3, #1
 800c7f8:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f7ff faa6 	bl	800bd52 <dir_sdi>
 800c806:	4603      	mov	r3, r0
 800c808:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c80a:	e026      	b.n	800c85a <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681a      	ldr	r2, [r3, #0]
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c814:	4619      	mov	r1, r3
 800c816:	4610      	mov	r0, r2
 800c818:	f7fe fc96 	bl	800b148 <move_window>
 800c81c:	4603      	mov	r3, r0
 800c81e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c820:	7dfb      	ldrb	r3, [r7, #23]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d11d      	bne.n	800c862 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82a:	2220      	movs	r2, #32
 800c82c:	68f9      	ldr	r1, [r7, #12]
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fe fa5b 	bl	800acea <mem_cpy>
		dp->obj.fs->wflag = 1;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	2201      	movs	r2, #1
 800c83a:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800c83c:	693b      	ldr	r3, [r7, #16]
 800c83e:	3b01      	subs	r3, #1
 800c840:	613b      	str	r3, [r7, #16]
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d00e      	beq.n	800c866 <store_xdir+0x9a>
		dirb += SZDIRE;
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	3320      	adds	r3, #32
 800c84c:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800c84e:	2100      	movs	r1, #0
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f7ff fb04 	bl	800be5e <dir_next>
 800c856:	4603      	mov	r3, r0
 800c858:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d0d5      	beq.n	800c80c <store_xdir+0x40>
 800c860:	e002      	b.n	800c868 <store_xdir+0x9c>
		if (res != FR_OK) break;
 800c862:	bf00      	nop
 800c864:	e000      	b.n	800c868 <store_xdir+0x9c>
		if (--nent == 0) break;
 800c866:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800c868:	7dfb      	ldrb	r3, [r7, #23]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d002      	beq.n	800c874 <store_xdir+0xa8>
 800c86e:	7dfb      	ldrb	r3, [r7, #23]
 800c870:	2b01      	cmp	r3, #1
 800c872:	d101      	bne.n	800c878 <store_xdir+0xac>
 800c874:	7dfb      	ldrb	r3, [r7, #23]
 800c876:	e000      	b.n	800c87a <store_xdir+0xae>
 800c878:	2302      	movs	r3, #2
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	371c      	adds	r7, #28
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd90      	pop	{r4, r7, pc}

0800c882 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800c882:	b590      	push	{r4, r7, lr}
 800c884:	b085      	sub	sp, #20
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
 800c88a:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800c88c:	2240      	movs	r2, #64	; 0x40
 800c88e:	2100      	movs	r1, #0
 800c890:	6878      	ldr	r0, [r7, #4]
 800c892:	f7fe fa4b 	bl	800ad2c <mem_set>
	dirb[XDIR_Type] = 0x85;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2285      	movs	r2, #133	; 0x85
 800c89a:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	3320      	adds	r3, #32
 800c8a0:	22c0      	movs	r2, #192	; 0xc0
 800c8a2:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	72bb      	strb	r3, [r7, #10]
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	72fb      	strb	r3, [r7, #11]
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	813b      	strh	r3, [r7, #8]
 800c8b0:	2340      	movs	r3, #64	; 0x40
 800c8b2:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	60fa      	str	r2, [r7, #12]
 800c8ba:	687a      	ldr	r2, [r7, #4]
 800c8bc:	4413      	add	r3, r2
 800c8be:	22c1      	movs	r2, #193	; 0xc1
 800c8c0:	701a      	strb	r2, [r3, #0]
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	1c5a      	adds	r2, r3, #1
 800c8c6:	60fa      	str	r2, [r7, #12]
 800c8c8:	687a      	ldr	r2, [r7, #4]
 800c8ca:	4413      	add	r3, r2
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800c8d0:	893b      	ldrh	r3, [r7, #8]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d00b      	beq.n	800c8ee <create_xdir+0x6c>
 800c8d6:	7abb      	ldrb	r3, [r7, #10]
 800c8d8:	005b      	lsls	r3, r3, #1
 800c8da:	683a      	ldr	r2, [r7, #0]
 800c8dc:	4413      	add	r3, r2
 800c8de:	881b      	ldrh	r3, [r3, #0]
 800c8e0:	813b      	strh	r3, [r7, #8]
 800c8e2:	893b      	ldrh	r3, [r7, #8]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d002      	beq.n	800c8ee <create_xdir+0x6c>
 800c8e8:	7abb      	ldrb	r3, [r7, #10]
 800c8ea:	3301      	adds	r3, #1
 800c8ec:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800c8ee:	687a      	ldr	r2, [r7, #4]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	4413      	add	r3, r2
 800c8f4:	893a      	ldrh	r2, [r7, #8]
 800c8f6:	4611      	mov	r1, r2
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe f927 	bl	800ab4c <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	3302      	adds	r3, #2
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	f003 031f 	and.w	r3, r3, #31
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d1e0      	bne.n	800c8d0 <create_xdir+0x4e>
		nb++;
 800c90e:	7afb      	ldrb	r3, [r7, #11]
 800c910:	3301      	adds	r3, #1
 800c912:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800c914:	7abb      	ldrb	r3, [r7, #10]
 800c916:	005b      	lsls	r3, r3, #1
 800c918:	683a      	ldr	r2, [r7, #0]
 800c91a:	4413      	add	r3, r2
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1c8      	bne.n	800c8b4 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	3323      	adds	r3, #35	; 0x23
 800c926:	7aba      	ldrb	r2, [r7, #10]
 800c928:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	3301      	adds	r3, #1
 800c92e:	7afa      	ldrb	r2, [r7, #11]
 800c930:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800c938:	6838      	ldr	r0, [r7, #0]
 800c93a:	f7ff fe1f 	bl	800c57c <xname_sum>
 800c93e:	4603      	mov	r3, r0
 800c940:	4619      	mov	r1, r3
 800c942:	4620      	mov	r0, r4
 800c944:	f7fe f902 	bl	800ab4c <st_word>
}
 800c948:	bf00      	nop
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd90      	pop	{r4, r7, pc}

0800c950 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
 800c958:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800c95a:	2304      	movs	r3, #4
 800c95c:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800c964:	23ff      	movs	r3, #255	; 0xff
 800c966:	757b      	strb	r3, [r7, #21]
 800c968:	23ff      	movs	r3, #255	; 0xff
 800c96a:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800c96c:	e09f      	b.n	800caae <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c972:	4619      	mov	r1, r3
 800c974:	6938      	ldr	r0, [r7, #16]
 800c976:	f7fe fbe7 	bl	800b148 <move_window>
 800c97a:	4603      	mov	r3, r0
 800c97c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	2b00      	cmp	r3, #0
 800c982:	f040 809a 	bne.w	800caba <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c98a:	781b      	ldrb	r3, [r3, #0]
 800c98c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800c98e:	7dbb      	ldrb	r3, [r7, #22]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d102      	bne.n	800c99a <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800c994:	2304      	movs	r3, #4
 800c996:	75fb      	strb	r3, [r7, #23]
 800c998:	e096      	b.n	800cac8 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	781b      	ldrb	r3, [r3, #0]
 800c99e:	2b04      	cmp	r3, #4
 800c9a0:	d118      	bne.n	800c9d4 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800c9a2:	7dbb      	ldrb	r3, [r7, #22]
 800c9a4:	2b85      	cmp	r3, #133	; 0x85
 800c9a6:	d179      	bne.n	800ca9c <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800c9b0:	6878      	ldr	r0, [r7, #4]
 800c9b2:	f7ff fe17 	bl	800c5e4 <load_xdir>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800c9ba:	7dfb      	ldrb	r3, [r7, #23]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d17e      	bne.n	800cabe <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	691b      	ldr	r3, [r3, #16]
 800c9c4:	3304      	adds	r3, #4
 800c9c6:	781b      	ldrb	r3, [r3, #0]
 800c9c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9cc:	b2da      	uxtb	r2, r3
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	719a      	strb	r2, [r3, #6]
					}
					break;
 800c9d2:	e074      	b.n	800cabe <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c9d8:	330b      	adds	r3, #11
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c9e0:	73fb      	strb	r3, [r7, #15]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	7bfa      	ldrb	r2, [r7, #15]
 800c9e6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800c9e8:	7dbb      	ldrb	r3, [r7, #22]
 800c9ea:	2be5      	cmp	r3, #229	; 0xe5
 800c9ec:	d00e      	beq.n	800ca0c <dir_read+0xbc>
 800c9ee:	7dbb      	ldrb	r3, [r7, #22]
 800c9f0:	2b2e      	cmp	r3, #46	; 0x2e
 800c9f2:	d00b      	beq.n	800ca0c <dir_read+0xbc>
 800c9f4:	7bfb      	ldrb	r3, [r7, #15]
 800c9f6:	f023 0320 	bic.w	r3, r3, #32
 800c9fa:	2b08      	cmp	r3, #8
 800c9fc:	bf0c      	ite	eq
 800c9fe:	2301      	moveq	r3, #1
 800ca00:	2300      	movne	r3, #0
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	4293      	cmp	r3, r2
 800ca0a:	d002      	beq.n	800ca12 <dir_read+0xc2>
				ord = 0xFF;
 800ca0c:	23ff      	movs	r3, #255	; 0xff
 800ca0e:	757b      	strb	r3, [r7, #21]
 800ca10:	e044      	b.n	800ca9c <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800ca12:	7bfb      	ldrb	r3, [r7, #15]
 800ca14:	2b0f      	cmp	r3, #15
 800ca16:	d12f      	bne.n	800ca78 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800ca18:	7dbb      	ldrb	r3, [r7, #22]
 800ca1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d00d      	beq.n	800ca3e <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca26:	7b5b      	ldrb	r3, [r3, #13]
 800ca28:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800ca2a:	7dbb      	ldrb	r3, [r7, #22]
 800ca2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ca30:	75bb      	strb	r3, [r7, #22]
 800ca32:	7dbb      	ldrb	r3, [r7, #22]
 800ca34:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ca3e:	7dba      	ldrb	r2, [r7, #22]
 800ca40:	7d7b      	ldrb	r3, [r7, #21]
 800ca42:	429a      	cmp	r2, r3
 800ca44:	d115      	bne.n	800ca72 <dir_read+0x122>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca4a:	330d      	adds	r3, #13
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	7d3a      	ldrb	r2, [r7, #20]
 800ca50:	429a      	cmp	r2, r3
 800ca52:	d10e      	bne.n	800ca72 <dir_read+0x122>
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	68da      	ldr	r2, [r3, #12]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca5c:	4619      	mov	r1, r3
 800ca5e:	4610      	mov	r0, r2
 800ca60:	f7ff fbde 	bl	800c220 <pick_lfn>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d003      	beq.n	800ca72 <dir_read+0x122>
 800ca6a:	7d7b      	ldrb	r3, [r7, #21]
 800ca6c:	3b01      	subs	r3, #1
 800ca6e:	b2db      	uxtb	r3, r3
 800ca70:	e000      	b.n	800ca74 <dir_read+0x124>
 800ca72:	23ff      	movs	r3, #255	; 0xff
 800ca74:	757b      	strb	r3, [r7, #21]
 800ca76:	e011      	b.n	800ca9c <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800ca78:	7d7b      	ldrb	r3, [r7, #21]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d109      	bne.n	800ca92 <dir_read+0x142>
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca82:	4618      	mov	r0, r3
 800ca84:	f7ff fd26 	bl	800c4d4 <sum_sfn>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	7d3b      	ldrb	r3, [r7, #20]
 800ca8e:	4293      	cmp	r3, r2
 800ca90:	d017      	beq.n	800cac2 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	f04f 32ff 	mov.w	r2, #4294967295
 800ca98:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800ca9a:	e012      	b.n	800cac2 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800ca9c:	2100      	movs	r1, #0
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff f9dd 	bl	800be5e <dir_next>
 800caa4:	4603      	mov	r3, r0
 800caa6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d10b      	bne.n	800cac6 <dir_read+0x176>
	while (dp->sect) {
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	f47f af5b 	bne.w	800c96e <dir_read+0x1e>
 800cab8:	e006      	b.n	800cac8 <dir_read+0x178>
		if (res != FR_OK) break;
 800caba:	bf00      	nop
 800cabc:	e004      	b.n	800cac8 <dir_read+0x178>
					break;
 800cabe:	bf00      	nop
 800cac0:	e002      	b.n	800cac8 <dir_read+0x178>
					break;
 800cac2:	bf00      	nop
 800cac4:	e000      	b.n	800cac8 <dir_read+0x178>
		if (res != FR_OK) break;
 800cac6:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <dir_read+0x184>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800cad4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cad6:	4618      	mov	r0, r3
 800cad8:	3718      	adds	r7, #24
 800cada:	46bd      	mov	sp, r7
 800cadc:	bd80      	pop	{r7, pc}

0800cade <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800cade:	b590      	push	{r4, r7, lr}
 800cae0:	b089      	sub	sp, #36	; 0x24
 800cae2:	af00      	add	r7, sp, #0
 800cae4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800caec:	2100      	movs	r1, #0
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f7ff f92f 	bl	800bd52 <dir_sdi>
 800caf4:	4603      	mov	r3, r0
 800caf6:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800caf8:	7ffb      	ldrb	r3, [r7, #31]
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d001      	beq.n	800cb02 <dir_find+0x24>
 800cafe:	7ffb      	ldrb	r3, [r7, #31]
 800cb00:	e112      	b.n	800cd28 <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	2b04      	cmp	r3, #4
 800cb08:	d164      	bne.n	800cbd4 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	68db      	ldr	r3, [r3, #12]
 800cb0e:	4618      	mov	r0, r3
 800cb10:	f7ff fd34 	bl	800c57c <xname_sum>
 800cb14:	4603      	mov	r3, r0
 800cb16:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cb18:	e04f      	b.n	800cbba <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	691b      	ldr	r3, [r3, #16]
 800cb1e:	3324      	adds	r3, #36	; 0x24
 800cb20:	4618      	mov	r0, r3
 800cb22:	f7fd fefd 	bl	800a920 <ld_word>
 800cb26:	4603      	mov	r3, r0
 800cb28:	461a      	mov	r2, r3
 800cb2a:	893b      	ldrh	r3, [r7, #8]
 800cb2c:	4293      	cmp	r3, r2
 800cb2e:	d000      	beq.n	800cb32 <dir_find+0x54>
 800cb30:	e043      	b.n	800cbba <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	691b      	ldr	r3, [r3, #16]
 800cb36:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800cb3a:	76fb      	strb	r3, [r7, #27]
 800cb3c:	2340      	movs	r3, #64	; 0x40
 800cb3e:	617b      	str	r3, [r7, #20]
 800cb40:	2300      	movs	r3, #0
 800cb42:	613b      	str	r3, [r7, #16]
 800cb44:	e029      	b.n	800cb9a <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800cb46:	697b      	ldr	r3, [r7, #20]
 800cb48:	f003 031f 	and.w	r3, r3, #31
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d102      	bne.n	800cb56 <dir_find+0x78>
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	3302      	adds	r3, #2
 800cb54:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	691a      	ldr	r2, [r3, #16]
 800cb5a:	697b      	ldr	r3, [r7, #20]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	4618      	mov	r0, r3
 800cb60:	f7fd fede 	bl	800a920 <ld_word>
 800cb64:	4603      	mov	r3, r0
 800cb66:	4618      	mov	r0, r3
 800cb68:	f001 ffe6 	bl	800eb38 <ff_wtoupper>
 800cb6c:	4603      	mov	r3, r0
 800cb6e:	461c      	mov	r4, r3
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	68da      	ldr	r2, [r3, #12]
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	005b      	lsls	r3, r3, #1
 800cb78:	4413      	add	r3, r2
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	f001 ffdb 	bl	800eb38 <ff_wtoupper>
 800cb82:	4603      	mov	r3, r0
 800cb84:	429c      	cmp	r4, r3
 800cb86:	d10c      	bne.n	800cba2 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800cb88:	7efb      	ldrb	r3, [r7, #27]
 800cb8a:	3b01      	subs	r3, #1
 800cb8c:	76fb      	strb	r3, [r7, #27]
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	3302      	adds	r3, #2
 800cb92:	617b      	str	r3, [r7, #20]
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	3301      	adds	r3, #1
 800cb98:	613b      	str	r3, [r7, #16]
 800cb9a:	7efb      	ldrb	r3, [r7, #27]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d1d2      	bne.n	800cb46 <dir_find+0x68>
 800cba0:	e000      	b.n	800cba4 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800cba2:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cba4:	7efb      	ldrb	r3, [r7, #27]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d107      	bne.n	800cbba <dir_find+0xdc>
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	68da      	ldr	r2, [r3, #12]
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	005b      	lsls	r3, r3, #1
 800cbb2:	4413      	add	r3, r2
 800cbb4:	881b      	ldrh	r3, [r3, #0]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d009      	beq.n	800cbce <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800cbba:	2100      	movs	r1, #0
 800cbbc:	6878      	ldr	r0, [r7, #4]
 800cbbe:	f7ff fec7 	bl	800c950 <dir_read>
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	77fb      	strb	r3, [r7, #31]
 800cbc6:	7ffb      	ldrb	r3, [r7, #31]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d0a6      	beq.n	800cb1a <dir_find+0x3c>
 800cbcc:	e000      	b.n	800cbd0 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800cbce:	bf00      	nop
		}
		return res;
 800cbd0:	7ffb      	ldrb	r3, [r7, #31]
 800cbd2:	e0a9      	b.n	800cd28 <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cbd4:	23ff      	movs	r3, #255	; 0xff
 800cbd6:	773b      	strb	r3, [r7, #28]
 800cbd8:	7f3b      	ldrb	r3, [r7, #28]
 800cbda:	777b      	strb	r3, [r7, #29]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f04f 32ff 	mov.w	r2, #4294967295
 800cbe2:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbe8:	4619      	mov	r1, r3
 800cbea:	68f8      	ldr	r0, [r7, #12]
 800cbec:	f7fe faac 	bl	800b148 <move_window>
 800cbf0:	4603      	mov	r3, r0
 800cbf2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800cbf4:	7ffb      	ldrb	r3, [r7, #31]
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	f040 8090 	bne.w	800cd1c <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800cc04:	7fbb      	ldrb	r3, [r7, #30]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d102      	bne.n	800cc10 <dir_find+0x132>
 800cc0a:	2304      	movs	r3, #4
 800cc0c:	77fb      	strb	r3, [r7, #31]
 800cc0e:	e08a      	b.n	800cd26 <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc14:	330b      	adds	r3, #11
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc1c:	72fb      	strb	r3, [r7, #11]
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7afa      	ldrb	r2, [r7, #11]
 800cc22:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800cc24:	7fbb      	ldrb	r3, [r7, #30]
 800cc26:	2be5      	cmp	r3, #229	; 0xe5
 800cc28:	d007      	beq.n	800cc3a <dir_find+0x15c>
 800cc2a:	7afb      	ldrb	r3, [r7, #11]
 800cc2c:	f003 0308 	and.w	r3, r3, #8
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d009      	beq.n	800cc48 <dir_find+0x16a>
 800cc34:	7afb      	ldrb	r3, [r7, #11]
 800cc36:	2b0f      	cmp	r3, #15
 800cc38:	d006      	beq.n	800cc48 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800cc3a:	23ff      	movs	r3, #255	; 0xff
 800cc3c:	777b      	strb	r3, [r7, #29]
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f04f 32ff 	mov.w	r2, #4294967295
 800cc44:	64da      	str	r2, [r3, #76]	; 0x4c
 800cc46:	e05e      	b.n	800cd06 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800cc48:	7afb      	ldrb	r3, [r7, #11]
 800cc4a:	2b0f      	cmp	r3, #15
 800cc4c:	d136      	bne.n	800ccbc <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cc54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d154      	bne.n	800cd06 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800cc5c:	7fbb      	ldrb	r3, [r7, #30]
 800cc5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d00d      	beq.n	800cc82 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc6a:	7b5b      	ldrb	r3, [r3, #13]
 800cc6c:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800cc6e:	7fbb      	ldrb	r3, [r7, #30]
 800cc70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc74:	77bb      	strb	r3, [r7, #30]
 800cc76:	7fbb      	ldrb	r3, [r7, #30]
 800cc78:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800cc82:	7fba      	ldrb	r2, [r7, #30]
 800cc84:	7f7b      	ldrb	r3, [r7, #29]
 800cc86:	429a      	cmp	r2, r3
 800cc88:	d115      	bne.n	800ccb6 <dir_find+0x1d8>
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc8e:	330d      	adds	r3, #13
 800cc90:	781b      	ldrb	r3, [r3, #0]
 800cc92:	7f3a      	ldrb	r2, [r7, #28]
 800cc94:	429a      	cmp	r2, r3
 800cc96:	d10e      	bne.n	800ccb6 <dir_find+0x1d8>
 800cc98:	68fb      	ldr	r3, [r7, #12]
 800cc9a:	68da      	ldr	r2, [r3, #12]
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cca0:	4619      	mov	r1, r3
 800cca2:	4610      	mov	r0, r2
 800cca4:	f7ff fa4c 	bl	800c140 <cmp_lfn>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d003      	beq.n	800ccb6 <dir_find+0x1d8>
 800ccae:	7f7b      	ldrb	r3, [r7, #29]
 800ccb0:	3b01      	subs	r3, #1
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	e000      	b.n	800ccb8 <dir_find+0x1da>
 800ccb6:	23ff      	movs	r3, #255	; 0xff
 800ccb8:	777b      	strb	r3, [r7, #29]
 800ccba:	e024      	b.n	800cd06 <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ccbc:	7f7b      	ldrb	r3, [r7, #29]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d109      	bne.n	800ccd6 <dir_find+0x1f8>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f7ff fc04 	bl	800c4d4 <sum_sfn>
 800cccc:	4603      	mov	r3, r0
 800ccce:	461a      	mov	r2, r3
 800ccd0:	7f3b      	ldrb	r3, [r7, #28]
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d024      	beq.n	800cd20 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d10a      	bne.n	800ccfa <dir_find+0x21c>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	3340      	adds	r3, #64	; 0x40
 800ccec:	220b      	movs	r2, #11
 800ccee:	4619      	mov	r1, r3
 800ccf0:	f7fe f837 	bl	800ad62 <mem_cmp>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d014      	beq.n	800cd24 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ccfa:	23ff      	movs	r3, #255	; 0xff
 800ccfc:	777b      	strb	r3, [r7, #29]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f04f 32ff 	mov.w	r2, #4294967295
 800cd04:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800cd06:	2100      	movs	r1, #0
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f7ff f8a8 	bl	800be5e <dir_next>
 800cd0e:	4603      	mov	r3, r0
 800cd10:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800cd12:	7ffb      	ldrb	r3, [r7, #31]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f43f af65 	beq.w	800cbe4 <dir_find+0x106>
 800cd1a:	e004      	b.n	800cd26 <dir_find+0x248>
		if (res != FR_OK) break;
 800cd1c:	bf00      	nop
 800cd1e:	e002      	b.n	800cd26 <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800cd20:	bf00      	nop
 800cd22:	e000      	b.n	800cd26 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800cd24:	bf00      	nop

	return res;
 800cd26:	7ffb      	ldrb	r3, [r7, #31]
}
 800cd28:	4618      	mov	r0, r3
 800cd2a:	3724      	adds	r7, #36	; 0x24
 800cd2c:	46bd      	mov	sp, r7
 800cd2e:	bd90      	pop	{r4, r7, pc}

0800cd30 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800cd30:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800cd34:	b0a0      	sub	sp, #128	; 0x80
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800cd46:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d001      	beq.n	800cd52 <dir_register+0x22>
 800cd4e:	2306      	movs	r3, #6
 800cd50:	e18e      	b.n	800d070 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800cd52:	2300      	movs	r3, #0
 800cd54:	677b      	str	r3, [r7, #116]	; 0x74
 800cd56:	e002      	b.n	800cd5e <dir_register+0x2e>
 800cd58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	677b      	str	r3, [r7, #116]	; 0x74
 800cd5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd60:	68da      	ldr	r2, [r3, #12]
 800cd62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd64:	005b      	lsls	r3, r3, #1
 800cd66:	4413      	add	r3, r2
 800cd68:	881b      	ldrh	r3, [r3, #0]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d1f4      	bne.n	800cd58 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800cd6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd70:	781b      	ldrb	r3, [r3, #0]
 800cd72:	2b04      	cmp	r3, #4
 800cd74:	f040 809f 	bne.w	800ceb6 <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800cd78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd7a:	330e      	adds	r3, #14
 800cd7c:	4aa2      	ldr	r2, [pc, #648]	; (800d008 <dir_register+0x2d8>)
 800cd7e:	fba2 2303 	umull	r2, r3, r2, r3
 800cd82:	08db      	lsrs	r3, r3, #3
 800cd84:	3302      	adds	r3, #2
 800cd86:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800cd88:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f7ff f93c 	bl	800c008 <dir_alloc>
 800cd90:	4603      	mov	r3, r0
 800cd92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800cd96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d002      	beq.n	800cda4 <dir_register+0x74>
 800cd9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cda2:	e165      	b.n	800d070 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cda8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cdaa:	3b01      	subs	r3, #1
 800cdac:	015b      	lsls	r3, r3, #5
 800cdae:	1ad2      	subs	r2, r2, r3
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	689b      	ldr	r3, [r3, #8]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d072      	beq.n	800cea2 <dir_register+0x172>
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	79db      	ldrb	r3, [r3, #7]
 800cdc0:	f003 0304 	and.w	r3, r3, #4
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d06c      	beq.n	800cea2 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800cdce:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800cdd0:	8949      	ldrh	r1, [r1, #10]
 800cdd2:	0249      	lsls	r1, r1, #9
 800cdd4:	2000      	movs	r0, #0
 800cdd6:	460c      	mov	r4, r1
 800cdd8:	4605      	mov	r5, r0
 800cdda:	eb12 0804 	adds.w	r8, r2, r4
 800cdde:	eb43 0905 	adc.w	r9, r3, r5
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7fe fd58 	bl	800b8a0 <fill_first_frag>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800cdf6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d002      	beq.n	800ce04 <dir_register+0xd4>
 800cdfe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce02:	e135      	b.n	800d070 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0e:	4619      	mov	r1, r3
 800ce10:	f7fe fd75 	bl	800b8fe <fill_last_frag>
 800ce14:	4603      	mov	r3, r0
 800ce16:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ce1a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d002      	beq.n	800ce28 <dir_register+0xf8>
 800ce22:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce26:	e123      	b.n	800d070 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	f107 0308 	add.w	r3, r7, #8
 800ce2e:	4611      	mov	r1, r2
 800ce30:	4618      	mov	r0, r3
 800ce32:	f7ff fc95 	bl	800c760 <load_obj_dir>
 800ce36:	4603      	mov	r3, r0
 800ce38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ce3c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d002      	beq.n	800ce4a <dir_register+0x11a>
 800ce44:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce48:	e112      	b.n	800d070 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800ce4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce4c:	691b      	ldr	r3, [r3, #16]
 800ce4e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce58:	4608      	mov	r0, r1
 800ce5a:	f7fd febe 	bl	800abda <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800ce5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce60:	691b      	ldr	r3, [r3, #16]
 800ce62:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800ce6c:	4608      	mov	r0, r1
 800ce6e:	f7fd feb4 	bl	800abda <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	79da      	ldrb	r2, [r3, #7]
 800ce76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	3321      	adds	r3, #33	; 0x21
 800ce7c:	f042 0201 	orr.w	r2, r2, #1
 800ce80:	b2d2      	uxtb	r2, r2
 800ce82:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800ce84:	f107 0308 	add.w	r3, r7, #8
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fc9f 	bl	800c7cc <store_xdir>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800ce94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d002      	beq.n	800cea2 <dir_register+0x172>
 800ce9c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cea0:	e0e6      	b.n	800d070 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800cea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea4:	691a      	ldr	r2, [r3, #16]
 800cea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cea8:	68db      	ldr	r3, [r3, #12]
 800ceaa:	4619      	mov	r1, r3
 800ceac:	4610      	mov	r0, r2
 800ceae:	f7ff fce8 	bl	800c882 <create_xdir>
		return FR_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	e0dc      	b.n	800d070 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800cebc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800cec0:	220c      	movs	r2, #12
 800cec2:	4618      	mov	r0, r3
 800cec4:	f7fd ff11 	bl	800acea <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800cec8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cecc:	f003 0301 	and.w	r3, r3, #1
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d033      	beq.n	800cf3c <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2240      	movs	r2, #64	; 0x40
 800ced8:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800cedc:	2301      	movs	r3, #1
 800cede:	67bb      	str	r3, [r7, #120]	; 0x78
 800cee0:	e016      	b.n	800cf10 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800cee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ceea:	68da      	ldr	r2, [r3, #12]
 800ceec:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800cef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cef2:	f7ff fa61 	bl	800c3b8 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f7ff fdf1 	bl	800cade <dir_find>
 800cefc:	4603      	mov	r3, r0
 800cefe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800cf02:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d106      	bne.n	800cf18 <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800cf0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf0c:	3301      	adds	r3, #1
 800cf0e:	67bb      	str	r3, [r7, #120]	; 0x78
 800cf10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf12:	2b63      	cmp	r3, #99	; 0x63
 800cf14:	d9e5      	bls.n	800cee2 <dir_register+0x1b2>
 800cf16:	e000      	b.n	800cf1a <dir_register+0x1ea>
			if (res != FR_OK) break;
 800cf18:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800cf1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cf1c:	2b64      	cmp	r3, #100	; 0x64
 800cf1e:	d101      	bne.n	800cf24 <dir_register+0x1f4>
 800cf20:	2307      	movs	r3, #7
 800cf22:	e0a5      	b.n	800d070 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800cf24:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf28:	2b04      	cmp	r3, #4
 800cf2a:	d002      	beq.n	800cf32 <dir_register+0x202>
 800cf2c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf30:	e09e      	b.n	800d070 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800cf32:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800cf3c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf40:	f003 0302 	and.w	r3, r3, #2
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d007      	beq.n	800cf58 <dir_register+0x228>
 800cf48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cf4a:	330c      	adds	r3, #12
 800cf4c:	4a2f      	ldr	r2, [pc, #188]	; (800d00c <dir_register+0x2dc>)
 800cf4e:	fba2 2303 	umull	r2, r3, r2, r3
 800cf52:	089b      	lsrs	r3, r3, #2
 800cf54:	3301      	adds	r3, #1
 800cf56:	e000      	b.n	800cf5a <dir_register+0x22a>
 800cf58:	2301      	movs	r3, #1
 800cf5a:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800cf5c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f7ff f852 	bl	800c008 <dir_alloc>
 800cf64:	4603      	mov	r3, r0
 800cf66:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800cf6a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d14f      	bne.n	800d012 <dir_register+0x2e2>
 800cf72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf74:	3b01      	subs	r3, #1
 800cf76:	673b      	str	r3, [r7, #112]	; 0x70
 800cf78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d049      	beq.n	800d012 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cf84:	015b      	lsls	r3, r3, #5
 800cf86:	1ad3      	subs	r3, r2, r3
 800cf88:	4619      	mov	r1, r3
 800cf8a:	6878      	ldr	r0, [r7, #4]
 800cf8c:	f7fe fee1 	bl	800bd52 <dir_sdi>
 800cf90:	4603      	mov	r3, r0
 800cf92:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800cf96:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d139      	bne.n	800d012 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	3340      	adds	r3, #64	; 0x40
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	f7ff fa96 	bl	800c4d4 <sum_sfn>
 800cfa8:	4603      	mov	r3, r0
 800cfaa:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb2:	4619      	mov	r1, r3
 800cfb4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800cfb6:	f7fe f8c7 	bl	800b148 <move_window>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800cfc0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d123      	bne.n	800d010 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800cfc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfca:	68d8      	ldr	r0, [r3, #12]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800cfd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cfd2:	b2da      	uxtb	r2, r3
 800cfd4:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800cfd8:	f7ff f986 	bl	800c2e8 <put_lfn>
				fs->wflag = 1;
 800cfdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cfde:	2201      	movs	r2, #1
 800cfe0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800cfe2:	2100      	movs	r1, #0
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f7fe ff3a 	bl	800be5e <dir_next>
 800cfea:	4603      	mov	r3, r0
 800cfec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800cff0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d10c      	bne.n	800d012 <dir_register+0x2e2>
 800cff8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cffa:	3b01      	subs	r3, #1
 800cffc:	673b      	str	r3, [r7, #112]	; 0x70
 800cffe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d000:	2b00      	cmp	r3, #0
 800d002:	d1d4      	bne.n	800cfae <dir_register+0x27e>
 800d004:	e005      	b.n	800d012 <dir_register+0x2e2>
 800d006:	bf00      	nop
 800d008:	88888889 	.word	0x88888889
 800d00c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800d010:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d012:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d016:	2b00      	cmp	r3, #0
 800d018:	d128      	bne.n	800d06c <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d01e:	4619      	mov	r1, r3
 800d020:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d022:	f7fe f891 	bl	800b148 <move_window>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800d02c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800d030:	2b00      	cmp	r3, #0
 800d032:	d11b      	bne.n	800d06c <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d038:	2220      	movs	r2, #32
 800d03a:	2100      	movs	r1, #0
 800d03c:	4618      	mov	r0, r3
 800d03e:	f7fd fe75 	bl	800ad2c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	3340      	adds	r3, #64	; 0x40
 800d04a:	220b      	movs	r2, #11
 800d04c:	4619      	mov	r1, r3
 800d04e:	f7fd fe4c 	bl	800acea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d05c:	330c      	adds	r3, #12
 800d05e:	f002 0218 	and.w	r2, r2, #24
 800d062:	b2d2      	uxtb	r2, r2
 800d064:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800d066:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d068:	2201      	movs	r2, #1
 800d06a:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d06c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800d070:	4618      	mov	r0, r3
 800d072:	3780      	adds	r7, #128	; 0x80
 800d074:	46bd      	mov	sp, r7
 800d076:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800d07a:	bf00      	nop

0800d07c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b08a      	sub	sp, #40	; 0x28
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
 800d084:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	613b      	str	r3, [r7, #16]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	60fb      	str	r3, [r7, #12]
 800d094:	2300      	movs	r3, #0
 800d096:	617b      	str	r3, [r7, #20]
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800d09c:	69bb      	ldr	r3, [r7, #24]
 800d09e:	1c5a      	adds	r2, r3, #1
 800d0a0:	61ba      	str	r2, [r7, #24]
 800d0a2:	693a      	ldr	r2, [r7, #16]
 800d0a4:	4413      	add	r3, r2
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800d0aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ac:	2b1f      	cmp	r3, #31
 800d0ae:	d940      	bls.n	800d132 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800d0b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b2:	2b2f      	cmp	r3, #47	; 0x2f
 800d0b4:	d006      	beq.n	800d0c4 <create_name+0x48>
 800d0b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0b8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0ba:	d110      	bne.n	800d0de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d0bc:	e002      	b.n	800d0c4 <create_name+0x48>
 800d0be:	69bb      	ldr	r3, [r7, #24]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	61bb      	str	r3, [r7, #24]
 800d0c4:	693a      	ldr	r2, [r7, #16]
 800d0c6:	69bb      	ldr	r3, [r7, #24]
 800d0c8:	4413      	add	r3, r2
 800d0ca:	781b      	ldrb	r3, [r3, #0]
 800d0cc:	2b2f      	cmp	r3, #47	; 0x2f
 800d0ce:	d0f6      	beq.n	800d0be <create_name+0x42>
 800d0d0:	693a      	ldr	r2, [r7, #16]
 800d0d2:	69bb      	ldr	r3, [r7, #24]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	781b      	ldrb	r3, [r3, #0]
 800d0d8:	2b5c      	cmp	r3, #92	; 0x5c
 800d0da:	d0f0      	beq.n	800d0be <create_name+0x42>
			break;
 800d0dc:	e02a      	b.n	800d134 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	2bfe      	cmp	r3, #254	; 0xfe
 800d0e2:	d901      	bls.n	800d0e8 <create_name+0x6c>
 800d0e4:	2306      	movs	r3, #6
 800d0e6:	e17d      	b.n	800d3e4 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800d0e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0ea:	b2db      	uxtb	r3, r3
 800d0ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800d0ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0f0:	2101      	movs	r1, #1
 800d0f2:	4618      	mov	r0, r3
 800d0f4:	f001 fce4 	bl	800eac0 <ff_convert>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800d0fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	d101      	bne.n	800d106 <create_name+0x8a>
 800d102:	2306      	movs	r3, #6
 800d104:	e16e      	b.n	800d3e4 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800d106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d108:	2b7f      	cmp	r3, #127	; 0x7f
 800d10a:	d809      	bhi.n	800d120 <create_name+0xa4>
 800d10c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d10e:	4619      	mov	r1, r3
 800d110:	488d      	ldr	r0, [pc, #564]	; (800d348 <create_name+0x2cc>)
 800d112:	f7fd fe4d 	bl	800adb0 <chk_chr>
 800d116:	4603      	mov	r3, r0
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d001      	beq.n	800d120 <create_name+0xa4>
 800d11c:	2306      	movs	r3, #6
 800d11e:	e161      	b.n	800d3e4 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	1c5a      	adds	r2, r3, #1
 800d124:	617a      	str	r2, [r7, #20]
 800d126:	005b      	lsls	r3, r3, #1
 800d128:	68fa      	ldr	r2, [r7, #12]
 800d12a:	4413      	add	r3, r2
 800d12c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d12e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800d130:	e7b4      	b.n	800d09c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800d132:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800d134:	693a      	ldr	r2, [r7, #16]
 800d136:	69bb      	ldr	r3, [r7, #24]
 800d138:	441a      	add	r2, r3
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d13e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d140:	2b1f      	cmp	r3, #31
 800d142:	d801      	bhi.n	800d148 <create_name+0xcc>
 800d144:	2304      	movs	r3, #4
 800d146:	e000      	b.n	800d14a <create_name+0xce>
 800d148:	2300      	movs	r3, #0
 800d14a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d14e:	e011      	b.n	800d174 <create_name+0xf8>
		w = lfn[di - 1];
 800d150:	697b      	ldr	r3, [r7, #20]
 800d152:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d156:	3b01      	subs	r3, #1
 800d158:	005b      	lsls	r3, r3, #1
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	4413      	add	r3, r2
 800d15e:	881b      	ldrh	r3, [r3, #0]
 800d160:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800d162:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d164:	2b20      	cmp	r3, #32
 800d166:	d002      	beq.n	800d16e <create_name+0xf2>
 800d168:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d16a:	2b2e      	cmp	r3, #46	; 0x2e
 800d16c:	d106      	bne.n	800d17c <create_name+0x100>
		di--;
 800d16e:	697b      	ldr	r3, [r7, #20]
 800d170:	3b01      	subs	r3, #1
 800d172:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1ea      	bne.n	800d150 <create_name+0xd4>
 800d17a:	e000      	b.n	800d17e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800d17c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	005b      	lsls	r3, r3, #1
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4413      	add	r3, r2
 800d186:	2200      	movs	r2, #0
 800d188:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800d18a:	697b      	ldr	r3, [r7, #20]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d101      	bne.n	800d194 <create_name+0x118>
 800d190:	2306      	movs	r3, #6
 800d192:	e127      	b.n	800d3e4 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	3340      	adds	r3, #64	; 0x40
 800d198:	220b      	movs	r2, #11
 800d19a:	2120      	movs	r1, #32
 800d19c:	4618      	mov	r0, r3
 800d19e:	f7fd fdc5 	bl	800ad2c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	61bb      	str	r3, [r7, #24]
 800d1a6:	e002      	b.n	800d1ae <create_name+0x132>
 800d1a8:	69bb      	ldr	r3, [r7, #24]
 800d1aa:	3301      	adds	r3, #1
 800d1ac:	61bb      	str	r3, [r7, #24]
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	68fa      	ldr	r2, [r7, #12]
 800d1b4:	4413      	add	r3, r2
 800d1b6:	881b      	ldrh	r3, [r3, #0]
 800d1b8:	2b20      	cmp	r3, #32
 800d1ba:	d0f5      	beq.n	800d1a8 <create_name+0x12c>
 800d1bc:	69bb      	ldr	r3, [r7, #24]
 800d1be:	005b      	lsls	r3, r3, #1
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	4413      	add	r3, r2
 800d1c4:	881b      	ldrh	r3, [r3, #0]
 800d1c6:	2b2e      	cmp	r3, #46	; 0x2e
 800d1c8:	d0ee      	beq.n	800d1a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d009      	beq.n	800d1e4 <create_name+0x168>
 800d1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d1d4:	f043 0303 	orr.w	r3, r3, #3
 800d1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800d1dc:	e002      	b.n	800d1e4 <create_name+0x168>
 800d1de:	697b      	ldr	r3, [r7, #20]
 800d1e0:	3b01      	subs	r3, #1
 800d1e2:	617b      	str	r3, [r7, #20]
 800d1e4:	697b      	ldr	r3, [r7, #20]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d009      	beq.n	800d1fe <create_name+0x182>
 800d1ea:	697b      	ldr	r3, [r7, #20]
 800d1ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	005b      	lsls	r3, r3, #1
 800d1f4:	68fa      	ldr	r2, [r7, #12]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	881b      	ldrh	r3, [r3, #0]
 800d1fa:	2b2e      	cmp	r3, #46	; 0x2e
 800d1fc:	d1ef      	bne.n	800d1de <create_name+0x162>

	i = b = 0; ni = 8;
 800d1fe:	2300      	movs	r3, #0
 800d200:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d204:	2300      	movs	r3, #0
 800d206:	623b      	str	r3, [r7, #32]
 800d208:	2308      	movs	r3, #8
 800d20a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800d20c:	69bb      	ldr	r3, [r7, #24]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	61ba      	str	r2, [r7, #24]
 800d212:	005b      	lsls	r3, r3, #1
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	881b      	ldrh	r3, [r3, #0]
 800d21a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800d21c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d21e:	2b00      	cmp	r3, #0
 800d220:	f000 8090 	beq.w	800d344 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800d224:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d226:	2b20      	cmp	r3, #32
 800d228:	d006      	beq.n	800d238 <create_name+0x1bc>
 800d22a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d22c:	2b2e      	cmp	r3, #46	; 0x2e
 800d22e:	d10a      	bne.n	800d246 <create_name+0x1ca>
 800d230:	69ba      	ldr	r2, [r7, #24]
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	429a      	cmp	r2, r3
 800d236:	d006      	beq.n	800d246 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800d238:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d23c:	f043 0303 	orr.w	r3, r3, #3
 800d240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d244:	e07d      	b.n	800d342 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800d246:	6a3a      	ldr	r2, [r7, #32]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	429a      	cmp	r2, r3
 800d24c:	d203      	bcs.n	800d256 <create_name+0x1da>
 800d24e:	69ba      	ldr	r2, [r7, #24]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	429a      	cmp	r2, r3
 800d254:	d123      	bne.n	800d29e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800d256:	69fb      	ldr	r3, [r7, #28]
 800d258:	2b0b      	cmp	r3, #11
 800d25a:	d106      	bne.n	800d26a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800d25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d260:	f043 0303 	orr.w	r3, r3, #3
 800d264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d268:	e075      	b.n	800d356 <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800d26a:	69ba      	ldr	r2, [r7, #24]
 800d26c:	697b      	ldr	r3, [r7, #20]
 800d26e:	429a      	cmp	r2, r3
 800d270:	d005      	beq.n	800d27e <create_name+0x202>
 800d272:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d276:	f043 0303 	orr.w	r3, r3, #3
 800d27a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800d27e:	69ba      	ldr	r2, [r7, #24]
 800d280:	697b      	ldr	r3, [r7, #20]
 800d282:	429a      	cmp	r2, r3
 800d284:	d866      	bhi.n	800d354 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	61bb      	str	r3, [r7, #24]
 800d28a:	2308      	movs	r3, #8
 800d28c:	623b      	str	r3, [r7, #32]
 800d28e:	230b      	movs	r3, #11
 800d290:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800d292:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d29c:	e051      	b.n	800d342 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800d29e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a0:	2b7f      	cmp	r3, #127	; 0x7f
 800d2a2:	d914      	bls.n	800d2ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800d2a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2a6:	2100      	movs	r1, #0
 800d2a8:	4618      	mov	r0, r3
 800d2aa:	f001 fc09 	bl	800eac0 <ff_convert>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800d2b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d004      	beq.n	800d2c2 <create_name+0x246>
 800d2b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2ba:	3b80      	subs	r3, #128	; 0x80
 800d2bc:	4a23      	ldr	r2, [pc, #140]	; (800d34c <create_name+0x2d0>)
 800d2be:	5cd3      	ldrb	r3, [r2, r3]
 800d2c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800d2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2c6:	f043 0302 	orr.w	r3, r3, #2
 800d2ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800d2ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d007      	beq.n	800d2e4 <create_name+0x268>
 800d2d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2d6:	4619      	mov	r1, r3
 800d2d8:	481d      	ldr	r0, [pc, #116]	; (800d350 <create_name+0x2d4>)
 800d2da:	f7fd fd69 	bl	800adb0 <chk_chr>
 800d2de:	4603      	mov	r3, r0
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	d008      	beq.n	800d2f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800d2e4:	235f      	movs	r3, #95	; 0x5f
 800d2e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 800d2e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d2ec:	f043 0303 	orr.w	r3, r3, #3
 800d2f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d2f4:	e01b      	b.n	800d32e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800d2f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2f8:	2b40      	cmp	r3, #64	; 0x40
 800d2fa:	d909      	bls.n	800d310 <create_name+0x294>
 800d2fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d2fe:	2b5a      	cmp	r3, #90	; 0x5a
 800d300:	d806      	bhi.n	800d310 <create_name+0x294>
					b |= 2;
 800d302:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d306:	f043 0302 	orr.w	r3, r3, #2
 800d30a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d30e:	e00e      	b.n	800d32e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800d310:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d312:	2b60      	cmp	r3, #96	; 0x60
 800d314:	d90b      	bls.n	800d32e <create_name+0x2b2>
 800d316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d318:	2b7a      	cmp	r3, #122	; 0x7a
 800d31a:	d808      	bhi.n	800d32e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800d31c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d320:	f043 0301 	orr.w	r3, r3, #1
 800d324:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d328:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d32a:	3b20      	subs	r3, #32
 800d32c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800d32e:	6a3b      	ldr	r3, [r7, #32]
 800d330:	1c5a      	adds	r2, r3, #1
 800d332:	623a      	str	r2, [r7, #32]
 800d334:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800d336:	b2d1      	uxtb	r1, r2
 800d338:	687a      	ldr	r2, [r7, #4]
 800d33a:	4413      	add	r3, r2
 800d33c:	460a      	mov	r2, r1
 800d33e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800d342:	e763      	b.n	800d20c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800d344:	bf00      	nop
 800d346:	e006      	b.n	800d356 <create_name+0x2da>
 800d348:	0800f730 	.word	0x0800f730
 800d34c:	0800f818 	.word	0x0800f818
 800d350:	0800f73c 	.word	0x0800f73c
			if (si > di) break;			/* No extension */
 800d354:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d35c:	2be5      	cmp	r3, #229	; 0xe5
 800d35e:	d103      	bne.n	800d368 <create_name+0x2ec>
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	2205      	movs	r2, #5
 800d364:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	2b08      	cmp	r3, #8
 800d36c:	d104      	bne.n	800d378 <create_name+0x2fc>
 800d36e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800d378:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d37c:	f003 030c 	and.w	r3, r3, #12
 800d380:	2b0c      	cmp	r3, #12
 800d382:	d005      	beq.n	800d390 <create_name+0x314>
 800d384:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d388:	f003 0303 	and.w	r3, r3, #3
 800d38c:	2b03      	cmp	r3, #3
 800d38e:	d105      	bne.n	800d39c <create_name+0x320>
 800d390:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d394:	f043 0302 	orr.w	r3, r3, #2
 800d398:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800d39c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3a0:	f003 0302 	and.w	r3, r3, #2
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d117      	bne.n	800d3d8 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800d3a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3ac:	f003 0303 	and.w	r3, r3, #3
 800d3b0:	2b01      	cmp	r3, #1
 800d3b2:	d105      	bne.n	800d3c0 <create_name+0x344>
 800d3b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3b8:	f043 0310 	orr.w	r3, r3, #16
 800d3bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800d3c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3c4:	f003 030c 	and.w	r3, r3, #12
 800d3c8:	2b04      	cmp	r3, #4
 800d3ca:	d105      	bne.n	800d3d8 <create_name+0x35c>
 800d3cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3d0:	f043 0308 	orr.w	r3, r3, #8
 800d3d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800d3de:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800d3e2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3728      	adds	r7, #40	; 0x28
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}

0800d3ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d3ec:	b580      	push	{r7, lr}
 800d3ee:	b086      	sub	sp, #24
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
 800d3f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d3fa:	693b      	ldr	r3, [r7, #16]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d400:	e002      	b.n	800d408 <follow_path+0x1c>
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	3301      	adds	r3, #1
 800d406:	603b      	str	r3, [r7, #0]
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	781b      	ldrb	r3, [r3, #0]
 800d40c:	2b2f      	cmp	r3, #47	; 0x2f
 800d40e:	d0f8      	beq.n	800d402 <follow_path+0x16>
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	781b      	ldrb	r3, [r3, #0]
 800d414:	2b5c      	cmp	r3, #92	; 0x5c
 800d416:	d0f4      	beq.n	800d402 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2200      	movs	r2, #0
 800d41c:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	2200      	movs	r2, #0
 800d422:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d424:	683b      	ldr	r3, [r7, #0]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	2b1f      	cmp	r3, #31
 800d42a:	d80a      	bhi.n	800d442 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2280      	movs	r2, #128	; 0x80
 800d430:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800d434:	2100      	movs	r1, #0
 800d436:	6878      	ldr	r0, [r7, #4]
 800d438:	f7fe fc8b 	bl	800bd52 <dir_sdi>
 800d43c:	4603      	mov	r3, r0
 800d43e:	75fb      	strb	r3, [r7, #23]
 800d440:	e078      	b.n	800d534 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d442:	463b      	mov	r3, r7
 800d444:	4619      	mov	r1, r3
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7ff fe18 	bl	800d07c <create_name>
 800d44c:	4603      	mov	r3, r0
 800d44e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d450:	7dfb      	ldrb	r3, [r7, #23]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d169      	bne.n	800d52a <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d456:	6878      	ldr	r0, [r7, #4]
 800d458:	f7ff fb41 	bl	800cade <dir_find>
 800d45c:	4603      	mov	r3, r0
 800d45e:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800d466:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d00a      	beq.n	800d484 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d46e:	7dfb      	ldrb	r3, [r7, #23]
 800d470:	2b04      	cmp	r3, #4
 800d472:	d15c      	bne.n	800d52e <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d474:	7afb      	ldrb	r3, [r7, #11]
 800d476:	f003 0304 	and.w	r3, r3, #4
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d157      	bne.n	800d52e <follow_path+0x142>
 800d47e:	2305      	movs	r3, #5
 800d480:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d482:	e054      	b.n	800d52e <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d484:	7afb      	ldrb	r3, [r7, #11]
 800d486:	f003 0304 	and.w	r3, r3, #4
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d151      	bne.n	800d532 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d48e:	693b      	ldr	r3, [r7, #16]
 800d490:	799b      	ldrb	r3, [r3, #6]
 800d492:	f003 0310 	and.w	r3, r3, #16
 800d496:	2b00      	cmp	r3, #0
 800d498:	d102      	bne.n	800d4a0 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800d49a:	2305      	movs	r3, #5
 800d49c:	75fb      	strb	r3, [r7, #23]
 800d49e:	e049      	b.n	800d534 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	2b04      	cmp	r3, #4
 800d4a6:	d130      	bne.n	800d50a <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	689a      	ldr	r2, [r3, #8]
 800d4ac:	693b      	ldr	r3, [r7, #16]
 800d4ae:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800d4b6:	4613      	mov	r3, r2
 800d4b8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800d4bc:	693a      	ldr	r2, [r7, #16]
 800d4be:	79d2      	ldrb	r2, [r2, #7]
 800d4c0:	431a      	orrs	r2, r3
 800d4c2:	693b      	ldr	r3, [r7, #16]
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d4ca:	693b      	ldr	r3, [r7, #16]
 800d4cc:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	691b      	ldr	r3, [r3, #16]
 800d4d2:	3334      	adds	r3, #52	; 0x34
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f7fd fa3b 	bl	800a950 <ld_dword>
 800d4da:	4602      	mov	r2, r0
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	691b      	ldr	r3, [r3, #16]
 800d4e4:	3321      	adds	r3, #33	; 0x21
 800d4e6:	781b      	ldrb	r3, [r3, #0]
 800d4e8:	f003 0302 	and.w	r3, r3, #2
 800d4ec:	b2da      	uxtb	r2, r3
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	691b      	ldr	r3, [r3, #16]
 800d4f6:	3338      	adds	r3, #56	; 0x38
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	f7fd fa4c 	bl	800a996 <ld_qword>
 800d4fe:	4602      	mov	r2, r0
 800d500:	460b      	mov	r3, r1
 800d502:	6939      	ldr	r1, [r7, #16]
 800d504:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800d508:	e79b      	b.n	800d442 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d514:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d518:	4413      	add	r3, r2
 800d51a:	4619      	mov	r1, r3
 800d51c:	68f8      	ldr	r0, [r7, #12]
 800d51e:	f7fe fdcf 	bl	800c0c0 <ld_clust>
 800d522:	4602      	mov	r2, r0
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d528:	e78b      	b.n	800d442 <follow_path+0x56>
			if (res != FR_OK) break;
 800d52a:	bf00      	nop
 800d52c:	e002      	b.n	800d534 <follow_path+0x148>
				break;
 800d52e:	bf00      	nop
 800d530:	e000      	b.n	800d534 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d532:	bf00      	nop
			}
		}
	}

	return res;
 800d534:	7dfb      	ldrb	r3, [r7, #23]
}
 800d536:	4618      	mov	r0, r3
 800d538:	3718      	adds	r7, #24
 800d53a:	46bd      	mov	sp, r7
 800d53c:	bd80      	pop	{r7, pc}

0800d53e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d53e:	b480      	push	{r7}
 800d540:	b087      	sub	sp, #28
 800d542:	af00      	add	r7, sp, #0
 800d544:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d546:	f04f 33ff 	mov.w	r3, #4294967295
 800d54a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	2b00      	cmp	r3, #0
 800d552:	d031      	beq.n	800d5b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	617b      	str	r3, [r7, #20]
 800d55a:	e002      	b.n	800d562 <get_ldnumber+0x24>
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	3301      	adds	r3, #1
 800d560:	617b      	str	r3, [r7, #20]
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2b1f      	cmp	r3, #31
 800d568:	d903      	bls.n	800d572 <get_ldnumber+0x34>
 800d56a:	697b      	ldr	r3, [r7, #20]
 800d56c:	781b      	ldrb	r3, [r3, #0]
 800d56e:	2b3a      	cmp	r3, #58	; 0x3a
 800d570:	d1f4      	bne.n	800d55c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	2b3a      	cmp	r3, #58	; 0x3a
 800d578:	d11c      	bne.n	800d5b4 <get_ldnumber+0x76>
			tp = *path;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	60fa      	str	r2, [r7, #12]
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	3b30      	subs	r3, #48	; 0x30
 800d58a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	2b09      	cmp	r3, #9
 800d590:	d80e      	bhi.n	800d5b0 <get_ldnumber+0x72>
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	697b      	ldr	r3, [r7, #20]
 800d596:	429a      	cmp	r2, r3
 800d598:	d10a      	bne.n	800d5b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d59a:	68bb      	ldr	r3, [r7, #8]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d107      	bne.n	800d5b0 <get_ldnumber+0x72>
					vol = (int)i;
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d5a4:	697b      	ldr	r3, [r7, #20]
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	617b      	str	r3, [r7, #20]
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	697a      	ldr	r2, [r7, #20]
 800d5ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d5b0:	693b      	ldr	r3, [r7, #16]
 800d5b2:	e002      	b.n	800d5ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d5b8:	693b      	ldr	r3, [r7, #16]
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	371c      	adds	r7, #28
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c4:	4770      	bx	lr
	...

0800d5c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d5c8:	b580      	push	{r7, lr}
 800d5ca:	b082      	sub	sp, #8
 800d5cc:	af00      	add	r7, sp, #0
 800d5ce:	6078      	str	r0, [r7, #4]
 800d5d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2200      	movs	r2, #0
 800d5d6:	70da      	strb	r2, [r3, #3]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f04f 32ff 	mov.w	r2, #4294967295
 800d5de:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f7fd fdb0 	bl	800b148 <move_window>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <check_fs+0x2a>
 800d5ee:	2304      	movs	r3, #4
 800d5f0:	e044      	b.n	800d67c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	3338      	adds	r3, #56	; 0x38
 800d5f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fd f990 	bl	800a920 <ld_word>
 800d600:	4603      	mov	r3, r0
 800d602:	461a      	mov	r2, r3
 800d604:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d608:	429a      	cmp	r2, r3
 800d60a:	d001      	beq.n	800d610 <check_fs+0x48>
 800d60c:	2303      	movs	r3, #3
 800d60e:	e035      	b.n	800d67c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d616:	2be9      	cmp	r3, #233	; 0xe9
 800d618:	d009      	beq.n	800d62e <check_fs+0x66>
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800d620:	2beb      	cmp	r3, #235	; 0xeb
 800d622:	d11e      	bne.n	800d662 <check_fs+0x9a>
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800d62a:	2b90      	cmp	r3, #144	; 0x90
 800d62c:	d119      	bne.n	800d662 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	3338      	adds	r3, #56	; 0x38
 800d632:	3336      	adds	r3, #54	; 0x36
 800d634:	4618      	mov	r0, r3
 800d636:	f7fd f98b 	bl	800a950 <ld_dword>
 800d63a:	4603      	mov	r3, r0
 800d63c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d640:	4a10      	ldr	r2, [pc, #64]	; (800d684 <check_fs+0xbc>)
 800d642:	4293      	cmp	r3, r2
 800d644:	d101      	bne.n	800d64a <check_fs+0x82>
 800d646:	2300      	movs	r3, #0
 800d648:	e018      	b.n	800d67c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	3338      	adds	r3, #56	; 0x38
 800d64e:	3352      	adds	r3, #82	; 0x52
 800d650:	4618      	mov	r0, r3
 800d652:	f7fd f97d 	bl	800a950 <ld_dword>
 800d656:	4603      	mov	r3, r0
 800d658:	4a0b      	ldr	r2, [pc, #44]	; (800d688 <check_fs+0xc0>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d101      	bne.n	800d662 <check_fs+0x9a>
 800d65e:	2300      	movs	r3, #0
 800d660:	e00c      	b.n	800d67c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	3338      	adds	r3, #56	; 0x38
 800d666:	220b      	movs	r2, #11
 800d668:	4908      	ldr	r1, [pc, #32]	; (800d68c <check_fs+0xc4>)
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fd fb79 	bl	800ad62 <mem_cmp>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d101      	bne.n	800d67a <check_fs+0xb2>
 800d676:	2301      	movs	r3, #1
 800d678:	e000      	b.n	800d67c <check_fs+0xb4>
#endif
	return 2;
 800d67a:	2302      	movs	r3, #2
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3708      	adds	r7, #8
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	00544146 	.word	0x00544146
 800d688:	33544146 	.word	0x33544146
 800d68c:	0800f744 	.word	0x0800f744

0800d690 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d690:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d694:	b09c      	sub	sp, #112	; 0x70
 800d696:	af00      	add	r7, sp, #0
 800d698:	61f8      	str	r0, [r7, #28]
 800d69a:	61b9      	str	r1, [r7, #24]
 800d69c:	4613      	mov	r3, r2
 800d69e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d6a0:	69bb      	ldr	r3, [r7, #24]
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d6a6:	69f8      	ldr	r0, [r7, #28]
 800d6a8:	f7ff ff49 	bl	800d53e <get_ldnumber>
 800d6ac:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 800d6ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	da01      	bge.n	800d6b8 <find_volume+0x28>
 800d6b4:	230b      	movs	r3, #11
 800d6b6:	e331      	b.n	800dd1c <find_volume+0x68c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d6b8:	4a99      	ldr	r2, [pc, #612]	; (800d920 <find_volume+0x290>)
 800d6ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d6c0:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d6c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d101      	bne.n	800d6cc <find_volume+0x3c>
 800d6c8:	230c      	movs	r3, #12
 800d6ca:	e327      	b.n	800dd1c <find_volume+0x68c>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d6cc:	69bb      	ldr	r3, [r7, #24]
 800d6ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6d0:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d6d2:	7dfb      	ldrb	r3, [r7, #23]
 800d6d4:	f023 0301 	bic.w	r3, r3, #1
 800d6d8:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d6da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d01a      	beq.n	800d718 <find_volume+0x88>
		stat = disk_status(fs->drv);
 800d6e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6e4:	785b      	ldrb	r3, [r3, #1]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f7fd f87c 	bl	800a7e4 <disk_status>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d6f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d6f6:	f003 0301 	and.w	r3, r3, #1
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10c      	bne.n	800d718 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	2b00      	cmp	r3, #0
 800d702:	d007      	beq.n	800d714 <find_volume+0x84>
 800d704:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d708:	f003 0304 	and.w	r3, r3, #4
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d001      	beq.n	800d714 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 800d710:	230a      	movs	r3, #10
 800d712:	e303      	b.n	800dd1c <find_volume+0x68c>
			}
			return FR_OK;				/* The file system object is valid */
 800d714:	2300      	movs	r3, #0
 800d716:	e301      	b.n	800dd1c <find_volume+0x68c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d718:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d71a:	2200      	movs	r2, #0
 800d71c:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d71e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d720:	b2da      	uxtb	r2, r3
 800d722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d724:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d728:	785b      	ldrb	r3, [r3, #1]
 800d72a:	4618      	mov	r0, r3
 800d72c:	f7fd f874 	bl	800a818 <disk_initialize>
 800d730:	4603      	mov	r3, r0
 800d732:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d736:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d73a:	f003 0301 	and.w	r3, r3, #1
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d001      	beq.n	800d746 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d742:	2303      	movs	r3, #3
 800d744:	e2ea      	b.n	800dd1c <find_volume+0x68c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d746:	7dfb      	ldrb	r3, [r7, #23]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d007      	beq.n	800d75c <find_volume+0xcc>
 800d74c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800d750:	f003 0304 	and.w	r3, r3, #4
 800d754:	2b00      	cmp	r3, #0
 800d756:	d001      	beq.n	800d75c <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 800d758:	230a      	movs	r3, #10
 800d75a:	e2df      	b.n	800dd1c <find_volume+0x68c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d75c:	2300      	movs	r3, #0
 800d75e:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d760:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d762:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d764:	f7ff ff30 	bl	800d5c8 <check_fs>
 800d768:	4603      	mov	r3, r0
 800d76a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d76e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d772:	2b02      	cmp	r3, #2
 800d774:	d14d      	bne.n	800d812 <find_volume+0x182>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d776:	2300      	movs	r3, #0
 800d778:	65bb      	str	r3, [r7, #88]	; 0x58
 800d77a:	e020      	b.n	800d7be <find_volume+0x12e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d77c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d77e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d784:	011b      	lsls	r3, r3, #4
 800d786:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800d78a:	4413      	add	r3, r2
 800d78c:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d78e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d790:	3304      	adds	r3, #4
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d006      	beq.n	800d7a6 <find_volume+0x116>
 800d798:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d79a:	3308      	adds	r3, #8
 800d79c:	4618      	mov	r0, r3
 800d79e:	f7fd f8d7 	bl	800a950 <ld_dword>
 800d7a2:	4602      	mov	r2, r0
 800d7a4:	e000      	b.n	800d7a8 <find_volume+0x118>
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7aa:	009b      	lsls	r3, r3, #2
 800d7ac:	3360      	adds	r3, #96	; 0x60
 800d7ae:	f107 0110 	add.w	r1, r7, #16
 800d7b2:	440b      	add	r3, r1
 800d7b4:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d7b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d7be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7c0:	2b03      	cmp	r3, #3
 800d7c2:	d9db      	bls.n	800d77c <find_volume+0xec>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 800d7c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d002      	beq.n	800d7d4 <find_volume+0x144>
 800d7ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d7d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	3360      	adds	r3, #96	; 0x60
 800d7da:	f107 0210 	add.w	r2, r7, #16
 800d7de:	4413      	add	r3, r2
 800d7e0:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800d7e4:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d7e6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d005      	beq.n	800d7f8 <find_volume+0x168>
 800d7ec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d7ee:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d7f0:	f7ff feea 	bl	800d5c8 <check_fs>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	e000      	b.n	800d7fa <find_volume+0x16a>
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d7fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d802:	2b01      	cmp	r3, #1
 800d804:	d905      	bls.n	800d812 <find_volume+0x182>
 800d806:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d808:	3301      	adds	r3, #1
 800d80a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d80c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d80e:	2b03      	cmp	r3, #3
 800d810:	d9e0      	bls.n	800d7d4 <find_volume+0x144>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d812:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d816:	2b04      	cmp	r3, #4
 800d818:	d101      	bne.n	800d81e <find_volume+0x18e>
 800d81a:	2301      	movs	r3, #1
 800d81c:	e27e      	b.n	800dd1c <find_volume+0x68c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d81e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d822:	2b01      	cmp	r3, #1
 800d824:	d901      	bls.n	800d82a <find_volume+0x19a>
 800d826:	230d      	movs	r3, #13
 800d828:	e278      	b.n	800dd1c <find_volume+0x68c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 800d82a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800d82e:	2b01      	cmp	r3, #1
 800d830:	f040 80fa 	bne.w	800da28 <find_volume+0x398>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800d834:	230b      	movs	r3, #11
 800d836:	65bb      	str	r3, [r7, #88]	; 0x58
 800d838:	e002      	b.n	800d840 <find_volume+0x1b0>
 800d83a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d83c:	3301      	adds	r3, #1
 800d83e:	65bb      	str	r3, [r7, #88]	; 0x58
 800d840:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d842:	2b3f      	cmp	r3, #63	; 0x3f
 800d844:	d806      	bhi.n	800d854 <find_volume+0x1c4>
 800d846:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d84a:	4413      	add	r3, r2
 800d84c:	3338      	adds	r3, #56	; 0x38
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d0f2      	beq.n	800d83a <find_volume+0x1aa>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 800d854:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d856:	2b3f      	cmp	r3, #63	; 0x3f
 800d858:	d801      	bhi.n	800d85e <find_volume+0x1ce>
 800d85a:	230d      	movs	r3, #13
 800d85c:	e25e      	b.n	800dd1c <find_volume+0x68c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 800d85e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d860:	3338      	adds	r3, #56	; 0x38
 800d862:	3368      	adds	r3, #104	; 0x68
 800d864:	4618      	mov	r0, r3
 800d866:	f7fd f85b 	bl	800a920 <ld_word>
 800d86a:	4603      	mov	r3, r0
 800d86c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d870:	d001      	beq.n	800d876 <find_volume+0x1e6>
 800d872:	230d      	movs	r3, #13
 800d874:	e252      	b.n	800dd1c <find_volume+0x68c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 800d876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d878:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 800d87c:	2b09      	cmp	r3, #9
 800d87e:	d001      	beq.n	800d884 <find_volume+0x1f4>
			return FR_NO_FILESYSTEM;
 800d880:	230d      	movs	r3, #13
 800d882:	e24b      	b.n	800dd1c <find_volume+0x68c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 800d884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d886:	3338      	adds	r3, #56	; 0x38
 800d888:	3348      	adds	r3, #72	; 0x48
 800d88a:	4618      	mov	r0, r3
 800d88c:	f7fd f883 	bl	800a996 <ld_qword>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d896:	2000      	movs	r0, #0
 800d898:	60b9      	str	r1, [r7, #8]
 800d89a:	60f8      	str	r0, [r7, #12]
 800d89c:	68b9      	ldr	r1, [r7, #8]
 800d89e:	1851      	adds	r1, r2, r1
 800d8a0:	6039      	str	r1, [r7, #0]
 800d8a2:	68f9      	ldr	r1, [r7, #12]
 800d8a4:	eb43 0101 	adc.w	r1, r3, r1
 800d8a8:	6079      	str	r1, [r7, #4]
 800d8aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8ae:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 800d8b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d8b6:	2b01      	cmp	r3, #1
 800d8b8:	d301      	bcc.n	800d8be <find_volume+0x22e>
 800d8ba:	230d      	movs	r3, #13
 800d8bc:	e22e      	b.n	800dd1c <find_volume+0x68c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 800d8be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8c0:	3338      	adds	r3, #56	; 0x38
 800d8c2:	3354      	adds	r3, #84	; 0x54
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	f7fd f843 	bl	800a950 <ld_dword>
 800d8ca:	4602      	mov	r2, r0
 800d8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ce:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 800d8d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d2:	f893 20a6 	ldrb.w	r2, [r3, #166]	; 0xa6
 800d8d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8d8:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800d8da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8dc:	789b      	ldrb	r3, [r3, #2]
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d001      	beq.n	800d8e6 <find_volume+0x256>
 800d8e2:	230d      	movs	r3, #13
 800d8e4:	e21a      	b.n	800dd1c <find_volume+0x68c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 800d8e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800d8ec:	461a      	mov	r2, r3
 800d8ee:	2301      	movs	r3, #1
 800d8f0:	4093      	lsls	r3, r2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8f6:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 800d8f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8fa:	895b      	ldrh	r3, [r3, #10]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d101      	bne.n	800d904 <find_volume+0x274>
 800d900:	230d      	movs	r3, #13
 800d902:	e20b      	b.n	800dd1c <find_volume+0x68c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 800d904:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d906:	3338      	adds	r3, #56	; 0x38
 800d908:	335c      	adds	r3, #92	; 0x5c
 800d90a:	4618      	mov	r0, r3
 800d90c:	f7fd f820 	bl	800a950 <ld_dword>
 800d910:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 800d912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d914:	4a03      	ldr	r2, [pc, #12]	; (800d924 <find_volume+0x294>)
 800d916:	4293      	cmp	r3, r2
 800d918:	d906      	bls.n	800d928 <find_volume+0x298>
 800d91a:	230d      	movs	r3, #13
 800d91c:	e1fe      	b.n	800dd1c <find_volume+0x68c>
 800d91e:	bf00      	nop
 800d920:	20002e04 	.word	0x20002e04
 800d924:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 800d928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92a:	1c9a      	adds	r2, r3, #2
 800d92c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d92e:	61da      	str	r2, [r3, #28]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800d930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d932:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d934:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800d936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d938:	3338      	adds	r3, #56	; 0x38
 800d93a:	3358      	adds	r3, #88	; 0x58
 800d93c:	4618      	mov	r0, r3
 800d93e:	f7fd f807 	bl	800a950 <ld_dword>
 800d942:	4602      	mov	r2, r0
 800d944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d946:	441a      	add	r2, r3
 800d948:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94a:	631a      	str	r2, [r3, #48]	; 0x30
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 800d94c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d94e:	3338      	adds	r3, #56	; 0x38
 800d950:	3350      	adds	r3, #80	; 0x50
 800d952:	4618      	mov	r0, r3
 800d954:	f7fc fffc 	bl	800a950 <ld_dword>
 800d958:	4602      	mov	r2, r0
 800d95a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d95c:	441a      	add	r2, r3
 800d95e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d960:	629a      	str	r2, [r3, #40]	; 0x28
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800d962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d966:	2200      	movs	r2, #0
 800d968:	469a      	mov	sl, r3
 800d96a:	4693      	mov	fp, r2
 800d96c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d96e:	895b      	ldrh	r3, [r3, #10]
 800d970:	461a      	mov	r2, r3
 800d972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d974:	fb02 f303 	mul.w	r3, r2, r3
 800d978:	2200      	movs	r2, #0
 800d97a:	4698      	mov	r8, r3
 800d97c:	4691      	mov	r9, r2
 800d97e:	eb1a 0408 	adds.w	r4, sl, r8
 800d982:	eb4b 0509 	adc.w	r5, fp, r9
 800d986:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800d98a:	42a2      	cmp	r2, r4
 800d98c:	41ab      	sbcs	r3, r5
 800d98e:	d201      	bcs.n	800d994 <find_volume+0x304>
 800d990:	230d      	movs	r3, #13
 800d992:	e1c3      	b.n	800dd1c <find_volume+0x68c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800d994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d996:	3338      	adds	r3, #56	; 0x38
 800d998:	3360      	adds	r3, #96	; 0x60
 800d99a:	4618      	mov	r0, r3
 800d99c:	f7fc ffd8 	bl	800a950 <ld_dword>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a4:	62da      	str	r2, [r3, #44]	; 0x2c

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 800d9a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d9ae:	f7fd fc67 	bl	800b280 <clust2sect>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	4619      	mov	r1, r3
 800d9b6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800d9b8:	f7fd fbc6 	bl	800b148 <move_window>
 800d9bc:	4603      	mov	r3, r0
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d001      	beq.n	800d9c6 <find_volume+0x336>
 800d9c2:	2301      	movs	r3, #1
 800d9c4:	e1aa      	b.n	800dd1c <find_volume+0x68c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d9c6:	2300      	movs	r3, #0
 800d9c8:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9ca:	e015      	b.n	800d9f8 <find_volume+0x368>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800d9cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9d0:	4413      	add	r3, r2
 800d9d2:	3338      	adds	r3, #56	; 0x38
 800d9d4:	781b      	ldrb	r3, [r3, #0]
 800d9d6:	2b81      	cmp	r3, #129	; 0x81
 800d9d8:	d10b      	bne.n	800d9f2 <find_volume+0x362>
 800d9da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800d9e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9e2:	3314      	adds	r3, #20
 800d9e4:	4413      	add	r3, r2
 800d9e6:	4618      	mov	r0, r3
 800d9e8:	f7fc ffb2 	bl	800a950 <ld_dword>
 800d9ec:	4603      	mov	r3, r0
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d007      	beq.n	800da02 <find_volume+0x372>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 800d9f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9f4:	3320      	adds	r3, #32
 800d9f6:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d9fe:	d3e5      	bcc.n	800d9cc <find_volume+0x33c>
 800da00:	e000      	b.n	800da04 <find_volume+0x374>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 800da02:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 800da04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da06:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da0a:	d101      	bne.n	800da10 <find_volume+0x380>
 800da0c:	230d      	movs	r3, #13
 800da0e:	e185      	b.n	800dd1c <find_volume+0x68c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800da10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da12:	f04f 32ff 	mov.w	r2, #4294967295
 800da16:	619a      	str	r2, [r3, #24]
 800da18:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1a:	699a      	ldr	r2, [r3, #24]
 800da1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da1e:	615a      	str	r2, [r3, #20]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 800da20:	2304      	movs	r3, #4
 800da22:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800da26:	e167      	b.n	800dcf8 <find_volume+0x668>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800da28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da2a:	3338      	adds	r3, #56	; 0x38
 800da2c:	330b      	adds	r3, #11
 800da2e:	4618      	mov	r0, r3
 800da30:	f7fc ff76 	bl	800a920 <ld_word>
 800da34:	4603      	mov	r3, r0
 800da36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800da3a:	d001      	beq.n	800da40 <find_volume+0x3b0>
 800da3c:	230d      	movs	r3, #13
 800da3e:	e16d      	b.n	800dd1c <find_volume+0x68c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800da40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da42:	3338      	adds	r3, #56	; 0x38
 800da44:	3316      	adds	r3, #22
 800da46:	4618      	mov	r0, r3
 800da48:	f7fc ff6a 	bl	800a920 <ld_word>
 800da4c:	4603      	mov	r3, r0
 800da4e:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800da50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da52:	2b00      	cmp	r3, #0
 800da54:	d106      	bne.n	800da64 <find_volume+0x3d4>
 800da56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da58:	3338      	adds	r3, #56	; 0x38
 800da5a:	3324      	adds	r3, #36	; 0x24
 800da5c:	4618      	mov	r0, r3
 800da5e:	f7fc ff77 	bl	800a950 <ld_dword>
 800da62:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 800da64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da66:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da68:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800da6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da6c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800da70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da72:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800da74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da76:	789b      	ldrb	r3, [r3, #2]
 800da78:	2b01      	cmp	r3, #1
 800da7a:	d005      	beq.n	800da88 <find_volume+0x3f8>
 800da7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da7e:	789b      	ldrb	r3, [r3, #2]
 800da80:	2b02      	cmp	r3, #2
 800da82:	d001      	beq.n	800da88 <find_volume+0x3f8>
 800da84:	230d      	movs	r3, #13
 800da86:	e149      	b.n	800dd1c <find_volume+0x68c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800da88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da8a:	789b      	ldrb	r3, [r3, #2]
 800da8c:	461a      	mov	r2, r3
 800da8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800da90:	fb02 f303 	mul.w	r3, r2, r3
 800da94:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800da96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da9c:	b29a      	uxth	r2, r3
 800da9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800daa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daa4:	895b      	ldrh	r3, [r3, #10]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d008      	beq.n	800dabc <find_volume+0x42c>
 800daaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800daac:	895b      	ldrh	r3, [r3, #10]
 800daae:	461a      	mov	r2, r3
 800dab0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dab2:	895b      	ldrh	r3, [r3, #10]
 800dab4:	3b01      	subs	r3, #1
 800dab6:	4013      	ands	r3, r2
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <find_volume+0x430>
 800dabc:	230d      	movs	r3, #13
 800dabe:	e12d      	b.n	800dd1c <find_volume+0x68c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dac2:	3338      	adds	r3, #56	; 0x38
 800dac4:	3311      	adds	r3, #17
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7fc ff2a 	bl	800a920 <ld_word>
 800dacc:	4603      	mov	r3, r0
 800dace:	461a      	mov	r2, r3
 800dad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dad6:	891b      	ldrh	r3, [r3, #8]
 800dad8:	f003 030f 	and.w	r3, r3, #15
 800dadc:	b29b      	uxth	r3, r3
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d001      	beq.n	800dae6 <find_volume+0x456>
 800dae2:	230d      	movs	r3, #13
 800dae4:	e11a      	b.n	800dd1c <find_volume+0x68c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dae6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dae8:	3338      	adds	r3, #56	; 0x38
 800daea:	3313      	adds	r3, #19
 800daec:	4618      	mov	r0, r3
 800daee:	f7fc ff17 	bl	800a920 <ld_word>
 800daf2:	4603      	mov	r3, r0
 800daf4:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800daf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d106      	bne.n	800db0a <find_volume+0x47a>
 800dafc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dafe:	3338      	adds	r3, #56	; 0x38
 800db00:	3320      	adds	r3, #32
 800db02:	4618      	mov	r0, r3
 800db04:	f7fc ff24 	bl	800a950 <ld_dword>
 800db08:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800db0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db0c:	3338      	adds	r3, #56	; 0x38
 800db0e:	330e      	adds	r3, #14
 800db10:	4618      	mov	r0, r3
 800db12:	f7fc ff05 	bl	800a920 <ld_word>
 800db16:	4603      	mov	r3, r0
 800db18:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800db1c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800db20:	2b00      	cmp	r3, #0
 800db22:	d101      	bne.n	800db28 <find_volume+0x498>
 800db24:	230d      	movs	r3, #13
 800db26:	e0f9      	b.n	800dd1c <find_volume+0x68c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800db28:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800db2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800db2e:	4413      	add	r3, r2
 800db30:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db32:	8912      	ldrh	r2, [r2, #8]
 800db34:	0912      	lsrs	r2, r2, #4
 800db36:	b292      	uxth	r2, r2
 800db38:	4413      	add	r3, r2
 800db3a:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800db3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db40:	429a      	cmp	r2, r3
 800db42:	d201      	bcs.n	800db48 <find_volume+0x4b8>
 800db44:	230d      	movs	r3, #13
 800db46:	e0e9      	b.n	800dd1c <find_volume+0x68c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800db48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800db50:	8952      	ldrh	r2, [r2, #10]
 800db52:	fbb3 f3f2 	udiv	r3, r3, r2
 800db56:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800db58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d101      	bne.n	800db62 <find_volume+0x4d2>
 800db5e:	230d      	movs	r3, #13
 800db60:	e0dc      	b.n	800dd1c <find_volume+0x68c>
		fmt = FS_FAT32;
 800db62:	2303      	movs	r3, #3
 800db64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800db68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800db6e:	4293      	cmp	r3, r2
 800db70:	d802      	bhi.n	800db78 <find_volume+0x4e8>
 800db72:	2302      	movs	r3, #2
 800db74:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800db78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db7a:	f640 72f5 	movw	r2, #4085	; 0xff5
 800db7e:	4293      	cmp	r3, r2
 800db80:	d802      	bhi.n	800db88 <find_volume+0x4f8>
 800db82:	2301      	movs	r3, #1
 800db84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800db88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db8a:	1c9a      	adds	r2, r3, #2
 800db8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db8e:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800db90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800db94:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800db96:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800db9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800db9c:	441a      	add	r2, r3
 800db9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dba0:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800dba2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800dba4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dba6:	441a      	add	r2, r3
 800dba8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbaa:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 800dbac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dbb0:	2b03      	cmp	r3, #3
 800dbb2:	d11e      	bne.n	800dbf2 <find_volume+0x562>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dbb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbb6:	3338      	adds	r3, #56	; 0x38
 800dbb8:	332a      	adds	r3, #42	; 0x2a
 800dbba:	4618      	mov	r0, r3
 800dbbc:	f7fc feb0 	bl	800a920 <ld_word>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d001      	beq.n	800dbca <find_volume+0x53a>
 800dbc6:	230d      	movs	r3, #13
 800dbc8:	e0a8      	b.n	800dd1c <find_volume+0x68c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dbca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbcc:	891b      	ldrh	r3, [r3, #8]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d001      	beq.n	800dbd6 <find_volume+0x546>
 800dbd2:	230d      	movs	r3, #13
 800dbd4:	e0a2      	b.n	800dd1c <find_volume+0x68c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800dbd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbd8:	3338      	adds	r3, #56	; 0x38
 800dbda:	332c      	adds	r3, #44	; 0x2c
 800dbdc:	4618      	mov	r0, r3
 800dbde:	f7fc feb7 	bl	800a950 <ld_dword>
 800dbe2:	4602      	mov	r2, r0
 800dbe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbe6:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800dbe8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbea:	69db      	ldr	r3, [r3, #28]
 800dbec:	009b      	lsls	r3, r3, #2
 800dbee:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dbf0:	e01f      	b.n	800dc32 <find_volume+0x5a2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dbf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dbf4:	891b      	ldrh	r3, [r3, #8]
 800dbf6:	2b00      	cmp	r3, #0
 800dbf8:	d101      	bne.n	800dbfe <find_volume+0x56e>
 800dbfa:	230d      	movs	r3, #13
 800dbfc:	e08e      	b.n	800dd1c <find_volume+0x68c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800dbfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800dc02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dc04:	441a      	add	r2, r3
 800dc06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc08:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dc0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc0e:	2b02      	cmp	r3, #2
 800dc10:	d103      	bne.n	800dc1a <find_volume+0x58a>
 800dc12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc14:	69db      	ldr	r3, [r3, #28]
 800dc16:	005b      	lsls	r3, r3, #1
 800dc18:	e00a      	b.n	800dc30 <find_volume+0x5a0>
 800dc1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc1c:	69da      	ldr	r2, [r3, #28]
 800dc1e:	4613      	mov	r3, r2
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	4413      	add	r3, r2
 800dc24:	085a      	lsrs	r2, r3, #1
 800dc26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc28:	69db      	ldr	r3, [r3, #28]
 800dc2a:	f003 0301 	and.w	r3, r3, #1
 800dc2e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dc30:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dc32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc34:	6a1a      	ldr	r2, [r3, #32]
 800dc36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dc38:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800dc3c:	0a5b      	lsrs	r3, r3, #9
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d201      	bcs.n	800dc46 <find_volume+0x5b6>
 800dc42:	230d      	movs	r3, #13
 800dc44:	e06a      	b.n	800dd1c <find_volume+0x68c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800dc46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc48:	f04f 32ff 	mov.w	r2, #4294967295
 800dc4c:	619a      	str	r2, [r3, #24]
 800dc4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc50:	699a      	ldr	r2, [r3, #24]
 800dc52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc54:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800dc56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc58:	2280      	movs	r2, #128	; 0x80
 800dc5a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800dc5c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800dc60:	2b03      	cmp	r3, #3
 800dc62:	d149      	bne.n	800dcf8 <find_volume+0x668>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800dc64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc66:	3338      	adds	r3, #56	; 0x38
 800dc68:	3330      	adds	r3, #48	; 0x30
 800dc6a:	4618      	mov	r0, r3
 800dc6c:	f7fc fe58 	bl	800a920 <ld_word>
 800dc70:	4603      	mov	r3, r0
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d140      	bne.n	800dcf8 <find_volume+0x668>
			&& move_window(fs, bsect + 1) == FR_OK)
 800dc76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc78:	3301      	adds	r3, #1
 800dc7a:	4619      	mov	r1, r3
 800dc7c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dc7e:	f7fd fa63 	bl	800b148 <move_window>
 800dc82:	4603      	mov	r3, r0
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d137      	bne.n	800dcf8 <find_volume+0x668>
		{
			fs->fsi_flag = 0;
 800dc88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800dc8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc90:	3338      	adds	r3, #56	; 0x38
 800dc92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dc96:	4618      	mov	r0, r3
 800dc98:	f7fc fe42 	bl	800a920 <ld_word>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	461a      	mov	r2, r3
 800dca0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d127      	bne.n	800dcf8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800dca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcaa:	3338      	adds	r3, #56	; 0x38
 800dcac:	4618      	mov	r0, r3
 800dcae:	f7fc fe4f 	bl	800a950 <ld_dword>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	4a1c      	ldr	r2, [pc, #112]	; (800dd28 <find_volume+0x698>)
 800dcb6:	4293      	cmp	r3, r2
 800dcb8:	d11e      	bne.n	800dcf8 <find_volume+0x668>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800dcba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcbc:	3338      	adds	r3, #56	; 0x38
 800dcbe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fc fe44 	bl	800a950 <ld_dword>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	4a18      	ldr	r2, [pc, #96]	; (800dd2c <find_volume+0x69c>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d113      	bne.n	800dcf8 <find_volume+0x668>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800dcd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcd2:	3338      	adds	r3, #56	; 0x38
 800dcd4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800dcd8:	4618      	mov	r0, r3
 800dcda:	f7fc fe39 	bl	800a950 <ld_dword>
 800dcde:	4602      	mov	r2, r0
 800dce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800dce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dce6:	3338      	adds	r3, #56	; 0x38
 800dce8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fc fe2f 	bl	800a950 <ld_dword>
 800dcf2:	4602      	mov	r2, r0
 800dcf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcf6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dcf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dcfa:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800dcfe:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <find_volume+0x6a0>)
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	3301      	adds	r3, #1
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	4b09      	ldr	r3, [pc, #36]	; (800dd30 <find_volume+0x6a0>)
 800dd0a:	801a      	strh	r2, [r3, #0]
 800dd0c:	4b08      	ldr	r3, [pc, #32]	; (800dd30 <find_volume+0x6a0>)
 800dd0e:	881a      	ldrh	r2, [r3, #0]
 800dd10:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dd12:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dd14:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800dd16:	f7fd f9af 	bl	800b078 <clear_lock>
#endif
	return FR_OK;
 800dd1a:	2300      	movs	r3, #0
}
 800dd1c:	4618      	mov	r0, r3
 800dd1e:	3770      	adds	r7, #112	; 0x70
 800dd20:	46bd      	mov	sp, r7
 800dd22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dd26:	bf00      	nop
 800dd28:	41615252 	.word	0x41615252
 800dd2c:	61417272 	.word	0x61417272
 800dd30:	20002e08 	.word	0x20002e08

0800dd34 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dd34:	b580      	push	{r7, lr}
 800dd36:	b084      	sub	sp, #16
 800dd38:	af00      	add	r7, sp, #0
 800dd3a:	6078      	str	r0, [r7, #4]
 800dd3c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dd3e:	2309      	movs	r3, #9
 800dd40:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d01c      	beq.n	800dd82 <validate+0x4e>
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d018      	beq.n	800dd82 <validate+0x4e>
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	681b      	ldr	r3, [r3, #0]
 800dd54:	781b      	ldrb	r3, [r3, #0]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d013      	beq.n	800dd82 <validate+0x4e>
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	889a      	ldrh	r2, [r3, #4]
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	88db      	ldrh	r3, [r3, #6]
 800dd64:	429a      	cmp	r2, r3
 800dd66:	d10c      	bne.n	800dd82 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	785b      	ldrb	r3, [r3, #1]
 800dd6e:	4618      	mov	r0, r3
 800dd70:	f7fc fd38 	bl	800a7e4 <disk_status>
 800dd74:	4603      	mov	r3, r0
 800dd76:	f003 0301 	and.w	r3, r3, #1
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d101      	bne.n	800dd82 <validate+0x4e>
			res = FR_OK;
 800dd7e:	2300      	movs	r3, #0
 800dd80:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800dd82:	7bfb      	ldrb	r3, [r7, #15]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d102      	bne.n	800dd8e <validate+0x5a>
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	e000      	b.n	800dd90 <validate+0x5c>
 800dd8e:	2300      	movs	r3, #0
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	6013      	str	r3, [r2, #0]
	return res;
 800dd94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd96:	4618      	mov	r0, r3
 800dd98:	3710      	adds	r7, #16
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd80      	pop	{r7, pc}
	...

0800dda0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800dda0:	b580      	push	{r7, lr}
 800dda2:	b088      	sub	sp, #32
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800ddb2:	f107 0310 	add.w	r3, r7, #16
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7ff fbc1 	bl	800d53e <get_ldnumber>
 800ddbc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	da01      	bge.n	800ddc8 <f_mount+0x28>
 800ddc4:	230b      	movs	r3, #11
 800ddc6:	e02b      	b.n	800de20 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800ddc8:	4a17      	ldr	r2, [pc, #92]	; (800de28 <f_mount+0x88>)
 800ddca:	69fb      	ldr	r3, [r7, #28]
 800ddcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddd0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d005      	beq.n	800dde4 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800ddd8:	69b8      	ldr	r0, [r7, #24]
 800ddda:	f7fd f94d 	bl	800b078 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800ddde:	69bb      	ldr	r3, [r7, #24]
 800dde0:	2200      	movs	r2, #0
 800dde2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d002      	beq.n	800ddf0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2200      	movs	r2, #0
 800ddee:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800ddf0:	68fa      	ldr	r2, [r7, #12]
 800ddf2:	490d      	ldr	r1, [pc, #52]	; (800de28 <f_mount+0x88>)
 800ddf4:	69fb      	ldr	r3, [r7, #28]
 800ddf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d002      	beq.n	800de06 <f_mount+0x66>
 800de00:	79fb      	ldrb	r3, [r7, #7]
 800de02:	2b01      	cmp	r3, #1
 800de04:	d001      	beq.n	800de0a <f_mount+0x6a>
 800de06:	2300      	movs	r3, #0
 800de08:	e00a      	b.n	800de20 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800de0a:	f107 010c 	add.w	r1, r7, #12
 800de0e:	f107 0308 	add.w	r3, r7, #8
 800de12:	2200      	movs	r2, #0
 800de14:	4618      	mov	r0, r3
 800de16:	f7ff fc3b 	bl	800d690 <find_volume>
 800de1a:	4603      	mov	r3, r0
 800de1c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800de1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800de20:	4618      	mov	r0, r3
 800de22:	3720      	adds	r7, #32
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}
 800de28:	20002e04 	.word	0x20002e04

0800de2c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800de2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800de30:	b0a8      	sub	sp, #160	; 0xa0
 800de32:	af00      	add	r7, sp, #0
 800de34:	61f8      	str	r0, [r7, #28]
 800de36:	61b9      	str	r1, [r7, #24]
 800de38:	4613      	mov	r3, r2
 800de3a:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800de3c:	69fb      	ldr	r3, [r7, #28]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d101      	bne.n	800de46 <f_open+0x1a>
 800de42:	2309      	movs	r3, #9
 800de44:	e2cb      	b.n	800e3de <f_open+0x5b2>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800de46:	7dfb      	ldrb	r3, [r7, #23]
 800de48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800de4c:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 800de4e:	7dfa      	ldrb	r2, [r7, #23]
 800de50:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800de54:	f107 0318 	add.w	r3, r7, #24
 800de58:	4618      	mov	r0, r3
 800de5a:	f7ff fc19 	bl	800d690 <find_volume>
 800de5e:	4603      	mov	r3, r0
 800de60:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 800de64:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800de68:	2b00      	cmp	r3, #0
 800de6a:	f040 82af 	bne.w	800e3cc <f_open+0x5a0>
		dj.obj.fs = fs;
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
 800de72:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800de76:	f000 fee9 	bl	800ec4c <ff_memalloc>
 800de7a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 800de7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800de82:	2b00      	cmp	r3, #0
 800de84:	d101      	bne.n	800de8a <f_open+0x5e>
 800de86:	2311      	movs	r3, #17
 800de88:	e2a9      	b.n	800e3de <f_open+0x5b2>
 800de8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800de90:	60da      	str	r2, [r3, #12]
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800de98:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800de9c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800de9e:	69ba      	ldr	r2, [r7, #24]
 800dea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dea4:	4611      	mov	r1, r2
 800dea6:	4618      	mov	r0, r3
 800dea8:	f7ff faa0 	bl	800d3ec <follow_path>
 800deac:	4603      	mov	r3, r0
 800deae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800deb2:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d11a      	bne.n	800def0 <f_open+0xc4>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800deba:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 800debe:	b25b      	sxtb	r3, r3
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	da03      	bge.n	800decc <f_open+0xa0>
				res = FR_INVALID_NAME;
 800dec4:	2306      	movs	r3, #6
 800dec6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800deca:	e011      	b.n	800def0 <f_open+0xc4>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800decc:	7dfb      	ldrb	r3, [r7, #23]
 800dece:	f023 0301 	bic.w	r3, r3, #1
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	bf14      	ite	ne
 800ded6:	2301      	movne	r3, #1
 800ded8:	2300      	moveq	r3, #0
 800deda:	b2db      	uxtb	r3, r3
 800dedc:	461a      	mov	r2, r3
 800dede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800dee2:	4611      	mov	r1, r2
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7fc ff7f 	bl	800ade8 <chk_lock>
 800deea:	4603      	mov	r3, r0
 800deec:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800def0:	7dfb      	ldrb	r3, [r7, #23]
 800def2:	f003 031c 	and.w	r3, r3, #28
 800def6:	2b00      	cmp	r3, #0
 800def8:	f000 8115 	beq.w	800e126 <f_open+0x2fa>
			if (res != FR_OK) {					/* No file, create new */
 800defc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800df00:	2b00      	cmp	r3, #0
 800df02:	d017      	beq.n	800df34 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800df04:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800df08:	2b04      	cmp	r3, #4
 800df0a:	d10e      	bne.n	800df2a <f_open+0xfe>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800df0c:	f7fc ffc8 	bl	800aea0 <enq_lock>
 800df10:	4603      	mov	r3, r0
 800df12:	2b00      	cmp	r3, #0
 800df14:	d006      	beq.n	800df24 <f_open+0xf8>
 800df16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800df1a:	4618      	mov	r0, r3
 800df1c:	f7fe ff08 	bl	800cd30 <dir_register>
 800df20:	4603      	mov	r3, r0
 800df22:	e000      	b.n	800df26 <f_open+0xfa>
 800df24:	2312      	movs	r3, #18
 800df26:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800df2a:	7dfb      	ldrb	r3, [r7, #23]
 800df2c:	f043 0308 	orr.w	r3, r3, #8
 800df30:	75fb      	strb	r3, [r7, #23]
 800df32:	e011      	b.n	800df58 <f_open+0x12c>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800df34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800df38:	f003 0311 	and.w	r3, r3, #17
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d003      	beq.n	800df48 <f_open+0x11c>
					res = FR_DENIED;
 800df40:	2307      	movs	r3, #7
 800df42:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800df46:	e007      	b.n	800df58 <f_open+0x12c>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800df48:	7dfb      	ldrb	r3, [r7, #23]
 800df4a:	f003 0304 	and.w	r3, r3, #4
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d002      	beq.n	800df58 <f_open+0x12c>
 800df52:	2308      	movs	r3, #8
 800df54:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800df58:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f040 80fe 	bne.w	800e15e <f_open+0x332>
 800df62:	7dfb      	ldrb	r3, [r7, #23]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b00      	cmp	r3, #0
 800df6a:	f000 80f8 	beq.w	800e15e <f_open+0x332>
				dw = GET_FATTIME();
 800df6e:	f7fc fac7 	bl	800a500 <get_fattime>
 800df72:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 800df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df78:	781b      	ldrb	r3, [r3, #0]
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	f040 8084 	bne.w	800e088 <f_open+0x25c>
					/* Get current allocation info */
					fp->obj.fs = fs;
 800df80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df82:	69fb      	ldr	r3, [r7, #28]
 800df84:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 800df86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df88:	691b      	ldr	r3, [r3, #16]
 800df8a:	3334      	adds	r3, #52	; 0x34
 800df8c:	4618      	mov	r0, r3
 800df8e:	f7fc fcdf 	bl	800a950 <ld_dword>
 800df92:	4602      	mov	r2, r0
 800df94:	69fb      	ldr	r3, [r7, #28]
 800df96:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800df98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df9a:	691b      	ldr	r3, [r3, #16]
 800df9c:	3338      	adds	r3, #56	; 0x38
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fc fcf9 	bl	800a996 <ld_qword>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	69f9      	ldr	r1, [r7, #28]
 800dfaa:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	691b      	ldr	r3, [r3, #16]
 800dfb2:	3321      	adds	r3, #33	; 0x21
 800dfb4:	781b      	ldrb	r3, [r3, #0]
 800dfb6:	f003 0302 	and.w	r3, r3, #2
 800dfba:	b2da      	uxtb	r2, r3
 800dfbc:	69fb      	ldr	r3, [r7, #28]
 800dfbe:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 800dfc0:	69fb      	ldr	r3, [r7, #28]
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	691b      	ldr	r3, [r3, #16]
 800dfca:	3308      	adds	r3, #8
 800dfcc:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fc fdd6 	bl	800ab82 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 800dfd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd8:	691b      	ldr	r3, [r3, #16]
 800dfda:	3314      	adds	r3, #20
 800dfdc:	2200      	movs	r2, #0
 800dfde:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 800dfe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfe2:	691b      	ldr	r3, [r3, #16]
 800dfe4:	330c      	adds	r3, #12
 800dfe6:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800dfea:	4618      	mov	r0, r3
 800dfec:	f7fc fdc9 	bl	800ab82 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 800dff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff2:	691b      	ldr	r3, [r3, #16]
 800dff4:	3315      	adds	r3, #21
 800dff6:	2200      	movs	r2, #0
 800dff8:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 800dffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dffc:	691b      	ldr	r3, [r3, #16]
 800dffe:	3304      	adds	r3, #4
 800e000:	2220      	movs	r2, #32
 800e002:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 800e004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e006:	691b      	ldr	r3, [r3, #16]
 800e008:	3334      	adds	r3, #52	; 0x34
 800e00a:	2100      	movs	r1, #0
 800e00c:	4618      	mov	r0, r3
 800e00e:	f7fc fdb8 	bl	800ab82 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 800e012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e01a:	f04f 0200 	mov.w	r2, #0
 800e01e:	f04f 0300 	mov.w	r3, #0
 800e022:	4608      	mov	r0, r1
 800e024:	f7fc fdd9 	bl	800abda <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 800e028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e02a:	691b      	ldr	r3, [r3, #16]
 800e02c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e030:	f04f 0200 	mov.w	r2, #0
 800e034:	f04f 0300 	mov.w	r3, #0
 800e038:	4608      	mov	r0, r1
 800e03a:	f7fc fdce 	bl	800abda <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800e03e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e040:	691b      	ldr	r3, [r3, #16]
 800e042:	3321      	adds	r3, #33	; 0x21
 800e044:	2201      	movs	r2, #1
 800e046:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 800e048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e04c:	4618      	mov	r0, r3
 800e04e:	f7fe fbbd 	bl	800c7cc <store_xdir>
 800e052:	4603      	mov	r3, r0
 800e054:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800e058:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d17e      	bne.n	800e15e <f_open+0x332>
 800e060:	69fb      	ldr	r3, [r7, #28]
 800e062:	689b      	ldr	r3, [r3, #8]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d07a      	beq.n	800e15e <f_open+0x332>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800e068:	69f8      	ldr	r0, [r7, #28]
 800e06a:	69fb      	ldr	r3, [r7, #28]
 800e06c:	689b      	ldr	r3, [r3, #8]
 800e06e:	2200      	movs	r2, #0
 800e070:	4619      	mov	r1, r3
 800e072:	f7fd fc75 	bl	800b960 <remove_chain>
 800e076:	4603      	mov	r3, r0
 800e078:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800e07c:	69fb      	ldr	r3, [r7, #28]
 800e07e:	689a      	ldr	r2, [r3, #8]
 800e080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e082:	3a01      	subs	r2, #1
 800e084:	615a      	str	r2, [r3, #20]
 800e086:	e06a      	b.n	800e15e <f_open+0x332>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e08a:	330e      	adds	r3, #14
 800e08c:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e090:	4618      	mov	r0, r3
 800e092:	f7fc fd76 	bl	800ab82 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e098:	3316      	adds	r3, #22
 800e09a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fc fd6f 	bl	800ab82 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e0a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0a6:	330b      	adds	r3, #11
 800e0a8:	2220      	movs	r2, #32
 800e0aa:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e0ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ae:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e0b0:	4611      	mov	r1, r2
 800e0b2:	4618      	mov	r0, r3
 800e0b4:	f7fe f804 	bl	800c0c0 <ld_clust>
 800e0b8:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0be:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	f7fe f81b 	bl	800c0fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e0c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e0ca:	331c      	adds	r3, #28
 800e0cc:	2100      	movs	r1, #0
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	f7fc fd57 	bl	800ab82 <st_dword>
					fs->wflag = 1;
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	2201      	movs	r2, #1
 800e0d8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e0da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d03d      	beq.n	800e15e <f_open+0x332>
						dw = fs->winsect;
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						res = remove_chain(&dj.obj, cl, 0);
 800e0ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0ee:	2200      	movs	r2, #0
 800e0f0:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800e0f4:	4618      	mov	r0, r3
 800e0f6:	f7fd fc33 	bl	800b960 <remove_chain>
 800e0fa:	4603      	mov	r3, r0
 800e0fc:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 800e100:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e104:	2b00      	cmp	r3, #0
 800e106:	d12a      	bne.n	800e15e <f_open+0x332>
							res = move_window(fs, dw);
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 800e10e:	4618      	mov	r0, r3
 800e110:	f7fd f81a 	bl	800b148 <move_window>
 800e114:	4603      	mov	r3, r0
 800e116:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e11a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e11c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800e120:	3a01      	subs	r2, #1
 800e122:	615a      	str	r2, [r3, #20]
 800e124:	e01b      	b.n	800e15e <f_open+0x332>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e126:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d117      	bne.n	800e15e <f_open+0x332>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e12e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e132:	f003 0310 	and.w	r3, r3, #16
 800e136:	2b00      	cmp	r3, #0
 800e138:	d003      	beq.n	800e142 <f_open+0x316>
					res = FR_NO_FILE;
 800e13a:	2304      	movs	r3, #4
 800e13c:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e140:	e00d      	b.n	800e15e <f_open+0x332>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e142:	7dfb      	ldrb	r3, [r7, #23]
 800e144:	f003 0302 	and.w	r3, r3, #2
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d008      	beq.n	800e15e <f_open+0x332>
 800e14c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800e150:	f003 0301 	and.w	r3, r3, #1
 800e154:	2b00      	cmp	r3, #0
 800e156:	d002      	beq.n	800e15e <f_open+0x332>
						res = FR_DENIED;
 800e158:	2307      	movs	r3, #7
 800e15a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e15e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e162:	2b00      	cmp	r3, #0
 800e164:	d128      	bne.n	800e1b8 <f_open+0x38c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e166:	7dfb      	ldrb	r3, [r7, #23]
 800e168:	f003 0308 	and.w	r3, r3, #8
 800e16c:	2b00      	cmp	r3, #0
 800e16e:	d003      	beq.n	800e178 <f_open+0x34c>
				mode |= FA_MODIFIED;
 800e170:	7dfb      	ldrb	r3, [r7, #23]
 800e172:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e176:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e17c:	69fb      	ldr	r3, [r7, #28]
 800e17e:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 800e180:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e182:	69fb      	ldr	r3, [r7, #28]
 800e184:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e186:	7dfb      	ldrb	r3, [r7, #23]
 800e188:	f023 0301 	bic.w	r3, r3, #1
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	bf14      	ite	ne
 800e190:	2301      	movne	r3, #1
 800e192:	2300      	moveq	r3, #0
 800e194:	b2db      	uxtb	r3, r3
 800e196:	461a      	mov	r2, r3
 800e198:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e19c:	4611      	mov	r1, r2
 800e19e:	4618      	mov	r0, r3
 800e1a0:	f7fc fea0 	bl	800aee4 <inc_lock>
 800e1a4:	4602      	mov	r2, r0
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e1aa:	69fb      	ldr	r3, [r7, #28]
 800e1ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d102      	bne.n	800e1b8 <f_open+0x38c>
 800e1b2:	2302      	movs	r3, #2
 800e1b4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e1b8:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	f040 8101 	bne.w	800e3c4 <f_open+0x598>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	2b04      	cmp	r3, #4
 800e1c8:	d12d      	bne.n	800e226 <f_open+0x3fa>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 800e1ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1cc:	69fb      	ldr	r3, [r7, #28]
 800e1ce:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 800e1d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e1d4:	4613      	mov	r3, r2
 800e1d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e1da:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800e1de:	431a      	orrs	r2, r3
 800e1e0:	69fb      	ldr	r3, [r7, #28]
 800e1e2:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 800e1e4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800e1e6:	69fb      	ldr	r3, [r7, #28]
 800e1e8:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 800e1ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1ec:	691b      	ldr	r3, [r3, #16]
 800e1ee:	3334      	adds	r3, #52	; 0x34
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fc fbad 	bl	800a950 <ld_dword>
 800e1f6:	4602      	mov	r2, r0
 800e1f8:	69fb      	ldr	r3, [r7, #28]
 800e1fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800e1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1fe:	691b      	ldr	r3, [r3, #16]
 800e200:	3338      	adds	r3, #56	; 0x38
 800e202:	4618      	mov	r0, r3
 800e204:	f7fc fbc7 	bl	800a996 <ld_qword>
 800e208:	4602      	mov	r2, r0
 800e20a:	460b      	mov	r3, r1
 800e20c:	69f9      	ldr	r1, [r7, #28]
 800e20e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800e212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e214:	691b      	ldr	r3, [r3, #16]
 800e216:	3321      	adds	r3, #33	; 0x21
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	f003 0302 	and.w	r3, r3, #2
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	69fb      	ldr	r3, [r7, #28]
 800e222:	71da      	strb	r2, [r3, #7]
 800e224:	e016      	b.n	800e254 <f_open+0x428>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e228:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e22a:	4611      	mov	r1, r2
 800e22c:	4618      	mov	r0, r3
 800e22e:	f7fd ff47 	bl	800c0c0 <ld_clust>
 800e232:	4602      	mov	r2, r0
 800e234:	69fb      	ldr	r3, [r7, #28]
 800e236:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e23a:	331c      	adds	r3, #28
 800e23c:	4618      	mov	r0, r3
 800e23e:	f7fc fb87 	bl	800a950 <ld_dword>
 800e242:	4603      	mov	r3, r0
 800e244:	2200      	movs	r2, #0
 800e246:	60bb      	str	r3, [r7, #8]
 800e248:	60fa      	str	r2, [r7, #12]
 800e24a:	69fb      	ldr	r3, [r7, #28]
 800e24c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e250:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e254:	69fb      	ldr	r3, [r7, #28]
 800e256:	2200      	movs	r2, #0
 800e258:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e25a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e25c:	69fb      	ldr	r3, [r7, #28]
 800e25e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e262:	88da      	ldrh	r2, [r3, #6]
 800e264:	69fb      	ldr	r3, [r7, #28]
 800e266:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	7dfa      	ldrb	r2, [r7, #23]
 800e26c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 800e270:	69fb      	ldr	r3, [r7, #28]
 800e272:	2200      	movs	r2, #0
 800e274:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 800e278:	69fb      	ldr	r3, [r7, #28]
 800e27a:	2200      	movs	r2, #0
 800e27c:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e27e:	69f9      	ldr	r1, [r7, #28]
 800e280:	f04f 0200 	mov.w	r2, #0
 800e284:	f04f 0300 	mov.w	r3, #0
 800e288:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e28c:	69fb      	ldr	r3, [r7, #28]
 800e28e:	3354      	adds	r3, #84	; 0x54
 800e290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e294:	2100      	movs	r1, #0
 800e296:	4618      	mov	r0, r3
 800e298:	f7fc fd48 	bl	800ad2c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e29c:	7dfb      	ldrb	r3, [r7, #23]
 800e29e:	f003 0320 	and.w	r3, r3, #32
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	f000 808e 	beq.w	800e3c4 <f_open+0x598>
 800e2a8:	69fb      	ldr	r3, [r7, #28]
 800e2aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e2ae:	4313      	orrs	r3, r2
 800e2b0:	f000 8088 	beq.w	800e3c4 <f_open+0x598>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e2b4:	69fb      	ldr	r3, [r7, #28]
 800e2b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e2ba:	69f9      	ldr	r1, [r7, #28]
 800e2bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	895b      	ldrh	r3, [r3, #10]
 800e2c4:	025b      	lsls	r3, r3, #9
 800e2c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	689b      	ldr	r3, [r3, #8]
 800e2ce:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2d2:	69fb      	ldr	r3, [r7, #28]
 800e2d4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e2d8:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800e2dc:	e027      	b.n	800e32e <f_open+0x502>
					clst = get_fat(&fp->obj, clst);
 800e2de:	69fb      	ldr	r3, [r7, #28]
 800e2e0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f7fc ffeb 	bl	800b2c0 <get_fat>
 800e2ea:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 800e2ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e2f2:	2b01      	cmp	r3, #1
 800e2f4:	d802      	bhi.n	800e2fc <f_open+0x4d0>
 800e2f6:	2302      	movs	r3, #2
 800e2f8:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e300:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e304:	d102      	bne.n	800e30c <f_open+0x4e0>
 800e306:	2301      	movs	r3, #1
 800e308:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e30c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e310:	2200      	movs	r2, #0
 800e312:	469a      	mov	sl, r3
 800e314:	4693      	mov	fp, r2
 800e316:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e31a:	ebb2 010a 	subs.w	r1, r2, sl
 800e31e:	6039      	str	r1, [r7, #0]
 800e320:	eb63 030b 	sbc.w	r3, r3, fp
 800e324:	607b      	str	r3, [r7, #4]
 800e326:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e32a:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 800e32e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e332:	2b00      	cmp	r3, #0
 800e334:	d10a      	bne.n	800e34c <f_open+0x520>
 800e336:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800e33a:	2200      	movs	r2, #0
 800e33c:	4698      	mov	r8, r3
 800e33e:	4691      	mov	r9, r2
 800e340:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e344:	4590      	cmp	r8, r2
 800e346:	eb79 0303 	sbcs.w	r3, r9, r3
 800e34a:	d3c8      	bcc.n	800e2de <f_open+0x4b2>
				}
				fp->clust = clst;
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800e352:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e354:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d133      	bne.n	800e3c4 <f_open+0x598>
 800e35c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 800e360:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800e364:	2500      	movs	r5, #0
 800e366:	ea54 0305 	orrs.w	r3, r4, r5
 800e36a:	d02b      	beq.n	800e3c4 <f_open+0x598>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800e372:	4618      	mov	r0, r3
 800e374:	f7fc ff84 	bl	800b280 <clust2sect>
 800e378:	67f8      	str	r0, [r7, #124]	; 0x7c
 800e37a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d103      	bne.n	800e388 <f_open+0x55c>
						res = FR_INT_ERR;
 800e380:	2302      	movs	r3, #2
 800e382:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800e386:	e01d      	b.n	800e3c4 <f_open+0x598>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e388:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 800e38c:	f04f 0200 	mov.w	r2, #0
 800e390:	f04f 0300 	mov.w	r3, #0
 800e394:	0a42      	lsrs	r2, r0, #9
 800e396:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e39a:	0a4b      	lsrs	r3, r1, #9
 800e39c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e39e:	441a      	add	r2, r3
 800e3a0:	69fb      	ldr	r3, [r7, #28]
 800e3a2:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a6:	7858      	ldrb	r0, [r3, #1]
 800e3a8:	69fb      	ldr	r3, [r7, #28]
 800e3aa:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e3b2:	2301      	movs	r3, #1
 800e3b4:	f7fc fa56 	bl	800a864 <disk_read>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d002      	beq.n	800e3c4 <f_open+0x598>
 800e3be:	2301      	movs	r3, #1
 800e3c0:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 800e3c4:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800e3c8:	f000 fc4c 	bl	800ec64 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e3cc:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d002      	beq.n	800e3da <f_open+0x5ae>
 800e3d4:	69fb      	ldr	r3, [r7, #28]
 800e3d6:	2200      	movs	r2, #0
 800e3d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e3da:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 800e3de:	4618      	mov	r0, r3
 800e3e0:	37a0      	adds	r7, #160	; 0xa0
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e3e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800e3e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e3ec:	b08c      	sub	sp, #48	; 0x30
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	60f8      	str	r0, [r7, #12]
 800e3f2:	60b9      	str	r1, [r7, #8]
 800e3f4:	607a      	str	r2, [r7, #4]
 800e3f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800e3f8:	68bb      	ldr	r3, [r7, #8]
 800e3fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800e3fc:	683b      	ldr	r3, [r7, #0]
 800e3fe:	2200      	movs	r2, #0
 800e400:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	f107 0210 	add.w	r2, r7, #16
 800e408:	4611      	mov	r1, r2
 800e40a:	4618      	mov	r0, r3
 800e40c:	f7ff fc92 	bl	800dd34 <validate>
 800e410:	4603      	mov	r3, r0
 800e412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d108      	bne.n	800e430 <f_write+0x48>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800e424:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800e428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <f_write+0x4e>
 800e430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e434:	e187      	b.n	800e746 <f_write+0x35e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e43c:	f003 0302 	and.w	r3, r3, #2
 800e440:	2b00      	cmp	r3, #0
 800e442:	d101      	bne.n	800e448 <f_write+0x60>
 800e444:	2307      	movs	r3, #7
 800e446:	e17e      	b.n	800e746 <f_write+0x35e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	781b      	ldrb	r3, [r3, #0]
 800e44c:	2b04      	cmp	r3, #4
 800e44e:	f000 816a 	beq.w	800e726 <f_write+0x33e>
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	18d1      	adds	r1, r2, r3
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e462:	4613      	mov	r3, r2
 800e464:	4299      	cmp	r1, r3
 800e466:	f080 815e 	bcs.w	800e726 <f_write+0x33e>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e470:	4613      	mov	r3, r2
 800e472:	43db      	mvns	r3, r3
 800e474:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800e476:	e156      	b.n	800e726 <f_write+0x33e>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e47e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 800e482:	2500      	movs	r5, #0
 800e484:	ea54 0305 	orrs.w	r3, r4, r5
 800e488:	f040 80fb 	bne.w	800e682 <f_write+0x29a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e492:	f04f 0200 	mov.w	r2, #0
 800e496:	f04f 0300 	mov.w	r3, #0
 800e49a:	0a42      	lsrs	r2, r0, #9
 800e49c:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 800e4a0:	0a4b      	lsrs	r3, r1, #9
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	895b      	ldrh	r3, [r3, #10]
 800e4a6:	3b01      	subs	r3, #1
 800e4a8:	4013      	ands	r3, r2
 800e4aa:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d146      	bne.n	800e540 <f_write+0x158>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e4b8:	4313      	orrs	r3, r2
 800e4ba:	d10c      	bne.n	800e4d6 <f_write+0xee>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	689b      	ldr	r3, [r3, #8]
 800e4c0:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800e4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d11a      	bne.n	800e4fe <f_write+0x116>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f7fd fafb 	bl	800bac8 <create_chain>
 800e4d2:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4d4:	e013      	b.n	800e4fe <f_write+0x116>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4d6:	68fb      	ldr	r3, [r7, #12]
 800e4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d007      	beq.n	800e4ee <f_write+0x106>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e4e4:	68f8      	ldr	r0, [r7, #12]
 800e4e6:	f7fd fbf0 	bl	800bcca <clmt_clust>
 800e4ea:	62b8      	str	r0, [r7, #40]	; 0x28
 800e4ec:	e007      	b.n	800e4fe <f_write+0x116>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800e4ee:	68fa      	ldr	r2, [r7, #12]
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	f7fd fae6 	bl	800bac8 <create_chain>
 800e4fc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e500:	2b00      	cmp	r3, #0
 800e502:	f000 8115 	beq.w	800e730 <f_write+0x348>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800e506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d105      	bne.n	800e518 <f_write+0x130>
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e514:	2302      	movs	r3, #2
 800e516:	e116      	b.n	800e746 <f_write+0x35e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e51a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51e:	d105      	bne.n	800e52c <f_write+0x144>
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2201      	movs	r2, #1
 800e524:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e528:	2301      	movs	r3, #1
 800e52a:	e10c      	b.n	800e746 <f_write+0x35e>
				fp->clust = clst;			/* Update current cluster */
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e530:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	689b      	ldr	r3, [r3, #8]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d102      	bne.n	800e540 <f_write+0x158>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e53e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e546:	b25b      	sxtb	r3, r3
 800e548:	2b00      	cmp	r3, #0
 800e54a:	da1b      	bge.n	800e584 <f_write+0x19c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e54c:	693b      	ldr	r3, [r7, #16]
 800e54e:	7858      	ldrb	r0, [r3, #1]
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e55a:	2301      	movs	r3, #1
 800e55c:	f7fc f9a2 	bl	800a8a4 <disk_write>
 800e560:	4603      	mov	r3, r0
 800e562:	2b00      	cmp	r3, #0
 800e564:	d005      	beq.n	800e572 <f_write+0x18a>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	2201      	movs	r2, #1
 800e56a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e56e:	2301      	movs	r3, #1
 800e570:	e0e9      	b.n	800e746 <f_write+0x35e>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e584:	693a      	ldr	r2, [r7, #16]
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f7fc fe77 	bl	800b280 <clust2sect>
 800e592:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	2b00      	cmp	r3, #0
 800e598:	d105      	bne.n	800e5a6 <f_write+0x1be>
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	2202      	movs	r2, #2
 800e59e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e5a2:	2302      	movs	r3, #2
 800e5a4:	e0cf      	b.n	800e746 <f_write+0x35e>
			sect += csect;
 800e5a6:	697a      	ldr	r2, [r7, #20]
 800e5a8:	69bb      	ldr	r3, [r7, #24]
 800e5aa:	4413      	add	r3, r2
 800e5ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	0a5b      	lsrs	r3, r3, #9
 800e5b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d03f      	beq.n	800e63a <f_write+0x252>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e5ba:	69ba      	ldr	r2, [r7, #24]
 800e5bc:	6a3b      	ldr	r3, [r7, #32]
 800e5be:	4413      	add	r3, r2
 800e5c0:	693a      	ldr	r2, [r7, #16]
 800e5c2:	8952      	ldrh	r2, [r2, #10]
 800e5c4:	4293      	cmp	r3, r2
 800e5c6:	d905      	bls.n	800e5d4 <f_write+0x1ec>
					cc = fs->csize - csect;
 800e5c8:	693b      	ldr	r3, [r7, #16]
 800e5ca:	895b      	ldrh	r3, [r3, #10]
 800e5cc:	461a      	mov	r2, r3
 800e5ce:	69bb      	ldr	r3, [r7, #24]
 800e5d0:	1ad3      	subs	r3, r2, r3
 800e5d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5d4:	693b      	ldr	r3, [r7, #16]
 800e5d6:	7858      	ldrb	r0, [r3, #1]
 800e5d8:	6a3b      	ldr	r3, [r7, #32]
 800e5da:	697a      	ldr	r2, [r7, #20]
 800e5dc:	69f9      	ldr	r1, [r7, #28]
 800e5de:	f7fc f961 	bl	800a8a4 <disk_write>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d005      	beq.n	800e5f4 <f_write+0x20c>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	2201      	movs	r2, #1
 800e5ec:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e5f0:	2301      	movs	r3, #1
 800e5f2:	e0a8      	b.n	800e746 <f_write+0x35e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	1ad3      	subs	r3, r2, r3
 800e5fc:	6a3a      	ldr	r2, [r7, #32]
 800e5fe:	429a      	cmp	r2, r3
 800e600:	d917      	bls.n	800e632 <f_write+0x24a>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	f103 0054 	add.w	r0, r3, #84	; 0x54
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	1ad3      	subs	r3, r2, r3
 800e610:	025b      	lsls	r3, r3, #9
 800e612:	69fa      	ldr	r2, [r7, #28]
 800e614:	4413      	add	r3, r2
 800e616:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e61a:	4619      	mov	r1, r3
 800e61c:	f7fc fb65 	bl	800acea <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e62a:	b2da      	uxtb	r2, r3
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	025b      	lsls	r3, r3, #9
 800e636:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800e638:	e04a      	b.n	800e6d0 <f_write+0x2e8>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e63e:	697a      	ldr	r2, [r7, #20]
 800e640:	429a      	cmp	r2, r3
 800e642:	d01b      	beq.n	800e67c <f_write+0x294>
				fp->fptr < fp->obj.objsize &&
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800e650:	4290      	cmp	r0, r2
 800e652:	eb71 0303 	sbcs.w	r3, r1, r3
 800e656:	d211      	bcs.n	800e67c <f_write+0x294>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800e658:	693b      	ldr	r3, [r7, #16]
 800e65a:	7858      	ldrb	r0, [r3, #1]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e662:	2301      	movs	r3, #1
 800e664:	697a      	ldr	r2, [r7, #20]
 800e666:	f7fc f8fd 	bl	800a864 <disk_read>
 800e66a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d005      	beq.n	800e67c <f_write+0x294>
					ABORT(fs, FR_DISK_ERR);
 800e670:	68fb      	ldr	r3, [r7, #12]
 800e672:	2201      	movs	r2, #1
 800e674:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800e678:	2301      	movs	r3, #1
 800e67a:	e064      	b.n	800e746 <f_write+0x35e>
			}
#endif
			fp->sect = sect;
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	697a      	ldr	r2, [r7, #20]
 800e680:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e688:	4613      	mov	r3, r2
 800e68a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e68e:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800e692:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800e694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	429a      	cmp	r2, r3
 800e69a:	d901      	bls.n	800e6a0 <f_write+0x2b8>
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e6ac:	4613      	mov	r3, r2
 800e6ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6b2:	440b      	add	r3, r1
 800e6b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6b6:	69f9      	ldr	r1, [r7, #28]
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f7fc fb16 	bl	800acea <mem_cpy>
		fp->flag |= FA_DIRTY;
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e6c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800e6c8:	b2da      	uxtb	r2, r3
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800e6d0:	69fa      	ldr	r2, [r7, #28]
 800e6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d4:	4413      	add	r3, r2
 800e6d6:	61fb      	str	r3, [r7, #28]
 800e6d8:	68fb      	ldr	r3, [r7, #12]
 800e6da:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800e6de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e6e0:	2000      	movs	r0, #0
 800e6e2:	4688      	mov	r8, r1
 800e6e4:	4681      	mov	r9, r0
 800e6e6:	eb12 0a08 	adds.w	sl, r2, r8
 800e6ea:	eb43 0b09 	adc.w	fp, r3, r9
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e6fa:	68f9      	ldr	r1, [r7, #12]
 800e6fc:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 800e700:	4282      	cmp	r2, r0
 800e702:	eb73 0c01 	sbcs.w	ip, r3, r1
 800e706:	d201      	bcs.n	800e70c <f_write+0x324>
 800e708:	4602      	mov	r2, r0
 800e70a:	460b      	mov	r3, r1
 800e70c:	68f9      	ldr	r1, [r7, #12]
 800e70e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800e712:	683b      	ldr	r3, [r7, #0]
 800e714:	681a      	ldr	r2, [r3, #0]
 800e716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e718:	441a      	add	r2, r3
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	601a      	str	r2, [r3, #0]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e722:	1ad3      	subs	r3, r2, r3
 800e724:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	f47f aea5 	bne.w	800e478 <f_write+0x90>
 800e72e:	e000      	b.n	800e732 <f_write+0x34a>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800e730:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e73c:	b2da      	uxtb	r2, r3
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 800e744:	2300      	movs	r3, #0
}
 800e746:	4618      	mov	r0, r3
 800e748:	3730      	adds	r7, #48	; 0x30
 800e74a:	46bd      	mov	sp, r7
 800e74c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800e750 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b09c      	sub	sp, #112	; 0x70
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800e75e:	4611      	mov	r1, r2
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fae7 	bl	800dd34 <validate>
 800e766:	4603      	mov	r3, r0
 800e768:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 800e76c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e770:	2b00      	cmp	r3, #0
 800e772:	f040 8119 	bne.w	800e9a8 <f_sync+0x258>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e77c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e780:	2b00      	cmp	r3, #0
 800e782:	f000 8111 	beq.w	800e9a8 <f_sync+0x258>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e78c:	b25b      	sxtb	r3, r3
 800e78e:	2b00      	cmp	r3, #0
 800e790:	da17      	bge.n	800e7c2 <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e792:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e794:	7858      	ldrb	r0, [r3, #1]
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	f103 0154 	add.w	r1, r3, #84	; 0x54
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7a0:	2301      	movs	r3, #1
 800e7a2:	f7fc f87f 	bl	800a8a4 <disk_write>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d001      	beq.n	800e7b0 <f_sync+0x60>
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	e0fd      	b.n	800e9ac <f_sync+0x25c>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e7b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e7c2:	f7fb fe9d 	bl	800a500 <get_fattime>
 800e7c6:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e7c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	2b04      	cmp	r3, #4
 800e7ce:	f040 80a0 	bne.w	800e912 <f_sync+0x1c2>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	f7fd f863 	bl	800b8a0 <fill_first_frag>
 800e7da:	4603      	mov	r3, r0
 800e7dc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e7e0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d10a      	bne.n	800e7fe <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e7f2:	4619      	mov	r1, r3
 800e7f4:	f7fd f883 	bl	800b8fe <fill_last_frag>
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 800e7fe:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e802:	2b00      	cmp	r3, #0
 800e804:	f040 80d0 	bne.w	800e9a8 <f_sync+0x258>
					INIT_NAMBUF(fs);
 800e808:	f44f 608c 	mov.w	r0, #1120	; 0x460
 800e80c:	f000 fa1e 	bl	800ec4c <ff_memalloc>
 800e810:	6638      	str	r0, [r7, #96]	; 0x60
 800e812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e814:	2b00      	cmp	r3, #0
 800e816:	d101      	bne.n	800e81c <f_sync+0xcc>
 800e818:	2311      	movs	r3, #17
 800e81a:	e0c7      	b.n	800e9ac <f_sync+0x25c>
 800e81c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e81e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e820:	60da      	str	r2, [r3, #12]
 800e822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e824:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e826:	f502 7200 	add.w	r2, r2, #512	; 0x200
 800e82a:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	f107 0308 	add.w	r3, r7, #8
 800e832:	4611      	mov	r1, r2
 800e834:	4618      	mov	r0, r3
 800e836:	f7fd ff93 	bl	800c760 <load_obj_dir>
 800e83a:	4603      	mov	r3, r0
 800e83c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 800e840:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e844:	2b00      	cmp	r3, #0
 800e846:	d160      	bne.n	800e90a <f_sync+0x1ba>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 800e848:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	3304      	adds	r3, #4
 800e84e:	781a      	ldrb	r2, [r3, #0]
 800e850:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e852:	691b      	ldr	r3, [r3, #16]
 800e854:	3304      	adds	r3, #4
 800e856:	f042 0220 	orr.w	r2, r2, #32
 800e85a:	b2d2      	uxtb	r2, r2
 800e85c:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	79da      	ldrb	r2, [r3, #7]
 800e862:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e864:	691b      	ldr	r3, [r3, #16]
 800e866:	3321      	adds	r3, #33	; 0x21
 800e868:	f042 0201 	orr.w	r2, r2, #1
 800e86c:	b2d2      	uxtb	r2, r2
 800e86e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 800e870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	689b      	ldr	r3, [r3, #8]
 800e87c:	4619      	mov	r1, r3
 800e87e:	4610      	mov	r0, r2
 800e880:	f7fc f97f 	bl	800ab82 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 800e884:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e886:	691b      	ldr	r3, [r3, #16]
 800e888:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e892:	4608      	mov	r0, r1
 800e894:	f7fc f9a1 	bl	800abda <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 800e898:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e89a:	691b      	ldr	r3, [r3, #16]
 800e89c:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e8a6:	4608      	mov	r0, r1
 800e8a8:	f7fc f997 	bl	800abda <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 800e8ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ae:	691b      	ldr	r3, [r3, #16]
 800e8b0:	330c      	adds	r3, #12
 800e8b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f7fc f964 	bl	800ab82 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 800e8ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8bc:	691b      	ldr	r3, [r3, #16]
 800e8be:	3315      	adds	r3, #21
 800e8c0:	2200      	movs	r2, #0
 800e8c2:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800e8c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8c6:	691b      	ldr	r3, [r3, #16]
 800e8c8:	3310      	adds	r3, #16
 800e8ca:	2100      	movs	r1, #0
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7fc f958 	bl	800ab82 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800e8d2:	f107 0308 	add.w	r3, r7, #8
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7fd ff78 	bl	800c7cc <store_xdir>
 800e8dc:	4603      	mov	r3, r0
 800e8de:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 800e8e2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d10f      	bne.n	800e90a <f_sync+0x1ba>
							res = sync_fs(fs);
 800e8ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f7fc fc59 	bl	800b1a4 <sync_fs>
 800e8f2:	4603      	mov	r3, r0
 800e8f4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e8fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e902:	b2da      	uxtb	r2, r3
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 800e90a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800e90c:	f000 f9aa 	bl	800ec64 <ff_memfree>
 800e910:	e04a      	b.n	800e9a8 <f_sync+0x258>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e912:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e918:	4619      	mov	r1, r3
 800e91a:	4610      	mov	r0, r2
 800e91c:	f7fc fc14 	bl	800b148 <move_window>
 800e920:	4603      	mov	r3, r0
 800e922:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 800e926:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d13c      	bne.n	800e9a8 <f_sync+0x258>
					dir = fp->dir_ptr;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e932:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e936:	330b      	adds	r3, #11
 800e938:	781a      	ldrb	r2, [r3, #0]
 800e93a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e93c:	330b      	adds	r3, #11
 800e93e:	f042 0220 	orr.w	r2, r2, #32
 800e942:	b2d2      	uxtb	r2, r2
 800e944:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	689b      	ldr	r3, [r3, #8]
 800e94e:	461a      	mov	r2, r3
 800e950:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800e952:	f7fd fbd4 	bl	800c0fe <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e956:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e958:	f103 001c 	add.w	r0, r3, #28
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e962:	4613      	mov	r3, r2
 800e964:	4619      	mov	r1, r3
 800e966:	f7fc f90c 	bl	800ab82 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e96a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e96c:	3316      	adds	r3, #22
 800e96e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e970:	4618      	mov	r0, r3
 800e972:	f7fc f906 	bl	800ab82 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e976:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e978:	3312      	adds	r3, #18
 800e97a:	2100      	movs	r1, #0
 800e97c:	4618      	mov	r0, r3
 800e97e:	f7fc f8e5 	bl	800ab4c <st_word>
					fs->wflag = 1;
 800e982:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e984:	2201      	movs	r2, #1
 800e986:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e988:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fc fc0a 	bl	800b1a4 <sync_fs>
 800e990:	4603      	mov	r3, r0
 800e992:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e99c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e9a0:	b2da      	uxtb	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e9a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3770      	adds	r7, #112	; 0x70
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7ff fec7 	bl	800e750 <f_sync>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e9c6:	7bfb      	ldrb	r3, [r7, #15]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d118      	bne.n	800e9fe <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f107 0208 	add.w	r2, r7, #8
 800e9d2:	4611      	mov	r1, r2
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f7ff f9ad 	bl	800dd34 <validate>
 800e9da:	4603      	mov	r3, r0
 800e9dc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e9de:	7bfb      	ldrb	r3, [r7, #15]
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d10c      	bne.n	800e9fe <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9e8:	4618      	mov	r0, r3
 800e9ea:	f7fc fb09 	bl	800b000 <dec_lock>
 800e9ee:	4603      	mov	r3, r0
 800e9f0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e9f2:	7bfb      	ldrb	r3, [r7, #15]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d102      	bne.n	800e9fe <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3710      	adds	r7, #16
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b087      	sub	sp, #28
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	4613      	mov	r3, r2
 800ea14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ea16:	2301      	movs	r3, #1
 800ea18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ea1e:	4b1f      	ldr	r3, [pc, #124]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea20:	7a5b      	ldrb	r3, [r3, #9]
 800ea22:	b2db      	uxtb	r3, r3
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d131      	bne.n	800ea8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ea28:	4b1c      	ldr	r3, [pc, #112]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea2a:	7a5b      	ldrb	r3, [r3, #9]
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	461a      	mov	r2, r3
 800ea30:	4b1a      	ldr	r3, [pc, #104]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea32:	2100      	movs	r1, #0
 800ea34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ea36:	4b19      	ldr	r3, [pc, #100]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea38:	7a5b      	ldrb	r3, [r3, #9]
 800ea3a:	b2db      	uxtb	r3, r3
 800ea3c:	4a17      	ldr	r2, [pc, #92]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea3e:	009b      	lsls	r3, r3, #2
 800ea40:	4413      	add	r3, r2
 800ea42:	68fa      	ldr	r2, [r7, #12]
 800ea44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ea46:	4b15      	ldr	r3, [pc, #84]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea48:	7a5b      	ldrb	r3, [r3, #9]
 800ea4a:	b2db      	uxtb	r3, r3
 800ea4c:	461a      	mov	r2, r3
 800ea4e:	4b13      	ldr	r3, [pc, #76]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea50:	4413      	add	r3, r2
 800ea52:	79fa      	ldrb	r2, [r7, #7]
 800ea54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ea56:	4b11      	ldr	r3, [pc, #68]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea58:	7a5b      	ldrb	r3, [r3, #9]
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	1c5a      	adds	r2, r3, #1
 800ea5e:	b2d1      	uxtb	r1, r2
 800ea60:	4a0e      	ldr	r2, [pc, #56]	; (800ea9c <FATFS_LinkDriverEx+0x94>)
 800ea62:	7251      	strb	r1, [r2, #9]
 800ea64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ea66:	7dbb      	ldrb	r3, [r7, #22]
 800ea68:	3330      	adds	r3, #48	; 0x30
 800ea6a:	b2da      	uxtb	r2, r3
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ea70:	68bb      	ldr	r3, [r7, #8]
 800ea72:	3301      	adds	r3, #1
 800ea74:	223a      	movs	r2, #58	; 0x3a
 800ea76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ea78:	68bb      	ldr	r3, [r7, #8]
 800ea7a:	3302      	adds	r3, #2
 800ea7c:	222f      	movs	r2, #47	; 0x2f
 800ea7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ea80:	68bb      	ldr	r3, [r7, #8]
 800ea82:	3303      	adds	r3, #3
 800ea84:	2200      	movs	r2, #0
 800ea86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ea8c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	371c      	adds	r7, #28
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20002e2c 	.word	0x20002e2c

0800eaa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b082      	sub	sp, #8
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800eaaa:	2200      	movs	r2, #0
 800eaac:	6839      	ldr	r1, [r7, #0]
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff ffaa 	bl	800ea08 <FATFS_LinkDriverEx>
 800eab4:	4603      	mov	r3, r0
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	3708      	adds	r7, #8
 800eaba:	46bd      	mov	sp, r7
 800eabc:	bd80      	pop	{r7, pc}
	...

0800eac0 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b085      	sub	sp, #20
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	4603      	mov	r3, r0
 800eac8:	6039      	str	r1, [r7, #0]
 800eaca:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800eacc:	88fb      	ldrh	r3, [r7, #6]
 800eace:	2b7f      	cmp	r3, #127	; 0x7f
 800ead0:	d802      	bhi.n	800ead8 <ff_convert+0x18>
		c = chr;
 800ead2:	88fb      	ldrh	r3, [r7, #6]
 800ead4:	81fb      	strh	r3, [r7, #14]
 800ead6:	e025      	b.n	800eb24 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d00b      	beq.n	800eaf6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800eade:	88fb      	ldrh	r3, [r7, #6]
 800eae0:	2bff      	cmp	r3, #255	; 0xff
 800eae2:	d805      	bhi.n	800eaf0 <ff_convert+0x30>
 800eae4:	88fb      	ldrh	r3, [r7, #6]
 800eae6:	3b80      	subs	r3, #128	; 0x80
 800eae8:	4a12      	ldr	r2, [pc, #72]	; (800eb34 <ff_convert+0x74>)
 800eaea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaee:	e000      	b.n	800eaf2 <ff_convert+0x32>
 800eaf0:	2300      	movs	r3, #0
 800eaf2:	81fb      	strh	r3, [r7, #14]
 800eaf4:	e016      	b.n	800eb24 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	81fb      	strh	r3, [r7, #14]
 800eafa:	e009      	b.n	800eb10 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 800eafc:	89fb      	ldrh	r3, [r7, #14]
 800eafe:	4a0d      	ldr	r2, [pc, #52]	; (800eb34 <ff_convert+0x74>)
 800eb00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eb04:	88fa      	ldrh	r2, [r7, #6]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d006      	beq.n	800eb18 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800eb0a:	89fb      	ldrh	r3, [r7, #14]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	81fb      	strh	r3, [r7, #14]
 800eb10:	89fb      	ldrh	r3, [r7, #14]
 800eb12:	2b7f      	cmp	r3, #127	; 0x7f
 800eb14:	d9f2      	bls.n	800eafc <ff_convert+0x3c>
 800eb16:	e000      	b.n	800eb1a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800eb18:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800eb1a:	89fb      	ldrh	r3, [r7, #14]
 800eb1c:	3380      	adds	r3, #128	; 0x80
 800eb1e:	b29b      	uxth	r3, r3
 800eb20:	b2db      	uxtb	r3, r3
 800eb22:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800eb24:	89fb      	ldrh	r3, [r7, #14]
}
 800eb26:	4618      	mov	r0, r3
 800eb28:	3714      	adds	r7, #20
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
 800eb32:	bf00      	nop
 800eb34:	0800f8a8 	.word	0x0800f8a8

0800eb38 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800eb38:	b480      	push	{r7}
 800eb3a:	b087      	sub	sp, #28
 800eb3c:	af00      	add	r7, sp, #0
 800eb3e:	4603      	mov	r3, r0
 800eb40:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800eb42:	88fb      	ldrh	r3, [r7, #6]
 800eb44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800eb48:	d201      	bcs.n	800eb4e <ff_wtoupper+0x16>
 800eb4a:	4b3e      	ldr	r3, [pc, #248]	; (800ec44 <ff_wtoupper+0x10c>)
 800eb4c:	e000      	b.n	800eb50 <ff_wtoupper+0x18>
 800eb4e:	4b3e      	ldr	r3, [pc, #248]	; (800ec48 <ff_wtoupper+0x110>)
 800eb50:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800eb52:	697b      	ldr	r3, [r7, #20]
 800eb54:	1c9a      	adds	r2, r3, #2
 800eb56:	617a      	str	r2, [r7, #20]
 800eb58:	881b      	ldrh	r3, [r3, #0]
 800eb5a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 800eb5c:	8a7b      	ldrh	r3, [r7, #18]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d068      	beq.n	800ec34 <ff_wtoupper+0xfc>
 800eb62:	88fa      	ldrh	r2, [r7, #6]
 800eb64:	8a7b      	ldrh	r3, [r7, #18]
 800eb66:	429a      	cmp	r2, r3
 800eb68:	d364      	bcc.n	800ec34 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	1c9a      	adds	r2, r3, #2
 800eb6e:	617a      	str	r2, [r7, #20]
 800eb70:	881b      	ldrh	r3, [r3, #0]
 800eb72:	823b      	strh	r3, [r7, #16]
 800eb74:	8a3b      	ldrh	r3, [r7, #16]
 800eb76:	0a1b      	lsrs	r3, r3, #8
 800eb78:	81fb      	strh	r3, [r7, #14]
 800eb7a:	8a3b      	ldrh	r3, [r7, #16]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800eb80:	88fa      	ldrh	r2, [r7, #6]
 800eb82:	8a79      	ldrh	r1, [r7, #18]
 800eb84:	8a3b      	ldrh	r3, [r7, #16]
 800eb86:	440b      	add	r3, r1
 800eb88:	429a      	cmp	r2, r3
 800eb8a:	da49      	bge.n	800ec20 <ff_wtoupper+0xe8>
			switch (cmd) {
 800eb8c:	89fb      	ldrh	r3, [r7, #14]
 800eb8e:	2b08      	cmp	r3, #8
 800eb90:	d84f      	bhi.n	800ec32 <ff_wtoupper+0xfa>
 800eb92:	a201      	add	r2, pc, #4	; (adr r2, 800eb98 <ff_wtoupper+0x60>)
 800eb94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb98:	0800ebbd 	.word	0x0800ebbd
 800eb9c:	0800ebcf 	.word	0x0800ebcf
 800eba0:	0800ebe5 	.word	0x0800ebe5
 800eba4:	0800ebed 	.word	0x0800ebed
 800eba8:	0800ebf5 	.word	0x0800ebf5
 800ebac:	0800ebfd 	.word	0x0800ebfd
 800ebb0:	0800ec05 	.word	0x0800ec05
 800ebb4:	0800ec0d 	.word	0x0800ec0d
 800ebb8:	0800ec15 	.word	0x0800ec15
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800ebbc:	88fa      	ldrh	r2, [r7, #6]
 800ebbe:	8a7b      	ldrh	r3, [r7, #18]
 800ebc0:	1ad3      	subs	r3, r2, r3
 800ebc2:	005b      	lsls	r3, r3, #1
 800ebc4:	697a      	ldr	r2, [r7, #20]
 800ebc6:	4413      	add	r3, r2
 800ebc8:	881b      	ldrh	r3, [r3, #0]
 800ebca:	80fb      	strh	r3, [r7, #6]
 800ebcc:	e027      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800ebce:	88fa      	ldrh	r2, [r7, #6]
 800ebd0:	8a7b      	ldrh	r3, [r7, #18]
 800ebd2:	1ad3      	subs	r3, r2, r3
 800ebd4:	b29b      	uxth	r3, r3
 800ebd6:	f003 0301 	and.w	r3, r3, #1
 800ebda:	b29b      	uxth	r3, r3
 800ebdc:	88fa      	ldrh	r2, [r7, #6]
 800ebde:	1ad3      	subs	r3, r2, r3
 800ebe0:	80fb      	strh	r3, [r7, #6]
 800ebe2:	e01c      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 800ebe4:	88fb      	ldrh	r3, [r7, #6]
 800ebe6:	3b10      	subs	r3, #16
 800ebe8:	80fb      	strh	r3, [r7, #6]
 800ebea:	e018      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800ebec:	88fb      	ldrh	r3, [r7, #6]
 800ebee:	3b20      	subs	r3, #32
 800ebf0:	80fb      	strh	r3, [r7, #6]
 800ebf2:	e014      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 800ebf4:	88fb      	ldrh	r3, [r7, #6]
 800ebf6:	3b30      	subs	r3, #48	; 0x30
 800ebf8:	80fb      	strh	r3, [r7, #6]
 800ebfa:	e010      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800ebfc:	88fb      	ldrh	r3, [r7, #6]
 800ebfe:	3b1a      	subs	r3, #26
 800ec00:	80fb      	strh	r3, [r7, #6]
 800ec02:	e00c      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 800ec04:	88fb      	ldrh	r3, [r7, #6]
 800ec06:	3308      	adds	r3, #8
 800ec08:	80fb      	strh	r3, [r7, #6]
 800ec0a:	e008      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800ec0c:	88fb      	ldrh	r3, [r7, #6]
 800ec0e:	3b50      	subs	r3, #80	; 0x50
 800ec10:	80fb      	strh	r3, [r7, #6]
 800ec12:	e004      	b.n	800ec1e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800ec14:	88fb      	ldrh	r3, [r7, #6]
 800ec16:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800ec1a:	80fb      	strh	r3, [r7, #6]
 800ec1c:	bf00      	nop
			}
			break;
 800ec1e:	e008      	b.n	800ec32 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800ec20:	89fb      	ldrh	r3, [r7, #14]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d195      	bne.n	800eb52 <ff_wtoupper+0x1a>
 800ec26:	8a3b      	ldrh	r3, [r7, #16]
 800ec28:	005b      	lsls	r3, r3, #1
 800ec2a:	697a      	ldr	r2, [r7, #20]
 800ec2c:	4413      	add	r3, r2
 800ec2e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800ec30:	e78f      	b.n	800eb52 <ff_wtoupper+0x1a>
			break;
 800ec32:	bf00      	nop
	}

	return chr;
 800ec34:	88fb      	ldrh	r3, [r7, #6]
}
 800ec36:	4618      	mov	r0, r3
 800ec38:	371c      	adds	r7, #28
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec40:	4770      	bx	lr
 800ec42:	bf00      	nop
 800ec44:	0800f9a8 	.word	0x0800f9a8
 800ec48:	0800fb9c 	.word	0x0800fb9c

0800ec4c <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b082      	sub	sp, #8
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 800ec54:	6878      	ldr	r0, [r7, #4]
 800ec56:	f000 f83b 	bl	800ecd0 <malloc>
 800ec5a:	4603      	mov	r3, r0
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3708      	adds	r7, #8
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}

0800ec64 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f000 f837 	bl	800ece0 <free>
}
 800ec72:	bf00      	nop
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
	...

0800ec7c <__errno>:
 800ec7c:	4b01      	ldr	r3, [pc, #4]	; (800ec84 <__errno+0x8>)
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	4770      	bx	lr
 800ec82:	bf00      	nop
 800ec84:	200027e4 	.word	0x200027e4

0800ec88 <__libc_init_array>:
 800ec88:	b570      	push	{r4, r5, r6, lr}
 800ec8a:	4d0d      	ldr	r5, [pc, #52]	; (800ecc0 <__libc_init_array+0x38>)
 800ec8c:	2600      	movs	r6, #0
 800ec8e:	4c0d      	ldr	r4, [pc, #52]	; (800ecc4 <__libc_init_array+0x3c>)
 800ec90:	1b64      	subs	r4, r4, r5
 800ec92:	10a4      	asrs	r4, r4, #2
 800ec94:	42a6      	cmp	r6, r4
 800ec96:	d109      	bne.n	800ecac <__libc_init_array+0x24>
 800ec98:	4d0b      	ldr	r5, [pc, #44]	; (800ecc8 <__libc_init_array+0x40>)
 800ec9a:	2600      	movs	r6, #0
 800ec9c:	4c0b      	ldr	r4, [pc, #44]	; (800eccc <__libc_init_array+0x44>)
 800ec9e:	f000 fcab 	bl	800f5f8 <_init>
 800eca2:	1b64      	subs	r4, r4, r5
 800eca4:	10a4      	asrs	r4, r4, #2
 800eca6:	42a6      	cmp	r6, r4
 800eca8:	d105      	bne.n	800ecb6 <__libc_init_array+0x2e>
 800ecaa:	bd70      	pop	{r4, r5, r6, pc}
 800ecac:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecb0:	3601      	adds	r6, #1
 800ecb2:	4798      	blx	r3
 800ecb4:	e7ee      	b.n	800ec94 <__libc_init_array+0xc>
 800ecb6:	f855 3b04 	ldr.w	r3, [r5], #4
 800ecba:	3601      	adds	r6, #1
 800ecbc:	4798      	blx	r3
 800ecbe:	e7f2      	b.n	800eca6 <__libc_init_array+0x1e>
 800ecc0:	0800fc94 	.word	0x0800fc94
 800ecc4:	0800fc94 	.word	0x0800fc94
 800ecc8:	0800fc94 	.word	0x0800fc94
 800eccc:	0800fc98 	.word	0x0800fc98

0800ecd0 <malloc>:
 800ecd0:	4b02      	ldr	r3, [pc, #8]	; (800ecdc <malloc+0xc>)
 800ecd2:	4601      	mov	r1, r0
 800ecd4:	6818      	ldr	r0, [r3, #0]
 800ecd6:	f000 b87f 	b.w	800edd8 <_malloc_r>
 800ecda:	bf00      	nop
 800ecdc:	200027e4 	.word	0x200027e4

0800ece0 <free>:
 800ece0:	4b02      	ldr	r3, [pc, #8]	; (800ecec <free+0xc>)
 800ece2:	4601      	mov	r1, r0
 800ece4:	6818      	ldr	r0, [r3, #0]
 800ece6:	f000 b80b 	b.w	800ed00 <_free_r>
 800ecea:	bf00      	nop
 800ecec:	200027e4 	.word	0x200027e4

0800ecf0 <memset>:
 800ecf0:	4402      	add	r2, r0
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d100      	bne.n	800ecfa <memset+0xa>
 800ecf8:	4770      	bx	lr
 800ecfa:	f803 1b01 	strb.w	r1, [r3], #1
 800ecfe:	e7f9      	b.n	800ecf4 <memset+0x4>

0800ed00 <_free_r>:
 800ed00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d043      	beq.n	800ed8e <_free_r+0x8e>
 800ed06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed0a:	1f0c      	subs	r4, r1, #4
 800ed0c:	9001      	str	r0, [sp, #4]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	bfb8      	it	lt
 800ed12:	18e4      	addlt	r4, r4, r3
 800ed14:	f000 f904 	bl	800ef20 <__malloc_lock>
 800ed18:	4a1e      	ldr	r2, [pc, #120]	; (800ed94 <_free_r+0x94>)
 800ed1a:	9801      	ldr	r0, [sp, #4]
 800ed1c:	6813      	ldr	r3, [r2, #0]
 800ed1e:	b933      	cbnz	r3, 800ed2e <_free_r+0x2e>
 800ed20:	6063      	str	r3, [r4, #4]
 800ed22:	6014      	str	r4, [r2, #0]
 800ed24:	b003      	add	sp, #12
 800ed26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed2a:	f000 b8ff 	b.w	800ef2c <__malloc_unlock>
 800ed2e:	42a3      	cmp	r3, r4
 800ed30:	d908      	bls.n	800ed44 <_free_r+0x44>
 800ed32:	6825      	ldr	r5, [r4, #0]
 800ed34:	1961      	adds	r1, r4, r5
 800ed36:	428b      	cmp	r3, r1
 800ed38:	bf01      	itttt	eq
 800ed3a:	6819      	ldreq	r1, [r3, #0]
 800ed3c:	685b      	ldreq	r3, [r3, #4]
 800ed3e:	1949      	addeq	r1, r1, r5
 800ed40:	6021      	streq	r1, [r4, #0]
 800ed42:	e7ed      	b.n	800ed20 <_free_r+0x20>
 800ed44:	461a      	mov	r2, r3
 800ed46:	685b      	ldr	r3, [r3, #4]
 800ed48:	b10b      	cbz	r3, 800ed4e <_free_r+0x4e>
 800ed4a:	42a3      	cmp	r3, r4
 800ed4c:	d9fa      	bls.n	800ed44 <_free_r+0x44>
 800ed4e:	6811      	ldr	r1, [r2, #0]
 800ed50:	1855      	adds	r5, r2, r1
 800ed52:	42a5      	cmp	r5, r4
 800ed54:	d10b      	bne.n	800ed6e <_free_r+0x6e>
 800ed56:	6824      	ldr	r4, [r4, #0]
 800ed58:	4421      	add	r1, r4
 800ed5a:	1854      	adds	r4, r2, r1
 800ed5c:	6011      	str	r1, [r2, #0]
 800ed5e:	42a3      	cmp	r3, r4
 800ed60:	d1e0      	bne.n	800ed24 <_free_r+0x24>
 800ed62:	681c      	ldr	r4, [r3, #0]
 800ed64:	685b      	ldr	r3, [r3, #4]
 800ed66:	4421      	add	r1, r4
 800ed68:	6053      	str	r3, [r2, #4]
 800ed6a:	6011      	str	r1, [r2, #0]
 800ed6c:	e7da      	b.n	800ed24 <_free_r+0x24>
 800ed6e:	d902      	bls.n	800ed76 <_free_r+0x76>
 800ed70:	230c      	movs	r3, #12
 800ed72:	6003      	str	r3, [r0, #0]
 800ed74:	e7d6      	b.n	800ed24 <_free_r+0x24>
 800ed76:	6825      	ldr	r5, [r4, #0]
 800ed78:	1961      	adds	r1, r4, r5
 800ed7a:	428b      	cmp	r3, r1
 800ed7c:	bf02      	ittt	eq
 800ed7e:	6819      	ldreq	r1, [r3, #0]
 800ed80:	685b      	ldreq	r3, [r3, #4]
 800ed82:	1949      	addeq	r1, r1, r5
 800ed84:	6063      	str	r3, [r4, #4]
 800ed86:	bf08      	it	eq
 800ed88:	6021      	streq	r1, [r4, #0]
 800ed8a:	6054      	str	r4, [r2, #4]
 800ed8c:	e7ca      	b.n	800ed24 <_free_r+0x24>
 800ed8e:	b003      	add	sp, #12
 800ed90:	bd30      	pop	{r4, r5, pc}
 800ed92:	bf00      	nop
 800ed94:	20002e38 	.word	0x20002e38

0800ed98 <sbrk_aligned>:
 800ed98:	b570      	push	{r4, r5, r6, lr}
 800ed9a:	4e0e      	ldr	r6, [pc, #56]	; (800edd4 <sbrk_aligned+0x3c>)
 800ed9c:	460c      	mov	r4, r1
 800ed9e:	4605      	mov	r5, r0
 800eda0:	6831      	ldr	r1, [r6, #0]
 800eda2:	b911      	cbnz	r1, 800edaa <sbrk_aligned+0x12>
 800eda4:	f000 f88c 	bl	800eec0 <_sbrk_r>
 800eda8:	6030      	str	r0, [r6, #0]
 800edaa:	4621      	mov	r1, r4
 800edac:	4628      	mov	r0, r5
 800edae:	f000 f887 	bl	800eec0 <_sbrk_r>
 800edb2:	1c43      	adds	r3, r0, #1
 800edb4:	d00a      	beq.n	800edcc <sbrk_aligned+0x34>
 800edb6:	1cc4      	adds	r4, r0, #3
 800edb8:	f024 0403 	bic.w	r4, r4, #3
 800edbc:	42a0      	cmp	r0, r4
 800edbe:	d007      	beq.n	800edd0 <sbrk_aligned+0x38>
 800edc0:	1a21      	subs	r1, r4, r0
 800edc2:	4628      	mov	r0, r5
 800edc4:	f000 f87c 	bl	800eec0 <_sbrk_r>
 800edc8:	3001      	adds	r0, #1
 800edca:	d101      	bne.n	800edd0 <sbrk_aligned+0x38>
 800edcc:	f04f 34ff 	mov.w	r4, #4294967295
 800edd0:	4620      	mov	r0, r4
 800edd2:	bd70      	pop	{r4, r5, r6, pc}
 800edd4:	20002e3c 	.word	0x20002e3c

0800edd8 <_malloc_r>:
 800edd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eddc:	1ccd      	adds	r5, r1, #3
 800edde:	4607      	mov	r7, r0
 800ede0:	f025 0503 	bic.w	r5, r5, #3
 800ede4:	3508      	adds	r5, #8
 800ede6:	2d0c      	cmp	r5, #12
 800ede8:	bf38      	it	cc
 800edea:	250c      	movcc	r5, #12
 800edec:	2d00      	cmp	r5, #0
 800edee:	db01      	blt.n	800edf4 <_malloc_r+0x1c>
 800edf0:	42a9      	cmp	r1, r5
 800edf2:	d905      	bls.n	800ee00 <_malloc_r+0x28>
 800edf4:	230c      	movs	r3, #12
 800edf6:	2600      	movs	r6, #0
 800edf8:	603b      	str	r3, [r7, #0]
 800edfa:	4630      	mov	r0, r6
 800edfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee00:	4e2e      	ldr	r6, [pc, #184]	; (800eebc <_malloc_r+0xe4>)
 800ee02:	f000 f88d 	bl	800ef20 <__malloc_lock>
 800ee06:	6833      	ldr	r3, [r6, #0]
 800ee08:	461c      	mov	r4, r3
 800ee0a:	bb34      	cbnz	r4, 800ee5a <_malloc_r+0x82>
 800ee0c:	4629      	mov	r1, r5
 800ee0e:	4638      	mov	r0, r7
 800ee10:	f7ff ffc2 	bl	800ed98 <sbrk_aligned>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	4604      	mov	r4, r0
 800ee18:	d14d      	bne.n	800eeb6 <_malloc_r+0xde>
 800ee1a:	6834      	ldr	r4, [r6, #0]
 800ee1c:	4626      	mov	r6, r4
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	d140      	bne.n	800eea4 <_malloc_r+0xcc>
 800ee22:	6823      	ldr	r3, [r4, #0]
 800ee24:	4631      	mov	r1, r6
 800ee26:	4638      	mov	r0, r7
 800ee28:	eb04 0803 	add.w	r8, r4, r3
 800ee2c:	f000 f848 	bl	800eec0 <_sbrk_r>
 800ee30:	4580      	cmp	r8, r0
 800ee32:	d13a      	bne.n	800eeaa <_malloc_r+0xd2>
 800ee34:	6821      	ldr	r1, [r4, #0]
 800ee36:	3503      	adds	r5, #3
 800ee38:	4638      	mov	r0, r7
 800ee3a:	1a6d      	subs	r5, r5, r1
 800ee3c:	f025 0503 	bic.w	r5, r5, #3
 800ee40:	3508      	adds	r5, #8
 800ee42:	2d0c      	cmp	r5, #12
 800ee44:	bf38      	it	cc
 800ee46:	250c      	movcc	r5, #12
 800ee48:	4629      	mov	r1, r5
 800ee4a:	f7ff ffa5 	bl	800ed98 <sbrk_aligned>
 800ee4e:	3001      	adds	r0, #1
 800ee50:	d02b      	beq.n	800eeaa <_malloc_r+0xd2>
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	442b      	add	r3, r5
 800ee56:	6023      	str	r3, [r4, #0]
 800ee58:	e00e      	b.n	800ee78 <_malloc_r+0xa0>
 800ee5a:	6822      	ldr	r2, [r4, #0]
 800ee5c:	1b52      	subs	r2, r2, r5
 800ee5e:	d41e      	bmi.n	800ee9e <_malloc_r+0xc6>
 800ee60:	2a0b      	cmp	r2, #11
 800ee62:	d916      	bls.n	800ee92 <_malloc_r+0xba>
 800ee64:	1961      	adds	r1, r4, r5
 800ee66:	42a3      	cmp	r3, r4
 800ee68:	6025      	str	r5, [r4, #0]
 800ee6a:	bf18      	it	ne
 800ee6c:	6059      	strne	r1, [r3, #4]
 800ee6e:	6863      	ldr	r3, [r4, #4]
 800ee70:	bf08      	it	eq
 800ee72:	6031      	streq	r1, [r6, #0]
 800ee74:	5162      	str	r2, [r4, r5]
 800ee76:	604b      	str	r3, [r1, #4]
 800ee78:	f104 060b 	add.w	r6, r4, #11
 800ee7c:	4638      	mov	r0, r7
 800ee7e:	f000 f855 	bl	800ef2c <__malloc_unlock>
 800ee82:	1d23      	adds	r3, r4, #4
 800ee84:	f026 0607 	bic.w	r6, r6, #7
 800ee88:	1af2      	subs	r2, r6, r3
 800ee8a:	d0b6      	beq.n	800edfa <_malloc_r+0x22>
 800ee8c:	1b9b      	subs	r3, r3, r6
 800ee8e:	50a3      	str	r3, [r4, r2]
 800ee90:	e7b3      	b.n	800edfa <_malloc_r+0x22>
 800ee92:	6862      	ldr	r2, [r4, #4]
 800ee94:	42a3      	cmp	r3, r4
 800ee96:	bf0c      	ite	eq
 800ee98:	6032      	streq	r2, [r6, #0]
 800ee9a:	605a      	strne	r2, [r3, #4]
 800ee9c:	e7ec      	b.n	800ee78 <_malloc_r+0xa0>
 800ee9e:	4623      	mov	r3, r4
 800eea0:	6864      	ldr	r4, [r4, #4]
 800eea2:	e7b2      	b.n	800ee0a <_malloc_r+0x32>
 800eea4:	4634      	mov	r4, r6
 800eea6:	6876      	ldr	r6, [r6, #4]
 800eea8:	e7b9      	b.n	800ee1e <_malloc_r+0x46>
 800eeaa:	230c      	movs	r3, #12
 800eeac:	4638      	mov	r0, r7
 800eeae:	603b      	str	r3, [r7, #0]
 800eeb0:	f000 f83c 	bl	800ef2c <__malloc_unlock>
 800eeb4:	e7a1      	b.n	800edfa <_malloc_r+0x22>
 800eeb6:	6025      	str	r5, [r4, #0]
 800eeb8:	e7de      	b.n	800ee78 <_malloc_r+0xa0>
 800eeba:	bf00      	nop
 800eebc:	20002e38 	.word	0x20002e38

0800eec0 <_sbrk_r>:
 800eec0:	b538      	push	{r3, r4, r5, lr}
 800eec2:	2300      	movs	r3, #0
 800eec4:	4d05      	ldr	r5, [pc, #20]	; (800eedc <_sbrk_r+0x1c>)
 800eec6:	4604      	mov	r4, r0
 800eec8:	4608      	mov	r0, r1
 800eeca:	602b      	str	r3, [r5, #0]
 800eecc:	f7f2 fc54 	bl	8001778 <_sbrk>
 800eed0:	1c43      	adds	r3, r0, #1
 800eed2:	d102      	bne.n	800eeda <_sbrk_r+0x1a>
 800eed4:	682b      	ldr	r3, [r5, #0]
 800eed6:	b103      	cbz	r3, 800eeda <_sbrk_r+0x1a>
 800eed8:	6023      	str	r3, [r4, #0]
 800eeda:	bd38      	pop	{r3, r4, r5, pc}
 800eedc:	20002e40 	.word	0x20002e40

0800eee0 <siprintf>:
 800eee0:	b40e      	push	{r1, r2, r3}
 800eee2:	b500      	push	{lr}
 800eee4:	b09c      	sub	sp, #112	; 0x70
 800eee6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800eeea:	ab1d      	add	r3, sp, #116	; 0x74
 800eeec:	9002      	str	r0, [sp, #8]
 800eeee:	9006      	str	r0, [sp, #24]
 800eef0:	9107      	str	r1, [sp, #28]
 800eef2:	9104      	str	r1, [sp, #16]
 800eef4:	4808      	ldr	r0, [pc, #32]	; (800ef18 <siprintf+0x38>)
 800eef6:	4909      	ldr	r1, [pc, #36]	; (800ef1c <siprintf+0x3c>)
 800eef8:	f853 2b04 	ldr.w	r2, [r3], #4
 800eefc:	9105      	str	r1, [sp, #20]
 800eefe:	a902      	add	r1, sp, #8
 800ef00:	6800      	ldr	r0, [r0, #0]
 800ef02:	9301      	str	r3, [sp, #4]
 800ef04:	f000 f874 	bl	800eff0 <_svfiprintf_r>
 800ef08:	9b02      	ldr	r3, [sp, #8]
 800ef0a:	2200      	movs	r2, #0
 800ef0c:	701a      	strb	r2, [r3, #0]
 800ef0e:	b01c      	add	sp, #112	; 0x70
 800ef10:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef14:	b003      	add	sp, #12
 800ef16:	4770      	bx	lr
 800ef18:	200027e4 	.word	0x200027e4
 800ef1c:	ffff0208 	.word	0xffff0208

0800ef20 <__malloc_lock>:
 800ef20:	4801      	ldr	r0, [pc, #4]	; (800ef28 <__malloc_lock+0x8>)
 800ef22:	f000 bafb 	b.w	800f51c <__retarget_lock_acquire_recursive>
 800ef26:	bf00      	nop
 800ef28:	20002e44 	.word	0x20002e44

0800ef2c <__malloc_unlock>:
 800ef2c:	4801      	ldr	r0, [pc, #4]	; (800ef34 <__malloc_unlock+0x8>)
 800ef2e:	f000 baf6 	b.w	800f51e <__retarget_lock_release_recursive>
 800ef32:	bf00      	nop
 800ef34:	20002e44 	.word	0x20002e44

0800ef38 <__ssputs_r>:
 800ef38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef3c:	688e      	ldr	r6, [r1, #8]
 800ef3e:	4682      	mov	sl, r0
 800ef40:	460c      	mov	r4, r1
 800ef42:	4690      	mov	r8, r2
 800ef44:	429e      	cmp	r6, r3
 800ef46:	461f      	mov	r7, r3
 800ef48:	d838      	bhi.n	800efbc <__ssputs_r+0x84>
 800ef4a:	898a      	ldrh	r2, [r1, #12]
 800ef4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef50:	d032      	beq.n	800efb8 <__ssputs_r+0x80>
 800ef52:	6825      	ldr	r5, [r4, #0]
 800ef54:	3301      	adds	r3, #1
 800ef56:	6909      	ldr	r1, [r1, #16]
 800ef58:	eba5 0901 	sub.w	r9, r5, r1
 800ef5c:	6965      	ldr	r5, [r4, #20]
 800ef5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef62:	444b      	add	r3, r9
 800ef64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef68:	106d      	asrs	r5, r5, #1
 800ef6a:	429d      	cmp	r5, r3
 800ef6c:	bf38      	it	cc
 800ef6e:	461d      	movcc	r5, r3
 800ef70:	0553      	lsls	r3, r2, #21
 800ef72:	d531      	bpl.n	800efd8 <__ssputs_r+0xa0>
 800ef74:	4629      	mov	r1, r5
 800ef76:	f7ff ff2f 	bl	800edd8 <_malloc_r>
 800ef7a:	4606      	mov	r6, r0
 800ef7c:	b950      	cbnz	r0, 800ef94 <__ssputs_r+0x5c>
 800ef7e:	230c      	movs	r3, #12
 800ef80:	f04f 30ff 	mov.w	r0, #4294967295
 800ef84:	f8ca 3000 	str.w	r3, [sl]
 800ef88:	89a3      	ldrh	r3, [r4, #12]
 800ef8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ef8e:	81a3      	strh	r3, [r4, #12]
 800ef90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef94:	464a      	mov	r2, r9
 800ef96:	6921      	ldr	r1, [r4, #16]
 800ef98:	f000 fad0 	bl	800f53c <memcpy>
 800ef9c:	89a3      	ldrh	r3, [r4, #12]
 800ef9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efa6:	81a3      	strh	r3, [r4, #12]
 800efa8:	6126      	str	r6, [r4, #16]
 800efaa:	444e      	add	r6, r9
 800efac:	6165      	str	r5, [r4, #20]
 800efae:	eba5 0509 	sub.w	r5, r5, r9
 800efb2:	6026      	str	r6, [r4, #0]
 800efb4:	463e      	mov	r6, r7
 800efb6:	60a5      	str	r5, [r4, #8]
 800efb8:	42be      	cmp	r6, r7
 800efba:	d900      	bls.n	800efbe <__ssputs_r+0x86>
 800efbc:	463e      	mov	r6, r7
 800efbe:	4632      	mov	r2, r6
 800efc0:	4641      	mov	r1, r8
 800efc2:	6820      	ldr	r0, [r4, #0]
 800efc4:	f000 fac7 	bl	800f556 <memmove>
 800efc8:	68a3      	ldr	r3, [r4, #8]
 800efca:	2000      	movs	r0, #0
 800efcc:	1b9b      	subs	r3, r3, r6
 800efce:	60a3      	str	r3, [r4, #8]
 800efd0:	6823      	ldr	r3, [r4, #0]
 800efd2:	4433      	add	r3, r6
 800efd4:	6023      	str	r3, [r4, #0]
 800efd6:	e7db      	b.n	800ef90 <__ssputs_r+0x58>
 800efd8:	462a      	mov	r2, r5
 800efda:	f000 fad6 	bl	800f58a <_realloc_r>
 800efde:	4606      	mov	r6, r0
 800efe0:	2800      	cmp	r0, #0
 800efe2:	d1e1      	bne.n	800efa8 <__ssputs_r+0x70>
 800efe4:	6921      	ldr	r1, [r4, #16]
 800efe6:	4650      	mov	r0, sl
 800efe8:	f7ff fe8a 	bl	800ed00 <_free_r>
 800efec:	e7c7      	b.n	800ef7e <__ssputs_r+0x46>
	...

0800eff0 <_svfiprintf_r>:
 800eff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eff4:	4698      	mov	r8, r3
 800eff6:	898b      	ldrh	r3, [r1, #12]
 800eff8:	b09d      	sub	sp, #116	; 0x74
 800effa:	4607      	mov	r7, r0
 800effc:	061b      	lsls	r3, r3, #24
 800effe:	460d      	mov	r5, r1
 800f000:	4614      	mov	r4, r2
 800f002:	d50e      	bpl.n	800f022 <_svfiprintf_r+0x32>
 800f004:	690b      	ldr	r3, [r1, #16]
 800f006:	b963      	cbnz	r3, 800f022 <_svfiprintf_r+0x32>
 800f008:	2140      	movs	r1, #64	; 0x40
 800f00a:	f7ff fee5 	bl	800edd8 <_malloc_r>
 800f00e:	6028      	str	r0, [r5, #0]
 800f010:	6128      	str	r0, [r5, #16]
 800f012:	b920      	cbnz	r0, 800f01e <_svfiprintf_r+0x2e>
 800f014:	230c      	movs	r3, #12
 800f016:	603b      	str	r3, [r7, #0]
 800f018:	f04f 30ff 	mov.w	r0, #4294967295
 800f01c:	e0d1      	b.n	800f1c2 <_svfiprintf_r+0x1d2>
 800f01e:	2340      	movs	r3, #64	; 0x40
 800f020:	616b      	str	r3, [r5, #20]
 800f022:	2300      	movs	r3, #0
 800f024:	f8cd 800c 	str.w	r8, [sp, #12]
 800f028:	f04f 0901 	mov.w	r9, #1
 800f02c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800f1dc <_svfiprintf_r+0x1ec>
 800f030:	9309      	str	r3, [sp, #36]	; 0x24
 800f032:	2320      	movs	r3, #32
 800f034:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f038:	2330      	movs	r3, #48	; 0x30
 800f03a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f03e:	4623      	mov	r3, r4
 800f040:	469a      	mov	sl, r3
 800f042:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f046:	b10a      	cbz	r2, 800f04c <_svfiprintf_r+0x5c>
 800f048:	2a25      	cmp	r2, #37	; 0x25
 800f04a:	d1f9      	bne.n	800f040 <_svfiprintf_r+0x50>
 800f04c:	ebba 0b04 	subs.w	fp, sl, r4
 800f050:	d00b      	beq.n	800f06a <_svfiprintf_r+0x7a>
 800f052:	465b      	mov	r3, fp
 800f054:	4622      	mov	r2, r4
 800f056:	4629      	mov	r1, r5
 800f058:	4638      	mov	r0, r7
 800f05a:	f7ff ff6d 	bl	800ef38 <__ssputs_r>
 800f05e:	3001      	adds	r0, #1
 800f060:	f000 80aa 	beq.w	800f1b8 <_svfiprintf_r+0x1c8>
 800f064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f066:	445a      	add	r2, fp
 800f068:	9209      	str	r2, [sp, #36]	; 0x24
 800f06a:	f89a 3000 	ldrb.w	r3, [sl]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	f000 80a2 	beq.w	800f1b8 <_svfiprintf_r+0x1c8>
 800f074:	2300      	movs	r3, #0
 800f076:	f04f 32ff 	mov.w	r2, #4294967295
 800f07a:	f10a 0a01 	add.w	sl, sl, #1
 800f07e:	9304      	str	r3, [sp, #16]
 800f080:	9307      	str	r3, [sp, #28]
 800f082:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f086:	931a      	str	r3, [sp, #104]	; 0x68
 800f088:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f08c:	4654      	mov	r4, sl
 800f08e:	2205      	movs	r2, #5
 800f090:	4852      	ldr	r0, [pc, #328]	; (800f1dc <_svfiprintf_r+0x1ec>)
 800f092:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f096:	f000 fa43 	bl	800f520 <memchr>
 800f09a:	9a04      	ldr	r2, [sp, #16]
 800f09c:	b9d8      	cbnz	r0, 800f0d6 <_svfiprintf_r+0xe6>
 800f09e:	06d0      	lsls	r0, r2, #27
 800f0a0:	bf44      	itt	mi
 800f0a2:	2320      	movmi	r3, #32
 800f0a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0a8:	0711      	lsls	r1, r2, #28
 800f0aa:	bf44      	itt	mi
 800f0ac:	232b      	movmi	r3, #43	; 0x2b
 800f0ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0b2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0b6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0b8:	d015      	beq.n	800f0e6 <_svfiprintf_r+0xf6>
 800f0ba:	9a07      	ldr	r2, [sp, #28]
 800f0bc:	4654      	mov	r4, sl
 800f0be:	2000      	movs	r0, #0
 800f0c0:	f04f 0c0a 	mov.w	ip, #10
 800f0c4:	4621      	mov	r1, r4
 800f0c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0ca:	3b30      	subs	r3, #48	; 0x30
 800f0cc:	2b09      	cmp	r3, #9
 800f0ce:	d94e      	bls.n	800f16e <_svfiprintf_r+0x17e>
 800f0d0:	b1b0      	cbz	r0, 800f100 <_svfiprintf_r+0x110>
 800f0d2:	9207      	str	r2, [sp, #28]
 800f0d4:	e014      	b.n	800f100 <_svfiprintf_r+0x110>
 800f0d6:	eba0 0308 	sub.w	r3, r0, r8
 800f0da:	46a2      	mov	sl, r4
 800f0dc:	fa09 f303 	lsl.w	r3, r9, r3
 800f0e0:	4313      	orrs	r3, r2
 800f0e2:	9304      	str	r3, [sp, #16]
 800f0e4:	e7d2      	b.n	800f08c <_svfiprintf_r+0x9c>
 800f0e6:	9b03      	ldr	r3, [sp, #12]
 800f0e8:	1d19      	adds	r1, r3, #4
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	9103      	str	r1, [sp, #12]
 800f0f0:	bfbb      	ittet	lt
 800f0f2:	425b      	neglt	r3, r3
 800f0f4:	f042 0202 	orrlt.w	r2, r2, #2
 800f0f8:	9307      	strge	r3, [sp, #28]
 800f0fa:	9307      	strlt	r3, [sp, #28]
 800f0fc:	bfb8      	it	lt
 800f0fe:	9204      	strlt	r2, [sp, #16]
 800f100:	7823      	ldrb	r3, [r4, #0]
 800f102:	2b2e      	cmp	r3, #46	; 0x2e
 800f104:	d10c      	bne.n	800f120 <_svfiprintf_r+0x130>
 800f106:	7863      	ldrb	r3, [r4, #1]
 800f108:	2b2a      	cmp	r3, #42	; 0x2a
 800f10a:	d135      	bne.n	800f178 <_svfiprintf_r+0x188>
 800f10c:	9b03      	ldr	r3, [sp, #12]
 800f10e:	3402      	adds	r4, #2
 800f110:	1d1a      	adds	r2, r3, #4
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	2b00      	cmp	r3, #0
 800f116:	9203      	str	r2, [sp, #12]
 800f118:	bfb8      	it	lt
 800f11a:	f04f 33ff 	movlt.w	r3, #4294967295
 800f11e:	9305      	str	r3, [sp, #20]
 800f120:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f1ec <_svfiprintf_r+0x1fc>
 800f124:	2203      	movs	r2, #3
 800f126:	7821      	ldrb	r1, [r4, #0]
 800f128:	4650      	mov	r0, sl
 800f12a:	f000 f9f9 	bl	800f520 <memchr>
 800f12e:	b140      	cbz	r0, 800f142 <_svfiprintf_r+0x152>
 800f130:	2340      	movs	r3, #64	; 0x40
 800f132:	eba0 000a 	sub.w	r0, r0, sl
 800f136:	3401      	adds	r4, #1
 800f138:	fa03 f000 	lsl.w	r0, r3, r0
 800f13c:	9b04      	ldr	r3, [sp, #16]
 800f13e:	4303      	orrs	r3, r0
 800f140:	9304      	str	r3, [sp, #16]
 800f142:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f146:	2206      	movs	r2, #6
 800f148:	4825      	ldr	r0, [pc, #148]	; (800f1e0 <_svfiprintf_r+0x1f0>)
 800f14a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f14e:	f000 f9e7 	bl	800f520 <memchr>
 800f152:	2800      	cmp	r0, #0
 800f154:	d038      	beq.n	800f1c8 <_svfiprintf_r+0x1d8>
 800f156:	4b23      	ldr	r3, [pc, #140]	; (800f1e4 <_svfiprintf_r+0x1f4>)
 800f158:	bb1b      	cbnz	r3, 800f1a2 <_svfiprintf_r+0x1b2>
 800f15a:	9b03      	ldr	r3, [sp, #12]
 800f15c:	3307      	adds	r3, #7
 800f15e:	f023 0307 	bic.w	r3, r3, #7
 800f162:	3308      	adds	r3, #8
 800f164:	9303      	str	r3, [sp, #12]
 800f166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f168:	4433      	add	r3, r6
 800f16a:	9309      	str	r3, [sp, #36]	; 0x24
 800f16c:	e767      	b.n	800f03e <_svfiprintf_r+0x4e>
 800f16e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f172:	460c      	mov	r4, r1
 800f174:	2001      	movs	r0, #1
 800f176:	e7a5      	b.n	800f0c4 <_svfiprintf_r+0xd4>
 800f178:	2300      	movs	r3, #0
 800f17a:	3401      	adds	r4, #1
 800f17c:	f04f 0c0a 	mov.w	ip, #10
 800f180:	4619      	mov	r1, r3
 800f182:	9305      	str	r3, [sp, #20]
 800f184:	4620      	mov	r0, r4
 800f186:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f18a:	3a30      	subs	r2, #48	; 0x30
 800f18c:	2a09      	cmp	r2, #9
 800f18e:	d903      	bls.n	800f198 <_svfiprintf_r+0x1a8>
 800f190:	2b00      	cmp	r3, #0
 800f192:	d0c5      	beq.n	800f120 <_svfiprintf_r+0x130>
 800f194:	9105      	str	r1, [sp, #20]
 800f196:	e7c3      	b.n	800f120 <_svfiprintf_r+0x130>
 800f198:	fb0c 2101 	mla	r1, ip, r1, r2
 800f19c:	4604      	mov	r4, r0
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e7f0      	b.n	800f184 <_svfiprintf_r+0x194>
 800f1a2:	ab03      	add	r3, sp, #12
 800f1a4:	462a      	mov	r2, r5
 800f1a6:	a904      	add	r1, sp, #16
 800f1a8:	4638      	mov	r0, r7
 800f1aa:	9300      	str	r3, [sp, #0]
 800f1ac:	4b0e      	ldr	r3, [pc, #56]	; (800f1e8 <_svfiprintf_r+0x1f8>)
 800f1ae:	e000      	b.n	800f1b2 <_svfiprintf_r+0x1c2>
 800f1b0:	bf00      	nop
 800f1b2:	1c42      	adds	r2, r0, #1
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	d1d6      	bne.n	800f166 <_svfiprintf_r+0x176>
 800f1b8:	89ab      	ldrh	r3, [r5, #12]
 800f1ba:	065b      	lsls	r3, r3, #25
 800f1bc:	f53f af2c 	bmi.w	800f018 <_svfiprintf_r+0x28>
 800f1c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1c2:	b01d      	add	sp, #116	; 0x74
 800f1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1c8:	ab03      	add	r3, sp, #12
 800f1ca:	462a      	mov	r2, r5
 800f1cc:	a904      	add	r1, sp, #16
 800f1ce:	4638      	mov	r0, r7
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	4b05      	ldr	r3, [pc, #20]	; (800f1e8 <_svfiprintf_r+0x1f8>)
 800f1d4:	f000 f87c 	bl	800f2d0 <_printf_i>
 800f1d8:	e7eb      	b.n	800f1b2 <_svfiprintf_r+0x1c2>
 800f1da:	bf00      	nop
 800f1dc:	0800fc58 	.word	0x0800fc58
 800f1e0:	0800fc62 	.word	0x0800fc62
 800f1e4:	00000000 	.word	0x00000000
 800f1e8:	0800ef39 	.word	0x0800ef39
 800f1ec:	0800fc5e 	.word	0x0800fc5e

0800f1f0 <_printf_common>:
 800f1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f4:	4616      	mov	r6, r2
 800f1f6:	4699      	mov	r9, r3
 800f1f8:	688a      	ldr	r2, [r1, #8]
 800f1fa:	4607      	mov	r7, r0
 800f1fc:	690b      	ldr	r3, [r1, #16]
 800f1fe:	460c      	mov	r4, r1
 800f200:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f204:	4293      	cmp	r3, r2
 800f206:	bfb8      	it	lt
 800f208:	4613      	movlt	r3, r2
 800f20a:	6033      	str	r3, [r6, #0]
 800f20c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f210:	b10a      	cbz	r2, 800f216 <_printf_common+0x26>
 800f212:	3301      	adds	r3, #1
 800f214:	6033      	str	r3, [r6, #0]
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	0699      	lsls	r1, r3, #26
 800f21a:	bf42      	ittt	mi
 800f21c:	6833      	ldrmi	r3, [r6, #0]
 800f21e:	3302      	addmi	r3, #2
 800f220:	6033      	strmi	r3, [r6, #0]
 800f222:	6825      	ldr	r5, [r4, #0]
 800f224:	f015 0506 	ands.w	r5, r5, #6
 800f228:	d106      	bne.n	800f238 <_printf_common+0x48>
 800f22a:	f104 0a19 	add.w	sl, r4, #25
 800f22e:	68e3      	ldr	r3, [r4, #12]
 800f230:	6832      	ldr	r2, [r6, #0]
 800f232:	1a9b      	subs	r3, r3, r2
 800f234:	42ab      	cmp	r3, r5
 800f236:	dc29      	bgt.n	800f28c <_printf_common+0x9c>
 800f238:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f23c:	1e13      	subs	r3, r2, #0
 800f23e:	6822      	ldr	r2, [r4, #0]
 800f240:	bf18      	it	ne
 800f242:	2301      	movne	r3, #1
 800f244:	0692      	lsls	r2, r2, #26
 800f246:	d42e      	bmi.n	800f2a6 <_printf_common+0xb6>
 800f248:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f24c:	4649      	mov	r1, r9
 800f24e:	4638      	mov	r0, r7
 800f250:	47c0      	blx	r8
 800f252:	3001      	adds	r0, #1
 800f254:	d021      	beq.n	800f29a <_printf_common+0xaa>
 800f256:	6823      	ldr	r3, [r4, #0]
 800f258:	341a      	adds	r4, #26
 800f25a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800f25e:	f003 0306 	and.w	r3, r3, #6
 800f262:	6832      	ldr	r2, [r6, #0]
 800f264:	2600      	movs	r6, #0
 800f266:	2b04      	cmp	r3, #4
 800f268:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800f26c:	bf08      	it	eq
 800f26e:	1aad      	subeq	r5, r5, r2
 800f270:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800f274:	bf14      	ite	ne
 800f276:	2500      	movne	r5, #0
 800f278:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f27c:	4293      	cmp	r3, r2
 800f27e:	bfc4      	itt	gt
 800f280:	1a9b      	subgt	r3, r3, r2
 800f282:	18ed      	addgt	r5, r5, r3
 800f284:	42b5      	cmp	r5, r6
 800f286:	d11a      	bne.n	800f2be <_printf_common+0xce>
 800f288:	2000      	movs	r0, #0
 800f28a:	e008      	b.n	800f29e <_printf_common+0xae>
 800f28c:	2301      	movs	r3, #1
 800f28e:	4652      	mov	r2, sl
 800f290:	4649      	mov	r1, r9
 800f292:	4638      	mov	r0, r7
 800f294:	47c0      	blx	r8
 800f296:	3001      	adds	r0, #1
 800f298:	d103      	bne.n	800f2a2 <_printf_common+0xb2>
 800f29a:	f04f 30ff 	mov.w	r0, #4294967295
 800f29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a2:	3501      	adds	r5, #1
 800f2a4:	e7c3      	b.n	800f22e <_printf_common+0x3e>
 800f2a6:	18e1      	adds	r1, r4, r3
 800f2a8:	1c5a      	adds	r2, r3, #1
 800f2aa:	2030      	movs	r0, #48	; 0x30
 800f2ac:	3302      	adds	r3, #2
 800f2ae:	4422      	add	r2, r4
 800f2b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2bc:	e7c4      	b.n	800f248 <_printf_common+0x58>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	4622      	mov	r2, r4
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	4638      	mov	r0, r7
 800f2c6:	47c0      	blx	r8
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d0e6      	beq.n	800f29a <_printf_common+0xaa>
 800f2cc:	3601      	adds	r6, #1
 800f2ce:	e7d9      	b.n	800f284 <_printf_common+0x94>

0800f2d0 <_printf_i>:
 800f2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	7e0f      	ldrb	r7, [r1, #24]
 800f2d6:	4691      	mov	r9, r2
 800f2d8:	4680      	mov	r8, r0
 800f2da:	460c      	mov	r4, r1
 800f2dc:	2f78      	cmp	r7, #120	; 0x78
 800f2de:	469a      	mov	sl, r3
 800f2e0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2e6:	d807      	bhi.n	800f2f8 <_printf_i+0x28>
 800f2e8:	2f62      	cmp	r7, #98	; 0x62
 800f2ea:	d80a      	bhi.n	800f302 <_printf_i+0x32>
 800f2ec:	2f00      	cmp	r7, #0
 800f2ee:	f000 80d8 	beq.w	800f4a2 <_printf_i+0x1d2>
 800f2f2:	2f58      	cmp	r7, #88	; 0x58
 800f2f4:	f000 80a3 	beq.w	800f43e <_printf_i+0x16e>
 800f2f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f300:	e03a      	b.n	800f378 <_printf_i+0xa8>
 800f302:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f306:	2b15      	cmp	r3, #21
 800f308:	d8f6      	bhi.n	800f2f8 <_printf_i+0x28>
 800f30a:	a101      	add	r1, pc, #4	; (adr r1, 800f310 <_printf_i+0x40>)
 800f30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f310:	0800f369 	.word	0x0800f369
 800f314:	0800f37d 	.word	0x0800f37d
 800f318:	0800f2f9 	.word	0x0800f2f9
 800f31c:	0800f2f9 	.word	0x0800f2f9
 800f320:	0800f2f9 	.word	0x0800f2f9
 800f324:	0800f2f9 	.word	0x0800f2f9
 800f328:	0800f37d 	.word	0x0800f37d
 800f32c:	0800f2f9 	.word	0x0800f2f9
 800f330:	0800f2f9 	.word	0x0800f2f9
 800f334:	0800f2f9 	.word	0x0800f2f9
 800f338:	0800f2f9 	.word	0x0800f2f9
 800f33c:	0800f489 	.word	0x0800f489
 800f340:	0800f3ad 	.word	0x0800f3ad
 800f344:	0800f46b 	.word	0x0800f46b
 800f348:	0800f2f9 	.word	0x0800f2f9
 800f34c:	0800f2f9 	.word	0x0800f2f9
 800f350:	0800f4ab 	.word	0x0800f4ab
 800f354:	0800f2f9 	.word	0x0800f2f9
 800f358:	0800f3ad 	.word	0x0800f3ad
 800f35c:	0800f2f9 	.word	0x0800f2f9
 800f360:	0800f2f9 	.word	0x0800f2f9
 800f364:	0800f473 	.word	0x0800f473
 800f368:	682b      	ldr	r3, [r5, #0]
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	602a      	str	r2, [r5, #0]
 800f370:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f374:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f378:	2301      	movs	r3, #1
 800f37a:	e0a3      	b.n	800f4c4 <_printf_i+0x1f4>
 800f37c:	6820      	ldr	r0, [r4, #0]
 800f37e:	6829      	ldr	r1, [r5, #0]
 800f380:	0606      	lsls	r6, r0, #24
 800f382:	f101 0304 	add.w	r3, r1, #4
 800f386:	d50a      	bpl.n	800f39e <_printf_i+0xce>
 800f388:	680e      	ldr	r6, [r1, #0]
 800f38a:	602b      	str	r3, [r5, #0]
 800f38c:	2e00      	cmp	r6, #0
 800f38e:	da03      	bge.n	800f398 <_printf_i+0xc8>
 800f390:	232d      	movs	r3, #45	; 0x2d
 800f392:	4276      	negs	r6, r6
 800f394:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f398:	485e      	ldr	r0, [pc, #376]	; (800f514 <_printf_i+0x244>)
 800f39a:	230a      	movs	r3, #10
 800f39c:	e019      	b.n	800f3d2 <_printf_i+0x102>
 800f39e:	680e      	ldr	r6, [r1, #0]
 800f3a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3a4:	602b      	str	r3, [r5, #0]
 800f3a6:	bf18      	it	ne
 800f3a8:	b236      	sxthne	r6, r6
 800f3aa:	e7ef      	b.n	800f38c <_printf_i+0xbc>
 800f3ac:	682b      	ldr	r3, [r5, #0]
 800f3ae:	6820      	ldr	r0, [r4, #0]
 800f3b0:	1d19      	adds	r1, r3, #4
 800f3b2:	6029      	str	r1, [r5, #0]
 800f3b4:	0601      	lsls	r1, r0, #24
 800f3b6:	d501      	bpl.n	800f3bc <_printf_i+0xec>
 800f3b8:	681e      	ldr	r6, [r3, #0]
 800f3ba:	e002      	b.n	800f3c2 <_printf_i+0xf2>
 800f3bc:	0646      	lsls	r6, r0, #25
 800f3be:	d5fb      	bpl.n	800f3b8 <_printf_i+0xe8>
 800f3c0:	881e      	ldrh	r6, [r3, #0]
 800f3c2:	2f6f      	cmp	r7, #111	; 0x6f
 800f3c4:	4853      	ldr	r0, [pc, #332]	; (800f514 <_printf_i+0x244>)
 800f3c6:	bf0c      	ite	eq
 800f3c8:	2308      	moveq	r3, #8
 800f3ca:	230a      	movne	r3, #10
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3d2:	6865      	ldr	r5, [r4, #4]
 800f3d4:	2d00      	cmp	r5, #0
 800f3d6:	60a5      	str	r5, [r4, #8]
 800f3d8:	bfa2      	ittt	ge
 800f3da:	6821      	ldrge	r1, [r4, #0]
 800f3dc:	f021 0104 	bicge.w	r1, r1, #4
 800f3e0:	6021      	strge	r1, [r4, #0]
 800f3e2:	b90e      	cbnz	r6, 800f3e8 <_printf_i+0x118>
 800f3e4:	2d00      	cmp	r5, #0
 800f3e6:	d04d      	beq.n	800f484 <_printf_i+0x1b4>
 800f3e8:	4615      	mov	r5, r2
 800f3ea:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3ee:	fb03 6711 	mls	r7, r3, r1, r6
 800f3f2:	5dc7      	ldrb	r7, [r0, r7]
 800f3f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3f8:	4637      	mov	r7, r6
 800f3fa:	460e      	mov	r6, r1
 800f3fc:	42bb      	cmp	r3, r7
 800f3fe:	d9f4      	bls.n	800f3ea <_printf_i+0x11a>
 800f400:	2b08      	cmp	r3, #8
 800f402:	d10b      	bne.n	800f41c <_printf_i+0x14c>
 800f404:	6823      	ldr	r3, [r4, #0]
 800f406:	07de      	lsls	r6, r3, #31
 800f408:	d508      	bpl.n	800f41c <_printf_i+0x14c>
 800f40a:	6923      	ldr	r3, [r4, #16]
 800f40c:	6861      	ldr	r1, [r4, #4]
 800f40e:	4299      	cmp	r1, r3
 800f410:	bfde      	ittt	le
 800f412:	2330      	movle	r3, #48	; 0x30
 800f414:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f418:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f41c:	1b52      	subs	r2, r2, r5
 800f41e:	6122      	str	r2, [r4, #16]
 800f420:	464b      	mov	r3, r9
 800f422:	aa03      	add	r2, sp, #12
 800f424:	4621      	mov	r1, r4
 800f426:	4640      	mov	r0, r8
 800f428:	f8cd a000 	str.w	sl, [sp]
 800f42c:	f7ff fee0 	bl	800f1f0 <_printf_common>
 800f430:	3001      	adds	r0, #1
 800f432:	d14c      	bne.n	800f4ce <_printf_i+0x1fe>
 800f434:	f04f 30ff 	mov.w	r0, #4294967295
 800f438:	b004      	add	sp, #16
 800f43a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43e:	4835      	ldr	r0, [pc, #212]	; (800f514 <_printf_i+0x244>)
 800f440:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f444:	6829      	ldr	r1, [r5, #0]
 800f446:	6823      	ldr	r3, [r4, #0]
 800f448:	f851 6b04 	ldr.w	r6, [r1], #4
 800f44c:	6029      	str	r1, [r5, #0]
 800f44e:	061d      	lsls	r5, r3, #24
 800f450:	d514      	bpl.n	800f47c <_printf_i+0x1ac>
 800f452:	07df      	lsls	r7, r3, #31
 800f454:	bf44      	itt	mi
 800f456:	f043 0320 	orrmi.w	r3, r3, #32
 800f45a:	6023      	strmi	r3, [r4, #0]
 800f45c:	b91e      	cbnz	r6, 800f466 <_printf_i+0x196>
 800f45e:	6823      	ldr	r3, [r4, #0]
 800f460:	f023 0320 	bic.w	r3, r3, #32
 800f464:	6023      	str	r3, [r4, #0]
 800f466:	2310      	movs	r3, #16
 800f468:	e7b0      	b.n	800f3cc <_printf_i+0xfc>
 800f46a:	6823      	ldr	r3, [r4, #0]
 800f46c:	f043 0320 	orr.w	r3, r3, #32
 800f470:	6023      	str	r3, [r4, #0]
 800f472:	2378      	movs	r3, #120	; 0x78
 800f474:	4828      	ldr	r0, [pc, #160]	; (800f518 <_printf_i+0x248>)
 800f476:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f47a:	e7e3      	b.n	800f444 <_printf_i+0x174>
 800f47c:	0659      	lsls	r1, r3, #25
 800f47e:	bf48      	it	mi
 800f480:	b2b6      	uxthmi	r6, r6
 800f482:	e7e6      	b.n	800f452 <_printf_i+0x182>
 800f484:	4615      	mov	r5, r2
 800f486:	e7bb      	b.n	800f400 <_printf_i+0x130>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	6826      	ldr	r6, [r4, #0]
 800f48c:	1d18      	adds	r0, r3, #4
 800f48e:	6961      	ldr	r1, [r4, #20]
 800f490:	6028      	str	r0, [r5, #0]
 800f492:	0635      	lsls	r5, r6, #24
 800f494:	681b      	ldr	r3, [r3, #0]
 800f496:	d501      	bpl.n	800f49c <_printf_i+0x1cc>
 800f498:	6019      	str	r1, [r3, #0]
 800f49a:	e002      	b.n	800f4a2 <_printf_i+0x1d2>
 800f49c:	0670      	lsls	r0, r6, #25
 800f49e:	d5fb      	bpl.n	800f498 <_printf_i+0x1c8>
 800f4a0:	8019      	strh	r1, [r3, #0]
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	4615      	mov	r5, r2
 800f4a6:	6123      	str	r3, [r4, #16]
 800f4a8:	e7ba      	b.n	800f420 <_printf_i+0x150>
 800f4aa:	682b      	ldr	r3, [r5, #0]
 800f4ac:	2100      	movs	r1, #0
 800f4ae:	1d1a      	adds	r2, r3, #4
 800f4b0:	602a      	str	r2, [r5, #0]
 800f4b2:	681d      	ldr	r5, [r3, #0]
 800f4b4:	6862      	ldr	r2, [r4, #4]
 800f4b6:	4628      	mov	r0, r5
 800f4b8:	f000 f832 	bl	800f520 <memchr>
 800f4bc:	b108      	cbz	r0, 800f4c2 <_printf_i+0x1f2>
 800f4be:	1b40      	subs	r0, r0, r5
 800f4c0:	6060      	str	r0, [r4, #4]
 800f4c2:	6863      	ldr	r3, [r4, #4]
 800f4c4:	6123      	str	r3, [r4, #16]
 800f4c6:	2300      	movs	r3, #0
 800f4c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4cc:	e7a8      	b.n	800f420 <_printf_i+0x150>
 800f4ce:	6923      	ldr	r3, [r4, #16]
 800f4d0:	462a      	mov	r2, r5
 800f4d2:	4649      	mov	r1, r9
 800f4d4:	4640      	mov	r0, r8
 800f4d6:	47d0      	blx	sl
 800f4d8:	3001      	adds	r0, #1
 800f4da:	d0ab      	beq.n	800f434 <_printf_i+0x164>
 800f4dc:	6823      	ldr	r3, [r4, #0]
 800f4de:	079b      	lsls	r3, r3, #30
 800f4e0:	d413      	bmi.n	800f50a <_printf_i+0x23a>
 800f4e2:	68e0      	ldr	r0, [r4, #12]
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	4298      	cmp	r0, r3
 800f4e8:	bfb8      	it	lt
 800f4ea:	4618      	movlt	r0, r3
 800f4ec:	e7a4      	b.n	800f438 <_printf_i+0x168>
 800f4ee:	2301      	movs	r3, #1
 800f4f0:	4632      	mov	r2, r6
 800f4f2:	4649      	mov	r1, r9
 800f4f4:	4640      	mov	r0, r8
 800f4f6:	47d0      	blx	sl
 800f4f8:	3001      	adds	r0, #1
 800f4fa:	d09b      	beq.n	800f434 <_printf_i+0x164>
 800f4fc:	3501      	adds	r5, #1
 800f4fe:	68e3      	ldr	r3, [r4, #12]
 800f500:	9903      	ldr	r1, [sp, #12]
 800f502:	1a5b      	subs	r3, r3, r1
 800f504:	42ab      	cmp	r3, r5
 800f506:	dcf2      	bgt.n	800f4ee <_printf_i+0x21e>
 800f508:	e7eb      	b.n	800f4e2 <_printf_i+0x212>
 800f50a:	2500      	movs	r5, #0
 800f50c:	f104 0619 	add.w	r6, r4, #25
 800f510:	e7f5      	b.n	800f4fe <_printf_i+0x22e>
 800f512:	bf00      	nop
 800f514:	0800fc69 	.word	0x0800fc69
 800f518:	0800fc7a 	.word	0x0800fc7a

0800f51c <__retarget_lock_acquire_recursive>:
 800f51c:	4770      	bx	lr

0800f51e <__retarget_lock_release_recursive>:
 800f51e:	4770      	bx	lr

0800f520 <memchr>:
 800f520:	b2c9      	uxtb	r1, r1
 800f522:	4402      	add	r2, r0
 800f524:	b510      	push	{r4, lr}
 800f526:	4290      	cmp	r0, r2
 800f528:	4603      	mov	r3, r0
 800f52a:	d101      	bne.n	800f530 <memchr+0x10>
 800f52c:	2300      	movs	r3, #0
 800f52e:	e003      	b.n	800f538 <memchr+0x18>
 800f530:	781c      	ldrb	r4, [r3, #0]
 800f532:	3001      	adds	r0, #1
 800f534:	428c      	cmp	r4, r1
 800f536:	d1f6      	bne.n	800f526 <memchr+0x6>
 800f538:	4618      	mov	r0, r3
 800f53a:	bd10      	pop	{r4, pc}

0800f53c <memcpy>:
 800f53c:	440a      	add	r2, r1
 800f53e:	1e43      	subs	r3, r0, #1
 800f540:	4291      	cmp	r1, r2
 800f542:	d100      	bne.n	800f546 <memcpy+0xa>
 800f544:	4770      	bx	lr
 800f546:	b510      	push	{r4, lr}
 800f548:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f54c:	4291      	cmp	r1, r2
 800f54e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f552:	d1f9      	bne.n	800f548 <memcpy+0xc>
 800f554:	bd10      	pop	{r4, pc}

0800f556 <memmove>:
 800f556:	4288      	cmp	r0, r1
 800f558:	b510      	push	{r4, lr}
 800f55a:	eb01 0402 	add.w	r4, r1, r2
 800f55e:	d902      	bls.n	800f566 <memmove+0x10>
 800f560:	4284      	cmp	r4, r0
 800f562:	4623      	mov	r3, r4
 800f564:	d807      	bhi.n	800f576 <memmove+0x20>
 800f566:	1e43      	subs	r3, r0, #1
 800f568:	42a1      	cmp	r1, r4
 800f56a:	d008      	beq.n	800f57e <memmove+0x28>
 800f56c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f570:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f574:	e7f8      	b.n	800f568 <memmove+0x12>
 800f576:	4402      	add	r2, r0
 800f578:	4601      	mov	r1, r0
 800f57a:	428a      	cmp	r2, r1
 800f57c:	d100      	bne.n	800f580 <memmove+0x2a>
 800f57e:	bd10      	pop	{r4, pc}
 800f580:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f584:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f588:	e7f7      	b.n	800f57a <memmove+0x24>

0800f58a <_realloc_r>:
 800f58a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f58e:	4680      	mov	r8, r0
 800f590:	4614      	mov	r4, r2
 800f592:	460e      	mov	r6, r1
 800f594:	b921      	cbnz	r1, 800f5a0 <_realloc_r+0x16>
 800f596:	4611      	mov	r1, r2
 800f598:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f59c:	f7ff bc1c 	b.w	800edd8 <_malloc_r>
 800f5a0:	b92a      	cbnz	r2, 800f5ae <_realloc_r+0x24>
 800f5a2:	4625      	mov	r5, r4
 800f5a4:	f7ff fbac 	bl	800ed00 <_free_r>
 800f5a8:	4628      	mov	r0, r5
 800f5aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5ae:	f000 f81b 	bl	800f5e8 <_malloc_usable_size_r>
 800f5b2:	4284      	cmp	r4, r0
 800f5b4:	4607      	mov	r7, r0
 800f5b6:	d802      	bhi.n	800f5be <_realloc_r+0x34>
 800f5b8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5bc:	d812      	bhi.n	800f5e4 <_realloc_r+0x5a>
 800f5be:	4621      	mov	r1, r4
 800f5c0:	4640      	mov	r0, r8
 800f5c2:	f7ff fc09 	bl	800edd8 <_malloc_r>
 800f5c6:	4605      	mov	r5, r0
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d0ed      	beq.n	800f5a8 <_realloc_r+0x1e>
 800f5cc:	42bc      	cmp	r4, r7
 800f5ce:	4622      	mov	r2, r4
 800f5d0:	4631      	mov	r1, r6
 800f5d2:	bf28      	it	cs
 800f5d4:	463a      	movcs	r2, r7
 800f5d6:	f7ff ffb1 	bl	800f53c <memcpy>
 800f5da:	4631      	mov	r1, r6
 800f5dc:	4640      	mov	r0, r8
 800f5de:	f7ff fb8f 	bl	800ed00 <_free_r>
 800f5e2:	e7e1      	b.n	800f5a8 <_realloc_r+0x1e>
 800f5e4:	4635      	mov	r5, r6
 800f5e6:	e7df      	b.n	800f5a8 <_realloc_r+0x1e>

0800f5e8 <_malloc_usable_size_r>:
 800f5e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5ec:	1f18      	subs	r0, r3, #4
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	bfbc      	itt	lt
 800f5f2:	580b      	ldrlt	r3, [r1, r0]
 800f5f4:	18c0      	addlt	r0, r0, r3
 800f5f6:	4770      	bx	lr

0800f5f8 <_init>:
 800f5f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5fa:	bf00      	nop
 800f5fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5fe:	bc08      	pop	{r3}
 800f600:	469e      	mov	lr, r3
 800f602:	4770      	bx	lr

0800f604 <_fini>:
 800f604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f606:	bf00      	nop
 800f608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f60a:	bc08      	pop	{r3}
 800f60c:	469e      	mov	lr, r3
 800f60e:	4770      	bx	lr
