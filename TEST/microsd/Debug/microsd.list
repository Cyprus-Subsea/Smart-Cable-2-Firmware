
microsd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000161f4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000974  080163f4  080163f4  000263f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016d68  08016d68  0004b70c  2**0
                  CONTENTS
  4 .ARM          00000008  08016d68  08016d68  00026d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016d70  08016d70  0004b70c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016d70  08016d70  00026d70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016d74  08016d74  00026d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0001b70c  20000000  08016d78  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000a758  2001b710  08032484  0004b710  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  20025e68  08032484  00055e68  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0004b70c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0004b742  2**0
                  CONTENTS, READONLY
 13 .debug_info   00031d0c  00000000  00000000  0004b785  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005f69  00000000  00000000  0007d491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029f8  00000000  00000000  00083400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000020bb  00000000  00000000  00085df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00008cc1  00000000  00000000  00087eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000349bc  00000000  00000000  00090b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0012a4e0  00000000  00000000  000c5530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000be7c  00000000  00000000  001efa10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  001fb88c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2001b710 	.word	0x2001b710
 800021c:	00000000 	.word	0x00000000
 8000220:	080163dc 	.word	0x080163dc

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2001b714 	.word	0x2001b714
 800023c:	080163dc 	.word	0x080163dc

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <__aeabi_uldivmod>:
 8000250:	b953      	cbnz	r3, 8000268 <__aeabi_uldivmod+0x18>
 8000252:	b94a      	cbnz	r2, 8000268 <__aeabi_uldivmod+0x18>
 8000254:	2900      	cmp	r1, #0
 8000256:	bf08      	it	eq
 8000258:	2800      	cmpeq	r0, #0
 800025a:	bf1c      	itt	ne
 800025c:	f04f 31ff 	movne.w	r1, #4294967295
 8000260:	f04f 30ff 	movne.w	r0, #4294967295
 8000264:	f000 b982 	b.w	800056c <__aeabi_idiv0>
 8000268:	f1ad 0c08 	sub.w	ip, sp, #8
 800026c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000270:	f000 f806 	bl	8000280 <__udivmoddi4>
 8000274:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000278:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800027c:	b004      	add	sp, #16
 800027e:	4770      	bx	lr

08000280 <__udivmoddi4>:
 8000280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000284:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8000286:	460d      	mov	r5, r1
 8000288:	4604      	mov	r4, r0
 800028a:	460f      	mov	r7, r1
 800028c:	2b00      	cmp	r3, #0
 800028e:	d146      	bne.n	800031e <__udivmoddi4+0x9e>
 8000290:	428a      	cmp	r2, r1
 8000292:	4694      	mov	ip, r2
 8000294:	d95e      	bls.n	8000354 <__udivmoddi4+0xd4>
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	b143      	cbz	r3, 80002ae <__udivmoddi4+0x2e>
 800029c:	fa02 fc03 	lsl.w	ip, r2, r3
 80002a0:	f1c3 0220 	rsb	r2, r3, #32
 80002a4:	409f      	lsls	r7, r3
 80002a6:	409c      	lsls	r4, r3
 80002a8:	fa20 f202 	lsr.w	r2, r0, r2
 80002ac:	4317      	orrs	r7, r2
 80002ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002b2:	fa1f f58c 	uxth.w	r5, ip
 80002b6:	0c22      	lsrs	r2, r4, #16
 80002b8:	fbb7 f1fe 	udiv	r1, r7, lr
 80002bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002c0:	fb01 f005 	mul.w	r0, r1, r5
 80002c4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002c8:	4290      	cmp	r0, r2
 80002ca:	d908      	bls.n	80002de <__udivmoddi4+0x5e>
 80002cc:	eb1c 0202 	adds.w	r2, ip, r2
 80002d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002d4:	d202      	bcs.n	80002dc <__udivmoddi4+0x5c>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f200 8134 	bhi.w	8000544 <__udivmoddi4+0x2c4>
 80002dc:	4639      	mov	r1, r7
 80002de:	1a12      	subs	r2, r2, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002e6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ea:	fb00 f505 	mul.w	r5, r0, r5
 80002ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002f2:	42a5      	cmp	r5, r4
 80002f4:	d908      	bls.n	8000308 <__udivmoddi4+0x88>
 80002f6:	eb1c 0404 	adds.w	r4, ip, r4
 80002fa:	f100 32ff 	add.w	r2, r0, #4294967295
 80002fe:	d202      	bcs.n	8000306 <__udivmoddi4+0x86>
 8000300:	42a5      	cmp	r5, r4
 8000302:	f200 8119 	bhi.w	8000538 <__udivmoddi4+0x2b8>
 8000306:	4610      	mov	r0, r2
 8000308:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800030c:	1b64      	subs	r4, r4, r5
 800030e:	2100      	movs	r1, #0
 8000310:	b11e      	cbz	r6, 800031a <__udivmoddi4+0x9a>
 8000312:	40dc      	lsrs	r4, r3
 8000314:	2300      	movs	r3, #0
 8000316:	e9c6 4300 	strd	r4, r3, [r6]
 800031a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0xb4>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80fc 	beq.w	8000520 <__udivmoddi4+0x2a0>
 8000328:	2100      	movs	r1, #0
 800032a:	e9c6 0500 	strd	r0, r5, [r6]
 800032e:	4608      	mov	r0, r1
 8000330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000334:	fab3 f183 	clz	r1, r3
 8000338:	2900      	cmp	r1, #0
 800033a:	d14c      	bne.n	80003d6 <__udivmoddi4+0x156>
 800033c:	42ab      	cmp	r3, r5
 800033e:	f0c0 80f2 	bcc.w	8000526 <__udivmoddi4+0x2a6>
 8000342:	4282      	cmp	r2, r0
 8000344:	f240 80ef 	bls.w	8000526 <__udivmoddi4+0x2a6>
 8000348:	4608      	mov	r0, r1
 800034a:	2e00      	cmp	r6, #0
 800034c:	d0e5      	beq.n	800031a <__udivmoddi4+0x9a>
 800034e:	e9c6 4700 	strd	r4, r7, [r6]
 8000352:	e7e2      	b.n	800031a <__udivmoddi4+0x9a>
 8000354:	b902      	cbnz	r2, 8000358 <__udivmoddi4+0xd8>
 8000356:	deff      	udf	#255	; 0xff
 8000358:	fab2 f382 	clz	r3, r2
 800035c:	2b00      	cmp	r3, #0
 800035e:	f040 809f 	bne.w	80004a0 <__udivmoddi4+0x220>
 8000362:	1a8a      	subs	r2, r1, r2
 8000364:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000368:	fa1f f78c 	uxth.w	r7, ip
 800036c:	2101      	movs	r1, #1
 800036e:	fbb2 f5fe 	udiv	r5, r2, lr
 8000372:	fb0e 2015 	mls	r0, lr, r5, r2
 8000376:	0c22      	lsrs	r2, r4, #16
 8000378:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800037c:	fb07 f005 	mul.w	r0, r7, r5
 8000380:	4290      	cmp	r0, r2
 8000382:	d90f      	bls.n	80003a4 <__udivmoddi4+0x124>
 8000384:	eb1c 0202 	adds.w	r2, ip, r2
 8000388:	f105 38ff 	add.w	r8, r5, #4294967295
 800038c:	bf2c      	ite	cs
 800038e:	f04f 0901 	movcs.w	r9, #1
 8000392:	f04f 0900 	movcc.w	r9, #0
 8000396:	4290      	cmp	r0, r2
 8000398:	d903      	bls.n	80003a2 <__udivmoddi4+0x122>
 800039a:	f1b9 0f00 	cmp.w	r9, #0
 800039e:	f000 80ce 	beq.w	800053e <__udivmoddi4+0x2be>
 80003a2:	4645      	mov	r5, r8
 80003a4:	1a12      	subs	r2, r2, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb2 f0fe 	udiv	r0, r2, lr
 80003ac:	fb0e 2210 	mls	r2, lr, r0, r2
 80003b0:	fb00 f707 	mul.w	r7, r0, r7
 80003b4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x14e>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x14c>
 80003c6:	42a7      	cmp	r7, r4
 80003c8:	f200 80b3 	bhi.w	8000532 <__udivmoddi4+0x2b2>
 80003cc:	4610      	mov	r0, r2
 80003ce:	1be4      	subs	r4, r4, r7
 80003d0:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003d4:	e79c      	b.n	8000310 <__udivmoddi4+0x90>
 80003d6:	f1c1 0420 	rsb	r4, r1, #32
 80003da:	408b      	lsls	r3, r1
 80003dc:	fa05 fc01 	lsl.w	ip, r5, r1
 80003e0:	fa22 f704 	lsr.w	r7, r2, r4
 80003e4:	40e5      	lsrs	r5, r4
 80003e6:	408a      	lsls	r2, r1
 80003e8:	431f      	orrs	r7, r3
 80003ea:	fa20 f304 	lsr.w	r3, r0, r4
 80003ee:	4088      	lsls	r0, r1
 80003f0:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f4:	ea43 030c 	orr.w	r3, r3, ip
 80003f8:	fa1f fc87 	uxth.w	ip, r7
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fbb5 fef8 	udiv	lr, r5, r8
 8000404:	fb08 551e 	mls	r5, r8, lr, r5
 8000408:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800040c:	fb0e f90c 	mul.w	r9, lr, ip
 8000410:	45a9      	cmp	r9, r5
 8000412:	d90e      	bls.n	8000432 <__udivmoddi4+0x1b2>
 8000414:	197d      	adds	r5, r7, r5
 8000416:	f10e 3aff 	add.w	sl, lr, #4294967295
 800041a:	bf2c      	ite	cs
 800041c:	f04f 0b01 	movcs.w	fp, #1
 8000420:	f04f 0b00 	movcc.w	fp, #0
 8000424:	45a9      	cmp	r9, r5
 8000426:	d903      	bls.n	8000430 <__udivmoddi4+0x1b0>
 8000428:	f1bb 0f00 	cmp.w	fp, #0
 800042c:	f000 808d 	beq.w	800054a <__udivmoddi4+0x2ca>
 8000430:	46d6      	mov	lr, sl
 8000432:	eba5 0509 	sub.w	r5, r5, r9
 8000436:	fa1f f983 	uxth.w	r9, r3
 800043a:	fbb5 f3f8 	udiv	r3, r5, r8
 800043e:	fb08 5513 	mls	r5, r8, r3, r5
 8000442:	fb03 fc0c 	mul.w	ip, r3, ip
 8000446:	ea49 4505 	orr.w	r5, r9, r5, lsl #16
 800044a:	45ac      	cmp	ip, r5
 800044c:	d906      	bls.n	800045c <__udivmoddi4+0x1dc>
 800044e:	197d      	adds	r5, r7, r5
 8000450:	f103 38ff 	add.w	r8, r3, #4294967295
 8000454:	d201      	bcs.n	800045a <__udivmoddi4+0x1da>
 8000456:	45ac      	cmp	ip, r5
 8000458:	d87e      	bhi.n	8000558 <__udivmoddi4+0x2d8>
 800045a:	4643      	mov	r3, r8
 800045c:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8000460:	eba5 050c 	sub.w	r5, r5, ip
 8000464:	fba3 9802 	umull	r9, r8, r3, r2
 8000468:	4545      	cmp	r5, r8
 800046a:	46ce      	mov	lr, r9
 800046c:	46c4      	mov	ip, r8
 800046e:	d302      	bcc.n	8000476 <__udivmoddi4+0x1f6>
 8000470:	d106      	bne.n	8000480 <__udivmoddi4+0x200>
 8000472:	4548      	cmp	r0, r9
 8000474:	d204      	bcs.n	8000480 <__udivmoddi4+0x200>
 8000476:	3b01      	subs	r3, #1
 8000478:	ebb9 0e02 	subs.w	lr, r9, r2
 800047c:	eb68 0c07 	sbc.w	ip, r8, r7
 8000480:	2e00      	cmp	r6, #0
 8000482:	d06f      	beq.n	8000564 <__udivmoddi4+0x2e4>
 8000484:	ebb0 020e 	subs.w	r2, r0, lr
 8000488:	eb65 050c 	sbc.w	r5, r5, ip
 800048c:	40ca      	lsrs	r2, r1
 800048e:	fa05 f404 	lsl.w	r4, r5, r4
 8000492:	40cd      	lsrs	r5, r1
 8000494:	4618      	mov	r0, r3
 8000496:	4314      	orrs	r4, r2
 8000498:	2100      	movs	r1, #0
 800049a:	e9c6 4500 	strd	r4, r5, [r6]
 800049e:	e73c      	b.n	800031a <__udivmoddi4+0x9a>
 80004a0:	fa02 fc03 	lsl.w	ip, r2, r3
 80004a4:	f1c3 0220 	rsb	r2, r3, #32
 80004a8:	4099      	lsls	r1, r3
 80004aa:	409c      	lsls	r4, r3
 80004ac:	40d5      	lsrs	r5, r2
 80004ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004b2:	fa20 f202 	lsr.w	r2, r0, r2
 80004b6:	fa1f f78c 	uxth.w	r7, ip
 80004ba:	fbb5 f0fe 	udiv	r0, r5, lr
 80004be:	430a      	orrs	r2, r1
 80004c0:	fb0e 5510 	mls	r5, lr, r0, r5
 80004c4:	0c11      	lsrs	r1, r2, #16
 80004c6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ca:	fb00 f507 	mul.w	r5, r0, r7
 80004ce:	428d      	cmp	r5, r1
 80004d0:	d90e      	bls.n	80004f0 <__udivmoddi4+0x270>
 80004d2:	eb1c 0101 	adds.w	r1, ip, r1
 80004d6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004da:	bf2c      	ite	cs
 80004dc:	f04f 0901 	movcs.w	r9, #1
 80004e0:	f04f 0900 	movcc.w	r9, #0
 80004e4:	428d      	cmp	r5, r1
 80004e6:	d902      	bls.n	80004ee <__udivmoddi4+0x26e>
 80004e8:	f1b9 0f00 	cmp.w	r9, #0
 80004ec:	d031      	beq.n	8000552 <__udivmoddi4+0x2d2>
 80004ee:	4640      	mov	r0, r8
 80004f0:	1b49      	subs	r1, r1, r5
 80004f2:	b292      	uxth	r2, r2
 80004f4:	fbb1 f5fe 	udiv	r5, r1, lr
 80004f8:	fb0e 1115 	mls	r1, lr, r5, r1
 80004fc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000500:	fb05 f107 	mul.w	r1, r5, r7
 8000504:	4291      	cmp	r1, r2
 8000506:	d907      	bls.n	8000518 <__udivmoddi4+0x298>
 8000508:	eb1c 0202 	adds.w	r2, ip, r2
 800050c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x296>
 8000512:	4291      	cmp	r1, r2
 8000514:	d823      	bhi.n	800055e <__udivmoddi4+0x2de>
 8000516:	4645      	mov	r5, r8
 8000518:	1a52      	subs	r2, r2, r1
 800051a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800051e:	e726      	b.n	800036e <__udivmoddi4+0xee>
 8000520:	4631      	mov	r1, r6
 8000522:	4630      	mov	r0, r6
 8000524:	e6f9      	b.n	800031a <__udivmoddi4+0x9a>
 8000526:	1a84      	subs	r4, r0, r2
 8000528:	eb65 0203 	sbc.w	r2, r5, r3
 800052c:	2001      	movs	r0, #1
 800052e:	4617      	mov	r7, r2
 8000530:	e70b      	b.n	800034a <__udivmoddi4+0xca>
 8000532:	4464      	add	r4, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e74a      	b.n	80003ce <__udivmoddi4+0x14e>
 8000538:	4464      	add	r4, ip
 800053a:	3802      	subs	r0, #2
 800053c:	e6e4      	b.n	8000308 <__udivmoddi4+0x88>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	e72f      	b.n	80003a4 <__udivmoddi4+0x124>
 8000544:	3902      	subs	r1, #2
 8000546:	4462      	add	r2, ip
 8000548:	e6c9      	b.n	80002de <__udivmoddi4+0x5e>
 800054a:	f1ae 0e02 	sub.w	lr, lr, #2
 800054e:	443d      	add	r5, r7
 8000550:	e76f      	b.n	8000432 <__udivmoddi4+0x1b2>
 8000552:	3802      	subs	r0, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7cb      	b.n	80004f0 <__udivmoddi4+0x270>
 8000558:	3b02      	subs	r3, #2
 800055a:	443d      	add	r5, r7
 800055c:	e77e      	b.n	800045c <__udivmoddi4+0x1dc>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	e7d9      	b.n	8000518 <__udivmoddi4+0x298>
 8000564:	4618      	mov	r0, r3
 8000566:	4631      	mov	r1, r6
 8000568:	e6d7      	b.n	800031a <__udivmoddi4+0x9a>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <print_param>:
extern UART_HandleTypeDef huart1;

char msg_formatted[300];
void print_param(char* param_name,uint32_t uint_param)

{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
 8000578:	6039      	str	r1, [r7, #0]
 sprintf(msg_formatted,"%s:%u\n",param_name,uint_param);
 800057a:	683b      	ldr	r3, [r7, #0]
 800057c:	687a      	ldr	r2, [r7, #4]
 800057e:	4909      	ldr	r1, [pc, #36]	; (80005a4 <print_param+0x34>)
 8000580:	4809      	ldr	r0, [pc, #36]	; (80005a8 <print_param+0x38>)
 8000582:	f014 fdaf 	bl	80150e4 <siprintf>
 HAL_UART_Transmit(&huart1, msg_formatted, strlen(msg_formatted),100);
 8000586:	4808      	ldr	r0, [pc, #32]	; (80005a8 <print_param+0x38>)
 8000588:	f7ff fe5a 	bl	8000240 <strlen>
 800058c:	4603      	mov	r3, r0
 800058e:	b29a      	uxth	r2, r3
 8000590:	2364      	movs	r3, #100	; 0x64
 8000592:	4905      	ldr	r1, [pc, #20]	; (80005a8 <print_param+0x38>)
 8000594:	4805      	ldr	r0, [pc, #20]	; (80005ac <print_param+0x3c>)
 8000596:	f009 fd99 	bl	800a0cc <HAL_UART_Transmit>

}
 800059a:	bf00      	nop
 800059c:	3708      	adds	r7, #8
 800059e:	46bd      	mov	sp, r7
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	080163f4 	.word	0x080163f4
 80005a8:	2001b72c 	.word	0x2001b72c
 80005ac:	2001b9fc 	.word	0x2001b9fc

080005b0 <print_str>:

void print_str(char* msg)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
	 sprintf(msg_formatted,"%s\n",msg);
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	4909      	ldr	r1, [pc, #36]	; (80005e0 <print_str+0x30>)
 80005bc:	4809      	ldr	r0, [pc, #36]	; (80005e4 <print_str+0x34>)
 80005be:	f014 fd91 	bl	80150e4 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_formatted, strlen(msg_formatted),100);
 80005c2:	4808      	ldr	r0, [pc, #32]	; (80005e4 <print_str+0x34>)
 80005c4:	f7ff fe3c 	bl	8000240 <strlen>
 80005c8:	4603      	mov	r3, r0
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	2364      	movs	r3, #100	; 0x64
 80005ce:	4905      	ldr	r1, [pc, #20]	; (80005e4 <print_str+0x34>)
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <print_str+0x38>)
 80005d2:	f009 fd7b 	bl	800a0cc <HAL_UART_Transmit>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	080163fc 	.word	0x080163fc
 80005e4:	2001b72c 	.word	0x2001b72c
 80005e8:	2001b9fc 	.word	0x2001b9fc

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f0:	f001 fd9f 	bl	8002132 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f4:	f000 f854 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f8:	f000 facc 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 80005fc:	f000 fa70 	bl	8000ae0 <MX_DMA_Init>
  MX_ICACHE_Init();
 8000600:	f000 f922 	bl	8000848 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 8000604:	f000 f9d4 	bl	80009b0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000608:	f000 f96a 	bl	80008e0 <MX_RTC_Init>
  MX_SDMMC1_SD_Init();
 800060c:	f000 f9b2 	bl	8000974 <MX_SDMMC1_SD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 8000610:	f00c fc00 	bl	800ce14 <MX_FATFS_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <main+0x32>
    Error_Handler();
 800061a:	f001 f811 	bl	8001640 <Error_Handler>
  }
  MX_I2C1_Init();
 800061e:	f000 f893 	bl	8000748 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000622:	f000 fa11 	bl	8000a48 <MX_USART2_UART_Init>
  MX_I2C4_Init();
 8000626:	f000 f8cf 	bl	80007c8 <MX_I2C4_Init>
  MX_OCTOSPI1_Init();
 800062a:	f000 f919 	bl	8000860 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

  EnterQuadMode();
 800062e:	f000 fc15 	bl	8000e5c <EnterQuadMode>
  EnableMemMappedQuadMode();
 8000632:	f000 fbb7 	bl	8000da4 <EnableMemMappedQuadMode>
  print_str("EnableMemMapped");
 8000636:	4810      	ldr	r0, [pc, #64]	; (8000678 <main+0x8c>)
 8000638:	f7ff ffba 	bl	80005b0 <print_str>
  */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800063c:	f011 fa9a 	bl	8011b74 <osKernelInitialize>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of sensors_tmr */
  sensors_tmrHandle = osTimerNew(sensors_tmr_cb, osTimerPeriodic, NULL, &sensors_tmr_attributes);
 8000640:	4b0e      	ldr	r3, [pc, #56]	; (800067c <main+0x90>)
 8000642:	2200      	movs	r2, #0
 8000644:	2101      	movs	r1, #1
 8000646:	480e      	ldr	r0, [pc, #56]	; (8000680 <main+0x94>)
 8000648:	f011 fba0 	bl	8011d8c <osTimerNew>
 800064c:	4603      	mov	r3, r0
 800064e:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <main+0x98>)
 8000650:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000652:	4a0d      	ldr	r2, [pc, #52]	; (8000688 <main+0x9c>)
 8000654:	2100      	movs	r1, #0
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <main+0xa0>)
 8000658:	f011 fad6 	bl	8011c08 <osThreadNew>
 800065c:	4603      	mov	r3, r0
 800065e:	4a0c      	ldr	r2, [pc, #48]	; (8000690 <main+0xa4>)
 8000660:	6013      	str	r3, [r2, #0]

  /* creation of sensors_t */
  sensors_tHandle = osThreadNew(sensors_f, NULL, &sensors_t_attributes);
 8000662:	4a0c      	ldr	r2, [pc, #48]	; (8000694 <main+0xa8>)
 8000664:	2100      	movs	r1, #0
 8000666:	480c      	ldr	r0, [pc, #48]	; (8000698 <main+0xac>)
 8000668:	f011 face 	bl	8011c08 <osThreadNew>
 800066c:	4603      	mov	r3, r0
 800066e:	4a0b      	ldr	r2, [pc, #44]	; (800069c <main+0xb0>)
 8000670:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000672:	f011 faa3 	bl	8011bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000676:	e7fe      	b.n	8000676 <main+0x8a>
 8000678:	08016424 	.word	0x08016424
 800067c:	080166a0 	.word	0x080166a0
 8000680:	080015f5 	.word	0x080015f5
 8000684:	2001bbfc 	.word	0x2001bbfc
 8000688:	08016658 	.word	0x08016658
 800068c:	08000eb9 	.word	0x08000eb9
 8000690:	2001bbf4 	.word	0x2001bbf4
 8000694:	0801667c 	.word	0x0801667c
 8000698:	08000ef9 	.word	0x08000ef9
 800069c:	2001bbf8 	.word	0x2001bbf8

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b098      	sub	sp, #96	; 0x60
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 0318 	add.w	r3, r7, #24
 80006aa:	2248      	movs	r2, #72	; 0x48
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f014 fd7b 	bl	80151aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
 80006be:	60da      	str	r2, [r3, #12]
 80006c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f004 fb6e 	bl	8004da4 <HAL_PWREx_ControlVoltageScaling>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 80006ce:	f000 ffb7 	bl	8001640 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006d2:	230a      	movs	r3, #10
 80006d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006da:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2340      	movs	r3, #64	; 0x40
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e8:	2302      	movs	r3, #2
 80006ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006ec:	2302      	movs	r3, #2
 80006ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f0:	2301      	movs	r3, #1
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 21;
 80006f4:	2315      	movs	r3, #21
 80006f6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV8;
 80006fc:	2308      	movs	r3, #8
 80006fe:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 8000700:	2304      	movs	r3, #4
 8000702:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0318 	add.w	r3, r7, #24
 8000708:	4618      	mov	r0, r3
 800070a:	f004 fbdb 	bl	8004ec4 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000714:	f000 ff94 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072c:	1d3b      	adds	r3, r7, #4
 800072e:	2104      	movs	r1, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f005 f89d 	bl	8005870 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800073c:	f000 ff80 	bl	8001640 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3760      	adds	r7, #96	; 0x60
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_I2C1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_I2C1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x50A0364B;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_I2C1_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MX_I2C1_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_I2C1_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_I2C1_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_I2C1_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_I2C1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C1_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C1_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C1_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_I2C1_Init+0x74>)
 8000784:	f002 fab0 	bl	8002ce8 <HAL_I2C_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 ff57 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_I2C1_Init+0x74>)
 8000796:	f003 fd2d 	bl	80041f4 <HAL_I2CEx_ConfigAnalogFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 ff4e 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_I2C1_Init+0x74>)
 80007a8:	f003 fd6f 	bl	800428a <HAL_I2CEx_ConfigDigitalFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 ff45 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2001b858 	.word	0x2001b858
 80007c0:	40005400 	.word	0x40005400
 80007c4:	50a0364b 	.word	0x50a0364b

080007c8 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 80007cc:	4b1b      	ldr	r3, [pc, #108]	; (800083c <MX_I2C4_Init+0x74>)
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <MX_I2C4_Init+0x78>)
 80007d0:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20906FA0;
 80007d2:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_I2C4_Init+0x74>)
 80007d4:	4a1b      	ldr	r2, [pc, #108]	; (8000844 <MX_I2C4_Init+0x7c>)
 80007d6:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <MX_I2C4_Init+0x74>)
 80007da:	2200      	movs	r2, #0
 80007dc:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007de:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_I2C4_Init+0x74>)
 80007e0:	2201      	movs	r2, #1
 80007e2:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e4:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_I2C4_Init+0x74>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_I2C4_Init+0x74>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_I2C4_Init+0x74>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_I2C4_Init+0x74>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_I2C4_Init+0x74>)
 80007fe:	2200      	movs	r2, #0
 8000800:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000802:	480e      	ldr	r0, [pc, #56]	; (800083c <MX_I2C4_Init+0x74>)
 8000804:	f002 fa70 	bl	8002ce8 <HAL_I2C_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 800080e:	f000 ff17 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000812:	2100      	movs	r1, #0
 8000814:	4809      	ldr	r0, [pc, #36]	; (800083c <MX_I2C4_Init+0x74>)
 8000816:	f003 fced 	bl	80041f4 <HAL_I2CEx_ConfigAnalogFilter>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000820:	f000 ff0e 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000824:	2100      	movs	r1, #0
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_I2C4_Init+0x74>)
 8000828:	f003 fd2f 	bl	800428a <HAL_I2CEx_ConfigDigitalFilter>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000832:	f000 ff05 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2001b8ac 	.word	0x2001b8ac
 8000840:	40008400 	.word	0x40008400
 8000844:	20906fa0 	.word	0x20906fa0

08000848 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache (default 2-ways set associative cache)
  */
  if (HAL_ICACHE_Enable() != HAL_OK)
 800084c:	f003 fd6a 	bl	8004324 <HAL_ICACHE_Enable>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_ICACHE_Init+0x12>
  {
    Error_Handler();
 8000856:	f000 fef3 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
	...

08000860 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000864:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000866:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <MX_OCTOSPI1_Init+0x7c>)
 8000868:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800086a:	4b1b      	ldr	r3, [pc, #108]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 800086c:	2201      	movs	r2, #1
 800086e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000870:	4b19      	ldr	r3, [pc, #100]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_APMEMORY;
 8000876:	4b18      	ldr	r3, [pc, #96]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000878:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800087c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 23;
 800087e:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000880:	2217      	movs	r2, #23
 8000882:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 2;
 8000884:	4b14      	ldr	r3, [pc, #80]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000886:	2202      	movs	r2, #2
 8000888:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 800088c:	2200      	movs	r2, #0
 800088e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000890:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 8000898:	2200      	movs	r2, #0
 800089a:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 800089e:	2201      	movs	r2, #1
 80008a0:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80008a2:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80008aa:	4b0b      	ldr	r3, [pc, #44]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 80008b0:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_USED;
 80008b6:	4b08      	ldr	r3, [pc, #32]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 482;
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008be:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80008c2:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80008c4:	4804      	ldr	r0, [pc, #16]	; (80008d8 <MX_OCTOSPI1_Init+0x78>)
 80008c6:	f003 fd3d 	bl	8004344 <HAL_OSPI_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80008d0:	f000 feb6 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80008d4:	bf00      	nop
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	2001b900 	.word	0x2001b900
 80008dc:	44021000 	.word	0x44021000

080008e0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b086      	sub	sp, #24
 80008e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80008e6:	463b      	mov	r3, r7
 80008e8:	2200      	movs	r2, #0
 80008ea:	601a      	str	r2, [r3, #0]
 80008ec:	605a      	str	r2, [r3, #4]
 80008ee:	609a      	str	r2, [r3, #8]
 80008f0:	60da      	str	r2, [r3, #12]
 80008f2:	611a      	str	r2, [r3, #16]
 80008f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	; (800096c <MX_RTC_Init+0x8c>)
 80008f8:	4a1d      	ldr	r2, [pc, #116]	; (8000970 <MX_RTC_Init+0x90>)
 80008fa:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	; (800096c <MX_RTC_Init+0x8c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000902:	4b1a      	ldr	r3, [pc, #104]	; (800096c <MX_RTC_Init+0x8c>)
 8000904:	227f      	movs	r2, #127	; 0x7f
 8000906:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000908:	4b18      	ldr	r3, [pc, #96]	; (800096c <MX_RTC_Init+0x8c>)
 800090a:	22ff      	movs	r2, #255	; 0xff
 800090c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <MX_RTC_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000914:	4b15      	ldr	r3, [pc, #84]	; (800096c <MX_RTC_Init+0x8c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <MX_RTC_Init+0x8c>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000920:	4b12      	ldr	r3, [pc, #72]	; (800096c <MX_RTC_Init+0x8c>)
 8000922:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000926:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000928:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_RTC_Init+0x8c>)
 800092a:	2200      	movs	r2, #0
 800092c:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800092e:	480f      	ldr	r0, [pc, #60]	; (800096c <MX_RTC_Init+0x8c>)
 8000930:	f007 f920 	bl	8007b74 <HAL_RTC_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 800093a:	f000 fe81 	bl	8001640 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8000942:	2300      	movs	r3, #0
 8000944:	60fb      	str	r3, [r7, #12]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8000946:	2300      	movs	r3, #0
 8000948:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	4619      	mov	r1, r3
 8000952:	4806      	ldr	r0, [pc, #24]	; (800096c <MX_RTC_Init+0x8c>)
 8000954:	f007 fc1e 	bl	8008194 <HAL_RTCEx_PrivilegeModeSet>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800095e:	f000 fe6f 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	3718      	adds	r7, #24
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	2001b958 	.word	0x2001b958
 8000970:	40002800 	.word	0x40002800

08000974 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000978:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 800097a:	4a0c      	ldr	r2, [pc, #48]	; (80009ac <MX_SDMMC1_SD_Init+0x38>)
 800097c:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 8000980:	2200      	movs	r2, #0
 8000982:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800098a:	4b07      	ldr	r3, [pc, #28]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 800098c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000990:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <MX_SDMMC1_SD_Init+0x34>)
 800099a:	2200      	movs	r2, #0
 800099c:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN SDMMC1_Init 2 */


  /* USER CODE END SDMMC1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr
 80009a8:	2001b980 	.word	0x2001b980
 80009ac:	420c8000 	.word	0x420c8000

080009b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b4:	4b22      	ldr	r3, [pc, #136]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009b6:	4a23      	ldr	r2, [pc, #140]	; (8000a44 <MX_USART1_UART_Init+0x94>)
 80009b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009ba:	4b21      	ldr	r3, [pc, #132]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c2:	4b1f      	ldr	r3, [pc, #124]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009c8:	4b1d      	ldr	r3, [pc, #116]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009ce:	4b1c      	ldr	r3, [pc, #112]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d4:	4b1a      	ldr	r3, [pc, #104]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009d6:	220c      	movs	r2, #12
 80009d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009da:	4b19      	ldr	r3, [pc, #100]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009dc:	2200      	movs	r2, #0
 80009de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e0:	4b17      	ldr	r3, [pc, #92]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009e6:	4b16      	ldr	r3, [pc, #88]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009ec:	4b14      	ldr	r3, [pc, #80]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009f2:	4b13      	ldr	r3, [pc, #76]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f8:	4811      	ldr	r0, [pc, #68]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 80009fa:	f009 fb17 	bl	800a02c <HAL_UART_Init>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a04:	f000 fe1c 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a08:	2100      	movs	r1, #0
 8000a0a:	480d      	ldr	r0, [pc, #52]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a0c:	f00b fb6d 	bl	800c0ea <HAL_UARTEx_SetTxFifoThreshold>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a16:	f000 fe13 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a1e:	f00b fba2 	bl	800c166 <HAL_UARTEx_SetRxFifoThreshold>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a28:	f000 fe0a 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_USART1_UART_Init+0x90>)
 8000a2e:	f00b fb23 	bl	800c078 <HAL_UARTEx_DisableFifoMode>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a38:	f000 fe02 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	2001b9fc 	.word	0x2001b9fc
 8000a44:	40013800 	.word	0x40013800

08000a48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a4c:	4b22      	ldr	r3, [pc, #136]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a4e:	4a23      	ldr	r2, [pc, #140]	; (8000adc <MX_USART2_UART_Init+0x94>)
 8000a50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a52:	4b21      	ldr	r3, [pc, #132]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a60:	4b1d      	ldr	r3, [pc, #116]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a6e:	220c      	movs	r2, #12
 8000a70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a72:	4b19      	ldr	r3, [pc, #100]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a7e:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a8a:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a90:	4811      	ldr	r0, [pc, #68]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000a92:	f009 facb 	bl	800a02c <HAL_UART_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a9c:	f000 fdd0 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	480d      	ldr	r0, [pc, #52]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000aa4:	f00b fb21 	bl	800c0ea <HAL_UARTEx_SetTxFifoThreshold>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000aae:	f000 fdc7 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	4808      	ldr	r0, [pc, #32]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ab6:	f00b fb56 	bl	800c166 <HAL_UARTEx_SetRxFifoThreshold>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000ac0:	f000 fdbe 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ac4:	4804      	ldr	r0, [pc, #16]	; (8000ad8 <MX_USART2_UART_Init+0x90>)
 8000ac6:	f00b fad7 	bl	800c078 <HAL_UARTEx_DisableFifoMode>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000ad0:	f000 fdb6 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2001ba90 	.word	0x2001ba90
 8000adc:	40004400 	.word	0x40004400

08000ae0 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ae6:	4b28      	ldr	r3, [pc, #160]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000aea:	4a27      	ldr	r2, [pc, #156]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000aec:	f043 0304 	orr.w	r3, r3, #4
 8000af0:	6493      	str	r3, [r2, #72]	; 0x48
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000af6:	f003 0304 	and.w	r3, r3, #4
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000b00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b02:	4a21      	ldr	r2, [pc, #132]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6493      	str	r3, [r2, #72]	; 0x48
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <MX_DMA_Init+0xa8>)
 8000b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	603b      	str	r3, [r7, #0]
 8000b14:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 8000b16:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b18:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <MX_DMA_Init+0xb0>)
 8000b1a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8000b22:	4b1a      	ldr	r3, [pc, #104]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000b28:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 8000b2a:	4b18      	ldr	r3, [pc, #96]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b2c:	2240      	movs	r2, #64	; 0x40
 8000b2e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 8000b30:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b32:	2280      	movs	r2, #128	; 0x80
 8000b34:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b36:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3c:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 8000b42:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 8000b48:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b50:	f001 fc2e 	bl	80023b0 <HAL_DMA_Init>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 8000b5a:	f000 fd71 	bl	8001640 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000b5e:	2110      	movs	r1, #16
 8000b60:	480a      	ldr	r0, [pc, #40]	; (8000b8c <MX_DMA_Init+0xac>)
 8000b62:	f001 fe96 	bl	8002892 <HAL_DMA_ConfigChannelAttributes>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_DMA_Init+0x90>
  {
    Error_Handler( );
 8000b6c:	f000 fd68 	bl	8001640 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	2105      	movs	r1, #5
 8000b74:	201d      	movs	r0, #29
 8000b76:	f001 fbf3 	bl	8002360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000b7a:	201d      	movs	r0, #29
 8000b7c:	f001 fc0a 	bl	8002394 <HAL_NVIC_EnableIRQ>

}
 8000b80:	bf00      	nop
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	2001bb8c 	.word	0x2001bb8c
 8000b90:	4002001c 	.word	0x4002001c

08000b94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08a      	sub	sp, #40	; 0x28
 8000b98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bb0:	f043 0310 	orr.w	r3, r3, #16
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a2b      	ldr	r2, [pc, #172]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b29      	ldr	r3, [pc, #164]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b26      	ldr	r3, [pc, #152]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a25      	ldr	r2, [pc, #148]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b23      	ldr	r3, [pc, #140]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	4b20      	ldr	r3, [pc, #128]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	4a1f      	ldr	r2, [pc, #124]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000bf8:	f043 0308 	orr.w	r3, r3, #8
 8000bfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	4a19      	ldr	r2, [pc, #100]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000c10:	f043 0304 	orr.w	r3, r3, #4
 8000c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_GPIO_Init+0xe0>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	f003 0304 	and.w	r3, r3, #4
 8000c1e:	603b      	str	r3, [r7, #0]
 8000c20:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWR_MCU_PROG_GPIO_Port, PWR_MCU_PROG_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2108      	movs	r1, #8
 8000c26:	4814      	ldr	r0, [pc, #80]	; (8000c78 <MX_GPIO_Init+0xe4>)
 8000c28:	f002 f846 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PWR_MCU_PROG_Pin */
  GPIO_InitStruct.Pin = PWR_MCU_PROG_Pin;
 8000c2c:	2308      	movs	r3, #8
 8000c2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c30:	2301      	movs	r3, #1
 8000c32:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PWR_MCU_PROG_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480d      	ldr	r0, [pc, #52]	; (8000c78 <MX_GPIO_Init+0xe4>)
 8000c44:	f001 feb8 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c48:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c56:	2300      	movs	r3, #0
 8000c58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5e:	f107 0314 	add.w	r3, r7, #20
 8000c62:	4619      	mov	r1, r3
 8000c64:	4805      	ldr	r0, [pc, #20]	; (8000c7c <MX_GPIO_Init+0xe8>)
 8000c66:	f001 fea7 	bl	80029b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c6a:	bf00      	nop
 8000c6c:	3728      	adds	r7, #40	; 0x28
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40021000 	.word	0x40021000
 8000c78:	42021000 	.word	0x42021000
 8000c7c:	42020400 	.word	0x42020400

08000c80 <HAL_SD_TxCpltCallback>:
/* USER CODE BEGIN 4 */
uint32_t sd_dma_rx_semaphore;
uint32_t sd_dma_tx_semaphore;

void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
	sd_dma_tx_semaphore=1;
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <HAL_SD_TxCpltCallback+0x1c>)
 8000c8a:	2201      	movs	r2, #1
 8000c8c:	601a      	str	r2, [r3, #0]
	//print_param("tcb",hsd->ErrorCode);
}
 8000c8e:	bf00      	nop
 8000c90:	370c      	adds	r7, #12
 8000c92:	46bd      	mov	sp, r7
 8000c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	20021028 	.word	0x20021028

08000ca0 <HAL_SD_RxCpltCallback>:


void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
	sd_dma_rx_semaphore=1;
 8000ca8:	4b04      	ldr	r3, [pc, #16]	; (8000cbc <HAL_SD_RxCpltCallback+0x1c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	601a      	str	r2, [r3, #0]
	//print_param("rCb",hsd->ErrorCode);

}
 8000cae:	bf00      	nop
 8000cb0:	370c      	adds	r7, #12
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	20021024 	.word	0x20021024

08000cc0 <HAL_SD_ErrorCallback>:
void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  print_param("ecb",hsd->ErrorCode);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <HAL_SD_ErrorCallback+0x38>)
 8000cd0:	f7ff fc4e 	bl	8000570 <print_param>
  print_param("STAecb",hsd1.Instance->STA);
 8000cd4:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <HAL_SD_ErrorCallback+0x3c>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4808      	ldr	r0, [pc, #32]	; (8000d00 <HAL_SD_ErrorCallback+0x40>)
 8000cde:	f7ff fc47 	bl	8000570 <print_param>
  print_param("CLKCR",hsd1.Instance->CLKCR);
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <HAL_SD_ErrorCallback+0x3c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4806      	ldr	r0, [pc, #24]	; (8000d04 <HAL_SD_ErrorCallback+0x44>)
 8000cec:	f7ff fc40 	bl	8000570 <print_param>
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	08016434 	.word	0x08016434
 8000cfc:	2001b980 	.word	0x2001b980
 8000d00:	08016438 	.word	0x08016438
 8000d04:	08016440 	.word	0x08016440

08000d08 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 if(huart==&huart2)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a1e      	ldr	r2, [pc, #120]	; (8000d8c <HAL_UART_RxCpltCallback+0x84>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d135      	bne.n	8000d84 <HAL_UART_RxCpltCallback+0x7c>
 {
	 if(uart2_rx_byte=='\r'){
 8000d18:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <HAL_UART_RxCpltCallback+0x88>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	2b0d      	cmp	r3, #13
 8000d1e:	d102      	bne.n	8000d26 <HAL_UART_RxCpltCallback+0x1e>
		 uart2_rx_byte=0x00;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <HAL_UART_RxCpltCallback+0x88>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	701a      	strb	r2, [r3, #0]
	 }

     cmd_msg[cmd_msg_indx]=uart2_rx_byte;
 8000d26:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	4a19      	ldr	r2, [pc, #100]	; (8000d90 <HAL_UART_RxCpltCallback+0x88>)
 8000d2c:	7811      	ldrb	r1, [r2, #0]
 8000d2e:	4a1a      	ldr	r2, [pc, #104]	; (8000d98 <HAL_UART_RxCpltCallback+0x90>)
 8000d30:	54d1      	strb	r1, [r2, r3]
     if(uart2_rx_byte==0x00){
 8000d32:	4b17      	ldr	r3, [pc, #92]	; (8000d90 <HAL_UART_RxCpltCallback+0x88>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d10e      	bne.n	8000d58 <HAL_UART_RxCpltCallback+0x50>
    	 cmd_msg_indx=0;
 8000d3a:	4b16      	ldr	r3, [pc, #88]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
    	 if(fsm_status==FSM_STARTED||fsm_status==FSM_TIMER)fsm_status=FSM_RTC_UPDATE;
 8000d40:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <HAL_UART_RxCpltCallback+0x94>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d003      	beq.n	8000d50 <HAL_UART_RxCpltCallback+0x48>
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_UART_RxCpltCallback+0x94>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d114      	bne.n	8000d7a <HAL_UART_RxCpltCallback+0x72>
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_UART_RxCpltCallback+0x94>)
 8000d52:	2205      	movs	r2, #5
 8000d54:	601a      	str	r2, [r3, #0]
 8000d56:	e010      	b.n	8000d7a <HAL_UART_RxCpltCallback+0x72>
     }
     else{
    	 cmd_msg_indx++;
 8000d58:	4b0e      	ldr	r3, [pc, #56]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	4a0d      	ldr	r2, [pc, #52]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d60:	6013      	str	r3, [r2, #0]
    	 cmd_msg_indx%=100;
 8000d62:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	4b0e      	ldr	r3, [pc, #56]	; (8000da0 <HAL_UART_RxCpltCallback+0x98>)
 8000d68:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6c:	095b      	lsrs	r3, r3, #5
 8000d6e:	2164      	movs	r1, #100	; 0x64
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <HAL_UART_RxCpltCallback+0x8c>)
 8000d78:	6013      	str	r3, [r2, #0]
     }

	 HAL_UART_Receive_IT(&huart2,&uart2_rx_byte,1);
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	4904      	ldr	r1, [pc, #16]	; (8000d90 <HAL_UART_RxCpltCallback+0x88>)
 8000d7e:	4803      	ldr	r0, [pc, #12]	; (8000d8c <HAL_UART_RxCpltCallback+0x84>)
 8000d80:	f009 fa32 	bl	800a1e8 <HAL_UART_Receive_IT>
 }
}
 8000d84:	bf00      	nop
 8000d86:	3708      	adds	r7, #8
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2001ba90 	.word	0x2001ba90
 8000d90:	20021020 	.word	0x20021020
 8000d94:	20020a84 	.word	0x20020a84
 8000d98:	20020a20 	.word	0x20020a20
 8000d9c:	2002101c 	.word	0x2002101c
 8000da0:	51eb851f 	.word	0x51eb851f

08000da4 <EnableMemMappedQuadMode>:


//-------------------------------------------
void EnableMemMappedQuadMode()
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b096      	sub	sp, #88	; 0x58
 8000da8:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	OSPI_MemoryMappedTypeDef sMemMappedCfg;
	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_4_LINES;
 8000dae:	2303      	movs	r3, #3
 8000db0:	617b      	str	r3, [r7, #20]
	sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61bb      	str	r3, [r7, #24]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
	sCommand.AddressMode = HAL_OSPI_ADDRESS_4_LINES;
 8000dba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
	sCommand.AddressSize = HAL_OSPI_ADDRESS_24_BITS;
 8000dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc4:	62bb      	str	r3, [r7, #40]	; 0x28
	sCommand.AddressDtrMode = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	637b      	str	r3, [r7, #52]	; 0x34
	sCommand.DataMode = HAL_OSPI_DATA_4_LINES;
 8000dce:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
	sCommand.DataDtrMode = HAL_OSPI_DATA_DTR_DISABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	657b      	str	r3, [r7, #84]	; 0x54
	sCommand.Address = 0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
	sCommand.NbData = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	647b      	str	r3, [r7, #68]	; 0x44
	/* Memory-mapped mode configuration for Quad Read mode 4-4-4*/
	sCommand.OperationType = HAL_OSPI_OPTYPE_READ_CFG;
 8000de4:	2301      	movs	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = FAST_READ_QUAD;
 8000de8:	23eb      	movs	r3, #235	; 0xeb
 8000dea:	613b      	str	r3, [r7, #16]
	sCommand.DummyCycles = FAST_READ_QUAD_DUMMY_CYCLES;
 8000dec:	2306      	movs	r3, #6
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=	HAL_OK){
 8000df0:	f107 0308 	add.w	r3, r7, #8
 8000df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df8:	4619      	mov	r1, r3
 8000dfa:	4817      	ldr	r0, [pc, #92]	; (8000e58 <EnableMemMappedQuadMode+0xb4>)
 8000dfc:	f003 fc9e 	bl	800473c <HAL_OSPI_Command>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <EnableMemMappedQuadMode+0x66>
	  Error_Handler();
 8000e06:	f000 fc1b 	bl	8001640 <Error_Handler>
	}
	/* Memory-mapped mode configuration for Quad Write mode 4-4-4*/
	sCommand.OperationType = HAL_OSPI_OPTYPE_WRITE_CFG;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	60bb      	str	r3, [r7, #8]
	sCommand.Instruction = QUAD_WRITE;
 8000e0e:	2338      	movs	r3, #56	; 0x38
 8000e10:	613b      	str	r3, [r7, #16]
	sCommand.DummyCycles = WRITE_QUAD_DUMMY_CYCLES;
 8000e12:	2300      	movs	r3, #0
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
	sCommand.DQSMode = HAL_OSPI_DQS_ENABLE;
 8000e16:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e1a:	653b      	str	r3, [r7, #80]	; 0x50
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) !=HAL_OK){
 8000e1c:	f107 0308 	add.w	r3, r7, #8
 8000e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e24:	4619      	mov	r1, r3
 8000e26:	480c      	ldr	r0, [pc, #48]	; (8000e58 <EnableMemMappedQuadMode+0xb4>)
 8000e28:	f003 fc88 	bl	800473c <HAL_OSPI_Command>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <EnableMemMappedQuadMode+0x92>
	  Error_Handler();
 8000e32:	f000 fc05 	bl	8001640 <Error_Handler>
	}
	/*Disable timeout counter for memory mapped mode*/
	sMemMappedCfg.TimeOutActivation = HAL_OSPI_TIMEOUT_COUNTER_DISABLE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
	/*Enable memory mapped mode*/
	if (HAL_OSPI_MemoryMapped(&hospi1, &sMemMappedCfg) != HAL_OK){
 8000e3a:	463b      	mov	r3, r7
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4806      	ldr	r0, [pc, #24]	; (8000e58 <EnableMemMappedQuadMode+0xb4>)
 8000e40:	f003 fd09 	bl	8004856 <HAL_OSPI_MemoryMapped>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <EnableMemMappedQuadMode+0xaa>
	  Error_Handler();
 8000e4a:	f000 fbf9 	bl	8001640 <Error_Handler>
	}
}
 8000e4e:	bf00      	nop
 8000e50:	3758      	adds	r7, #88	; 0x58
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	2001b900 	.word	0x2001b900

08000e5c <EnterQuadMode>:
/*Function to configure the external memory in Quad mode 4-4-4*/
void EnterQuadMode()
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b094      	sub	sp, #80	; 0x50
 8000e60:	af00      	add	r7, sp, #0
	OSPI_RegularCmdTypeDef sCommand;
	sCommand.OperationType = HAL_OSPI_OPTYPE_COMMON_CFG;
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
	sCommand.FlashId = HAL_OSPI_FLASH_ID_1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	607b      	str	r3, [r7, #4]
	sCommand.Instruction = ENTER_QUAD_MODE;
 8000e6a:	2335      	movs	r3, #53	; 0x35
 8000e6c:	60bb      	str	r3, [r7, #8]
	sCommand.InstructionMode = HAL_OSPI_INSTRUCTION_1_LINE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	sCommand.InstructionSize = HAL_OSPI_INSTRUCTION_8_BITS;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
	sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	617b      	str	r3, [r7, #20]
	sCommand.AddressMode = HAL_OSPI_ADDRESS_NONE;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
	sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	sCommand.DataMode = HAL_OSPI_DATA_NONE;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63bb      	str	r3, [r7, #56]	; 0x38
	sCommand.DummyCycles = ENTER_QUAD_DUMMY_CYCLES;
 8000e86:	2300      	movs	r3, #0
 8000e88:	647b      	str	r3, [r7, #68]	; 0x44
	sCommand.DQSMode = HAL_OSPI_DQS_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	64bb      	str	r3, [r7, #72]	; 0x48
	sCommand.SIOOMode = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	64fb      	str	r3, [r7, #76]	; 0x4c
	/*Enter QUAD mode*/
	if (HAL_OSPI_Command(&hospi1, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)	{
 8000e92:	463b      	mov	r3, r7
 8000e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4806      	ldr	r0, [pc, #24]	; (8000eb4 <EnterQuadMode+0x58>)
 8000e9c:	f003 fc4e 	bl	800473c <HAL_OSPI_Command>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <EnterQuadMode+0x4e>
	   Error_Handler();
 8000ea6:	f000 fbcb 	bl	8001640 <Error_Handler>
	}
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	2001b900 	.word	0x2001b900

08000eb8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  cmd_msg_indx=0;
 8000ec0:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <StartDefaultTask+0x30>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	601a      	str	r2, [r3, #0]

  HAL_UART_Receive_IT(&huart2,&uart2_rx_byte,1);
 8000ec6:	2201      	movs	r2, #1
 8000ec8:	4908      	ldr	r1, [pc, #32]	; (8000eec <StartDefaultTask+0x34>)
 8000eca:	4809      	ldr	r0, [pc, #36]	; (8000ef0 <StartDefaultTask+0x38>)
 8000ecc:	f009 f98c 	bl	800a1e8 <HAL_UART_Receive_IT>

  for(;;)
  {
	HAL_UART_Transmit(&huart2, keepalive_msg, 76, 100);
 8000ed0:	2364      	movs	r3, #100	; 0x64
 8000ed2:	224c      	movs	r2, #76	; 0x4c
 8000ed4:	4907      	ldr	r1, [pc, #28]	; (8000ef4 <StartDefaultTask+0x3c>)
 8000ed6:	4806      	ldr	r0, [pc, #24]	; (8000ef0 <StartDefaultTask+0x38>)
 8000ed8:	f009 f8f8 	bl	800a0cc <HAL_UART_Transmit>
    osDelay(1000);
 8000edc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ee0:	f010 ff24 	bl	8011d2c <osDelay>
	HAL_UART_Transmit(&huart2, keepalive_msg, 76, 100);
 8000ee4:	e7f4      	b.n	8000ed0 <StartDefaultTask+0x18>
 8000ee6:	bf00      	nop
 8000ee8:	20020a84 	.word	0x20020a84
 8000eec:	20021020 	.word	0x20021020
 8000ef0:	2001ba90 	.word	0x2001ba90
 8000ef4:	2001b648 	.word	0x2001b648

08000ef8 <sensors_f>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_sensors_f */
void sensors_f(void *argument)
{
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b09b      	sub	sp, #108	; 0x6c
 8000efc:	af0a      	add	r7, sp, #40	; 0x28
 8000efe:	60f8      	str	r0, [r7, #12]
  /* USER CODE BEGIN sensors_f */
  /* Infinite loop */

	  uint32_t address = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	633b      	str	r3, [r7, #48]	; 0x30
	  uint16_t index1;
	  uint16_t index2;
	  osDelay(200);
 8000f04:	20c8      	movs	r0, #200	; 0xc8
 8000f06:	f010 ff11 	bl	8011d2c <osDelay>
      uint32_t startick;
      uint32_t endtick;
      uint32_t delta;
	  extern uint8_t test_msg[100000];
	  HAL_UART_Transmit(&huart1, "Start\n", 6, 100);
 8000f0a:	2364      	movs	r3, #100	; 0x64
 8000f0c:	2206      	movs	r2, #6
 8000f0e:	4989      	ldr	r1, [pc, #548]	; (8001134 <sensors_f+0x23c>)
 8000f10:	4889      	ldr	r0, [pc, #548]	; (8001138 <sensors_f+0x240>)
 8000f12:	f009 f8db 	bl	800a0cc <HAL_UART_Transmit>

	  startick=xTaskGetTickCount();
 8000f16:	f012 fb93 	bl	8013640 <xTaskGetTickCount>
 8000f1a:	62f8      	str	r0, [r7, #44]	; 0x2c

	  print_str("Test write");
 8000f1c:	4887      	ldr	r0, [pc, #540]	; (800113c <sensors_f+0x244>)
 8000f1e:	f7ff fb47 	bl	80005b0 <print_str>
	  mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE);
 8000f22:	4b87      	ldr	r3, [pc, #540]	; (8001140 <sensors_f+0x248>)
 8000f24:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000f28:	601a      	str	r2, [r3, #0]
	  for(int y=0;y<1;y++){
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f2e:	e018      	b.n	8000f62 <sensors_f+0x6a>
	   for (index1 = 0; index1 < 10000; index1++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000f34:	e00d      	b.n	8000f52 <sensors_f+0x5a>
	   {
	     *mem_addr = test_msg[index1];
 8000f36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8000f38:	4b81      	ldr	r3, [pc, #516]	; (8001140 <sensors_f+0x248>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4981      	ldr	r1, [pc, #516]	; (8001144 <sensors_f+0x24c>)
 8000f3e:	5c8a      	ldrb	r2, [r1, r2]
 8000f40:	701a      	strb	r2, [r3, #0]
	      mem_addr++;
 8000f42:	4b7f      	ldr	r3, [pc, #508]	; (8001140 <sensors_f+0x248>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a7d      	ldr	r2, [pc, #500]	; (8001140 <sensors_f+0x248>)
 8000f4a:	6013      	str	r3, [r2, #0]
	   for (index1 = 0; index1 < 10000; index1++)
 8000f4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000f4e:	3301      	adds	r3, #1
 8000f50:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000f52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000f54:	f242 720f 	movw	r2, #9999	; 0x270f
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d9ec      	bls.n	8000f36 <sensors_f+0x3e>
	  for(int y=0;y<1;y++){
 8000f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f5e:	3301      	adds	r3, #1
 8000f60:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	dde3      	ble.n	8000f30 <sensors_f+0x38>
	   }
	  }

	  print_str("Test read");
 8000f68:	4877      	ldr	r0, [pc, #476]	; (8001148 <sensors_f+0x250>)
 8000f6a:	f7ff fb21 	bl	80005b0 <print_str>
	  mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE);
 8000f6e:	4b74      	ldr	r3, [pc, #464]	; (8001140 <sensors_f+0x248>)
 8000f70:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8000f74:	601a      	str	r2, [r3, #0]

	  for(int y=0;y<1;y++){
 8000f76:	2300      	movs	r3, #0
 8000f78:	637b      	str	r3, [r7, #52]	; 0x34
 8000f7a:	e029      	b.n	8000fd0 <sensors_f+0xd8>
	   for (index1 = 0; index1 < 10000; index1++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000f80:	e01e      	b.n	8000fc0 <sensors_f+0xc8>
	   {
		 HAL_UART_Transmit(&huart1,mem_addr,1, 100);
 8000f82:	4b6f      	ldr	r3, [pc, #444]	; (8001140 <sensors_f+0x248>)
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	2201      	movs	r2, #1
 8000f8a:	486b      	ldr	r0, [pc, #428]	; (8001138 <sensors_f+0x240>)
 8000f8c:	f009 f89e 	bl	800a0cc <HAL_UART_Transmit>

	     if (*mem_addr != test_msg[index1]){
 8000f90:	4b6b      	ldr	r3, [pc, #428]	; (8001140 <sensors_f+0x248>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	b2da      	uxtb	r2, r3
 8000f98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000f9a:	496a      	ldr	r1, [pc, #424]	; (8001144 <sensors_f+0x24c>)
 8000f9c:	5ccb      	ldrb	r3, [r1, r3]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d006      	beq.n	8000fb0 <sensors_f+0xb8>
	       print_str("QSPI ERR");
 8000fa2:	486a      	ldr	r0, [pc, #424]	; (800114c <sensors_f+0x254>)
 8000fa4:	f7ff fb04 	bl	80005b0 <print_str>
	       osDelay(1000);
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	f010 febe 	bl	8011d2c <osDelay>
	     }
	     mem_addr++;
 8000fb0:	4b63      	ldr	r3, [pc, #396]	; (8001140 <sensors_f+0x248>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	4a62      	ldr	r2, [pc, #392]	; (8001140 <sensors_f+0x248>)
 8000fb8:	6013      	str	r3, [r2, #0]
	   for (index1 = 0; index1 < 10000; index1++)
 8000fba:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000fc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8000fc2:	f242 720f 	movw	r2, #9999	; 0x270f
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d9db      	bls.n	8000f82 <sensors_f+0x8a>
	  for(int y=0;y<1;y++){
 8000fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fcc:	3301      	adds	r3, #1
 8000fce:	637b      	str	r3, [r7, #52]	; 0x34
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	ddd2      	ble.n	8000f7c <sensors_f+0x84>
	   }

	  }

	  endtick=xTaskGetTickCount();
 8000fd6:	f012 fb33 	bl	8013640 <xTaskGetTickCount>
 8000fda:	62b8      	str	r0, [r7, #40]	; 0x28
	  delta=endtick-startick;
 8000fdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
	  sprintf(tt,"Delta:%u\n",delta);
 8000fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000fe6:	495a      	ldr	r1, [pc, #360]	; (8001150 <sensors_f+0x258>)
 8000fe8:	485a      	ldr	r0, [pc, #360]	; (8001154 <sensors_f+0x25c>)
 8000fea:	f014 f87b 	bl	80150e4 <siprintf>
	  HAL_UART_Transmit(&huart1, tt,strlen(tt), 100);
 8000fee:	4859      	ldr	r0, [pc, #356]	; (8001154 <sensors_f+0x25c>)
 8000ff0:	f7ff f926 	bl	8000240 <strlen>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	b29a      	uxth	r2, r3
 8000ff8:	2364      	movs	r3, #100	; 0x64
 8000ffa:	4956      	ldr	r1, [pc, #344]	; (8001154 <sensors_f+0x25c>)
 8000ffc:	484e      	ldr	r0, [pc, #312]	; (8001138 <sensors_f+0x240>)
 8000ffe:	f009 f865 	bl	800a0cc <HAL_UART_Transmit>

	  print_str("QSPI TEST FINISHED");
 8001002:	4855      	ldr	r0, [pc, #340]	; (8001158 <sensors_f+0x260>)
 8001004:	f7ff fad4 	bl	80005b0 <print_str>


	  mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE);
 8001008:	4b4d      	ldr	r3, [pc, #308]	; (8001140 <sensors_f+0x248>)
 800100a:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 800100e:	601a      	str	r2, [r3, #0]


      res=f_mount(&fs,"",1);
 8001010:	2201      	movs	r2, #1
 8001012:	4952      	ldr	r1, [pc, #328]	; (800115c <sensors_f+0x264>)
 8001014:	4852      	ldr	r0, [pc, #328]	; (8001160 <sensors_f+0x268>)
 8001016:	f00f fb9f 	bl	8010758 <f_mount>
 800101a:	4603      	mov	r3, r0
 800101c:	461a      	mov	r2, r3
 800101e:	4b51      	ldr	r3, [pc, #324]	; (8001164 <sensors_f+0x26c>)
 8001020:	701a      	strb	r2, [r3, #0]
	  print_param("mount", res);
 8001022:	4b50      	ldr	r3, [pc, #320]	; (8001164 <sensors_f+0x26c>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	4619      	mov	r1, r3
 8001028:	484f      	ldr	r0, [pc, #316]	; (8001168 <sensors_f+0x270>)
 800102a:	f7ff faa1 	bl	8000570 <print_param>
	  res=f_open(&fl,"CytaBill.pdf",FA_READ);
 800102e:	2201      	movs	r2, #1
 8001030:	494e      	ldr	r1, [pc, #312]	; (800116c <sensors_f+0x274>)
 8001032:	484f      	ldr	r0, [pc, #316]	; (8001170 <sensors_f+0x278>)
 8001034:	f00f fbf4 	bl	8010820 <f_open>
 8001038:	4603      	mov	r3, r0
 800103a:	461a      	mov	r2, r3
 800103c:	4b49      	ldr	r3, [pc, #292]	; (8001164 <sensors_f+0x26c>)
 800103e:	701a      	strb	r2, [r3, #0]
	  print_param("open", res);
 8001040:	4b48      	ldr	r3, [pc, #288]	; (8001164 <sensors_f+0x26c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	4619      	mov	r1, r3
 8001046:	484b      	ldr	r0, [pc, #300]	; (8001174 <sensors_f+0x27c>)
 8001048:	f7ff fa92 	bl	8000570 <print_param>
      res=f_read(&fl,mem_buff2,10000,&btreaded);
 800104c:	4b4a      	ldr	r3, [pc, #296]	; (8001178 <sensors_f+0x280>)
 800104e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001052:	494a      	ldr	r1, [pc, #296]	; (800117c <sensors_f+0x284>)
 8001054:	4846      	ldr	r0, [pc, #280]	; (8001170 <sensors_f+0x278>)
 8001056:	f00f fecd 	bl	8010df4 <f_read>
 800105a:	4603      	mov	r3, r0
 800105c:	461a      	mov	r2, r3
 800105e:	4b41      	ldr	r3, [pc, #260]	; (8001164 <sensors_f+0x26c>)
 8001060:	701a      	strb	r2, [r3, #0]
	  res=f_close(&fl);
 8001062:	4843      	ldr	r0, [pc, #268]	; (8001170 <sensors_f+0x278>)
 8001064:	f010 fb93 	bl	801178e <f_close>
 8001068:	4603      	mov	r3, r0
 800106a:	461a      	mov	r2, r3
 800106c:	4b3d      	ldr	r3, [pc, #244]	; (8001164 <sensors_f+0x26c>)
 800106e:	701a      	strb	r2, [r3, #0]
	  print_param("close", res);
 8001070:	4b3c      	ldr	r3, [pc, #240]	; (8001164 <sensors_f+0x26c>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4619      	mov	r1, r3
 8001076:	4842      	ldr	r0, [pc, #264]	; (8001180 <sensors_f+0x288>)
 8001078:	f7ff fa7a 	bl	8000570 <print_param>

	  mem_addr = (__IO uint8_t *)(OCTOSPI1_BASE);
 800107c:	4b30      	ldr	r3, [pc, #192]	; (8001140 <sensors_f+0x248>)
 800107e:	f04f 4210 	mov.w	r2, #2415919104	; 0x90000000
 8001082:	601a      	str	r2, [r3, #0]
	  res=f_open(&fl,"CytaBill2.pdf",FA_OPEN_APPEND|FA_WRITE);
 8001084:	2232      	movs	r2, #50	; 0x32
 8001086:	493f      	ldr	r1, [pc, #252]	; (8001184 <sensors_f+0x28c>)
 8001088:	4839      	ldr	r0, [pc, #228]	; (8001170 <sensors_f+0x278>)
 800108a:	f00f fbc9 	bl	8010820 <f_open>
 800108e:	4603      	mov	r3, r0
 8001090:	461a      	mov	r2, r3
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <sensors_f+0x26c>)
 8001094:	701a      	strb	r2, [r3, #0]
	  print_param("open_new", res);
 8001096:	4b33      	ldr	r3, [pc, #204]	; (8001164 <sensors_f+0x26c>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	4619      	mov	r1, r3
 800109c:	483a      	ldr	r0, [pc, #232]	; (8001188 <sensors_f+0x290>)
 800109e:	f7ff fa67 	bl	8000570 <print_param>
	  res=f_write(&fl,mem_buff2,10000,&btwritten);
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <sensors_f+0x294>)
 80010a4:	f242 7210 	movw	r2, #10000	; 0x2710
 80010a8:	4934      	ldr	r1, [pc, #208]	; (800117c <sensors_f+0x284>)
 80010aa:	4831      	ldr	r0, [pc, #196]	; (8001170 <sensors_f+0x278>)
 80010ac:	f010 f849 	bl	8011142 <f_write>
 80010b0:	4603      	mov	r3, r0
 80010b2:	461a      	mov	r2, r3
 80010b4:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <sensors_f+0x26c>)
 80010b6:	701a      	strb	r2, [r3, #0]
	  f_close(&fl);
 80010b8:	482d      	ldr	r0, [pc, #180]	; (8001170 <sensors_f+0x278>)
 80010ba:	f010 fb68 	bl	801178e <f_close>
	  print_param("close", res);
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <sensors_f+0x26c>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	482e      	ldr	r0, [pc, #184]	; (8001180 <sensors_f+0x288>)
 80010c6:	f7ff fa53 	bl	8000570 <print_param>

	  endtick=xTaskGetTickCount();
 80010ca:	f012 fab9 	bl	8013640 <xTaskGetTickCount>
 80010ce:	62b8      	str	r0, [r7, #40]	; 0x28
	  delta=endtick-startick;
 80010d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
	  sprintf(tt,"Delta:%u",delta);
 80010d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010da:	492d      	ldr	r1, [pc, #180]	; (8001190 <sensors_f+0x298>)
 80010dc:	481d      	ldr	r0, [pc, #116]	; (8001154 <sensors_f+0x25c>)
 80010de:	f014 f801 	bl	80150e4 <siprintf>
	  HAL_UART_Transmit(&huart1, tt,strlen(tt), 100);
 80010e2:	481c      	ldr	r0, [pc, #112]	; (8001154 <sensors_f+0x25c>)
 80010e4:	f7ff f8ac 	bl	8000240 <strlen>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	2364      	movs	r3, #100	; 0x64
 80010ee:	4919      	ldr	r1, [pc, #100]	; (8001154 <sensors_f+0x25c>)
 80010f0:	4811      	ldr	r0, [pc, #68]	; (8001138 <sensors_f+0x240>)
 80010f2:	f008 ffeb 	bl	800a0cc <HAL_UART_Transmit>


	  HAL_I2C_Master_Transmit(&hi2c4, 0xd4, CTRL1_XL, 2, 100);
 80010f6:	2364      	movs	r3, #100	; 0x64
 80010f8:	9300      	str	r3, [sp, #0]
 80010fa:	2302      	movs	r3, #2
 80010fc:	4a25      	ldr	r2, [pc, #148]	; (8001194 <sensors_f+0x29c>)
 80010fe:	21d4      	movs	r1, #212	; 0xd4
 8001100:	4825      	ldr	r0, [pc, #148]	; (8001198 <sensors_f+0x2a0>)
 8001102:	f001 fe81 	bl	8002e08 <HAL_I2C_Master_Transmit>

	  fsm_status=FSM_STARTING;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <sensors_f+0x2a4>)
 8001108:	2201      	movs	r2, #1
 800110a:	601a      	str	r2, [r3, #0]
	  char* pch;
	  while(1){
		 switch(fsm_status){
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <sensors_f+0x2a4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b05      	cmp	r3, #5
 8001112:	f200 8233 	bhi.w	800157c <sensors_f+0x684>
 8001116:	a201      	add	r2, pc, #4	; (adr r2, 800111c <sensors_f+0x224>)
 8001118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800111c:	0800157d 	.word	0x0800157d
 8001120:	08001287 	.word	0x08001287
 8001124:	0800157d 	.word	0x0800157d
 8001128:	08001557 	.word	0x08001557
 800112c:	08001335 	.word	0x08001335
 8001130:	080011a1 	.word	0x080011a1
 8001134:	08016448 	.word	0x08016448
 8001138:	2001b9fc 	.word	0x2001b9fc
 800113c:	08016450 	.word	0x08016450
 8001140:	20021018 	.word	0x20021018
 8001144:	20000000 	.word	0x20000000
 8001148:	0801645c 	.word	0x0801645c
 800114c:	08016468 	.word	0x08016468
 8001150:	08016474 	.word	0x08016474
 8001154:	20020a88 	.word	0x20020a88
 8001158:	08016480 	.word	0x08016480
 800115c:	08016494 	.word	0x08016494
 8001160:	20020b70 	.word	0x20020b70
 8001164:	20021008 	.word	0x20021008
 8001168:	08016498 	.word	0x08016498
 800116c:	080164a0 	.word	0x080164a0
 8001170:	20020db0 	.word	0x20020db0
 8001174:	080164b0 	.word	0x080164b0
 8001178:	20021014 	.word	0x20021014
 800117c:	2001bc00 	.word	0x2001bc00
 8001180:	080164b8 	.word	0x080164b8
 8001184:	080164c0 	.word	0x080164c0
 8001188:	080164d0 	.word	0x080164d0
 800118c:	20021010 	.word	0x20021010
 8001190:	080164dc 	.word	0x080164dc
 8001194:	2001b69c 	.word	0x2001b69c
 8001198:	2001b8ac 	.word	0x2001b8ac
 800119c:	2002101c 	.word	0x2002101c
		   case FSM_RTC_UPDATE:
			   // d.m.y ss:mm:hh weekday
               print_str(cmd_msg);
 80011a0:	4856      	ldr	r0, [pc, #344]	; (80012fc <sensors_f+0x404>)
 80011a2:	f7ff fa05 	bl	80005b0 <print_str>
			   pch = strtok (cmd_msg,"."); //Date
 80011a6:	4956      	ldr	r1, [pc, #344]	; (8001300 <sensors_f+0x408>)
 80011a8:	4854      	ldr	r0, [pc, #336]	; (80012fc <sensors_f+0x404>)
 80011aa:	f014 f807 	bl	80151bc <strtok>
 80011ae:	6238      	str	r0, [r7, #32]
			   sTimeStampDate.Date=strtoul(pch,NULL,0);
 80011b0:	2200      	movs	r2, #0
 80011b2:	2100      	movs	r1, #0
 80011b4:	6a38      	ldr	r0, [r7, #32]
 80011b6:	f013 fedb 	bl	8014f70 <strtoul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	b2da      	uxtb	r2, r3
 80011be:	4b51      	ldr	r3, [pc, #324]	; (8001304 <sensors_f+0x40c>)
 80011c0:	709a      	strb	r2, [r3, #2]
			   pch = strtok (NULL,".");    //Month
 80011c2:	494f      	ldr	r1, [pc, #316]	; (8001300 <sensors_f+0x408>)
 80011c4:	2000      	movs	r0, #0
 80011c6:	f013 fff9 	bl	80151bc <strtok>
 80011ca:	6238      	str	r0, [r7, #32]
			   sTimeStampDate.Month=strtoul(pch,NULL,0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2100      	movs	r1, #0
 80011d0:	6a38      	ldr	r0, [r7, #32]
 80011d2:	f013 fecd 	bl	8014f70 <strtoul>
 80011d6:	4603      	mov	r3, r0
 80011d8:	b2da      	uxtb	r2, r3
 80011da:	4b4a      	ldr	r3, [pc, #296]	; (8001304 <sensors_f+0x40c>)
 80011dc:	705a      	strb	r2, [r3, #1]
			   pch = strtok (NULL," ");    //Year
 80011de:	494a      	ldr	r1, [pc, #296]	; (8001308 <sensors_f+0x410>)
 80011e0:	2000      	movs	r0, #0
 80011e2:	f013 ffeb 	bl	80151bc <strtok>
 80011e6:	6238      	str	r0, [r7, #32]
			   sTimeStampDate.Year=strtoul(pch,NULL,0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	6a38      	ldr	r0, [r7, #32]
 80011ee:	f013 febf 	bl	8014f70 <strtoul>
 80011f2:	4603      	mov	r3, r0
 80011f4:	b2da      	uxtb	r2, r3
 80011f6:	4b43      	ldr	r3, [pc, #268]	; (8001304 <sensors_f+0x40c>)
 80011f8:	70da      	strb	r2, [r3, #3]

			   pch = strtok (NULL,":"); //Seconds
 80011fa:	4944      	ldr	r1, [pc, #272]	; (800130c <sensors_f+0x414>)
 80011fc:	2000      	movs	r0, #0
 80011fe:	f013 ffdd 	bl	80151bc <strtok>
 8001202:	6238      	str	r0, [r7, #32]
			   sTimeStamp.Seconds=strtoul(pch,NULL,0);
 8001204:	2200      	movs	r2, #0
 8001206:	2100      	movs	r1, #0
 8001208:	6a38      	ldr	r0, [r7, #32]
 800120a:	f013 feb1 	bl	8014f70 <strtoul>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <sensors_f+0x418>)
 8001214:	709a      	strb	r2, [r3, #2]
			   pch = strtok (NULL,":");    //Minutes
 8001216:	493d      	ldr	r1, [pc, #244]	; (800130c <sensors_f+0x414>)
 8001218:	2000      	movs	r0, #0
 800121a:	f013 ffcf 	bl	80151bc <strtok>
 800121e:	6238      	str	r0, [r7, #32]
			   sTimeStamp.Minutes=strtoul(pch,NULL,0);
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	6a38      	ldr	r0, [r7, #32]
 8001226:	f013 fea3 	bl	8014f70 <strtoul>
 800122a:	4603      	mov	r3, r0
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <sensors_f+0x418>)
 8001230:	705a      	strb	r2, [r3, #1]
			   pch = strtok (NULL," ");    //Hours
 8001232:	4935      	ldr	r1, [pc, #212]	; (8001308 <sensors_f+0x410>)
 8001234:	2000      	movs	r0, #0
 8001236:	f013 ffc1 	bl	80151bc <strtok>
 800123a:	6238      	str	r0, [r7, #32]
			   sTimeStamp.Hours=strtoul(pch,NULL,0);
 800123c:	2200      	movs	r2, #0
 800123e:	2100      	movs	r1, #0
 8001240:	6a38      	ldr	r0, [r7, #32]
 8001242:	f013 fe95 	bl	8014f70 <strtoul>
 8001246:	4603      	mov	r3, r0
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b31      	ldr	r3, [pc, #196]	; (8001310 <sensors_f+0x418>)
 800124c:	701a      	strb	r2, [r3, #0]

			   pch = strtok (NULL," ");    //Weekday
 800124e:	492e      	ldr	r1, [pc, #184]	; (8001308 <sensors_f+0x410>)
 8001250:	2000      	movs	r0, #0
 8001252:	f013 ffb3 	bl	80151bc <strtok>
 8001256:	6238      	str	r0, [r7, #32]
			   sTimeStampDate.WeekDay =strtoul(pch,NULL,0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	6a38      	ldr	r0, [r7, #32]
 800125e:	f013 fe87 	bl	8014f70 <strtoul>
 8001262:	4603      	mov	r3, r0
 8001264:	b2da      	uxtb	r2, r3
 8001266:	4b27      	ldr	r3, [pc, #156]	; (8001304 <sensors_f+0x40c>)
 8001268:	701a      	strb	r2, [r3, #0]

			   HAL_RTC_SetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 800126a:	2200      	movs	r2, #0
 800126c:	4928      	ldr	r1, [pc, #160]	; (8001310 <sensors_f+0x418>)
 800126e:	4829      	ldr	r0, [pc, #164]	; (8001314 <sensors_f+0x41c>)
 8001270:	f006 fcf8 	bl	8007c64 <HAL_RTC_SetTime>
			   HAL_RTC_SetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8001274:	2200      	movs	r2, #0
 8001276:	4923      	ldr	r1, [pc, #140]	; (8001304 <sensors_f+0x40c>)
 8001278:	4826      	ldr	r0, [pc, #152]	; (8001314 <sensors_f+0x41c>)
 800127a:	f006 fde5 	bl	8007e48 <HAL_RTC_SetDate>

			   fsm_status=FSM_STARTED;
 800127e:	4b26      	ldr	r3, [pc, #152]	; (8001318 <sensors_f+0x420>)
 8001280:	2202      	movs	r2, #2
 8001282:	601a      	str	r2, [r3, #0]

		   break;
 8001284:	e17a      	b.n	800157c <sensors_f+0x684>
		   case FSM_STARTING:
			HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8001286:	2200      	movs	r2, #0
 8001288:	4921      	ldr	r1, [pc, #132]	; (8001310 <sensors_f+0x418>)
 800128a:	4822      	ldr	r0, [pc, #136]	; (8001314 <sensors_f+0x41c>)
 800128c:	f006 fd80 	bl	8007d90 <HAL_RTC_GetTime>
			HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 8001290:	2200      	movs	r2, #0
 8001292:	491c      	ldr	r1, [pc, #112]	; (8001304 <sensors_f+0x40c>)
 8001294:	481f      	ldr	r0, [pc, #124]	; (8001314 <sensors_f+0x41c>)
 8001296:	f006 fe5d 	bl	8007f54 <HAL_RTC_GetDate>

			sprintf(tt,"data_%02u%02u%02u%02u%02u%02u.txt",sTimeStampDate.Date,sTimeStampDate.Month,sTimeStampDate.Year,sTimeStamp.Hours,sTimeStamp.Minutes,sTimeStamp.Seconds);
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <sensors_f+0x40c>)
 800129c:	789b      	ldrb	r3, [r3, #2]
 800129e:	461c      	mov	r4, r3
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <sensors_f+0x40c>)
 80012a2:	785b      	ldrb	r3, [r3, #1]
 80012a4:	461d      	mov	r5, r3
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <sensors_f+0x40c>)
 80012a8:	78db      	ldrb	r3, [r3, #3]
 80012aa:	461a      	mov	r2, r3
 80012ac:	4b18      	ldr	r3, [pc, #96]	; (8001310 <sensors_f+0x418>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	4619      	mov	r1, r3
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <sensors_f+0x418>)
 80012b4:	785b      	ldrb	r3, [r3, #1]
 80012b6:	4618      	mov	r0, r3
 80012b8:	4b15      	ldr	r3, [pc, #84]	; (8001310 <sensors_f+0x418>)
 80012ba:	789b      	ldrb	r3, [r3, #2]
 80012bc:	9303      	str	r3, [sp, #12]
 80012be:	9002      	str	r0, [sp, #8]
 80012c0:	9101      	str	r1, [sp, #4]
 80012c2:	9200      	str	r2, [sp, #0]
 80012c4:	462b      	mov	r3, r5
 80012c6:	4622      	mov	r2, r4
 80012c8:	4914      	ldr	r1, [pc, #80]	; (800131c <sensors_f+0x424>)
 80012ca:	4815      	ldr	r0, [pc, #84]	; (8001320 <sensors_f+0x428>)
 80012cc:	f013 ff0a 	bl	80150e4 <siprintf>


			f_open(&fl,tt,FA_OPEN_APPEND|FA_WRITE);
 80012d0:	2232      	movs	r2, #50	; 0x32
 80012d2:	4913      	ldr	r1, [pc, #76]	; (8001320 <sensors_f+0x428>)
 80012d4:	4813      	ldr	r0, [pc, #76]	; (8001324 <sensors_f+0x42c>)
 80012d6:	f00f faa3 	bl	8010820 <f_open>
			f_write(&fl,"Start\n",6,&btwritten);
 80012da:	4b13      	ldr	r3, [pc, #76]	; (8001328 <sensors_f+0x430>)
 80012dc:	2206      	movs	r2, #6
 80012de:	4913      	ldr	r1, [pc, #76]	; (800132c <sensors_f+0x434>)
 80012e0:	4810      	ldr	r0, [pc, #64]	; (8001324 <sensors_f+0x42c>)
 80012e2:	f00f ff2e 	bl	8011142 <f_write>
			osTimerStart(sensors_tmrHandle, 100);
 80012e6:	4b12      	ldr	r3, [pc, #72]	; (8001330 <sensors_f+0x438>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2164      	movs	r1, #100	; 0x64
 80012ec:	4618      	mov	r0, r3
 80012ee:	f010 fdc9 	bl	8011e84 <osTimerStart>
			fsm_status=FSM_STARTED;
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <sensors_f+0x420>)
 80012f4:	2202      	movs	r2, #2
 80012f6:	601a      	str	r2, [r3, #0]
		   break;
 80012f8:	e140      	b.n	800157c <sensors_f+0x684>
 80012fa:	bf00      	nop
 80012fc:	20020a20 	.word	0x20020a20
 8001300:	080164e8 	.word	0x080164e8
 8001304:	20020b64 	.word	0x20020b64
 8001308:	080164ec 	.word	0x080164ec
 800130c:	080164f0 	.word	0x080164f0
 8001310:	20020b50 	.word	0x20020b50
 8001314:	2001b958 	.word	0x2001b958
 8001318:	2002101c 	.word	0x2002101c
 800131c:	080164f4 	.word	0x080164f4
 8001320:	20020a88 	.word	0x20020a88
 8001324:	20020db0 	.word	0x20020db0
 8001328:	20021010 	.word	0x20021010
 800132c:	08016448 	.word	0x08016448
 8001330:	2001bbfc 	.word	0x2001bbfc
		   case FSM_TIMER:
		    HAL_RTC_GetTime(&hrtc, &sTimeStamp, RTC_FORMAT_BIN);
 8001334:	2200      	movs	r2, #0
 8001336:	4993      	ldr	r1, [pc, #588]	; (8001584 <sensors_f+0x68c>)
 8001338:	4893      	ldr	r0, [pc, #588]	; (8001588 <sensors_f+0x690>)
 800133a:	f006 fd29 	bl	8007d90 <HAL_RTC_GetTime>
		    HAL_RTC_GetDate(&hrtc, &sTimeStampDate, RTC_FORMAT_BIN);
 800133e:	2200      	movs	r2, #0
 8001340:	4992      	ldr	r1, [pc, #584]	; (800158c <sensors_f+0x694>)
 8001342:	4891      	ldr	r0, [pc, #580]	; (8001588 <sensors_f+0x690>)
 8001344:	f006 fe06 	bl	8007f54 <HAL_RTC_GetDate>
		    uint32_t subsec=(sTimeStamp.SecondFraction-sTimeStamp.SubSeconds)*1000/(sTimeStamp.SecondFraction+1);
 8001348:	4b8e      	ldr	r3, [pc, #568]	; (8001584 <sensors_f+0x68c>)
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	4b8d      	ldr	r3, [pc, #564]	; (8001584 <sensors_f+0x68c>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001356:	fb03 f202 	mul.w	r2, r3, r2
 800135a:	4b8a      	ldr	r3, [pc, #552]	; (8001584 <sensors_f+0x68c>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	3301      	adds	r3, #1
 8001360:	fbb2 f3f3 	udiv	r3, r2, r3
 8001364:	61fb      	str	r3, [r7, #28]
			//HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &who_am_i, 1, 100);
			//HAL_I2C_Master_Receive(&hi2c4, 0xd4, &id, 1, 100);
			//sprintf(tt,"who_am_i:%u \n",id);
			//HAL_UART_Transmit(&huart1, tt, strlen(tt),100);

			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTX_L_XL, 1, 100);
 8001366:	2364      	movs	r3, #100	; 0x64
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2301      	movs	r3, #1
 800136c:	4a88      	ldr	r2, [pc, #544]	; (8001590 <sensors_f+0x698>)
 800136e:	21d4      	movs	r1, #212	; 0xd4
 8001370:	4888      	ldr	r0, [pc, #544]	; (8001594 <sensors_f+0x69c>)
 8001372:	f001 fd49 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data, 1, 100);
 8001376:	2364      	movs	r3, #100	; 0x64
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	2301      	movs	r3, #1
 800137c:	4a86      	ldr	r2, [pc, #536]	; (8001598 <sensors_f+0x6a0>)
 800137e:	21d4      	movs	r1, #212	; 0xd4
 8001380:	4884      	ldr	r0, [pc, #528]	; (8001594 <sensors_f+0x69c>)
 8001382:	f001 fe35 	bl	8002ff0 <HAL_I2C_Master_Receive>
			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTX_H_XL, 1, 100);
 8001386:	2364      	movs	r3, #100	; 0x64
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	2301      	movs	r3, #1
 800138c:	4a83      	ldr	r2, [pc, #524]	; (800159c <sensors_f+0x6a4>)
 800138e:	21d4      	movs	r1, #212	; 0xd4
 8001390:	4880      	ldr	r0, [pc, #512]	; (8001594 <sensors_f+0x69c>)
 8001392:	f001 fd39 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data+1, 1, 100);
 8001396:	4a82      	ldr	r2, [pc, #520]	; (80015a0 <sensors_f+0x6a8>)
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	2301      	movs	r3, #1
 800139e:	21d4      	movs	r1, #212	; 0xd4
 80013a0:	487c      	ldr	r0, [pc, #496]	; (8001594 <sensors_f+0x69c>)
 80013a2:	f001 fe25 	bl	8002ff0 <HAL_I2C_Master_Receive>

			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTY_L_XL, 1, 100);
 80013a6:	2364      	movs	r3, #100	; 0x64
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	2301      	movs	r3, #1
 80013ac:	4a7d      	ldr	r2, [pc, #500]	; (80015a4 <sensors_f+0x6ac>)
 80013ae:	21d4      	movs	r1, #212	; 0xd4
 80013b0:	4878      	ldr	r0, [pc, #480]	; (8001594 <sensors_f+0x69c>)
 80013b2:	f001 fd29 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data+2, 1, 100);
 80013b6:	4a7c      	ldr	r2, [pc, #496]	; (80015a8 <sensors_f+0x6b0>)
 80013b8:	2364      	movs	r3, #100	; 0x64
 80013ba:	9300      	str	r3, [sp, #0]
 80013bc:	2301      	movs	r3, #1
 80013be:	21d4      	movs	r1, #212	; 0xd4
 80013c0:	4874      	ldr	r0, [pc, #464]	; (8001594 <sensors_f+0x69c>)
 80013c2:	f001 fe15 	bl	8002ff0 <HAL_I2C_Master_Receive>
			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTY_H_XL, 1, 100);
 80013c6:	2364      	movs	r3, #100	; 0x64
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2301      	movs	r3, #1
 80013cc:	4a77      	ldr	r2, [pc, #476]	; (80015ac <sensors_f+0x6b4>)
 80013ce:	21d4      	movs	r1, #212	; 0xd4
 80013d0:	4870      	ldr	r0, [pc, #448]	; (8001594 <sensors_f+0x69c>)
 80013d2:	f001 fd19 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data+3, 1, 100);
 80013d6:	4a76      	ldr	r2, [pc, #472]	; (80015b0 <sensors_f+0x6b8>)
 80013d8:	2364      	movs	r3, #100	; 0x64
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	2301      	movs	r3, #1
 80013de:	21d4      	movs	r1, #212	; 0xd4
 80013e0:	486c      	ldr	r0, [pc, #432]	; (8001594 <sensors_f+0x69c>)
 80013e2:	f001 fe05 	bl	8002ff0 <HAL_I2C_Master_Receive>

			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTZ_L_XL, 1, 100);
 80013e6:	2364      	movs	r3, #100	; 0x64
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	2301      	movs	r3, #1
 80013ec:	4a71      	ldr	r2, [pc, #452]	; (80015b4 <sensors_f+0x6bc>)
 80013ee:	21d4      	movs	r1, #212	; 0xd4
 80013f0:	4868      	ldr	r0, [pc, #416]	; (8001594 <sensors_f+0x69c>)
 80013f2:	f001 fd09 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data+4, 1, 100);
 80013f6:	4a70      	ldr	r2, [pc, #448]	; (80015b8 <sensors_f+0x6c0>)
 80013f8:	2364      	movs	r3, #100	; 0x64
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	21d4      	movs	r1, #212	; 0xd4
 8001400:	4864      	ldr	r0, [pc, #400]	; (8001594 <sensors_f+0x69c>)
 8001402:	f001 fdf5 	bl	8002ff0 <HAL_I2C_Master_Receive>
			HAL_I2C_Master_Transmit(&hi2c4, 0xd4, &OUTZ_H_XL, 1, 100);
 8001406:	2364      	movs	r3, #100	; 0x64
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	2301      	movs	r3, #1
 800140c:	4a6b      	ldr	r2, [pc, #428]	; (80015bc <sensors_f+0x6c4>)
 800140e:	21d4      	movs	r1, #212	; 0xd4
 8001410:	4860      	ldr	r0, [pc, #384]	; (8001594 <sensors_f+0x69c>)
 8001412:	f001 fcf9 	bl	8002e08 <HAL_I2C_Master_Transmit>
			HAL_I2C_Master_Receive(&hi2c4, 0xd4, data+5, 1, 100);
 8001416:	4a6a      	ldr	r2, [pc, #424]	; (80015c0 <sensors_f+0x6c8>)
 8001418:	2364      	movs	r3, #100	; 0x64
 800141a:	9300      	str	r3, [sp, #0]
 800141c:	2301      	movs	r3, #1
 800141e:	21d4      	movs	r1, #212	; 0xd4
 8001420:	485c      	ldr	r0, [pc, #368]	; (8001594 <sensors_f+0x69c>)
 8001422:	f001 fde5 	bl	8002ff0 <HAL_I2C_Master_Receive>

			int16_t OUTX_XL=(data[1]<<8)|data[0];
 8001426:	4b5c      	ldr	r3, [pc, #368]	; (8001598 <sensors_f+0x6a0>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	021b      	lsls	r3, r3, #8
 800142c:	b21a      	sxth	r2, r3
 800142e:	4b5a      	ldr	r3, [pc, #360]	; (8001598 <sensors_f+0x6a0>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b21b      	sxth	r3, r3
 8001434:	4313      	orrs	r3, r2
 8001436:	837b      	strh	r3, [r7, #26]
			int16_t OUTY_XL=(data[3]<<8)|data[2];
 8001438:	4b57      	ldr	r3, [pc, #348]	; (8001598 <sensors_f+0x6a0>)
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	021b      	lsls	r3, r3, #8
 800143e:	b21a      	sxth	r2, r3
 8001440:	4b55      	ldr	r3, [pc, #340]	; (8001598 <sensors_f+0x6a0>)
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	b21b      	sxth	r3, r3
 8001446:	4313      	orrs	r3, r2
 8001448:	833b      	strh	r3, [r7, #24]
			int16_t OUTZ_XL=(data[5]<<8)|data[4];
 800144a:	4b53      	ldr	r3, [pc, #332]	; (8001598 <sensors_f+0x6a0>)
 800144c:	795b      	ldrb	r3, [r3, #5]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b51      	ldr	r3, [pc, #324]	; (8001598 <sensors_f+0x6a0>)
 8001454:	791b      	ldrb	r3, [r3, #4]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	82fb      	strh	r3, [r7, #22]


			//DEPTH SENSOR !!
			HAL_I2C_Master_Transmit(&hi2c1, 0x80, &depth_cmd, 1, 100);
 800145c:	2364      	movs	r3, #100	; 0x64
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	2301      	movs	r3, #1
 8001462:	4a58      	ldr	r2, [pc, #352]	; (80015c4 <sensors_f+0x6cc>)
 8001464:	2180      	movs	r1, #128	; 0x80
 8001466:	4858      	ldr	r0, [pc, #352]	; (80015c8 <sensors_f+0x6d0>)
 8001468:	f001 fcce 	bl	8002e08 <HAL_I2C_Master_Transmit>
			osDelay(15);
 800146c:	200f      	movs	r0, #15
 800146e:	f010 fc5d 	bl	8011d2c <osDelay>
			HAL_I2C_Master_Receive(&hi2c1, 0x80, data, 5, 100);
 8001472:	2364      	movs	r3, #100	; 0x64
 8001474:	9300      	str	r3, [sp, #0]
 8001476:	2305      	movs	r3, #5
 8001478:	4a47      	ldr	r2, [pc, #284]	; (8001598 <sensors_f+0x6a0>)
 800147a:	2180      	movs	r1, #128	; 0x80
 800147c:	4852      	ldr	r0, [pc, #328]	; (80015c8 <sensors_f+0x6d0>)
 800147e:	f001 fdb7 	bl	8002ff0 <HAL_I2C_Master_Receive>
			P=(data[1]<<8)|data[2];
 8001482:	4b45      	ldr	r3, [pc, #276]	; (8001598 <sensors_f+0x6a0>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	4b43      	ldr	r3, [pc, #268]	; (8001598 <sensors_f+0x6a0>)
 800148c:	789b      	ldrb	r3, [r3, #2]
 800148e:	b21b      	sxth	r3, r3
 8001490:	4313      	orrs	r3, r2
 8001492:	b21b      	sxth	r3, r3
 8001494:	b29a      	uxth	r2, r3
 8001496:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <sensors_f+0x6d4>)
 8001498:	801a      	strh	r2, [r3, #0]
			T=(data[3]<<8)|data[4];
 800149a:	4b3f      	ldr	r3, [pc, #252]	; (8001598 <sensors_f+0x6a0>)
 800149c:	78db      	ldrb	r3, [r3, #3]
 800149e:	021b      	lsls	r3, r3, #8
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <sensors_f+0x6a0>)
 80014a4:	791b      	ldrb	r3, [r3, #4]
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	4313      	orrs	r3, r2
 80014aa:	b21b      	sxth	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	4b48      	ldr	r3, [pc, #288]	; (80015d0 <sensors_f+0x6d8>)
 80014b0:	801a      	strh	r2, [r3, #0]

			sprintf(tt,"%02u:%02u:%02u,%02u:%02u:%02u.%03u,%u,%u,%d,%d,%d\n",sTimeStampDate.Date,sTimeStampDate.Month,sTimeStampDate.Year,sTimeStamp.Hours,sTimeStamp.Minutes,sTimeStamp.Seconds,subsec,P,T,OUTX_XL,OUTY_XL,OUTZ_XL);
 80014b2:	4b36      	ldr	r3, [pc, #216]	; (800158c <sensors_f+0x694>)
 80014b4:	789b      	ldrb	r3, [r3, #2]
 80014b6:	469c      	mov	ip, r3
 80014b8:	4b34      	ldr	r3, [pc, #208]	; (800158c <sensors_f+0x694>)
 80014ba:	785b      	ldrb	r3, [r3, #1]
 80014bc:	469e      	mov	lr, r3
 80014be:	4b33      	ldr	r3, [pc, #204]	; (800158c <sensors_f+0x694>)
 80014c0:	78db      	ldrb	r3, [r3, #3]
 80014c2:	4618      	mov	r0, r3
 80014c4:	4b2f      	ldr	r3, [pc, #188]	; (8001584 <sensors_f+0x68c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	461c      	mov	r4, r3
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <sensors_f+0x68c>)
 80014cc:	785b      	ldrb	r3, [r3, #1]
 80014ce:	461d      	mov	r5, r3
 80014d0:	4b2c      	ldr	r3, [pc, #176]	; (8001584 <sensors_f+0x68c>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	461e      	mov	r6, r3
 80014d6:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <sensors_f+0x6d4>)
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	4b3c      	ldr	r3, [pc, #240]	; (80015d0 <sensors_f+0x6d8>)
 80014de:	881b      	ldrh	r3, [r3, #0]
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014e6:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80014ea:	f9b7 1016 	ldrsh.w	r1, [r7, #22]
 80014ee:	9109      	str	r1, [sp, #36]	; 0x24
 80014f0:	9208      	str	r2, [sp, #32]
 80014f2:	9307      	str	r3, [sp, #28]
 80014f4:	687a      	ldr	r2, [r7, #4]
 80014f6:	9206      	str	r2, [sp, #24]
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	9305      	str	r3, [sp, #20]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	9304      	str	r3, [sp, #16]
 8001500:	9603      	str	r6, [sp, #12]
 8001502:	9502      	str	r5, [sp, #8]
 8001504:	9401      	str	r4, [sp, #4]
 8001506:	9000      	str	r0, [sp, #0]
 8001508:	4673      	mov	r3, lr
 800150a:	4662      	mov	r2, ip
 800150c:	4931      	ldr	r1, [pc, #196]	; (80015d4 <sensors_f+0x6dc>)
 800150e:	4832      	ldr	r0, [pc, #200]	; (80015d8 <sensors_f+0x6e0>)
 8001510:	f013 fde8 	bl	80150e4 <siprintf>

			res=f_write(&fl,tt,strlen(tt),&btwritten);
 8001514:	4830      	ldr	r0, [pc, #192]	; (80015d8 <sensors_f+0x6e0>)
 8001516:	f7fe fe93 	bl	8000240 <strlen>
 800151a:	4602      	mov	r2, r0
 800151c:	4b2f      	ldr	r3, [pc, #188]	; (80015dc <sensors_f+0x6e4>)
 800151e:	492e      	ldr	r1, [pc, #184]	; (80015d8 <sensors_f+0x6e0>)
 8001520:	482f      	ldr	r0, [pc, #188]	; (80015e0 <sensors_f+0x6e8>)
 8001522:	f00f fe0e 	bl	8011142 <f_write>
 8001526:	4603      	mov	r3, r0
 8001528:	461a      	mov	r2, r3
 800152a:	4b2e      	ldr	r3, [pc, #184]	; (80015e4 <sensors_f+0x6ec>)
 800152c:	701a      	strb	r2, [r3, #0]
			osDelay(20);
 800152e:	2014      	movs	r0, #20
 8001530:	f010 fbfc 	bl	8011d2c <osDelay>
			f_sync(&fl);
 8001534:	482a      	ldr	r0, [pc, #168]	; (80015e0 <sensors_f+0x6e8>)
 8001536:	f00f ffe7 	bl	8011508 <f_sync>
			osDelay(20);
 800153a:	2014      	movs	r0, #20
 800153c:	f010 fbf6 	bl	8011d2c <osDelay>
			print_str(tt);
 8001540:	4825      	ldr	r0, [pc, #148]	; (80015d8 <sensors_f+0x6e0>)
 8001542:	f7ff f835 	bl	80005b0 <print_str>
			if(fsm_status!=FSM_RTC_UPDATE)fsm_status=FSM_STARTED;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <sensors_f+0x6f0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	2b05      	cmp	r3, #5
 800154c:	d015      	beq.n	800157a <sensors_f+0x682>
 800154e:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <sensors_f+0x6f0>)
 8001550:	2202      	movs	r2, #2
 8001552:	601a      	str	r2, [r3, #0]
		   break;
 8001554:	e011      	b.n	800157a <sensors_f+0x682>
		   case FSM_STOPPING:
			osTimerStop(sensors_tmrHandle);
 8001556:	4b25      	ldr	r3, [pc, #148]	; (80015ec <sensors_f+0x6f4>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f010 fcc0 	bl	8011ee0 <osTimerStop>
			f_close(&fl);
 8001560:	481f      	ldr	r0, [pc, #124]	; (80015e0 <sensors_f+0x6e8>)
 8001562:	f010 f914 	bl	801178e <f_close>
			osDelay(20);
 8001566:	2014      	movs	r0, #20
 8001568:	f010 fbe0 	bl	8011d2c <osDelay>
			print_str("Finished\n");
 800156c:	4820      	ldr	r0, [pc, #128]	; (80015f0 <sensors_f+0x6f8>)
 800156e:	f7ff f81f 	bl	80005b0 <print_str>
			fsm_status=FSM_STOPPED;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <sensors_f+0x6f0>)
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
		   break;
 8001578:	e000      	b.n	800157c <sensors_f+0x684>
		   break;
 800157a:	bf00      	nop

		   break;
		  }


		  osDelay(1);
 800157c:	2001      	movs	r0, #1
 800157e:	f010 fbd5 	bl	8011d2c <osDelay>
		 switch(fsm_status){
 8001582:	e5c3      	b.n	800110c <sensors_f+0x214>
 8001584:	20020b50 	.word	0x20020b50
 8001588:	2001b958 	.word	0x2001b958
 800158c:	20020b64 	.word	0x20020b64
 8001590:	2001b695 	.word	0x2001b695
 8001594:	2001b8ac 	.word	0x2001b8ac
 8001598:	20020b68 	.word	0x20020b68
 800159c:	2001b696 	.word	0x2001b696
 80015a0:	20020b69 	.word	0x20020b69
 80015a4:	2001b697 	.word	0x2001b697
 80015a8:	20020b6a 	.word	0x20020b6a
 80015ac:	2001b698 	.word	0x2001b698
 80015b0:	20020b6b 	.word	0x20020b6b
 80015b4:	2001b699 	.word	0x2001b699
 80015b8:	20020b6c 	.word	0x20020b6c
 80015bc:	2001b69a 	.word	0x2001b69a
 80015c0:	20020b6d 	.word	0x20020b6d
 80015c4:	2001b694 	.word	0x2001b694
 80015c8:	2001b858 	.word	0x2001b858
 80015cc:	2002100a 	.word	0x2002100a
 80015d0:	2002100c 	.word	0x2002100c
 80015d4:	08016518 	.word	0x08016518
 80015d8:	20020a88 	.word	0x20020a88
 80015dc:	20021010 	.word	0x20021010
 80015e0:	20020db0 	.word	0x20020db0
 80015e4:	20021008 	.word	0x20021008
 80015e8:	2002101c 	.word	0x2002101c
 80015ec:	2001bbfc 	.word	0x2001bbfc
 80015f0:	0801654c 	.word	0x0801654c

080015f4 <sensors_tmr_cb>:
  /* USER CODE END sensors_f */
}

/* sensors_tmr_cb function */
void sensors_tmr_cb(void *argument)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN sensors_tmr_cb */
   if(fsm_status==FSM_STARTED) fsm_status=FSM_TIMER;
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <sensors_tmr_cb+0x24>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b02      	cmp	r3, #2
 8001602:	d102      	bne.n	800160a <sensors_tmr_cb+0x16>
 8001604:	4b04      	ldr	r3, [pc, #16]	; (8001618 <sensors_tmr_cb+0x24>)
 8001606:	2204      	movs	r2, #4
 8001608:	601a      	str	r2, [r3, #0]

  /* USER CODE END sensors_tmr_cb */
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	2002101c 	.word	0x2002101c

0800161c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800162e:	f000 fd9b 	bl	8002168 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001632:	bf00      	nop
 8001634:	3708      	adds	r7, #8
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40012c00 	.word	0x40012c00

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_UART_Transmit(&huart1, "err", 3,100);
 8001644:	2364      	movs	r3, #100	; 0x64
 8001646:	2203      	movs	r2, #3
 8001648:	4904      	ldr	r1, [pc, #16]	; (800165c <Error_Handler+0x1c>)
 800164a:	4805      	ldr	r0, [pc, #20]	; (8001660 <Error_Handler+0x20>)
 800164c:	f008 fd3e 	bl	800a0cc <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001650:	b672      	cpsid	i
}
 8001652:	bf00      	nop
  __disable_irq();
  print_str("Error_Handler");
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <Error_Handler+0x24>)
 8001656:	f7fe ffab 	bl	80005b0 <print_str>
  while (1)
 800165a:	e7fe      	b.n	800165a <Error_Handler+0x1a>
 800165c:	08016558 	.word	0x08016558
 8001660:	2001b9fc 	.word	0x2001b9fc
 8001664:	0801655c 	.word	0x0801655c

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	4b12      	ldr	r3, [pc, #72]	; (80016b8 <HAL_MspInit+0x50>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	4a11      	ldr	r2, [pc, #68]	; (80016b8 <HAL_MspInit+0x50>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6613      	str	r3, [r2, #96]	; 0x60
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x50>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x50>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	4a0b      	ldr	r2, [pc, #44]	; (80016b8 <HAL_MspInit+0x50>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6593      	str	r3, [r2, #88]	; 0x58
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x50>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2107      	movs	r1, #7
 80016a2:	f06f 0001 	mvn.w	r0, #1
 80016a6:	f000 fe5b 	bl	8002360 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016aa:	f003 fbd7 	bl	8004e5c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000

080016bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b0b0      	sub	sp, #192	; 0xc0
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016d4:	f107 0318 	add.w	r3, r7, #24
 80016d8:	2294      	movs	r2, #148	; 0x94
 80016da:	2100      	movs	r1, #0
 80016dc:	4618      	mov	r0, r3
 80016de:	f013 fd64 	bl	80151aa <memset>
  if(hi2c->Instance==I2C1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a4a      	ldr	r2, [pc, #296]	; (8001810 <HAL_I2C_MspInit+0x154>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d14b      	bne.n	8001784 <HAL_I2C_MspInit+0xc8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80016ec:	2340      	movs	r3, #64	; 0x40
 80016ee:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016f4:	f107 0318 	add.w	r3, r7, #24
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fbcf 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001704:	f7ff ff9c 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <HAL_I2C_MspInit+0x158>)
 800170a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800170c:	4a41      	ldr	r2, [pc, #260]	; (8001814 <HAL_I2C_MspInit+0x158>)
 800170e:	f043 0302 	orr.w	r3, r3, #2
 8001712:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001714:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_I2C_MspInit+0x158>)
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	f003 0302 	and.w	r3, r3, #2
 800171c:	617b      	str	r3, [r7, #20]
 800171e:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001720:	23c0      	movs	r3, #192	; 0xc0
 8001722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001726:	2312      	movs	r3, #18
 8001728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172c:	2300      	movs	r3, #0
 800172e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001738:	2304      	movs	r3, #4
 800173a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800173e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001742:	4619      	mov	r1, r3
 8001744:	4834      	ldr	r0, [pc, #208]	; (8001818 <HAL_I2C_MspInit+0x15c>)
 8001746:	f001 f937 	bl	80029b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800174a:	4b32      	ldr	r3, [pc, #200]	; (8001814 <HAL_I2C_MspInit+0x158>)
 800174c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_I2C_MspInit+0x158>)
 8001750:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001754:	6593      	str	r3, [r2, #88]	; 0x58
 8001756:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <HAL_I2C_MspInit+0x158>)
 8001758:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800175e:	613b      	str	r3, [r7, #16]
 8001760:	693b      	ldr	r3, [r7, #16]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001762:	2200      	movs	r2, #0
 8001764:	2105      	movs	r1, #5
 8001766:	2037      	movs	r0, #55	; 0x37
 8001768:	f000 fdfa 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800176c:	2037      	movs	r0, #55	; 0x37
 800176e:	f000 fe11 	bl	8002394 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2105      	movs	r1, #5
 8001776:	2038      	movs	r0, #56	; 0x38
 8001778:	f000 fdf2 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800177c:	2038      	movs	r0, #56	; 0x38
 800177e:	f000 fe09 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }

}
 8001782:	e041      	b.n	8001808 <HAL_I2C_MspInit+0x14c>
  else if(hi2c->Instance==I2C4)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a24      	ldr	r2, [pc, #144]	; (800181c <HAL_I2C_MspInit+0x160>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d13c      	bne.n	8001808 <HAL_I2C_MspInit+0x14c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 800178e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001792:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001794:	2300      	movs	r3, #0
 8001796:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001798:	f107 0318 	add.w	r3, r7, #24
 800179c:	4618      	mov	r0, r3
 800179e:	f004 fb7d 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d001      	beq.n	80017ac <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 80017a8:	f7ff ff4a 	bl	8001640 <Error_Handler>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b0:	4a18      	ldr	r2, [pc, #96]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017b8:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80017c4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017cc:	2312      	movs	r3, #18
 80017ce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d8:	2300      	movs	r3, #0
 80017da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80017de:	2304      	movs	r3, #4
 80017e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017e4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80017e8:	4619      	mov	r1, r3
 80017ea:	480d      	ldr	r0, [pc, #52]	; (8001820 <HAL_I2C_MspInit+0x164>)
 80017ec:	f001 f8e4 	bl	80029b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f4:	4a07      	ldr	r2, [pc, #28]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017f6:	f043 0302 	orr.w	r3, r3, #2
 80017fa:	65d3      	str	r3, [r2, #92]	; 0x5c
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <HAL_I2C_MspInit+0x158>)
 80017fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
}
 8001808:	bf00      	nop
 800180a:	37c0      	adds	r7, #192	; 0xc0
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40005400 	.word	0x40005400
 8001814:	40021000 	.word	0x40021000
 8001818:	42020400 	.word	0x42020400
 800181c:	40008400 	.word	0x40008400
 8001820:	42020c00 	.word	0x42020c00

08001824 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b0ae      	sub	sp, #184	; 0xb8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2294      	movs	r2, #148	; 0x94
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f013 fcb0 	bl	80151aa <memset>
  if(hospi->Instance==OCTOSPI1)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a27      	ldr	r2, [pc, #156]	; (80018ec <HAL_OSPI_MspInit+0xc8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d146      	bne.n	80018e2 <HAL_OSPI_MspInit+0xbe>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001854:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001858:	613b      	str	r3, [r7, #16]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_PLL;
 800185a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800185e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001862:	f107 0310 	add.w	r3, r7, #16
 8001866:	4618      	mov	r0, r3
 8001868:	f004 fb18 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 8001872:	f7ff fee5 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001876:	4b1e      	ldr	r3, [pc, #120]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 8001878:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187a:	4a1d      	ldr	r2, [pc, #116]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6513      	str	r3, [r2, #80]	; 0x50
 8001882:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800188e:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 8001894:	f043 0310 	orr.w	r3, r3, #16
 8001898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <HAL_OSPI_MspInit+0xcc>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	f003 0310 	and.w	r3, r3, #16
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    PE12     ------> OCTOSPI1_IO0
    PE13     ------> OCTOSPI1_IO1
    PE14     ------> OCTOSPI1_IO2
    PE15     ------> OCTOSPI1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80018a6:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80018aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ba:	2303      	movs	r3, #3
 80018bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80018c0:	230a      	movs	r3, #10
 80018c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018c6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018ca:	4619      	mov	r1, r3
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <HAL_OSPI_MspInit+0xd0>)
 80018ce:	f001 f873 	bl	80029b8 <HAL_GPIO_Init>

    /* OCTOSPI1 interrupt Init */
    HAL_NVIC_SetPriority(OCTOSPI1_IRQn, 5, 0);
 80018d2:	2200      	movs	r2, #0
 80018d4:	2105      	movs	r1, #5
 80018d6:	204c      	movs	r0, #76	; 0x4c
 80018d8:	f000 fd42 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OCTOSPI1_IRQn);
 80018dc:	204c      	movs	r0, #76	; 0x4c
 80018de:	f000 fd59 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80018e2:	bf00      	nop
 80018e4:	37b8      	adds	r7, #184	; 0xb8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	44021000 	.word	0x44021000
 80018f0:	40021000 	.word	0x40021000
 80018f4:	42021000 	.word	0x42021000

080018f8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b0a8      	sub	sp, #160	; 0xa0
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 030c 	add.w	r3, r7, #12
 8001904:	2294      	movs	r2, #148	; 0x94
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f013 fc4e 	bl	80151aa <memset>
  if(hrtc->Instance==RTC)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a16      	ldr	r2, [pc, #88]	; (800196c <HAL_RTC_MspInit+0x74>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d124      	bne.n	8001962 <HAL_RTC_MspInit+0x6a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001918:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800191c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800191e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001926:	f107 030c 	add.w	r3, r7, #12
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fab6 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001936:	f7ff fe83 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <HAL_RTC_MspInit+0x78>)
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	4a0b      	ldr	r2, [pc, #44]	; (8001970 <HAL_RTC_MspInit+0x78>)
 8001942:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800194a:	4b09      	ldr	r3, [pc, #36]	; (8001970 <HAL_RTC_MspInit+0x78>)
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	4a08      	ldr	r2, [pc, #32]	; (8001970 <HAL_RTC_MspInit+0x78>)
 8001950:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001954:	6593      	str	r3, [r2, #88]	; 0x58
 8001956:	4b06      	ldr	r3, [pc, #24]	; (8001970 <HAL_RTC_MspInit+0x78>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001962:	bf00      	nop
 8001964:	37a0      	adds	r7, #160	; 0xa0
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	40002800 	.word	0x40002800
 8001970:	40021000 	.word	0x40021000

08001974 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b0b0      	sub	sp, #192	; 0xc0
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001980:	2200      	movs	r2, #0
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	605a      	str	r2, [r3, #4]
 8001986:	609a      	str	r2, [r3, #8]
 8001988:	60da      	str	r2, [r3, #12]
 800198a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800198c:	f107 0318 	add.w	r3, r7, #24
 8001990:	2294      	movs	r2, #148	; 0x94
 8001992:	2100      	movs	r1, #0
 8001994:	4618      	mov	r0, r3
 8001996:	f013 fc08 	bl	80151aa <memset>
  if(hsd->Instance==SDMMC1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a37      	ldr	r2, [pc, #220]	; (8001a7c <HAL_SD_MspInit+0x108>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d167      	bne.n	8001a74 <HAL_SD_MspInit+0x100>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 80019a4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80019a8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_PLLP;
 80019aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019b2:	f107 0318 	add.w	r3, r7, #24
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 fa70 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 80019c2:	f7ff fe3d 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80019c6:	4b2e      	ldr	r3, [pc, #184]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ca:	4a2d      	ldr	r2, [pc, #180]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019cc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d2:	4b2b      	ldr	r3, [pc, #172]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019de:	4b28      	ldr	r3, [pc, #160]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e2:	4a27      	ldr	r2, [pc, #156]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ea:	4b25      	ldr	r3, [pc, #148]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	613b      	str	r3, [r7, #16]
 80019f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f6:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fa:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 80019fc:	f043 0308 	orr.w	r3, r3, #8
 8001a00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a02:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <HAL_SD_MspInit+0x10c>)
 8001a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a06:	f003 0308 	and.w	r3, r3, #8
 8001a0a:	60fb      	str	r3, [r7, #12]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001a0e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a12:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a28:	230c      	movs	r3, #12
 8001a2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a2e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a32:	4619      	mov	r1, r3
 8001a34:	4813      	ldr	r0, [pc, #76]	; (8001a84 <HAL_SD_MspInit+0x110>)
 8001a36:	f000 ffbf 	bl	80029b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a40:	2302      	movs	r3, #2
 8001a42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a52:	230c      	movs	r3, #12
 8001a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a58:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	480a      	ldr	r0, [pc, #40]	; (8001a88 <HAL_SD_MspInit+0x114>)
 8001a60:	f000 ffaa 	bl	80029b8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	204e      	movs	r0, #78	; 0x4e
 8001a6a:	f000 fc79 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8001a6e:	204e      	movs	r0, #78	; 0x4e
 8001a70:	f000 fc90 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a74:	bf00      	nop
 8001a76:	37c0      	adds	r7, #192	; 0xc0
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	420c8000 	.word	0x420c8000
 8001a80:	40021000 	.word	0x40021000
 8001a84:	42020800 	.word	0x42020800
 8001a88:	42020c00 	.word	0x42020c00

08001a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b0b0      	sub	sp, #192	; 0xc0
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001aa4:	f107 0318 	add.w	r3, r7, #24
 8001aa8:	2294      	movs	r2, #148	; 0x94
 8001aaa:	2100      	movs	r1, #0
 8001aac:	4618      	mov	r0, r3
 8001aae:	f013 fb7c 	bl	80151aa <memset>
  if(huart->Instance==USART1)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a63      	ldr	r2, [pc, #396]	; (8001c44 <HAL_UART_MspInit+0x1b8>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d176      	bne.n	8001baa <HAL_UART_MspInit+0x11e>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001abc:	2301      	movs	r3, #1
 8001abe:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac4:	f107 0318 	add.w	r3, r7, #24
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f004 f9e7 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad4:	f7ff fdb4 	bl	8001640 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad8:	4b5b      	ldr	r3, [pc, #364]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001adc:	4a5a      	ldr	r2, [pc, #360]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001ade:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ae4:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001af4:	4a54      	ldr	r2, [pc, #336]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001afc:	4b52      	ldr	r3, [pc, #328]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	613b      	str	r3, [r7, #16]
 8001b06:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001b08:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b22:	2307      	movs	r3, #7
 8001b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b28:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4847      	ldr	r0, [pc, #284]	; (8001c4c <HAL_UART_MspInit+0x1c0>)
 8001b30:	f000 ff42 	bl	80029b8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8001b34:	4b46      	ldr	r3, [pc, #280]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b36:	4a47      	ldr	r2, [pc, #284]	; (8001c54 <HAL_UART_MspInit+0x1c8>)
 8001b38:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8001b3a:	4b45      	ldr	r3, [pc, #276]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b3c:	221a      	movs	r2, #26
 8001b3e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b42:	2210      	movs	r2, #16
 8001b44:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b46:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b4c:	4b40      	ldr	r3, [pc, #256]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b4e:	2280      	movs	r2, #128	; 0x80
 8001b50:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b52:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b58:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001b5e:	4b3c      	ldr	r3, [pc, #240]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001b6a:	4839      	ldr	r0, [pc, #228]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b6c:	f000 fc20 	bl	80023b0 <HAL_DMA_Init>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8001b76:	f7ff fd63 	bl	8001640 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart1_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001b7a:	2110      	movs	r1, #16
 8001b7c:	4834      	ldr	r0, [pc, #208]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b7e:	f000 fe88 	bl	8002892 <HAL_DMA_ConfigChannelAttributes>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 8001b88:	f7ff fd5a 	bl	8001640 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a30      	ldr	r2, [pc, #192]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b90:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b92:	4a2f      	ldr	r2, [pc, #188]	; (8001c50 <HAL_UART_MspInit+0x1c4>)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2105      	movs	r1, #5
 8001b9c:	203d      	movs	r0, #61	; 0x3d
 8001b9e:	f000 fbdf 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001ba2:	203d      	movs	r0, #61	; 0x3d
 8001ba4:	f000 fbf6 	bl	8002394 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001ba8:	e047      	b.n	8001c3a <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART2)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a2a      	ldr	r2, [pc, #168]	; (8001c58 <HAL_UART_MspInit+0x1cc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d142      	bne.n	8001c3a <HAL_UART_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001bbc:	f107 0318 	add.w	r3, r7, #24
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 f96b 	bl	8005e9c <HAL_RCCEx_PeriphCLKConfig>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d001      	beq.n	8001bd0 <HAL_UART_MspInit+0x144>
      Error_Handler();
 8001bcc:	f7ff fd38 	bl	8001640 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bd0:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001be0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bec:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_UART_MspInit+0x1bc>)
 8001bf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c00:	230c      	movs	r3, #12
 8001c02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c06:	2302      	movs	r3, #2
 8001c08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001c18:	2307      	movs	r3, #7
 8001c1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001c22:	4619      	mov	r1, r3
 8001c24:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_UART_MspInit+0x1c0>)
 8001c26:	f000 fec7 	bl	80029b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	2105      	movs	r1, #5
 8001c2e:	203e      	movs	r0, #62	; 0x3e
 8001c30:	f000 fb96 	bl	8002360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c34:	203e      	movs	r0, #62	; 0x3e
 8001c36:	f000 fbad 	bl	8002394 <HAL_NVIC_EnableIRQ>
}
 8001c3a:	bf00      	nop
 8001c3c:	37c0      	adds	r7, #192	; 0xc0
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	40013800 	.word	0x40013800
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	42020000 	.word	0x42020000
 8001c50:	2001bb24 	.word	0x2001bb24
 8001c54:	40020008 	.word	0x40020008
 8001c58:	40004400 	.word	0x40004400

08001c5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08c      	sub	sp, #48	; 0x30
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	202a      	movs	r0, #42	; 0x2a
 8001c72:	f000 fb75 	bl	8002360 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001c76:	202a      	movs	r0, #42	; 0x2a
 8001c78:	f000 fb8c 	bl	8002394 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c7c:	4b1e      	ldr	r3, [pc, #120]	; (8001cf8 <HAL_InitTick+0x9c>)
 8001c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c80:	4a1d      	ldr	r2, [pc, #116]	; (8001cf8 <HAL_InitTick+0x9c>)
 8001c82:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c86:	6613      	str	r3, [r2, #96]	; 0x60
 8001c88:	4b1b      	ldr	r3, [pc, #108]	; (8001cf8 <HAL_InitTick+0x9c>)
 8001c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c94:	f107 0210 	add.w	r2, r7, #16
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f003 fff8 	bl	8005c94 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001ca4:	f003 ffe2 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 8001ca8:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cac:	4a13      	ldr	r2, [pc, #76]	; (8001cfc <HAL_InitTick+0xa0>)
 8001cae:	fba2 2303 	umull	r2, r3, r2, r3
 8001cb2:	0c9b      	lsrs	r3, r3, #18
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001cb8:	4b11      	ldr	r3, [pc, #68]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cba:	4a12      	ldr	r2, [pc, #72]	; (8001d04 <HAL_InitTick+0xa8>)
 8001cbc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cc0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001cc6:	4a0e      	ldr	r2, [pc, #56]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cca:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ccc:	4b0c      	ldr	r3, [pc, #48]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001cd8:	4809      	ldr	r0, [pc, #36]	; (8001d00 <HAL_InitTick+0xa4>)
 8001cda:	f007 fed5 	bl	8009a88 <HAL_TIM_Base_Init>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001ce4:	4806      	ldr	r0, [pc, #24]	; (8001d00 <HAL_InitTick+0xa4>)
 8001ce6:	f007 ff31 	bl	8009b4c <HAL_TIM_Base_Start_IT>
 8001cea:	4603      	mov	r3, r0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3730      	adds	r7, #48	; 0x30
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	431bde83 	.word	0x431bde83
 8001d00:	2002102c 	.word	0x2002102c
 8001d04:	40012c00 	.word	0x40012c00

08001d08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <NMI_Handler+0x4>

08001d0e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d12:	e7fe      	b.n	8001d12 <HardFault_Handler+0x4>

08001d14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d18:	e7fe      	b.n	8001d18 <MemManage_Handler+0x4>

08001d1a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d1a:	b480      	push	{r7}
 8001d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d1e:	e7fe      	b.n	8001d1e <BusFault_Handler+0x4>

08001d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d24:	e7fe      	b.n	8001d24 <UsageFault_Handler+0x4>

08001d26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d2a:	bf00      	nop
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <DMA1_Channel1_IRQHandler+0x10>)
 8001d3a:	f000 fc9c 	bl	8002676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	2001bb24 	.word	0x2001bb24

08001d48 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <TIM1_UP_IRQHandler+0x10>)
 8001d4e:	f007 ff6d 	bl	8009c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	2002102c 	.word	0x2002102c

08001d5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <I2C1_EV_IRQHandler+0x10>)
 8001d62:	f001 fa3b 	bl	80031dc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	2001b858 	.word	0x2001b858

08001d70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001d74:	4802      	ldr	r0, [pc, #8]	; (8001d80 <I2C1_ER_IRQHandler+0x10>)
 8001d76:	f001 fa4b 	bl	8003210 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	2001b858 	.word	0x2001b858

08001d84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 26.
  */
void USART1_IRQHandler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <USART1_IRQHandler+0x10>)
 8001d8a:	f008 fa79 	bl	800a280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	2001b9fc 	.word	0x2001b9fc

08001d98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 27.
  */
void USART2_IRQHandler(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d9c:	4802      	ldr	r0, [pc, #8]	; (8001da8 <USART2_IRQHandler+0x10>)
 8001d9e:	f008 fa6f 	bl	800a280 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2001ba90 	.word	0x2001ba90

08001dac <OCTOSPI1_IRQHandler>:

/**
  * @brief This function handles OCTOSPI1 global interrupt.
  */
void OCTOSPI1_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OCTOSPI1_IRQn 0 */

  /* USER CODE END OCTOSPI1_IRQn 0 */
  HAL_OSPI_IRQHandler(&hospi1);
 8001db0:	4802      	ldr	r0, [pc, #8]	; (8001dbc <OCTOSPI1_IRQHandler+0x10>)
 8001db2:	f002 fb81 	bl	80044b8 <HAL_OSPI_IRQHandler>
  /* USER CODE BEGIN OCTOSPI1_IRQn 1 */

  /* USER CODE END OCTOSPI1_IRQn 1 */
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	2001b900 	.word	0x2001b900

08001dc0 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001dc4:	4802      	ldr	r0, [pc, #8]	; (8001dd0 <SDMMC1_IRQHandler+0x10>)
 8001dc6:	f006 fc79 	bl	80086bc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8001dca:	bf00      	nop
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2001b980 	.word	0x2001b980

08001dd4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return 1;
 8001dd8:	2301      	movs	r3, #1
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr

08001de4 <_kill>:

int _kill(int pid, int sig)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dee:	f013 fadd 	bl	80153ac <__errno>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2216      	movs	r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
  return -1;
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_exit>:

void _exit (int status)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	f7ff ffe7 	bl	8001de4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e16:	e7fe      	b.n	8001e16 <_exit+0x12>

08001e18 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	60f8      	str	r0, [r7, #12]
 8001e20:	60b9      	str	r1, [r7, #8]
 8001e22:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	e00a      	b.n	8001e40 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e2a:	f3af 8000 	nop.w
 8001e2e:	4601      	mov	r1, r0
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	1c5a      	adds	r2, r3, #1
 8001e34:	60ba      	str	r2, [r7, #8]
 8001e36:	b2ca      	uxtb	r2, r1
 8001e38:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	dbf0      	blt.n	8001e2a <_read+0x12>
  }

  return len;
 8001e48:	687b      	ldr	r3, [r7, #4]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	60f8      	str	r0, [r7, #12]
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	e009      	b.n	8001e78 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	60ba      	str	r2, [r7, #8]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	dbf1      	blt.n	8001e64 <_write+0x12>
  }
  return len;
 8001e80:	687b      	ldr	r3, [r7, #4]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3718      	adds	r7, #24
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <_close>:

int _close(int file)
{
 8001e8a:	b480      	push	{r7}
 8001e8c:	b083      	sub	sp, #12
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e92:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	370c      	adds	r7, #12
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr

08001ea2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
 8001eaa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eb2:	605a      	str	r2, [r3, #4]
  return 0;
 8001eb4:	2300      	movs	r3, #0
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_isatty>:

int _isatty(int file)
{
 8001ec2:	b480      	push	{r7}
 8001ec4:	b083      	sub	sp, #12
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr

08001ed8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b085      	sub	sp, #20
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	60b9      	str	r1, [r7, #8]
 8001ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
	...

08001ef4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b086      	sub	sp, #24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001efc:	4a14      	ldr	r2, [pc, #80]	; (8001f50 <_sbrk+0x5c>)
 8001efe:	4b15      	ldr	r3, [pc, #84]	; (8001f54 <_sbrk+0x60>)
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <_sbrk+0x64>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <_sbrk+0x64>)
 8001f12:	4a12      	ldr	r2, [pc, #72]	; (8001f5c <_sbrk+0x68>)
 8001f14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f16:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <_sbrk+0x64>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d207      	bcs.n	8001f34 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f24:	f013 fa42 	bl	80153ac <__errno>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	220c      	movs	r2, #12
 8001f2c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f32:	e009      	b.n	8001f48 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <_sbrk+0x64>)
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4413      	add	r3, r2
 8001f42:	4a05      	ldr	r2, [pc, #20]	; (8001f58 <_sbrk+0x64>)
 8001f44:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f46:	68fb      	ldr	r3, [r7, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20030000 	.word	0x20030000
 8001f54:	00001000 	.word	0x00001000
 8001f58:	20021078 	.word	0x20021078
 8001f5c:	20025e68 	.word	0x20025e68

08001f60 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	; (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001f8a:	4b4f      	ldr	r3, [pc, #316]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d107      	bne.n	8001fa6 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001f96:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8001f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e005      	b.n	8001fb2 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001fa6:	4b48      	ldr	r3, [pc, #288]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	091b      	lsrs	r3, r3, #4
 8001fac:	f003 030f 	and.w	r3, r3, #15
 8001fb0:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001fb2:	4a46      	ldr	r2, [pc, #280]	; (80020cc <SystemCoreClockUpdate+0x148>)
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fbc:	4b42      	ldr	r3, [pc, #264]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	f003 030c 	and.w	r3, r3, #12
 8001fc4:	2b0c      	cmp	r3, #12
 8001fc6:	d866      	bhi.n	8002096 <SystemCoreClockUpdate+0x112>
 8001fc8:	a201      	add	r2, pc, #4	; (adr r2, 8001fd0 <SystemCoreClockUpdate+0x4c>)
 8001fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fce:	bf00      	nop
 8001fd0:	08002005 	.word	0x08002005
 8001fd4:	08002097 	.word	0x08002097
 8001fd8:	08002097 	.word	0x08002097
 8001fdc:	08002097 	.word	0x08002097
 8001fe0:	0800200d 	.word	0x0800200d
 8001fe4:	08002097 	.word	0x08002097
 8001fe8:	08002097 	.word	0x08002097
 8001fec:	08002097 	.word	0x08002097
 8001ff0:	08002015 	.word	0x08002015
 8001ff4:	08002097 	.word	0x08002097
 8001ff8:	08002097 	.word	0x08002097
 8001ffc:	08002097 	.word	0x08002097
 8002000:	0800201d 	.word	0x0800201d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8002004:	4a32      	ldr	r2, [pc, #200]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	6013      	str	r3, [r2, #0]
      break;
 800200a:	e048      	b.n	800209e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800200c:	4b30      	ldr	r3, [pc, #192]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <SystemCoreClockUpdate+0x150>)
 8002010:	601a      	str	r2, [r3, #0]
      break;
 8002012:	e044      	b.n	800209e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002014:	4b2e      	ldr	r3, [pc, #184]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 8002016:	4a30      	ldr	r2, [pc, #192]	; (80020d8 <SystemCoreClockUpdate+0x154>)
 8002018:	601a      	str	r2, [r3, #0]
      break;
 800201a:	e040      	b.n	800209e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800201c:	4b2a      	ldr	r3, [pc, #168]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8002026:	4b28      	ldr	r3, [pc, #160]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	3301      	adds	r3, #1
 8002032:	60bb      	str	r3, [r7, #8]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2b02      	cmp	r3, #2
 8002038:	d003      	beq.n	8002042 <SystemCoreClockUpdate+0xbe>
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b03      	cmp	r3, #3
 800203e:	d006      	beq.n	800204e <SystemCoreClockUpdate+0xca>
 8002040:	e00b      	b.n	800205a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8002042:	4a24      	ldr	r2, [pc, #144]	; (80020d4 <SystemCoreClockUpdate+0x150>)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	fbb2 f3f3 	udiv	r3, r2, r3
 800204a:	613b      	str	r3, [r7, #16]
          break;
 800204c:	e00b      	b.n	8002066 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800204e:	4a22      	ldr	r2, [pc, #136]	; (80020d8 <SystemCoreClockUpdate+0x154>)
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	613b      	str	r3, [r7, #16]
          break;
 8002058:	e005      	b.n	8002066 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	613b      	str	r3, [r7, #16]
          break;
 8002064:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8002066:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	fb02 f303 	mul.w	r3, r2, r3
 8002076:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	0e5b      	lsrs	r3, r3, #25
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	3301      	adds	r3, #1
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002090:	4a0f      	ldr	r2, [pc, #60]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 8002092:	6013      	str	r3, [r2, #0]
      break;
 8002094:	e003      	b.n	800209e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	6013      	str	r3, [r2, #0]
      break;
 800209c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <SystemCoreClockUpdate+0x144>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	4a0c      	ldr	r2, [pc, #48]	; (80020dc <SystemCoreClockUpdate+0x158>)
 80020aa:	5cd3      	ldrb	r3, [r2, r3]
 80020ac:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80020ae:	4b08      	ldr	r3, [pc, #32]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
 80020b8:	4a05      	ldr	r2, [pc, #20]	; (80020d0 <SystemCoreClockUpdate+0x14c>)
 80020ba:	6013      	str	r3, [r2, #0]
}
 80020bc:	bf00      	nop
 80020be:	371c      	adds	r7, #28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080166c8 	.word	0x080166c8
 80020d0:	2001b6a0 	.word	0x2001b6a0
 80020d4:	00f42400 	.word	0x00f42400
 80020d8:	00989680 	.word	0x00989680
 80020dc:	080166b0 	.word	0x080166b0

080020e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80020e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002118 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020e4:	f7ff ff3c 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80020e8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80020ea:	e003      	b.n	80020f4 <LoopCopyDataInit>

080020ec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80020ee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80020f0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80020f2:	3104      	adds	r1, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80020f4:	480a      	ldr	r0, [pc, #40]	; (8002120 <LoopForever+0xa>)
	ldr	r3, =_edata
 80020f6:	4b0b      	ldr	r3, [pc, #44]	; (8002124 <LoopForever+0xe>)
	adds	r2, r0, r1
 80020f8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80020fa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80020fc:	d3f6      	bcc.n	80020ec <CopyDataInit>
	ldr	r2, =_sbss
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002100:	e002      	b.n	8002108 <LoopFillZerobss>

08002102 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002102:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002104:	f842 3b04 	str.w	r3, [r2], #4

08002108 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002108:	4b08      	ldr	r3, [pc, #32]	; (800212c <LoopForever+0x16>)
	cmp	r2, r3
 800210a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800210c:	d3f9      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800210e:	f013 f953 	bl	80153b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002112:	f7fe fa6b 	bl	80005ec <main>

08002116 <LoopForever>:

LoopForever:
    b LoopForever
 8002116:	e7fe      	b.n	8002116 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002118:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 800211c:	08016d78 	.word	0x08016d78
	ldr	r0, =_sdata
 8002120:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002124:	2001b70c 	.word	0x2001b70c
	ldr	r2, =_sbss
 8002128:	2001b710 	.word	0x2001b710
	ldr	r3, = _ebss
 800212c:	20025e68 	.word	0x20025e68

08002130 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002130:	e7fe      	b.n	8002130 <ADC1_2_IRQHandler>

08002132 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002132:	b580      	push	{r7, lr}
 8002134:	b082      	sub	sp, #8
 8002136:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002138:	2300      	movs	r3, #0
 800213a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800213c:	2004      	movs	r0, #4
 800213e:	f000 f904 	bl	800234a <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002142:	f7ff ff1f 	bl	8001f84 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002146:	2007      	movs	r0, #7
 8002148:	f7ff fd88 	bl	8001c5c <HAL_InitTick>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d002      	beq.n	8002158 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	e001      	b.n	800215c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002158:	f7ff fa86 	bl	8001668 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800215c:	79fb      	ldrb	r3, [r7, #7]
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800216c:	4b06      	ldr	r3, [pc, #24]	; (8002188 <HAL_IncTick+0x20>)
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	461a      	mov	r2, r3
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_IncTick+0x24>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4413      	add	r3, r2
 8002178:	4a04      	ldr	r2, [pc, #16]	; (800218c <HAL_IncTick+0x24>)
 800217a:	6013      	str	r3, [r2, #0]
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2001b6a8 	.word	0x2001b6a8
 800218c:	2002107c 	.word	0x2002107c

08002190 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  return uwTick;
 8002194:	4b03      	ldr	r3, [pc, #12]	; (80021a4 <HAL_GetTick+0x14>)
 8002196:	681b      	ldr	r3, [r3, #0]
}
 8002198:	4618      	mov	r0, r3
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	2002107c 	.word	0x2002107c

080021a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021b0:	f7ff ffee 	bl	8002190 <HAL_GetTick>
 80021b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d005      	beq.n	80021ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_Delay+0x44>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	461a      	mov	r2, r3
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	4413      	add	r3, r2
 80021cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffde 	bl	8002190 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	68fa      	ldr	r2, [r7, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d8f7      	bhi.n	80021d0 <HAL_Delay+0x28>
  {
  }
}
 80021e0:	bf00      	nop
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	2001b6a8 	.word	0x2001b6a8

080021f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002200:	4b0c      	ldr	r3, [pc, #48]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800220c:	4013      	ands	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800221c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x44>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00

08002238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800223c:	4b04      	ldr	r3, [pc, #16]	; (8002250 <__NVIC_GetPriorityGrouping+0x18>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0a1b      	lsrs	r3, r3, #8
 8002242:	f003 0307 	and.w	r3, r3, #7
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	4603      	mov	r3, r0
 800225c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800225e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002262:	2b00      	cmp	r3, #0
 8002264:	db0b      	blt.n	800227e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002266:	79fb      	ldrb	r3, [r7, #7]
 8002268:	f003 021f 	and.w	r2, r3, #31
 800226c:	4907      	ldr	r1, [pc, #28]	; (800228c <__NVIC_EnableIRQ+0x38>)
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	2001      	movs	r0, #1
 8002276:	fa00 f202 	lsl.w	r2, r0, r2
 800227a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800227e:	bf00      	nop
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	e000e100 	.word	0xe000e100

08002290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002290:	b480      	push	{r7}
 8002292:	b083      	sub	sp, #12
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	6039      	str	r1, [r7, #0]
 800229a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800229c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	db0a      	blt.n	80022ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	490c      	ldr	r1, [pc, #48]	; (80022dc <__NVIC_SetPriority+0x4c>)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	0152      	lsls	r2, r2, #5
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	440b      	add	r3, r1
 80022b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022b8:	e00a      	b.n	80022d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	b2da      	uxtb	r2, r3
 80022be:	4908      	ldr	r1, [pc, #32]	; (80022e0 <__NVIC_SetPriority+0x50>)
 80022c0:	79fb      	ldrb	r3, [r7, #7]
 80022c2:	f003 030f 	and.w	r3, r3, #15
 80022c6:	3b04      	subs	r3, #4
 80022c8:	0152      	lsls	r2, r2, #5
 80022ca:	b2d2      	uxtb	r2, r2
 80022cc:	440b      	add	r3, r1
 80022ce:	761a      	strb	r2, [r3, #24]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr
 80022dc:	e000e100 	.word	0xe000e100
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b089      	sub	sp, #36	; 0x24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f1c3 0307 	rsb	r3, r3, #7
 80022fe:	2b03      	cmp	r3, #3
 8002300:	bf28      	it	cs
 8002302:	2303      	movcs	r3, #3
 8002304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3303      	adds	r3, #3
 800230a:	2b06      	cmp	r3, #6
 800230c:	d902      	bls.n	8002314 <NVIC_EncodePriority+0x30>
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	3b04      	subs	r3, #4
 8002312:	e000      	b.n	8002316 <NVIC_EncodePriority+0x32>
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	f04f 32ff 	mov.w	r2, #4294967295
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43da      	mvns	r2, r3
 8002324:	68bb      	ldr	r3, [r7, #8]
 8002326:	401a      	ands	r2, r3
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800232c:	f04f 31ff 	mov.w	r1, #4294967295
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	fa01 f303 	lsl.w	r3, r1, r3
 8002336:	43d9      	mvns	r1, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	4313      	orrs	r3, r2
         );
}
 800233e:	4618      	mov	r0, r3
 8002340:	3724      	adds	r7, #36	; 0x24
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr

0800234a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
 8002350:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f7ff ff4c 	bl	80021f0 <__NVIC_SetPriorityGrouping>
}
 8002358:	bf00      	nop
 800235a:	3708      	adds	r7, #8
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800236e:	f7ff ff63 	bl	8002238 <__NVIC_GetPriorityGrouping>
 8002372:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	68b9      	ldr	r1, [r7, #8]
 8002378:	6978      	ldr	r0, [r7, #20]
 800237a:	f7ff ffb3 	bl	80022e4 <NVIC_EncodePriority>
 800237e:	4602      	mov	r2, r0
 8002380:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002384:	4611      	mov	r1, r2
 8002386:	4618      	mov	r0, r3
 8002388:	f7ff ff82 	bl	8002290 <__NVIC_SetPriority>
}
 800238c:	bf00      	nop
 800238e:	3718      	adds	r7, #24
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}

08002394 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	4603      	mov	r3, r0
 800239c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800239e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff ff56 	bl	8002254 <__NVIC_EnableIRQ>
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b084      	sub	sp, #16
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e08d      	b.n	80024de <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	461a      	mov	r2, r3
 80023c8:	4b47      	ldr	r3, [pc, #284]	; (80024e8 <HAL_DMA_Init+0x138>)
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d80f      	bhi.n	80023ee <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	461a      	mov	r2, r3
 80023d4:	4b45      	ldr	r3, [pc, #276]	; (80024ec <HAL_DMA_Init+0x13c>)
 80023d6:	4413      	add	r3, r2
 80023d8:	4a45      	ldr	r2, [pc, #276]	; (80024f0 <HAL_DMA_Init+0x140>)
 80023da:	fba2 2303 	umull	r2, r3, r2, r3
 80023de:	091b      	lsrs	r3, r3, #4
 80023e0:	009a      	lsls	r2, r3, #2
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a42      	ldr	r2, [pc, #264]	; (80024f4 <HAL_DMA_Init+0x144>)
 80023ea:	649a      	str	r2, [r3, #72]	; 0x48
 80023ec:	e00e      	b.n	800240c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b40      	ldr	r3, [pc, #256]	; (80024f8 <HAL_DMA_Init+0x148>)
 80023f6:	4413      	add	r3, r2
 80023f8:	4a3d      	ldr	r2, [pc, #244]	; (80024f0 <HAL_DMA_Init+0x140>)
 80023fa:	fba2 2303 	umull	r2, r3, r2, r3
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	009a      	lsls	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4a3c      	ldr	r2, [pc, #240]	; (80024fc <HAL_DMA_Init+0x14c>)
 800240a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 8002422:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002426:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002430:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800243c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002448:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a1b      	ldr	r3, [r3, #32]
 800244e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002450:	68fa      	ldr	r2, [r7, #12]
 8002452:	4313      	orrs	r3, r2
 8002454:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f000 fa48 	bl	80028f4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800246c:	d102      	bne.n	8002474 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	2200      	movs	r2, #0
 8002472:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800247c:	b2d2      	uxtb	r2, r2
 800247e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002488:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d010      	beq.n	80024b4 <HAL_DMA_Init+0x104>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b04      	cmp	r3, #4
 8002498:	d80c      	bhi.n	80024b4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 fa68 	bl	8002970 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	e008      	b.n	80024c6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2200      	movs	r2, #0
 80024b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2200      	movs	r2, #0
 80024c4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40020407 	.word	0x40020407
 80024ec:	bffdfff8 	.word	0xbffdfff8
 80024f0:	cccccccd 	.word	0xcccccccd
 80024f4:	40020000 	.word	0x40020000
 80024f8:	bffdfbf8 	.word	0xbffdfbf8
 80024fc:	40020400 	.word	0x40020400

08002500 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002500:	b480      	push	{r7}
 8002502:	b085      	sub	sp, #20
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002508:	2300      	movs	r3, #0
 800250a:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002512:	b2db      	uxtb	r3, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d008      	beq.n	800252a <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2204      	movs	r2, #4
 800251c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e040      	b.n	80025ac <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 020e 	bic.w	r2, r2, #14
 8002538:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002544:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002548:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0201 	bic.w	r2, r2, #1
 8002558:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	f003 021c 	and.w	r2, r3, #28
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002566:	2101      	movs	r1, #1
 8002568:	fa01 f202 	lsl.w	r2, r1, r2
 800256c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002576:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00c      	beq.n	800259a <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800258e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8002598:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3714      	adds	r7, #20
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025c0:	2300      	movs	r3, #0
 80025c2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d005      	beq.n	80025dc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2204      	movs	r2, #4
 80025d4:	645a      	str	r2, [r3, #68]	; 0x44

    status = HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	73fb      	strb	r3, [r7, #15]
 80025da:	e047      	b.n	800266c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 020e 	bic.w	r2, r2, #14
 80025ea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f022 0201 	bic.w	r2, r2, #1
 80025fa:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800260a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002610:	f003 021c 	and.w	r2, r3, #28
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	2101      	movs	r1, #1
 800261a:	fa01 f202 	lsl.w	r2, r1, r2
 800261e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8002628:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00c      	beq.n	800264c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002640:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002646:	687a      	ldr	r2, [r7, #4]
 8002648:	6e52      	ldr	r2, [r2, #100]	; 0x64
 800264a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	4798      	blx	r3
    }
  }
  return status;
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b084      	sub	sp, #16
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	f003 031c 	and.w	r3, r3, #28
 8002696:	2204      	movs	r2, #4
 8002698:	409a      	lsls	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	4013      	ands	r3, r2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d053      	beq.n	800274a <HAL_DMA_IRQHandler+0xd4>
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d04e      	beq.n	800274a <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d024      	beq.n	8002704 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026be:	f003 021c 	and.w	r2, r3, #28
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c6:	2104      	movs	r1, #4
 80026c8:	fa01 f202 	lsl.w	r2, r1, r2
 80026cc:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d109      	bne.n	80026f0 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	f000 80c0 	beq.w	8002866 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80026ee:	e0ba      	b.n	8002866 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f000 80b6 	beq.w	8002866 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002702:	e0b0      	b.n	8002866 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d107      	bne.n	8002722 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 0204 	bic.w	r2, r2, #4
 8002720:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002726:	f003 021c 	and.w	r2, r3, #28
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800272e:	2104      	movs	r1, #4
 8002730:	fa01 f202 	lsl.w	r2, r1, r2
 8002734:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	2b00      	cmp	r3, #0
 800273c:	f000 8093 	beq.w	8002866 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002748:	e08d      	b.n	8002866 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800274e:	f003 031c 	and.w	r3, r3, #28
 8002752:	2202      	movs	r2, #2
 8002754:	409a      	lsls	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04e      	beq.n	80027fc <HAL_DMA_IRQHandler+0x186>
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d049      	beq.n	80027fc <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d018      	beq.n	80027a8 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d108      	bne.n	8002796 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002788:	2b00      	cmp	r3, #0
 800278a:	d06e      	beq.n	800286a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002790:	6878      	ldr	r0, [r7, #4]
 8002792:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002794:	e069      	b.n	800286a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	2b00      	cmp	r3, #0
 800279c:	d065      	beq.n	800286a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80027a6:	e060      	b.n	800286a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0320 	and.w	r3, r3, #32
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10b      	bne.n	80027ce <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 020a 	bic.w	r2, r2, #10
 80027c4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027d2:	f003 021c 	and.w	r2, r3, #28
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027da:	2102      	movs	r1, #2
 80027dc:	fa01 f202 	lsl.w	r2, r1, r2
 80027e0:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d03b      	beq.n	800286a <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 80027fa:	e036      	b.n	800286a <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002800:	f003 031c 	and.w	r3, r3, #28
 8002804:	2208      	movs	r2, #8
 8002806:	409a      	lsls	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d02e      	beq.n	800286e <HAL_DMA_IRQHandler+0x1f8>
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d029      	beq.n	800286e <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 020e 	bic.w	r2, r2, #14
 8002828:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282e:	f003 021c 	and.w	r2, r3, #28
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002836:	2101      	movs	r1, #1
 8002838:	fa01 f202 	lsl.w	r2, r1, r2
 800283c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002864:	e002      	b.n	800286c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 8002866:	bf00      	nop
 8002868:	e000      	b.n	800286c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 800286a:	bf00      	nop
  return;
 800286c:	bf00      	nop
 800286e:	bf00      	nop
}
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002876:	b480      	push	{r7}
 8002878:	b083      	sub	sp, #12
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002884:	b2db      	uxtb	r3, r3
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 8002892:	b480      	push	{r7}
 8002894:	b085      	sub	sp, #20
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
 800289a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289c:	2300      	movs	r3, #0
 800289e:	72fb      	strb	r3, [r7, #11]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d103      	bne.n	80028ae <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	72fb      	strb	r3, [r7, #11]
    return status;
 80028aa:	7afb      	ldrb	r3, [r7, #11]
 80028ac:	e01b      	b.n	80028e6 <HAL_DMA_ConfigChannelAttributes+0x54>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	60fb      	str	r3, [r7, #12]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f003 0310 	and.w	r3, r3, #16
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00d      	beq.n	80028dc <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d0:	60fb      	str	r3, [r7, #12]
 80028d2:	e003      	b.n	80028dc <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028da:	60fb      	str	r3, [r7, #12]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	601a      	str	r2, [r3, #0]

  return status;
 80028e4:	7afb      	ldrb	r3, [r7, #11]
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3714      	adds	r7, #20
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
	...

080028f4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	461a      	mov	r2, r3
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d80a      	bhi.n	800291e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290c:	089b      	lsrs	r3, r3, #2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002914:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6513      	str	r3, [r2, #80]	; 0x50
 800291c:	e007      	b.n	800292e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002922:	089b      	lsrs	r3, r3, #2
 8002924:	009a      	lsls	r2, r3, #2
 8002926:	4b0f      	ldr	r3, [pc, #60]	; (8002964 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8002928:	4413      	add	r3, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	b2db      	uxtb	r3, r3
 8002934:	3b08      	subs	r3, #8
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8002938:	fba2 2303 	umull	r2, r3, r2, r3
 800293c:	091b      	lsrs	r3, r3, #4
 800293e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	4a0a      	ldr	r2, [pc, #40]	; (800296c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002954:	bf00      	nop
 8002956:	3714      	adds	r7, #20
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr
 8002960:	40020407 	.word	0x40020407
 8002964:	40020820 	.word	0x40020820
 8002968:	cccccccd 	.word	0xcccccccd
 800296c:	40020880 	.word	0x40020880

08002970 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	b2db      	uxtb	r3, r3
 800297e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	461a      	mov	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a08      	ldr	r2, [pc, #32]	; (80029b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002992:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	3b01      	subs	r3, #1
 8002998:	f003 0303 	and.w	r3, r3, #3
 800299c:	2201      	movs	r2, #1
 800299e:	409a      	lsls	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	1000823f 	.word	0x1000823f
 80029b4:	40020940 	.word	0x40020940

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80029c6:	e158      	b.n	8002c7a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	fa01 f303 	lsl.w	r3, r1, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 814a 	beq.w	8002c74 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f003 0303 	and.w	r3, r3, #3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d005      	beq.n	80029f8 <HAL_GPIO_Init+0x40>
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0303 	and.w	r3, r3, #3
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d130      	bne.n	8002a5a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	2203      	movs	r2, #3
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	43db      	mvns	r3, r3
 8002a0a:	693a      	ldr	r2, [r7, #16]
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	68da      	ldr	r2, [r3, #12]
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	693a      	ldr	r2, [r7, #16]
 8002a26:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a2e:	2201      	movs	r2, #1
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43db      	mvns	r3, r3
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	091b      	lsrs	r3, r3, #4
 8002a44:	f003 0201 	and.w	r2, r3, #1
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	693a      	ldr	r2, [r7, #16]
 8002a58:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0303 	and.w	r3, r3, #3
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d017      	beq.n	8002a96 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	005b      	lsls	r3, r3, #1
 8002a70:	2203      	movs	r2, #3
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	689a      	ldr	r2, [r3, #8]
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	693a      	ldr	r2, [r7, #16]
 8002a94:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d123      	bne.n	8002aea <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	08da      	lsrs	r2, r3, #3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	3208      	adds	r2, #8
 8002aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aae:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	f003 0307 	and.w	r3, r3, #7
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	220f      	movs	r2, #15
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	693a      	ldr	r2, [r7, #16]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002adc:	697b      	ldr	r3, [r7, #20]
 8002ade:	08da      	lsrs	r2, r3, #3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3208      	adds	r2, #8
 8002ae4:	6939      	ldr	r1, [r7, #16]
 8002ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	2203      	movs	r2, #3
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	43db      	mvns	r3, r3
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	4013      	ands	r3, r2
 8002b00:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0203 	and.w	r2, r3, #3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	005b      	lsls	r3, r3, #1
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	693a      	ldr	r2, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f000 80a4 	beq.w	8002c74 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002b2c:	4a5a      	ldr	r2, [pc, #360]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	089b      	lsrs	r3, r3, #2
 8002b32:	3318      	adds	r3, #24
 8002b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b38:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_GPIO_Init+0x2e4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d025      	beq.n	8002ba4 <HAL_GPIO_Init+0x1ec>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a51      	ldr	r2, [pc, #324]	; (8002ca0 <HAL_GPIO_Init+0x2e8>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d01f      	beq.n	8002ba0 <HAL_GPIO_Init+0x1e8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a50      	ldr	r2, [pc, #320]	; (8002ca4 <HAL_GPIO_Init+0x2ec>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d019      	beq.n	8002b9c <HAL_GPIO_Init+0x1e4>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a4f      	ldr	r2, [pc, #316]	; (8002ca8 <HAL_GPIO_Init+0x2f0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d013      	beq.n	8002b98 <HAL_GPIO_Init+0x1e0>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a4e      	ldr	r2, [pc, #312]	; (8002cac <HAL_GPIO_Init+0x2f4>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00d      	beq.n	8002b94 <HAL_GPIO_Init+0x1dc>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a4d      	ldr	r2, [pc, #308]	; (8002cb0 <HAL_GPIO_Init+0x2f8>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <HAL_GPIO_Init+0x1d8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a4c      	ldr	r2, [pc, #304]	; (8002cb4 <HAL_GPIO_Init+0x2fc>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_GPIO_Init+0x1d4>
 8002b88:	2306      	movs	r3, #6
 8002b8a:	e00c      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002b8c:	2307      	movs	r3, #7
 8002b8e:	e00a      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002b90:	2305      	movs	r3, #5
 8002b92:	e008      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002b94:	2304      	movs	r3, #4
 8002b96:	e006      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e004      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	e002      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e000      	b.n	8002ba6 <HAL_GPIO_Init+0x1ee>
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	f002 0203 	and.w	r2, r2, #3
 8002bac:	00d2      	lsls	r2, r2, #3
 8002bae:	4093      	lsls	r3, r2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002bb6:	4938      	ldr	r1, [pc, #224]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	089b      	lsrs	r3, r3, #2
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	693a      	ldr	r2, [r7, #16]
 8002bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bc4:	4b34      	ldr	r3, [pc, #208]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d003      	beq.n	8002be8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002be0:	693a      	ldr	r2, [r7, #16]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002be8:	4a2b      	ldr	r2, [pc, #172]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002bee:	4b2a      	ldr	r3, [pc, #168]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c12:	4a21      	ldr	r2, [pc, #132]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c18:	4b1f      	ldr	r3, [pc, #124]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	4013      	ands	r3, r2
 8002c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c3e:	4a16      	ldr	r2, [pc, #88]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8002c46:	4b14      	ldr	r3, [pc, #80]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_GPIO_Init+0x2e0>)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	3301      	adds	r3, #1
 8002c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa22 f303 	lsr.w	r3, r2, r3
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	f47f ae9f 	bne.w	80029c8 <HAL_GPIO_Init+0x10>
  }
}
 8002c8a:	bf00      	nop
 8002c8c:	bf00      	nop
 8002c8e:	371c      	adds	r7, #28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr
 8002c98:	4002f400 	.word	0x4002f400
 8002c9c:	42020000 	.word	0x42020000
 8002ca0:	42020400 	.word	0x42020400
 8002ca4:	42020800 	.word	0x42020800
 8002ca8:	42020c00 	.word	0x42020c00
 8002cac:	42021000 	.word	0x42021000
 8002cb0:	42021400 	.word	0x42021400
 8002cb4:	42021800 	.word	0x42021800

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cd4:	e002      	b.n	8002cdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cd6:	887a      	ldrh	r2, [r7, #2]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e081      	b.n	8002dfe <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f7fe fcd4 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2224      	movs	r2, #36	; 0x24
 8002d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0201 	bic.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d107      	bne.n	8002d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d5e:	609a      	str	r2, [r3, #8]
 8002d60:	e006      	b.n	8002d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d104      	bne.n	8002d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691a      	ldr	r2, [r3, #16]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	695b      	ldr	r3, [r3, #20]
 8002dae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	69d9      	ldr	r1, [r3, #28]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1a      	ldr	r2, [r3, #32]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2220      	movs	r2, #32
 8002dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3708      	adds	r7, #8
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b088      	sub	sp, #32
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	607a      	str	r2, [r7, #4]
 8002e12:	461a      	mov	r2, r3
 8002e14:	460b      	mov	r3, r1
 8002e16:	817b      	strh	r3, [r7, #10]
 8002e18:	4613      	mov	r3, r2
 8002e1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b20      	cmp	r3, #32
 8002e26:	f040 80da 	bne.w	8002fde <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e30:	2b01      	cmp	r3, #1
 8002e32:	d101      	bne.n	8002e38 <HAL_I2C_Master_Transmit+0x30>
 8002e34:	2302      	movs	r3, #2
 8002e36:	e0d3      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e40:	f7ff f9a6 	bl	8002190 <HAL_GetTick>
 8002e44:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	2319      	movs	r3, #25
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002e52:	68f8      	ldr	r0, [r7, #12]
 8002e54:	f000 ff03 	bl	8003c5e <I2C_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e0be      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2221      	movs	r2, #33	; 0x21
 8002e66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2210      	movs	r2, #16
 8002e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	893a      	ldrh	r2, [r7, #8]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2bff      	cmp	r3, #255	; 0xff
 8002e92:	d90e      	bls.n	8002eb2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9e:	b2da      	uxtb	r2, r3
 8002ea0:	8979      	ldrh	r1, [r7, #10]
 8002ea2:	4b51      	ldr	r3, [pc, #324]	; (8002fe8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f001 f912 	bl	80040d4 <I2C_TransferConfig>
 8002eb0:	e06c      	b.n	8002f8c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eb6:	b29a      	uxth	r2, r3
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ec0:	b2da      	uxtb	r2, r3
 8002ec2:	8979      	ldrh	r1, [r7, #10]
 8002ec4:	4b48      	ldr	r3, [pc, #288]	; (8002fe8 <HAL_I2C_Master_Transmit+0x1e0>)
 8002ec6:	9300      	str	r3, [sp, #0]
 8002ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f001 f901 	bl	80040d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002ed2:	e05b      	b.n	8002f8c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed4:	697a      	ldr	r2, [r7, #20]
 8002ed6:	6a39      	ldr	r1, [r7, #32]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f000 ff0f 	bl	8003cfc <I2C_WaitOnTXISFlagUntilTimeout>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e07b      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d034      	beq.n	8002f8c <HAL_I2C_Master_Transmit+0x184>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d130      	bne.n	8002f8c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	2200      	movs	r2, #0
 8002f32:	2180      	movs	r1, #128	; 0x80
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 fe92 	bl	8003c5e <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d001      	beq.n	8002f44 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e04d      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	2bff      	cmp	r3, #255	; 0xff
 8002f4c:	d90e      	bls.n	8002f6c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	22ff      	movs	r2, #255	; 0xff
 8002f52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	8979      	ldrh	r1, [r7, #10]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f001 f8b5 	bl	80040d4 <I2C_TransferConfig>
 8002f6a:	e00f      	b.n	8002f8c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f70:	b29a      	uxth	r2, r3
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	8979      	ldrh	r1, [r7, #10]
 8002f7e:	2300      	movs	r3, #0
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f001 f8a4 	bl	80040d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d19e      	bne.n	8002ed4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	6a39      	ldr	r1, [r7, #32]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 fef5 	bl	8003d8a <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e01a      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_I2C_Master_Transmit+0x1e4>)
 8002fbe:	400b      	ands	r3, r1
 8002fc0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	e000      	b.n	8002fe0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002fde:	2302      	movs	r3, #2
  }
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3718      	adds	r7, #24
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	80002000 	.word	0x80002000
 8002fec:	fe00e800 	.word	0xfe00e800

08002ff0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b088      	sub	sp, #32
 8002ff4:	af02      	add	r7, sp, #8
 8002ff6:	60f8      	str	r0, [r7, #12]
 8002ff8:	607a      	str	r2, [r7, #4]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	817b      	strh	r3, [r7, #10]
 8003000:	4613      	mov	r3, r2
 8003002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b20      	cmp	r3, #32
 800300e:	f040 80db 	bne.w	80031c8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_I2C_Master_Receive+0x30>
 800301c:	2302      	movs	r3, #2
 800301e:	e0d4      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003028:	f7ff f8b2 	bl	8002190 <HAL_GetTick>
 800302c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	9300      	str	r3, [sp, #0]
 8003032:	2319      	movs	r3, #25
 8003034:	2201      	movs	r2, #1
 8003036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fe0f 	bl	8003c5e <I2C_WaitOnFlagUntilTimeout>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0bf      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2222      	movs	r2, #34	; 0x22
 800304e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2210      	movs	r2, #16
 8003056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	893a      	ldrh	r2, [r7, #8]
 800306a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003076:	b29b      	uxth	r3, r3
 8003078:	2bff      	cmp	r3, #255	; 0xff
 800307a:	d90e      	bls.n	800309a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	22ff      	movs	r2, #255	; 0xff
 8003080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003086:	b2da      	uxtb	r2, r3
 8003088:	8979      	ldrh	r1, [r7, #10]
 800308a:	4b52      	ldr	r3, [pc, #328]	; (80031d4 <HAL_I2C_Master_Receive+0x1e4>)
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f001 f81e 	bl	80040d4 <I2C_TransferConfig>
 8003098:	e06d      	b.n	8003176 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800309e:	b29a      	uxth	r2, r3
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	8979      	ldrh	r1, [r7, #10]
 80030ac:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <HAL_I2C_Master_Receive+0x1e4>)
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f001 f80d 	bl	80040d4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80030ba:	e05c      	b.n	8003176 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6a39      	ldr	r1, [r7, #32]
 80030c0:	68f8      	ldr	r0, [r7, #12]
 80030c2:	f000 fea5 	bl	8003e10 <I2C_WaitOnRXNEFlagUntilTimeout>
 80030c6:	4603      	mov	r3, r0
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d001      	beq.n	80030d0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e07c      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	b2d2      	uxtb	r2, r2
 80030dc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e2:	1c5a      	adds	r2, r3, #1
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030ec:	3b01      	subs	r3, #1
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d034      	beq.n	8003176 <HAL_I2C_Master_Receive+0x186>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003110:	2b00      	cmp	r3, #0
 8003112:	d130      	bne.n	8003176 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	2200      	movs	r2, #0
 800311c:	2180      	movs	r1, #128	; 0x80
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f000 fd9d 	bl	8003c5e <I2C_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e04d      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003132:	b29b      	uxth	r3, r3
 8003134:	2bff      	cmp	r3, #255	; 0xff
 8003136:	d90e      	bls.n	8003156 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	22ff      	movs	r2, #255	; 0xff
 800313c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003142:	b2da      	uxtb	r2, r3
 8003144:	8979      	ldrh	r1, [r7, #10]
 8003146:	2300      	movs	r3, #0
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 ffc0 	bl	80040d4 <I2C_TransferConfig>
 8003154:	e00f      	b.n	8003176 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800315a:	b29a      	uxth	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003164:	b2da      	uxtb	r2, r3
 8003166:	8979      	ldrh	r1, [r7, #10]
 8003168:	2300      	movs	r3, #0
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 ffaf 	bl	80040d4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d19d      	bne.n	80030bc <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003180:	697a      	ldr	r2, [r7, #20]
 8003182:	6a39      	ldr	r1, [r7, #32]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 fe00 	bl	8003d8a <I2C_WaitOnSTOPFlagUntilTimeout>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e01a      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2220      	movs	r2, #32
 800319a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	6859      	ldr	r1, [r3, #4]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_I2C_Master_Receive+0x1e8>)
 80031a8:	400b      	ands	r3, r1
 80031aa:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80031c4:	2300      	movs	r3, #0
 80031c6:	e000      	b.n	80031ca <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80031c8:	2302      	movs	r3, #2
  }
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	80002400 	.word	0x80002400
 80031d8:	fe00e800 	.word	0xfe00e800

080031dc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699b      	ldr	r3, [r3, #24]
 80031ea:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d005      	beq.n	8003208 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	68f9      	ldr	r1, [r7, #12]
 8003204:	6878      	ldr	r0, [r7, #4]
 8003206:	4798      	blx	r3
  }
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	699b      	ldr	r3, [r3, #24]
 800321e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00f      	beq.n	8003252 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003250:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00f      	beq.n	800327c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800326a:	f043 0208 	orr.w	r2, r3, #8
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800327a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00f      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003294:	f043 0202 	orr.w	r2, r3, #2
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 030b 	and.w	r3, r3, #11
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80032b6:	68f9      	ldr	r1, [r7, #12]
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fb77 	bl	80039ac <I2C_ITError>
  }
}
 80032be:	bf00      	nop
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}

080032c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032c6:	b480      	push	{r7}
 80032c8:	b083      	sub	sp, #12
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80032ce:	bf00      	nop
 80032d0:	370c      	adds	r7, #12
 80032d2:	46bd      	mov	sp, r7
 80032d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d8:	4770      	bx	lr

080032da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032da:	b480      	push	{r7}
 80032dc:	b083      	sub	sp, #12
 80032de:	af00      	add	r7, sp, #0
 80032e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80032e2:	bf00      	nop
 80032e4:	370c      	adds	r7, #12
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr

080032ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80032ee:	b480      	push	{r7}
 80032f0:	b083      	sub	sp, #12
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	460b      	mov	r3, r1
 80032f8:	70fb      	strb	r3, [r7, #3]
 80032fa:	4613      	mov	r3, r2
 80032fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80032fe:	bf00      	nop
 8003300:	370c      	adds	r7, #12
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr

0800330a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800330a:	b480      	push	{r7}
 800330c:	b083      	sub	sp, #12
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003312:	bf00      	nop
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003326:	bf00      	nop
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003332:	b480      	push	{r7}
 8003334:	b083      	sub	sp, #12
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b086      	sub	sp, #24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003356:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <I2C_Slave_ISR_IT+0x24>
 8003366:	2302      	movs	r3, #2
 8003368:	e0e1      	b.n	800352e <I2C_Slave_ISR_IT+0x1e8>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003382:	2b00      	cmp	r3, #0
 8003384:	d003      	beq.n	800338e <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003386:	6939      	ldr	r1, [r7, #16]
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f000 f9b5 	bl	80036f8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d04b      	beq.n	8003430 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d046      	beq.n	8003430 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d128      	bne.n	80033fe <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b28      	cmp	r3, #40	; 0x28
 80033b6:	d108      	bne.n	80033ca <I2C_Slave_ISR_IT+0x84>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80033be:	d104      	bne.n	80033ca <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80033c0:	6939      	ldr	r1, [r7, #16]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 fa9e 	bl	8003904 <I2C_ITListenCplt>
 80033c8:	e031      	b.n	800342e <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b29      	cmp	r3, #41	; 0x29
 80033d4:	d10e      	bne.n	80033f4 <I2C_Slave_ISR_IT+0xae>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033dc:	d00a      	beq.n	80033f4 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2210      	movs	r2, #16
 80033e4:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fbf7 	bl	8003bda <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f926 	bl	800363e <I2C_ITSlaveSeqCplt>
 80033f2:	e01c      	b.n	800342e <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2210      	movs	r2, #16
 80033fa:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80033fc:	e08f      	b.n	800351e <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2210      	movs	r2, #16
 8003404:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340a:	f043 0204 	orr.w	r2, r3, #4
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <I2C_Slave_ISR_IT+0xda>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800341e:	d17e      	bne.n	800351e <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003424:	4619      	mov	r1, r3
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fac0 	bl	80039ac <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800342c:	e077      	b.n	800351e <I2C_Slave_ISR_IT+0x1d8>
 800342e:	e076      	b.n	800351e <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f003 0304 	and.w	r3, r3, #4
 8003436:	2b00      	cmp	r3, #0
 8003438:	d02f      	beq.n	800349a <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003440:	2b00      	cmp	r3, #0
 8003442:	d02a      	beq.n	800349a <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d018      	beq.n	8003480 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003458:	b2d2      	uxtb	r2, r2
 800345a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003460:	1c5a      	adds	r2, r3, #1
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003476:	b29b      	uxth	r3, r3
 8003478:	3b01      	subs	r3, #1
 800347a:	b29a      	uxth	r2, r3
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003484:	b29b      	uxth	r3, r3
 8003486:	2b00      	cmp	r3, #0
 8003488:	d14b      	bne.n	8003522 <I2C_Slave_ISR_IT+0x1dc>
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003490:	d047      	beq.n	8003522 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 f8d3 	bl	800363e <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003498:	e043      	b.n	8003522 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d004      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80034ae:	6939      	ldr	r1, [r7, #16]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f840 	bl	8003536 <I2C_ITAddrCplt>
 80034b6:	e035      	b.n	8003524 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d030      	beq.n	8003524 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d02b      	beq.n	8003524 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d018      	beq.n	8003508 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034da:	781a      	ldrb	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	1c5a      	adds	r2, r3, #1
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034f0:	b29b      	uxth	r3, r3
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	3b01      	subs	r3, #1
 8003500:	b29a      	uxth	r2, r3
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	851a      	strh	r2, [r3, #40]	; 0x28
 8003506:	e00d      	b.n	8003524 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800350e:	d002      	beq.n	8003516 <I2C_Slave_ISR_IT+0x1d0>
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 f891 	bl	800363e <I2C_ITSlaveSeqCplt>
 800351c:	e002      	b.n	8003524 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003522:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3718      	adds	r7, #24
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}

08003536 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003536:	b580      	push	{r7, lr}
 8003538:	b084      	sub	sp, #16
 800353a:	af00      	add	r7, sp, #0
 800353c:	6078      	str	r0, [r7, #4]
 800353e:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800354c:	2b28      	cmp	r3, #40	; 0x28
 800354e:	d16a      	bne.n	8003626 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	699b      	ldr	r3, [r3, #24]
 8003556:	0c1b      	lsrs	r3, r3, #16
 8003558:	b2db      	uxtb	r3, r3
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	0c1b      	lsrs	r3, r3, #16
 8003568:	b29b      	uxth	r3, r3
 800356a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800356e:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	b29b      	uxth	r3, r3
 8003578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800357c:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	b29b      	uxth	r3, r3
 8003586:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800358a:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	2b02      	cmp	r3, #2
 8003592:	d138      	bne.n	8003606 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003594:	897b      	ldrh	r3, [r7, #10]
 8003596:	09db      	lsrs	r3, r3, #7
 8003598:	b29a      	uxth	r2, r3
 800359a:	89bb      	ldrh	r3, [r7, #12]
 800359c:	4053      	eors	r3, r2
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f003 0306 	and.w	r3, r3, #6
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d11c      	bne.n	80035e2 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035a8:	897b      	ldrh	r3, [r7, #10]
 80035aa:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035b0:	1c5a      	adds	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ba:	2b02      	cmp	r3, #2
 80035bc:	d13b      	bne.n	8003636 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2208      	movs	r2, #8
 80035ca:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035d4:	89ba      	ldrh	r2, [r7, #12]
 80035d6:	7bfb      	ldrb	r3, [r7, #15]
 80035d8:	4619      	mov	r1, r3
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f7ff fe87 	bl	80032ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80035e0:	e029      	b.n	8003636 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80035e2:	893b      	ldrh	r3, [r7, #8]
 80035e4:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80035e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 fda4 	bl	8004138 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035f8:	89ba      	ldrh	r2, [r7, #12]
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	4619      	mov	r1, r3
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff fe75 	bl	80032ee <HAL_I2C_AddrCallback>
}
 8003604:	e017      	b.n	8003636 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003606:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fd94 	bl	8004138 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003618:	89ba      	ldrh	r2, [r7, #12]
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	4619      	mov	r1, r3
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe65 	bl	80032ee <HAL_I2C_AddrCallback>
}
 8003624:	e007      	b.n	8003636 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2208      	movs	r2, #8
 800362c:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	e00c      	b.n	800368c <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368a:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b29      	cmp	r3, #41	; 0x29
 8003696:	d112      	bne.n	80036be <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2228      	movs	r2, #40	; 0x28
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2221      	movs	r2, #33	; 0x21
 80036a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036a6:	2101      	movs	r1, #1
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 fd45 	bl	8004138 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f7ff fe05 	bl	80032c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80036bc:	e017      	b.n	80036ee <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c4:	b2db      	uxtb	r3, r3
 80036c6:	2b2a      	cmp	r3, #42	; 0x2a
 80036c8:	d111      	bne.n	80036ee <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2228      	movs	r2, #40	; 0x28
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2222      	movs	r2, #34	; 0x22
 80036d6:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036d8:	2102      	movs	r1, #2
 80036da:	6878      	ldr	r0, [r7, #4]
 80036dc:	f000 fd2c 	bl	8004138 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f7ff fdf6 	bl	80032da <HAL_I2C_SlaveRxCpltCallback>
}
 80036ee:	bf00      	nop
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003714:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2220      	movs	r2, #32
 800371c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800371e:	7bfb      	ldrb	r3, [r7, #15]
 8003720:	2b21      	cmp	r3, #33	; 0x21
 8003722:	d002      	beq.n	800372a <I2C_ITSlaveCplt+0x32>
 8003724:	7bfb      	ldrb	r3, [r7, #15]
 8003726:	2b29      	cmp	r3, #41	; 0x29
 8003728:	d108      	bne.n	800373c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800372a:	f248 0101 	movw	r1, #32769	; 0x8001
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f000 fd02 	bl	8004138 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2221      	movs	r2, #33	; 0x21
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
 800373a:	e00d      	b.n	8003758 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	2b22      	cmp	r3, #34	; 0x22
 8003740:	d002      	beq.n	8003748 <I2C_ITSlaveCplt+0x50>
 8003742:	7bfb      	ldrb	r3, [r7, #15]
 8003744:	2b2a      	cmp	r3, #42	; 0x2a
 8003746:	d107      	bne.n	8003758 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003748:	f248 0102 	movw	r1, #32770	; 0x8002
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f000 fcf3 	bl	8004138 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2222      	movs	r2, #34	; 0x22
 8003756:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	685a      	ldr	r2, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003766:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6859      	ldr	r1, [r3, #4]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	4b62      	ldr	r3, [pc, #392]	; (80038fc <I2C_ITSlaveCplt+0x204>)
 8003774:	400b      	ands	r3, r1
 8003776:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 fa2e 	bl	8003bda <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003796:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01f      	beq.n	80037e0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80037ae:	e017      	b.n	80037e0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d012      	beq.n	80037e0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681a      	ldr	r2, [r3, #0]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d006      	beq.n	80037e0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	b29a      	uxth	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d020      	beq.n	800382c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	b2d2      	uxtb	r2, r2
 80037fe:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	1c5a      	adds	r2, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d005      	beq.n	8003842 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	f043 0204 	orr.w	r2, r3, #4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2200      	movs	r2, #0
 800384e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003854:	2b00      	cmp	r3, #0
 8003856:	d010      	beq.n	800387a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f8a4 	bl	80039ac <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b28      	cmp	r3, #40	; 0x28
 800386e:	d141      	bne.n	80038f4 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003870:	6979      	ldr	r1, [r7, #20]
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f846 	bl	8003904 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003878:	e03c      	b.n	80038f4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003882:	d014      	beq.n	80038ae <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f7ff feda 	bl	800363e <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a1c      	ldr	r2, [pc, #112]	; (8003900 <I2C_ITSlaveCplt+0x208>)
 800388e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2220      	movs	r2, #32
 8003894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2200      	movs	r2, #0
 80038a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff fd2f 	bl	800330a <HAL_I2C_ListenCpltCallback>
}
 80038ac:	e022      	b.n	80038f4 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b22      	cmp	r3, #34	; 0x22
 80038b8:	d10e      	bne.n	80038d8 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fd02 	bl	80032da <HAL_I2C_SlaveRxCpltCallback>
}
 80038d6:	e00d      	b.n	80038f4 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff fce9 	bl	80032c6 <HAL_I2C_SlaveTxCpltCallback>
}
 80038f4:	bf00      	nop
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	fe00e800 	.word	0xfe00e800
 8003900:	ffff0000 	.word	0xffff0000

08003904 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a25      	ldr	r2, [pc, #148]	; (80039a8 <I2C_ITListenCplt+0xa4>)
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f003 0304 	and.w	r3, r3, #4
 8003936:	2b00      	cmp	r3, #0
 8003938:	d022      	beq.n	8003980 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	b2d2      	uxtb	r2, r2
 8003946:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003956:	2b00      	cmp	r3, #0
 8003958:	d012      	beq.n	8003980 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800395e:	3b01      	subs	r3, #1
 8003960:	b29a      	uxth	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f043 0204 	orr.w	r2, r3, #4
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003980:	f248 0103 	movw	r1, #32771	; 0x8003
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fbd7 	bl	8004138 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	2210      	movs	r2, #16
 8003990:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff fcb5 	bl	800330a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	ffff0000 	.word	0xffff0000

080039ac <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a6d      	ldr	r2, [pc, #436]	; (8003b80 <I2C_ITError+0x1d4>)
 80039ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80039de:	7bfb      	ldrb	r3, [r7, #15]
 80039e0:	2b28      	cmp	r3, #40	; 0x28
 80039e2:	d005      	beq.n	80039f0 <I2C_ITError+0x44>
 80039e4:	7bfb      	ldrb	r3, [r7, #15]
 80039e6:	2b29      	cmp	r3, #41	; 0x29
 80039e8:	d002      	beq.n	80039f0 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
 80039ec:	2b2a      	cmp	r3, #42	; 0x2a
 80039ee:	d10b      	bne.n	8003a08 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039f0:	2103      	movs	r1, #3
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 fba0 	bl	8004138 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2228      	movs	r2, #40	; 0x28
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a60      	ldr	r2, [pc, #384]	; (8003b84 <I2C_ITError+0x1d8>)
 8003a04:	635a      	str	r2, [r3, #52]	; 0x34
 8003a06:	e030      	b.n	8003a6a <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a08:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f000 fb93 	bl	8004138 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f000 f8e1 	bl	8003bda <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b60      	cmp	r3, #96	; 0x60
 8003a22:	d01f      	beq.n	8003a64 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d114      	bne.n	8003a64 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d109      	bne.n	8003a5c <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2210      	movs	r2, #16
 8003a4e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f043 0204 	orr.w	r2, r3, #4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	2220      	movs	r2, #32
 8003a62:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6e:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d039      	beq.n	8003aec <I2C_ITError+0x140>
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b11      	cmp	r3, #17
 8003a7c:	d002      	beq.n	8003a84 <I2C_ITError+0xd8>
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b21      	cmp	r3, #33	; 0x21
 8003a82:	d133      	bne.n	8003aec <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a92:	d107      	bne.n	8003aa4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7fe fee4 	bl	8002876 <HAL_DMA_GetState>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b01      	cmp	r3, #1
 8003ab2:	d017      	beq.n	8003ae4 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab8:	4a33      	ldr	r2, [pc, #204]	; (8003b88 <I2C_ITError+0x1dc>)
 8003aba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fd75 	bl	80025b8 <HAL_DMA_Abort_IT>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d04d      	beq.n	8003b70 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ade:	4610      	mov	r0, r2
 8003ae0:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ae2:	e045      	b.n	8003b70 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ae4:	6878      	ldr	r0, [r7, #4]
 8003ae6:	f000 f851 	bl	8003b8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003aea:	e041      	b.n	8003b70 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d039      	beq.n	8003b68 <I2C_ITError+0x1bc>
 8003af4:	68bb      	ldr	r3, [r7, #8]
 8003af6:	2b12      	cmp	r3, #18
 8003af8:	d002      	beq.n	8003b00 <I2C_ITError+0x154>
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	2b22      	cmp	r3, #34	; 0x22
 8003afe:	d133      	bne.n	8003b68 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b0e:	d107      	bne.n	8003b20 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b1e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fe fea6 	bl	8002876 <HAL_DMA_GetState>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d017      	beq.n	8003b60 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <I2C_ITError+0x1dc>)
 8003b36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fd37 	bl	80025b8 <HAL_DMA_Abort_IT>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d011      	beq.n	8003b74 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003b5a:	4610      	mov	r0, r2
 8003b5c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b5e:	e009      	b.n	8003b74 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f813 	bl	8003b8c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b66:	e005      	b.n	8003b74 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 f80f 	bl	8003b8c <I2C_TreatErrorCallback>
  }
}
 8003b6e:	e002      	b.n	8003b76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b70:	bf00      	nop
 8003b72:	e000      	b.n	8003b76 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b74:	bf00      	nop
}
 8003b76:	bf00      	nop
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}
 8003b7e:	bf00      	nop
 8003b80:	ffff0000 	.word	0xffff0000
 8003b84:	08003347 	.word	0x08003347
 8003b88:	08003c23 	.word	0x08003c23

08003b8c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b60      	cmp	r3, #96	; 0x60
 8003b9e:	d10e      	bne.n	8003bbe <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff fbbb 	bl	8003332 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bbc:	e009      	b.n	8003bd2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f7ff fba6 	bl	800331e <HAL_I2C_ErrorCallback>
}
 8003bd2:	bf00      	nop
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d103      	bne.n	8003bf8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d007      	beq.n	8003c16 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	699a      	ldr	r2, [r3, #24]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 0201 	orr.w	r2, r2, #1
 8003c14:	619a      	str	r2, [r3, #24]
  }
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr

08003c22 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b084      	sub	sp, #16
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	641a      	str	r2, [r3, #64]	; 0x40
  }
  if (hi2c->hdmarx != NULL)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  I2C_TreatErrorCallback(hi2c);
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	f7ff ff9b 	bl	8003b8c <I2C_TreatErrorCallback>
}
 8003c56:	bf00      	nop
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b084      	sub	sp, #16
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	60f8      	str	r0, [r7, #12]
 8003c66:	60b9      	str	r1, [r7, #8]
 8003c68:	603b      	str	r3, [r7, #0]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c6e:	e031      	b.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d02d      	beq.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c78:	f7fe fa8a 	bl	8002190 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d302      	bcc.n	8003c8e <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d122      	bne.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	699a      	ldr	r2, [r3, #24]
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4013      	ands	r3, r2
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	429a      	cmp	r2, r3
 8003c9c:	bf0c      	ite	eq
 8003c9e:	2301      	moveq	r3, #1
 8003ca0:	2300      	movne	r3, #0
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d113      	bne.n	8003cd4 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb0:	f043 0220 	orr.w	r2, r3, #32
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e00f      	b.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699a      	ldr	r2, [r3, #24]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d0be      	beq.n	8003c70 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d08:	e033      	b.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f900 	bl	8003f14 <I2C_IsErrorOccurred>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e031      	b.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d24:	d025      	beq.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d26:	f7fe fa33 	bl	8002190 <HAL_GetTick>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d302      	bcc.n	8003d3c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d11a      	bne.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d013      	beq.n	8003d72 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2220      	movs	r2, #32
 8003d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e007      	b.n	8003d82 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d1c4      	bne.n	8003d0a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}

08003d8a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d8a:	b580      	push	{r7, lr}
 8003d8c:	b084      	sub	sp, #16
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	60f8      	str	r0, [r7, #12]
 8003d92:	60b9      	str	r1, [r7, #8]
 8003d94:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d96:	e02f      	b.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	68b9      	ldr	r1, [r7, #8]
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f000 f8b9 	bl	8003f14 <I2C_IsErrorOccurred>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d001      	beq.n	8003dac <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e02d      	b.n	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dac:	f7fe f9f0 	bl	8002190 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d302      	bcc.n	8003dc2 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d11a      	bne.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	f003 0320 	and.w	r3, r3, #32
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d013      	beq.n	8003df8 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd4:	f043 0220 	orr.w	r2, r3, #32
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e007      	b.n	8003e08 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	f003 0320 	and.w	r3, r3, #32
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d1c8      	bne.n	8003d98 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	3710      	adds	r7, #16
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	bd80      	pop	{r7, pc}

08003e10 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e1c:	e06b      	b.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	68b9      	ldr	r1, [r7, #8]
 8003e22:	68f8      	ldr	r0, [r7, #12]
 8003e24:	f000 f876 	bl	8003f14 <I2C_IsErrorOccurred>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e069      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b20      	cmp	r3, #32
 8003e3e:	d138      	bne.n	8003eb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b04      	cmp	r3, #4
 8003e4c:	d105      	bne.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	e055      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	f003 0310 	and.w	r3, r3, #16
 8003e64:	2b10      	cmp	r3, #16
 8003e66:	d107      	bne.n	8003e78 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2210      	movs	r2, #16
 8003e6e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2204      	movs	r2, #4
 8003e74:	645a      	str	r2, [r3, #68]	; 0x44
 8003e76:	e002      	b.n	8003e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2220      	movs	r2, #32
 8003e84:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	6859      	ldr	r1, [r3, #4]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4b1f      	ldr	r3, [pc, #124]	; (8003f10 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8003e92:	400b      	ands	r3, r1
 8003e94:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e029      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eb2:	f7fe f96d 	bl	8002190 <HAL_GetTick>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1ad3      	subs	r3, r2, r3
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	429a      	cmp	r2, r3
 8003ec0:	d302      	bcc.n	8003ec8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d116      	bne.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	f003 0304 	and.w	r3, r3, #4
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d00f      	beq.n	8003ef6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eda:	f043 0220 	orr.w	r2, r3, #32
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e007      	b.n	8003f06 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	699b      	ldr	r3, [r3, #24]
 8003efc:	f003 0304 	and.w	r3, r3, #4
 8003f00:	2b04      	cmp	r3, #4
 8003f02:	d18c      	bne.n	8003e1e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f04:	2300      	movs	r3, #0
}
 8003f06:	4618      	mov	r0, r3
 8003f08:	3710      	adds	r7, #16
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	fe00e800 	.word	0xfe00e800

08003f14 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	699b      	ldr	r3, [r3, #24]
 8003f2c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	f003 0310 	and.w	r3, r3, #16
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d068      	beq.n	8004012 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2210      	movs	r2, #16
 8003f46:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f48:	e049      	b.n	8003fde <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d045      	beq.n	8003fde <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f52:	f7fe f91d 	bl	8002190 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d302      	bcc.n	8003f68 <I2C_IsErrorOccurred+0x54>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d13a      	bne.n	8003fde <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f72:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f7a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	699b      	ldr	r3, [r3, #24]
 8003f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8a:	d121      	bne.n	8003fd0 <I2C_IsErrorOccurred+0xbc>
 8003f8c:	697b      	ldr	r3, [r7, #20]
 8003f8e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f92:	d01d      	beq.n	8003fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003f94:	7cfb      	ldrb	r3, [r7, #19]
 8003f96:	2b20      	cmp	r3, #32
 8003f98:	d01a      	beq.n	8003fd0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fa8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003faa:	f7fe f8f1 	bl	8002190 <HAL_GetTick>
 8003fae:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fb0:	e00e      	b.n	8003fd0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fb2:	f7fe f8ed 	bl	8002190 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	2b19      	cmp	r3, #25
 8003fbe:	d907      	bls.n	8003fd0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	f043 0320 	orr.w	r3, r3, #32
 8003fc6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003fce:	e006      	b.n	8003fde <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	f003 0320 	and.w	r3, r3, #32
 8003fda:	2b20      	cmp	r3, #32
 8003fdc:	d1e9      	bne.n	8003fb2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	f003 0320 	and.w	r3, r3, #32
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d003      	beq.n	8003ff4 <I2C_IsErrorOccurred+0xe0>
 8003fec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0aa      	beq.n	8003f4a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d103      	bne.n	8004004 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	2220      	movs	r2, #32
 8004002:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	f043 0304 	orr.w	r3, r3, #4
 800400a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00b      	beq.n	800403c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	f043 0301 	orr.w	r3, r3, #1
 800402a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004034:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800403c:	69bb      	ldr	r3, [r7, #24]
 800403e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00b      	beq.n	800405e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004046:	6a3b      	ldr	r3, [r7, #32]
 8004048:	f043 0308 	orr.w	r3, r3, #8
 800404c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004056:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00b      	beq.n	8004080 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004068:	6a3b      	ldr	r3, [r7, #32]
 800406a:	f043 0302 	orr.w	r3, r3, #2
 800406e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004078:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004080:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004084:	2b00      	cmp	r3, #0
 8004086:	d01c      	beq.n	80040c2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004088:	68f8      	ldr	r0, [r7, #12]
 800408a:	f7ff fda6 	bl	8003bda <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6859      	ldr	r1, [r3, #4]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b0d      	ldr	r3, [pc, #52]	; (80040d0 <I2C_IsErrorOccurred+0x1bc>)
 800409a:	400b      	ands	r3, r1
 800409c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3728      	adds	r7, #40	; 0x28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	fe00e800 	.word	0xfe00e800

080040d4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b087      	sub	sp, #28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	607b      	str	r3, [r7, #4]
 80040de:	460b      	mov	r3, r1
 80040e0:	817b      	strh	r3, [r7, #10]
 80040e2:	4613      	mov	r3, r2
 80040e4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040e6:	897b      	ldrh	r3, [r7, #10]
 80040e8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040ec:	7a7b      	ldrb	r3, [r7, #9]
 80040ee:	041b      	lsls	r3, r3, #16
 80040f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040f4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004102:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	0d5b      	lsrs	r3, r3, #21
 800410e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <I2C_TransferConfig+0x60>)
 8004114:	430b      	orrs	r3, r1
 8004116:	43db      	mvns	r3, r3
 8004118:	ea02 0103 	and.w	r1, r2, r3
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	430a      	orrs	r2, r1
 8004124:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004126:	bf00      	nop
 8004128:	371c      	adds	r7, #28
 800412a:	46bd      	mov	sp, r7
 800412c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004130:	4770      	bx	lr
 8004132:	bf00      	nop
 8004134:	03ff63ff 	.word	0x03ff63ff

08004138 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	460b      	mov	r3, r1
 8004142:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004144:	2300      	movs	r3, #0
 8004146:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	f003 0301 	and.w	r3, r3, #1
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00f      	beq.n	8004172 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004158:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004166:	2b28      	cmp	r3, #40	; 0x28
 8004168:	d003      	beq.n	8004172 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004170:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004172:	887b      	ldrh	r3, [r7, #2]
 8004174:	f003 0302 	and.w	r3, r3, #2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00f      	beq.n	800419c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004182:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004190:	2b28      	cmp	r3, #40	; 0x28
 8004192:	d003      	beq.n	800419c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800419a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800419c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	da03      	bge.n	80041ac <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041ac:	887b      	ldrh	r3, [r7, #2]
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d103      	bne.n	80041ba <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041ba:	887b      	ldrh	r3, [r7, #2]
 80041bc:	2b20      	cmp	r3, #32
 80041be:	d103      	bne.n	80041c8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f043 0320 	orr.w	r3, r3, #32
 80041c6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80041c8:	887b      	ldrh	r3, [r7, #2]
 80041ca:	2b40      	cmp	r3, #64	; 0x40
 80041cc:	d103      	bne.n	80041d6 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80041d4:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	6819      	ldr	r1, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	43da      	mvns	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	400a      	ands	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
}
 80041e8:	bf00      	nop
 80041ea:	3714      	adds	r7, #20
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b20      	cmp	r3, #32
 8004208:	d138      	bne.n	800427c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004210:	2b01      	cmp	r3, #1
 8004212:	d101      	bne.n	8004218 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004214:	2302      	movs	r3, #2
 8004216:	e032      	b.n	800427e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004246:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6819      	ldr	r1, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f042 0201 	orr.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2220      	movs	r2, #32
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004278:	2300      	movs	r3, #0
 800427a:	e000      	b.n	800427e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800427c:	2302      	movs	r3, #2
  }
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800428a:	b480      	push	{r7}
 800428c:	b085      	sub	sp, #20
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b20      	cmp	r3, #32
 800429e:	d139      	bne.n	8004314 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d101      	bne.n	80042ae <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e033      	b.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2201      	movs	r2, #1
 80042b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2224      	movs	r2, #36	; 0x24
 80042ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0201 	bic.w	r2, r2, #1
 80042cc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80042dc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	021b      	lsls	r3, r3, #8
 80042e2:	68fa      	ldr	r2, [r7, #12]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2220      	movs	r2, #32
 8004304:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004310:	2300      	movs	r3, #0
 8004312:	e000      	b.n	8004316 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004314:	2302      	movs	r3, #2
  }
}
 8004316:	4618      	mov	r0, r3
 8004318:	3714      	adds	r7, #20
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8004324:	b480      	push	{r7}
 8004326:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8004328:	4b05      	ldr	r3, [pc, #20]	; (8004340 <HAL_ICACHE_Enable+0x1c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a04      	ldr	r2, [pc, #16]	; (8004340 <HAL_ICACHE_Enable+0x1c>)
 800432e:	f043 0301 	orr.w	r3, r3, #1
 8004332:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	40030400 	.word	0x40030400

08004344 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af02      	add	r7, sp, #8
 800434a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800434c:	2300      	movs	r3, #0
 800434e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004350:	f7fd ff1e 	bl	8002190 <HAL_GetTick>
 8004354:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d102      	bne.n	8004362 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800435c:	2301      	movs	r3, #1
 800435e:	73fb      	strb	r3, [r7, #15]
 8004360:	e0a2      	b.n	80044a8 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800436c:	2b00      	cmp	r3, #0
 800436e:	f040 809b 	bne.w	80044a8 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fa56 	bl	8001824 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004378:	f241 3188 	movw	r1, #5000	; 0x1388
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f000 fb07 	bl	8004990 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689a      	ldr	r2, [r3, #8]
 8004388:	4b4a      	ldr	r3, [pc, #296]	; (80044b4 <HAL_OSPI_Init+0x170>)
 800438a:	4013      	ands	r3, r2
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	68d1      	ldr	r1, [r2, #12]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6912      	ldr	r2, [r2, #16]
 8004394:	3a01      	subs	r2, #1
 8004396:	0412      	lsls	r2, r2, #16
 8004398:	4311      	orrs	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6952      	ldr	r2, [r2, #20]
 800439e:	3a01      	subs	r2, #1
 80043a0:	0212      	lsls	r2, r2, #8
 80043a2:	4311      	orrs	r1, r2
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043a8:	4311      	orrs	r1, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	69d2      	ldr	r2, [r2, #28]
 80043ae:	4311      	orrs	r1, r2
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1a      	ldr	r2, [r3, #32]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	0412      	lsls	r2, r2, #16
 80043d8:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e2:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	3b01      	subs	r3, #1
 80043f4:	021a      	lsls	r2, r3, #8
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	2200      	movs	r2, #0
 8004408:	2120      	movs	r1, #32
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fb0b 	bl	8004a26 <OSPI_WaitFlagStateUntilTimeout>
 8004410:	4603      	mov	r3, r0
 8004412:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8004414:	7bfb      	ldrb	r3, [r7, #15]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d146      	bne.n	80044a8 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004450:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445c:	431a      	orrs	r2, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	430a      	orrs	r2, r1
 8004464:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f042 0201 	orr.w	r2, r2, #1
 8004476:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b02      	cmp	r3, #2
 800447e:	d107      	bne.n	8004490 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	689a      	ldr	r2, [r3, #8]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f042 0202 	orr.w	r2, r2, #2
 800448e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004498:	d103      	bne.n	80044a2 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2201      	movs	r2, #1
 800449e:	64da      	str	r2, [r3, #76]	; 0x4c
 80044a0:	e002      	b.n	80044a8 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2202      	movs	r2, #2
 80044a6:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 80044a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	f8e0f8f4 	.word	0xf8e0f8f4

080044b8 <HAL_OSPI_IRQHandler>:
  * @brief  Handle OSPI interrupt request.
  * @param  hospi : OSPI handle
  * @retval None
  */
void HAL_OSPI_IRQHandler(OSPI_HandleTypeDef *hospi)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	3350      	adds	r3, #80	; 0x50
 80044c6:	617b      	str	r3, [r7, #20]
  uint32_t flag           = hospi->Instance->SR;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	613b      	str	r3, [r7, #16]
  uint32_t itsource       = hospi->Instance->CR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	60fb      	str	r3, [r7, #12]
  uint32_t currentstate   = hospi->State;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044dc:	60bb      	str	r3, [r7, #8]

  /* OctoSPI fifo threshold interrupt occurred -------------------------------*/
  if (((flag & HAL_OSPI_FLAG_FT) != 0U) && ((itsource & HAL_OSPI_IT_FT) != 0U))
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d03a      	beq.n	800455e <HAL_OSPI_IRQHandler+0xa6>
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d035      	beq.n	800455e <HAL_OSPI_IRQHandler+0xa6>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2b18      	cmp	r3, #24
 80044f6:	d10f      	bne.n	8004518 <HAL_OSPI_IRQHandler+0x60>
    {
      /* Write a data in the fifo */
      *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fc:	781a      	ldrb	r2, [r3, #0]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004510:	1e5a      	subs	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	645a      	str	r2, [r3, #68]	; 0x44
 8004516:	e012      	b.n	800453e <HAL_OSPI_IRQHandler+0x86>
    }
    else if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b28      	cmp	r3, #40	; 0x28
 800451c:	d10f      	bne.n	800453e <HAL_OSPI_IRQHandler+0x86>
    {
      /* Read a data from the fifo */
      *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
      hospi->pBuffPtr++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferCount--;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004538:	1e5a      	subs	r2, r3, #1
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	645a      	str	r2, [r3, #68]	; 0x44
    else
    {
      /* Nothing to do */
    }

    if (hospi->XferCount == 0U)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004542:	2b00      	cmp	r3, #0
 8004544:	d107      	bne.n	8004556 <HAL_OSPI_IRQHandler+0x9e>
    {
      /* All data have been received or transmitted for the transfer */
      /* Disable fifo threshold interrupt */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_FT);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004554:	601a      	str	r2, [r3, #0]

    /* Fifo threshold callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->FifoThresholdCallback(hospi);
#else
    HAL_OSPI_FifoThresholdCallback(hospi);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f9de 	bl	8004918 <HAL_OSPI_FifoThresholdCallback>
 800455c:	e0e7      	b.n	800472e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
  /* OctoSPI transfer complete interrupt occurred ----------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TC) != 0U) && ((itsource & HAL_OSPI_IT_TC) != 0U))
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d067      	beq.n	8004638 <HAL_OSPI_IRQHandler+0x180>
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d062      	beq.n	8004638 <HAL_OSPI_IRQHandler+0x180>
  {
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	2b28      	cmp	r3, #40	; 0x28
 8004576:	d131      	bne.n	80045dc <HAL_OSPI_IRQHandler+0x124>
    {
      if ((hospi->XferCount > 0U) && ((flag & OCTOSPI_SR_FLEVEL) != 0U))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457c:	2b00      	cmp	r3, #0
 800457e:	d015      	beq.n	80045ac <HAL_OSPI_IRQHandler+0xf4>
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8004586:	2b00      	cmp	r3, #0
 8004588:	d010      	beq.n	80045ac <HAL_OSPI_IRQHandler+0xf4>
      {
        /* Read the last data received in the fifo */
        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800459a:	1c5a      	adds	r2, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	63da      	str	r2, [r3, #60]	; 0x3c
        hospi->XferCount--;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a4:	1e5a      	subs	r2, r3, #1
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	645a      	str	r2, [r3, #68]	; 0x44
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80045aa:	e0bd      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
      }
      else if(hospi->XferCount == 0U)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f040 80b9 	bne.w	8004728 <HAL_OSPI_IRQHandler+0x270>
      {
        /* Clear flag */
        hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2202      	movs	r2, #2
 80045bc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Disable the interrupts */
        __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80045cc:	601a      	str	r2, [r3, #0]

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2202      	movs	r2, #2
 80045d2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* RX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->RxCpltCallback(hospi);
#else
        HAL_OSPI_RxCpltCallback(hospi);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f9b3 	bl	8004940 <HAL_OSPI_RxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 80045da:	e0a5      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
      }
    }
    else
    {
      /* Clear flag */
      hospi->Instance->FCR = HAL_OSPI_FLAG_TC;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2202      	movs	r2, #2
 80045e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_TC | HAL_OSPI_IT_FT | HAL_OSPI_IT_TE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 22e0 	bic.w	r2, r2, #458752	; 0x70000
 80045f2:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2202      	movs	r2, #2
 80045f8:	64da      	str	r2, [r3, #76]	; 0x4c

      if (currentstate == HAL_OSPI_STATE_BUSY_TX)
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	2b18      	cmp	r3, #24
 80045fe:	d103      	bne.n	8004608 <HAL_OSPI_IRQHandler+0x150>
      {
        /* TX complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->TxCpltCallback(hospi);
#else
        HAL_OSPI_TxCpltCallback(hospi);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f9a7 	bl	8004954 <HAL_OSPI_TxCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004606:	e08f      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_BUSY_CMD)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	2b08      	cmp	r3, #8
 800460c:	d103      	bne.n	8004616 <HAL_OSPI_IRQHandler+0x15e>
      {
        /* Command complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->CmdCpltCallback(hospi);
#else
        HAL_OSPI_CmdCpltCallback(hospi);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f000 f98c 	bl	800492c <HAL_OSPI_CmdCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004614:	e088      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
      }
      else if (currentstate == HAL_OSPI_STATE_ABORT)
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800461c:	f040 8084 	bne.w	8004728 <HAL_OSPI_IRQHandler+0x270>
      {
        if (hospi->ErrorCode == HAL_OSPI_ERROR_NONE)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <HAL_OSPI_IRQHandler+0x178>
          /* Abort called by the user */
          /* Abort complete callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->AbortCpltCallback(hospi);
#else
          HAL_OSPI_AbortCpltCallback(hospi);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f96b 	bl	8004904 <HAL_OSPI_AbortCpltCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 800462e:	e07b      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
          /* Abort due to an error (eg : DMA error) */
          /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
          hospi->ErrorCallback(hospi);
#else
          HAL_OSPI_ErrorCallback(hospi);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f95d 	bl	80048f0 <HAL_OSPI_ErrorCallback>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004636:	e077      	b.n	8004728 <HAL_OSPI_IRQHandler+0x270>
        /* Nothing to do */
      }
    }
  }
  /* OctoSPI status match interrupt occurred ---------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_SM) != 0U) && ((itsource & HAL_OSPI_IT_SM) != 0U))
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	f003 0308 	and.w	r3, r3, #8
 800463e:	2b00      	cmp	r3, #0
 8004640:	d01e      	beq.n	8004680 <HAL_OSPI_IRQHandler+0x1c8>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d019      	beq.n	8004680 <HAL_OSPI_IRQHandler+0x1c8>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_SM;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2208      	movs	r2, #8
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

    /* Check if automatic poll mode stop is activated */
    if ((hospi->Instance->CR & OCTOSPI_CR_APMS) != 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00a      	beq.n	8004678 <HAL_OSPI_IRQHandler+0x1c0>
    {
      /* Disable the interrupts */
      __HAL_OSPI_DISABLE_IT(hospi, HAL_OSPI_IT_SM | HAL_OSPI_IT_TE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8004670:	601a      	str	r2, [r3, #0]

      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Status match callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->StatusMatchCallback(hospi);
#else
    HAL_OSPI_StatusMatchCallback(hospi);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f975 	bl	8004968 <HAL_OSPI_StatusMatchCallback>
 800467e:	e056      	b.n	800472e <HAL_OSPI_IRQHandler+0x276>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
  }
  /* OctoSPI transfer error interrupt occurred -------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TE) != 0U) && ((itsource & HAL_OSPI_IT_TE) != 0U))
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b00      	cmp	r3, #0
 8004688:	d03c      	beq.n	8004704 <HAL_OSPI_IRQHandler+0x24c>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d037      	beq.n	8004704 <HAL_OSPI_IRQHandler+0x24c>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2201      	movs	r2, #1
 800469a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable all interrupts */
    __HAL_OSPI_DISABLE_IT(hospi, (HAL_OSPI_IT_TO | HAL_OSPI_IT_SM | HAL_OSPI_IT_FT | HAL_OSPI_IT_TC | HAL_OSPI_IT_TE));
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80046aa:	601a      	str	r2, [r3, #0]

    /* Set error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_TRANSFER;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2202      	movs	r2, #2
 80046b0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the DMA is enabled */
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0304 	and.w	r3, r3, #4
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d01a      	beq.n	80046f6 <HAL_OSPI_IRQHandler+0x23e>
    {
      /* Disable the DMA transfer on the OctoSPI side */
      CLEAR_BIT(hospi->Instance->CR, OCTOSPI_CR_DMAEN);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f022 0204 	bic.w	r2, r2, #4
 80046ce:	601a      	str	r2, [r3, #0]

      /* Disable the DMA transfer on the DMA side */
      hospi->hdma->XferAbortCallback = OSPI_DMAAbortCplt;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046d4:	4a18      	ldr	r2, [pc, #96]	; (8004738 <HAL_OSPI_IRQHandler+0x280>)
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hospi->hdma) != HAL_OK)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046dc:	4618      	mov	r0, r3
 80046de:	f7fd ff6b 	bl	80025b8 <HAL_DMA_Abort_IT>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d021      	beq.n	800472c <HAL_OSPI_IRQHandler+0x274>
      {
        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2202      	movs	r2, #2
 80046ec:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
        hospi->ErrorCallback(hospi);
#else
        HAL_OSPI_ErrorCallback(hospi);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8fe 	bl	80048f0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 80046f4:	e01a      	b.n	800472c <HAL_OSPI_IRQHandler+0x274>
      }
    }
    else
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Error callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
      hospi->ErrorCallback(hospi);
#else
      HAL_OSPI_ErrorCallback(hospi);
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	f000 f8f7 	bl	80048f0 <HAL_OSPI_ErrorCallback>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 8004702:	e013      	b.n	800472c <HAL_OSPI_IRQHandler+0x274>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */
    }
  }
  /* OctoSPI timeout interrupt occurred --------------------------------------*/
  else if (((flag & HAL_OSPI_FLAG_TO) != 0U) && ((itsource & HAL_OSPI_IT_TO) != 0U))
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	f003 0310 	and.w	r3, r3, #16
 800470a:	2b00      	cmp	r3, #0
 800470c:	d00f      	beq.n	800472e <HAL_OSPI_IRQHandler+0x276>
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00a      	beq.n	800472e <HAL_OSPI_IRQHandler+0x276>
  {
    /* Clear flag */
    hospi->Instance->FCR = HAL_OSPI_FLAG_TO;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2210      	movs	r2, #16
 800471e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Timeout callback */
#if defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)
    hospi->TimeOutCallback(hospi);
#else
    HAL_OSPI_TimeOutCallback(hospi);
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f92b 	bl	800497c <HAL_OSPI_TimeOutCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004726:	e002      	b.n	800472e <HAL_OSPI_IRQHandler+0x276>
    if (currentstate == HAL_OSPI_STATE_BUSY_RX)
 8004728:	bf00      	nop
 800472a:	e000      	b.n	800472e <HAL_OSPI_IRQHandler+0x276>
    if ((hospi->Instance->CR & OCTOSPI_CR_DMAEN) != 0U)
 800472c:	bf00      	nop
}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	080049af 	.word	0x080049af

0800473c <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b08a      	sub	sp, #40	; 0x28
 8004740:	af02      	add	r7, sp, #8
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8004748:	f7fd fd22 	bl	8002190 <HAL_GetTick>
 800474c:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004752:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004758:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d104      	bne.n	800476a <HAL_OSPI_Command+0x2e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004768:	d115      	bne.n	8004796 <HAL_OSPI_Command+0x5a>
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2b14      	cmp	r3, #20
 800476e:	d107      	bne.n	8004780 <HAL_OSPI_Command+0x44>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && ((cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2b02      	cmp	r3, #2
 8004776:	d00e      	beq.n	8004796 <HAL_OSPI_Command+0x5a>
                                                || (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))) ||
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b03      	cmp	r3, #3
 800477e:	d00a      	beq.n	8004796 <HAL_OSPI_Command+0x5a>
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	2b24      	cmp	r3, #36	; 0x24
 8004784:	d15b      	bne.n	800483e <HAL_OSPI_Command+0x102>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	2b01      	cmp	r3, #1
 800478c:	d003      	beq.n	8004796 <HAL_OSPI_Command+0x5a>
                                                   (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG))))
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	681b      	ldr	r3, [r3, #0]
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && ((cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)  ||
 8004792:	2b03      	cmp	r3, #3
 8004794:	d153      	bne.n	800483e <HAL_OSPI_Command+0x102>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	2200      	movs	r2, #0
 800479e:	2120      	movs	r1, #32
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f940 	bl	8004a26 <OSPI_WaitFlagStateUntilTimeout>
 80047a6:	4603      	mov	r3, r0
 80047a8:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80047aa:	7ffb      	ldrb	r3, [r7, #31]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d14c      	bne.n	800484a <HAL_OSPI_Command+0x10e>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2200      	movs	r2, #0
 80047b4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80047b6:	68b9      	ldr	r1, [r7, #8]
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 f96b 	bl	8004a94 <OSPI_ConfigCmd>
 80047be:	4603      	mov	r3, r0
 80047c0:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80047c2:	7ffb      	ldrb	r3, [r7, #31]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d140      	bne.n	800484a <HAL_OSPI_Command+0x10e>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d10e      	bne.n	80047ee <HAL_OSPI_Command+0xb2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	69bb      	ldr	r3, [r7, #24]
 80047d6:	2201      	movs	r2, #1
 80047d8:	2102      	movs	r1, #2
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 f923 	bl	8004a26 <OSPI_WaitFlagStateUntilTimeout>
 80047e0:	4603      	mov	r3, r0
 80047e2:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2202      	movs	r2, #2
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80047ec:	e02d      	b.n	800484a <HAL_OSPI_Command+0x10e>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d103      	bne.n	80047fe <HAL_OSPI_Command+0xc2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2204      	movs	r2, #4
 80047fa:	64da      	str	r2, [r3, #76]	; 0x4c
    if (status == HAL_OK)
 80047fc:	e025      	b.n	800484a <HAL_OSPI_Command+0x10e>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d10b      	bne.n	800481e <HAL_OSPI_Command+0xe2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800480a:	2b24      	cmp	r3, #36	; 0x24
 800480c:	d103      	bne.n	8004816 <HAL_OSPI_Command+0xda>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2204      	movs	r2, #4
 8004812:	64da      	str	r2, [r3, #76]	; 0x4c
    if (status == HAL_OK)
 8004814:	e019      	b.n	800484a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	2214      	movs	r2, #20
 800481a:	64da      	str	r2, [r3, #76]	; 0x4c
    if (status == HAL_OK)
 800481c:	e015      	b.n	800484a <HAL_OSPI_Command+0x10e>
            }
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2b02      	cmp	r3, #2
 8004824:	d111      	bne.n	800484a <HAL_OSPI_Command+0x10e>
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	2b14      	cmp	r3, #20
 800482c:	d103      	bne.n	8004836 <HAL_OSPI_Command+0xfa>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	2204      	movs	r2, #4
 8004832:	64da      	str	r2, [r3, #76]	; 0x4c
    if (status == HAL_OK)
 8004834:	e009      	b.n	800484a <HAL_OSPI_Command+0x10e>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2224      	movs	r2, #36	; 0x24
 800483a:	64da      	str	r2, [r3, #76]	; 0x4c
    if (status == HAL_OK)
 800483c:	e005      	b.n	800484a <HAL_OSPI_Command+0x10e>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2210      	movs	r2, #16
 8004846:	651a      	str	r2, [r3, #80]	; 0x50
 8004848:	e000      	b.n	800484c <HAL_OSPI_Command+0x110>
    if (status == HAL_OK)
 800484a:	bf00      	nop
  }

  /* Return function status */
  return status;
 800484c:	7ffb      	ldrb	r3, [r7, #31]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_OSPI_MemoryMapped>:
  * @param  cfg   : structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_MemoryMapped(OSPI_HandleTypeDef *hospi, OSPI_MemoryMappedTypeDef *cfg)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b086      	sub	sp, #24
 800485a:	af02      	add	r7, sp, #8
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8004860:	f7fd fc96 	bl	8002190 <HAL_GetTick>
 8004864:	60b8      	str	r0, [r7, #8]

  /* Check the parameters of the memory-mapped configuration structure */
  assert_param(IS_OSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800486a:	2b04      	cmp	r3, #4
 800486c:	d136      	bne.n	80048dc <HAL_OSPI_MemoryMapped+0x86>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004872:	9300      	str	r3, [sp, #0]
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2200      	movs	r2, #0
 8004878:	2120      	movs	r1, #32
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f8d3 	bl	8004a26 <OSPI_WaitFlagStateUntilTimeout>
 8004880:	4603      	mov	r3, r0
 8004882:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8004884:	7bfb      	ldrb	r3, [r7, #15]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d12d      	bne.n	80048e6 <HAL_OSPI_MemoryMapped+0x90>
    {
      /* Update state */
      hospi->State = HAL_OSPI_STATE_BUSY_MEM_MAPPED;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2288      	movs	r2, #136	; 0x88
 800488e:	64da      	str	r2, [r3, #76]	; 0x4c

      if (cfg->TimeOutActivation == HAL_OSPI_TIMEOUT_COUNTER_ENABLE)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2b08      	cmp	r3, #8
 8004896:	d111      	bne.n	80048bc <HAL_OSPI_MemoryMapped+0x66>
      {
        assert_param(IS_OSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure register */
        WRITE_REG(hospi->Instance->LPTR, cfg->TimeOutPeriod);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	6852      	ldr	r2, [r2, #4]
 80048a0:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

        /* Clear flags related to interrupt */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TO);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2210      	movs	r2, #16
 80048aa:	625a      	str	r2, [r3, #36]	; 0x24

        /* Enable the timeout interrupt */
        __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TO);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681a      	ldr	r2, [r3, #0]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80048ba:	601a      	str	r2, [r3, #0]
      }

      /* Configure CR register with functional mode as memory-mapped */
      MODIFY_REG(hospi->Instance->CR, (OCTOSPI_CR_TCEN | OCTOSPI_CR_FMODE),
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80048c6:	f023 0308 	bic.w	r3, r3, #8
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	431a      	orrs	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e004      	b.n	80048e6 <HAL_OSPI_MemoryMapped+0x90>
                 (cfg->TimeOutActivation | OSPI_FUNCTIONAL_MODE_MEMORY_MAPPED));
    }
  }
  else
  {
    status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2210      	movs	r2, #16
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Return function status */
  return status;
 80048e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <HAL_OSPI_ErrorCallback>:
  * @brief  Transfer Error callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_ErrorCallback(OSPI_HandleTypeDef *hospi)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_ErrorCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_OSPI_AbortCpltCallback>:
  * @brief  Abort completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_AbortCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_AbortCpltCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_OSPI_FifoThresholdCallback>:
  * @brief  FIFO Threshold callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_FifoThresholdCallback(OSPI_HandleTypeDef *hospi)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_FIFOThresholdCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <HAL_OSPI_CmdCpltCallback>:
  * @brief  Command completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_CmdCpltCallback(OSPI_HandleTypeDef *hospi)
{
 800492c:	b480      	push	{r7}
 800492e:	b083      	sub	sp, #12
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_CmdCpltCallback could be implemented in the user file
   */
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_OSPI_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_RxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_RxCpltCallback could be implemented in the user file
   */
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <HAL_OSPI_TxCpltCallback>:
  * @brief  Tx Transfer completed callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
 __weak void HAL_OSPI_TxCpltCallback(OSPI_HandleTypeDef *hospi)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_OSPI_TxCpltCallback could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_OSPI_StatusMatchCallback>:
  * @brief  Status Match callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_StatusMatchCallback(OSPI_HandleTypeDef *hospi)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_StatusMatchCallback could be implemented in the user file
   */
}
 8004970:	bf00      	nop
 8004972:	370c      	adds	r7, #12
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <HAL_OSPI_TimeOutCallback>:
  * @brief  Timeout callback.
  * @param  hospi : OSPI handle
  * @retval None
  */
__weak void HAL_OSPI_TimeOutCallback(OSPI_HandleTypeDef *hospi)
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  UNUSED(hospi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_OSPI_TimeOutCallback could be implemented in the user file
   */
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004990:	b480      	push	{r7}
 8004992:	b083      	sub	sp, #12
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	370c      	adds	r7, #12
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <OSPI_DMAAbortCplt>:
  * @brief  DMA OSPI abort complete callback.
  * @param  hdma : DMA handle
  * @retval None
  */
static void OSPI_DMAAbortCplt(DMA_HandleTypeDef *hdma)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	b084      	sub	sp, #16
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
  OSPI_HandleTypeDef* hospi = ( OSPI_HandleTypeDef* )(hdma->Parent);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ba:	60fb      	str	r3, [r7, #12]
  hospi->XferCount = 0;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Check the state */
  if (hospi->State == HAL_OSPI_STATE_ABORT)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ca:	d122      	bne.n	8004a12 <OSPI_DMAAbortCplt+0x64>
  {
    /* DMA abort called by OctoSPI abort */
    if (__HAL_OSPI_GET_FLAG(hospi, HAL_OSPI_FLAG_BUSY) != RESET)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	6a1b      	ldr	r3, [r3, #32]
 80049d2:	f003 0320 	and.w	r3, r3, #32
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d014      	beq.n	8004a04 <OSPI_DMAAbortCplt+0x56>
    {
      /* Clear transfer complete flag */
      __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	2202      	movs	r2, #2
 80049e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enable the transfer complete interrupts */
      __HAL_OSPI_ENABLE_IT(hospi, HAL_OSPI_IT_TC);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80049f0:	601a      	str	r2, [r3, #0]

      /* Perform an abort of the OctoSPI */
      SET_BIT(hospi->Instance->CR, OCTOSPI_CR_ABORT);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f042 0202 	orr.w	r2, r2, #2
 8004a00:	601a      	str	r2, [r3, #0]
    hospi->ErrorCallback(hospi);
#else
    HAL_OSPI_ErrorCallback(hospi);
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U)*/
  }
}
 8004a02:	e00c      	b.n	8004a1e <OSPI_DMAAbortCplt+0x70>
      hospi->State = HAL_OSPI_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2202      	movs	r2, #2
 8004a08:	64da      	str	r2, [r3, #76]	; 0x4c
      HAL_OSPI_AbortCpltCallback(hospi);
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f7ff ff7a 	bl	8004904 <HAL_OSPI_AbortCpltCallback>
}
 8004a10:	e005      	b.n	8004a1e <OSPI_DMAAbortCplt+0x70>
    hospi->State = HAL_OSPI_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2202      	movs	r2, #2
 8004a16:	64da      	str	r2, [r3, #76]	; 0x4c
    HAL_OSPI_ErrorCallback(hospi);
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f7ff ff69 	bl	80048f0 <HAL_OSPI_ErrorCallback>
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	60f8      	str	r0, [r7, #12]
 8004a2e:	60b9      	str	r1, [r7, #8]
 8004a30:	603b      	str	r3, [r7, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004a36:	e01a      	b.n	8004a6e <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3e:	d016      	beq.n	8004a6e <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a40:	f7fd fba6 	bl	8002190 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	69ba      	ldr	r2, [r7, #24]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10b      	bne.n	8004a6e <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a5c:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a62:	f043 0201 	orr.w	r2, r3, #1
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	6a1a      	ldr	r2, [r3, #32]
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	4013      	ands	r3, r2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	bf14      	ite	ne
 8004a7c:	2301      	movne	r3, #1
 8004a7e:	2300      	moveq	r3, #0
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	461a      	mov	r2, r3
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d1d6      	bne.n	8004a38 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3710      	adds	r7, #16
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b089      	sub	sp, #36	; 0x24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ab0:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d10a      	bne.n	8004ad0 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d114      	bne.n	8004b02 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004ae0:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8004aea:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8004af4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8004afe:	60fb      	str	r3, [r7, #12]
 8004b00:	e02c      	b.n	8004b5c <OSPI_ConfigCmd+0xc8>
  }
  else if (cmd->OperationType == HAL_OSPI_OPTYPE_WRAP_CFG)
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d114      	bne.n	8004b34 <OSPI_ConfigCmd+0xa0>
  {
    ccr_reg = &(hospi->Instance->WPCCR);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004b12:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WPTCR);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8004b1c:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WPIR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8004b26:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WPABR);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e013      	b.n	8004b5c <OSPI_ConfigCmd+0xc8>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004b3c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004b46:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004b50:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8004b5a:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b64:	431a      	orrs	r2, r3
 8004b66:	69bb      	ldr	r3, [r7, #24]
 8004b68:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d012      	beq.n	8004b98 <OSPI_ConfigCmd+0x104>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8a:	4319      	orrs	r1, r3
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	430b      	orrs	r3, r1
 8004b92:	431a      	orrs	r2, r3
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f023 021f 	bic.w	r2, r3, #31
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <OSPI_ConfigCmd+0x132>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d105      	bne.n	8004bc6 <OSPI_ConfigCmd+0x132>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3a01      	subs	r2, #1
 8004bc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	f000 8099 	beq.w	8004d02 <OSPI_ConfigCmd+0x26e>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d055      	beq.n	8004c84 <OSPI_ConfigCmd+0x1f0>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d01e      	beq.n	8004c1e <OSPI_ConfigCmd+0x18a>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	4b67      	ldr	r3, [pc, #412]	; (8004d84 <OSPI_ConfigCmd+0x2f0>)
 8004be6:	4013      	ands	r3, r2
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	68d1      	ldr	r1, [r2, #12]
 8004bec:	683a      	ldr	r2, [r7, #0]
 8004bee:	6952      	ldr	r2, [r2, #20]
 8004bf0:	4311      	orrs	r1, r2
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	6912      	ldr	r2, [r2, #16]
 8004bf6:	4311      	orrs	r1, r2
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	69d2      	ldr	r2, [r2, #28]
 8004bfc:	4311      	orrs	r1, r2
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c02:	4311      	orrs	r1, r2
 8004c04:	683a      	ldr	r2, [r7, #0]
 8004c06:	6a12      	ldr	r2, [r2, #32]
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c0e:	4311      	orrs	r1, r2
 8004c10:	683a      	ldr	r2, [r7, #0]
 8004c12:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c14:	430a      	orrs	r2, r1
 8004c16:	431a      	orrs	r2, r3
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	e028      	b.n	8004c70 <OSPI_ConfigCmd+0x1dc>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8004c1e:	69bb      	ldr	r3, [r7, #24]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004c26:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	68d1      	ldr	r1, [r2, #12]
 8004c2e:	683a      	ldr	r2, [r7, #0]
 8004c30:	6952      	ldr	r2, [r2, #20]
 8004c32:	4311      	orrs	r1, r2
 8004c34:	683a      	ldr	r2, [r7, #0]
 8004c36:	6912      	ldr	r2, [r2, #16]
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	683a      	ldr	r2, [r7, #0]
 8004c3c:	69d2      	ldr	r2, [r2, #28]
 8004c3e:	4311      	orrs	r1, r2
 8004c40:	683a      	ldr	r2, [r7, #0]
 8004c42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c44:	4311      	orrs	r1, r2
 8004c46:	683a      	ldr	r2, [r7, #0]
 8004c48:	6a12      	ldr	r2, [r2, #32]
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	431a      	orrs	r2, r3
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c5a:	d109      	bne.n	8004c70 <OSPI_ConfigCmd+0x1dc>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d105      	bne.n	8004c70 <OSPI_ConfigCmd+0x1dc>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004c64:	69bb      	ldr	r3, [r7, #24]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	689a      	ldr	r2, [r3, #8]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	683a      	ldr	r2, [r7, #0]
 8004c7e:	6992      	ldr	r2, [r2, #24]
 8004c80:	649a      	str	r2, [r3, #72]	; 0x48
 8004c82:	e078      	b.n	8004d76 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <OSPI_ConfigCmd+0x228>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004c94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004c98:	683a      	ldr	r2, [r7, #0]
 8004c9a:	68d1      	ldr	r1, [r2, #12]
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	6952      	ldr	r2, [r2, #20]
 8004ca0:	4311      	orrs	r1, r2
 8004ca2:	683a      	ldr	r2, [r7, #0]
 8004ca4:	6912      	ldr	r2, [r2, #16]
 8004ca6:	4311      	orrs	r1, r2
 8004ca8:	683a      	ldr	r2, [r7, #0]
 8004caa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cac:	4311      	orrs	r1, r2
 8004cae:	683a      	ldr	r2, [r7, #0]
 8004cb0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	431a      	orrs	r2, r3
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	e01d      	b.n	8004cf8 <OSPI_ConfigCmd+0x264>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	68d9      	ldr	r1, [r3, #12]
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	695b      	ldr	r3, [r3, #20]
 8004ccc:	4319      	orrs	r1, r3
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	430b      	orrs	r3, r1
 8004cd4:	431a      	orrs	r2, r3
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ce2:	d109      	bne.n	8004cf8 <OSPI_ConfigCmd+0x264>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d105      	bne.n	8004cf8 <OSPI_ConfigCmd+0x264>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e039      	b.n	8004d76 <OSPI_ConfigCmd+0x2e2>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d030      	beq.n	8004d6c <OSPI_ConfigCmd+0x2d8>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <OSPI_ConfigCmd+0x2ae>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8004d12:	69bb      	ldr	r3, [r7, #24]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004d1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	69d1      	ldr	r1, [r2, #28]
 8004d22:	683a      	ldr	r2, [r7, #0]
 8004d24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d26:	4311      	orrs	r1, r2
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	6a12      	ldr	r2, [r2, #32]
 8004d2c:	4311      	orrs	r1, r2
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d32:	4311      	orrs	r1, r2
 8004d34:	683a      	ldr	r2, [r7, #0]
 8004d36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d38:	430a      	orrs	r2, r1
 8004d3a:	431a      	orrs	r2, r3
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e00e      	b.n	8004d60 <OSPI_ConfigCmd+0x2cc>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8004d42:	69bb      	ldr	r3, [r7, #24]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	69d9      	ldr	r1, [r3, #28]
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	4319      	orrs	r1, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	6a1b      	ldr	r3, [r3, #32]
 8004d58:	430b      	orrs	r3, r1
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	683a      	ldr	r2, [r7, #0]
 8004d66:	6992      	ldr	r2, [r2, #24]
 8004d68:	649a      	str	r2, [r3, #72]	; 0x48
 8004d6a:	e004      	b.n	8004d76 <OSPI_ConfigCmd+0x2e2>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2208      	movs	r2, #8
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Return function status */
  return status;
 8004d76:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	3724      	adds	r7, #36	; 0x24
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	f0ffc0c0 	.word	0xf0ffc0c0

08004d88 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004d8c:	4b04      	ldr	r3, [pc, #16]	; (8004da0 <HAL_PWREx_GetVoltageRange+0x18>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40007000 	.word	0x40007000

08004da4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004dac:	4b27      	ldr	r3, [pc, #156]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004db4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004db6:	f000 f861 	bl	8004e7c <HAL_PWREx_SMPS_GetEffectiveMode>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dc0:	d101      	bne.n	8004dc6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e03e      	b.n	8004e44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004dc6:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dc8:	68db      	ldr	r3, [r3, #12]
 8004dca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dd2:	d101      	bne.n	8004dd8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e035      	b.n	8004e44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004dd8:	68ba      	ldr	r2, [r7, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d101      	bne.n	8004de4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004de0:	2300      	movs	r3, #0
 8004de2:	e02f      	b.n	8004e44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004dec:	4917      	ldr	r1, [pc, #92]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004df4:	4b16      	ldr	r3, [pc, #88]	; (8004e50 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	095b      	lsrs	r3, r3, #5
 8004dfa:	4a16      	ldr	r2, [pc, #88]	; (8004e54 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8004e00:	09db      	lsrs	r3, r3, #7
 8004e02:	2232      	movs	r2, #50	; 0x32
 8004e04:	fb02 f303 	mul.w	r3, r2, r3
 8004e08:	4a13      	ldr	r2, [pc, #76]	; (8004e58 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0e:	08db      	lsrs	r3, r3, #3
 8004e10:	3301      	adds	r3, #1
 8004e12:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e14:	e002      	b.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e1e:	695b      	ldr	r3, [r3, #20]
 8004e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e28:	d102      	bne.n	8004e30 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d1f2      	bne.n	8004e16 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e30:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e3c:	d101      	bne.n	8004e42 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e000      	b.n	8004e44 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	2001b6a0 	.word	0x2001b6a0
 8004e54:	0a7c5ac5 	.word	0x0a7c5ac5
 8004e58:	cccccccd 	.word	0xcccccccd

08004e5c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	4a04      	ldr	r2, [pc, #16]	; (8004e78 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e6a:	6093      	str	r3, [r2, #8]
}
 8004e6c:	bf00      	nop
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40007000 	.word	0x40007000

08004e7c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004e82:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d003      	beq.n	8004e9a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004e96:	607b      	str	r3, [r7, #4]
 8004e98:	e00a      	b.n	8004eb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d103      	bne.n	8004eac <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004ea4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	e001      	b.n	8004eb0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004eac:	2300      	movs	r3, #0
 8004eae:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004eb0:	687b      	ldr	r3, [r7, #4]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebc:	4770      	bx	lr
 8004ebe:	bf00      	nop
 8004ec0:	40007000 	.word	0x40007000

08004ec4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d102      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	f000 bcc2 	b.w	800585c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ed8:	4b99      	ldr	r3, [pc, #612]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f003 030c 	and.w	r3, r3, #12
 8004ee0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ee2:	4b97      	ldr	r3, [pc, #604]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0310 	and.w	r3, r3, #16
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 80e9 	beq.w	80050cc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004efa:	69bb      	ldr	r3, [r7, #24]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d006      	beq.n	8004f0e <HAL_RCC_OscConfig+0x4a>
 8004f00:	69bb      	ldr	r3, [r7, #24]
 8004f02:	2b0c      	cmp	r3, #12
 8004f04:	f040 8083 	bne.w	800500e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d17f      	bne.n	800500e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f0e:	4b8c      	ldr	r3, [pc, #560]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0302 	and.w	r3, r3, #2
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d006      	beq.n	8004f28 <HAL_RCC_OscConfig+0x64>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d102      	bne.n	8004f28 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f000 bc9a 	b.w	800585c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f2c:	4b84      	ldr	r3, [pc, #528]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d004      	beq.n	8004f42 <HAL_RCC_OscConfig+0x7e>
 8004f38:	4b81      	ldr	r3, [pc, #516]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f40:	e005      	b.n	8004f4e <HAL_RCC_OscConfig+0x8a>
 8004f42:	4b7f      	ldr	r3, [pc, #508]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d224      	bcs.n	8004f9c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f000 fece 	bl	8005cf8 <RCC_SetFlashLatencyFromMSIRange>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	f000 bc7a 	b.w	800585c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f68:	4b75      	ldr	r3, [pc, #468]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a74      	ldr	r2, [pc, #464]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f6e:	f043 0308 	orr.w	r3, r3, #8
 8004f72:	6013      	str	r3, [r2, #0]
 8004f74:	4b72      	ldr	r3, [pc, #456]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	496f      	ldr	r1, [pc, #444]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f86:	4b6e      	ldr	r3, [pc, #440]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	021b      	lsls	r3, r3, #8
 8004f94:	496a      	ldr	r1, [pc, #424]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f96:	4313      	orrs	r3, r2
 8004f98:	604b      	str	r3, [r1, #4]
 8004f9a:	e026      	b.n	8004fea <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004f9c:	4b68      	ldr	r3, [pc, #416]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a67      	ldr	r2, [pc, #412]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	f043 0308 	orr.w	r3, r3, #8
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	4b65      	ldr	r3, [pc, #404]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb4:	4962      	ldr	r1, [pc, #392]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004fba:	4b61      	ldr	r3, [pc, #388]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	021b      	lsls	r3, r3, #8
 8004fc8:	495d      	ldr	r1, [pc, #372]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fe8d 	bl	8005cf8 <RCC_SetFlashLatencyFromMSIRange>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d002      	beq.n	8004fea <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	f000 bc39 	b.w	800585c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004fea:	f000 fe17 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	4a54      	ldr	r2, [pc, #336]	; (8005144 <HAL_RCC_OscConfig+0x280>)
 8004ff2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ff4:	4b54      	ldr	r3, [pc, #336]	; (8005148 <HAL_RCC_OscConfig+0x284>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f7fc fe2f 	bl	8001c5c <HAL_InitTick>
 8004ffe:	4603      	mov	r3, r0
 8005000:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8005002:	7bfb      	ldrb	r3, [r7, #15]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d060      	beq.n	80050ca <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	f000 bc27 	b.w	800585c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d039      	beq.n	800508a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005016:	4b4a      	ldr	r3, [pc, #296]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a49      	ldr	r2, [pc, #292]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800501c:	f043 0301 	orr.w	r3, r3, #1
 8005020:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005022:	f7fd f8b5 	bl	8002190 <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005028:	e00f      	b.n	800504a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800502a:	f7fd f8b1 	bl	8002190 <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d908      	bls.n	800504a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005038:	4b41      	ldr	r3, [pc, #260]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	f000 bc09 	b.w	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800504a:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0302 	and.w	r3, r3, #2
 8005052:	2b00      	cmp	r3, #0
 8005054:	d0e9      	beq.n	800502a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005056:	4b3a      	ldr	r3, [pc, #232]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a39      	ldr	r2, [pc, #228]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800505c:	f043 0308 	orr.w	r3, r3, #8
 8005060:	6013      	str	r3, [r2, #0]
 8005062:	4b37      	ldr	r3, [pc, #220]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506e:	4934      	ldr	r1, [pc, #208]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005070:	4313      	orrs	r3, r2
 8005072:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6a1b      	ldr	r3, [r3, #32]
 8005080:	021b      	lsls	r3, r3, #8
 8005082:	492f      	ldr	r1, [pc, #188]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005084:	4313      	orrs	r3, r2
 8005086:	604b      	str	r3, [r1, #4]
 8005088:	e020      	b.n	80050cc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800508a:	4b2d      	ldr	r3, [pc, #180]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a2c      	ldr	r2, [pc, #176]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005090:	f023 0301 	bic.w	r3, r3, #1
 8005094:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005096:	f7fd f87b 	bl	8002190 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800509c:	e00e      	b.n	80050bc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800509e:	f7fd f877 	bl	8002190 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d907      	bls.n	80050bc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050ac:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0302 	and.w	r3, r3, #2
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e3cf      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0302 	and.w	r3, r3, #2
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d1ea      	bne.n	800509e <HAL_RCC_OscConfig+0x1da>
 80050c8:	e000      	b.n	80050cc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80050ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d07e      	beq.n	80051d6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b08      	cmp	r3, #8
 80050dc:	d005      	beq.n	80050ea <HAL_RCC_OscConfig+0x226>
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b0c      	cmp	r3, #12
 80050e2:	d10e      	bne.n	8005102 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	2b03      	cmp	r3, #3
 80050e8:	d10b      	bne.n	8005102 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d06e      	beq.n	80051d4 <HAL_RCC_OscConfig+0x310>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d16a      	bne.n	80051d4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e3ac      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800510a:	d106      	bne.n	800511a <HAL_RCC_OscConfig+0x256>
 800510c:	4b0c      	ldr	r3, [pc, #48]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a0b      	ldr	r2, [pc, #44]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005112:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005116:	6013      	str	r3, [r2, #0]
 8005118:	e024      	b.n	8005164 <HAL_RCC_OscConfig+0x2a0>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005122:	d113      	bne.n	800514c <HAL_RCC_OscConfig+0x288>
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a05      	ldr	r2, [pc, #20]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 800512a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800512e:	6013      	str	r3, [r2, #0]
 8005130:	4b03      	ldr	r3, [pc, #12]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a02      	ldr	r2, [pc, #8]	; (8005140 <HAL_RCC_OscConfig+0x27c>)
 8005136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e012      	b.n	8005164 <HAL_RCC_OscConfig+0x2a0>
 800513e:	bf00      	nop
 8005140:	40021000 	.word	0x40021000
 8005144:	2001b6a0 	.word	0x2001b6a0
 8005148:	2001b6a4 	.word	0x2001b6a4
 800514c:	4b8b      	ldr	r3, [pc, #556]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a8a      	ldr	r2, [pc, #552]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b88      	ldr	r3, [pc, #544]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a87      	ldr	r2, [pc, #540]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d019      	beq.n	80051a0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800516c:	f7fd f810 	bl	8002190 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005172:	e00e      	b.n	8005192 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005174:	f7fd f80c 	bl	8002190 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d907      	bls.n	8005192 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005182:	4b7e      	ldr	r3, [pc, #504]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e364      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005192:	4b7a      	ldr	r3, [pc, #488]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ea      	beq.n	8005174 <HAL_RCC_OscConfig+0x2b0>
 800519e:	e01a      	b.n	80051d6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fc fff6 	bl	8002190 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051a6:	e00e      	b.n	80051c6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80051a8:	f7fc fff2 	bl	8002190 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	; 0x64
 80051b4:	d907      	bls.n	80051c6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051b6:	4b71      	ldr	r3, [pc, #452]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e34a      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80051c6:	4b6d      	ldr	r3, [pc, #436]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1ea      	bne.n	80051a8 <HAL_RCC_OscConfig+0x2e4>
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d06c      	beq.n	80052bc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b04      	cmp	r3, #4
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_OscConfig+0x330>
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b0c      	cmp	r3, #12
 80051ec:	d119      	bne.n	8005222 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d116      	bne.n	8005222 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051f4:	4b61      	ldr	r3, [pc, #388]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d005      	beq.n	800520c <HAL_RCC_OscConfig+0x348>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e327      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800520c:	4b5b      	ldr	r3, [pc, #364]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	061b      	lsls	r3, r3, #24
 800521a:	4958      	ldr	r1, [pc, #352]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800521c:	4313      	orrs	r3, r2
 800521e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005220:	e04c      	b.n	80052bc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d029      	beq.n	800527e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800522a:	4b54      	ldr	r3, [pc, #336]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a53      	ldr	r2, [pc, #332]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005236:	f7fc ffab 	bl	8002190 <HAL_GetTick>
 800523a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800523c:	e00e      	b.n	800525c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800523e:	f7fc ffa7 	bl	8002190 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d907      	bls.n	800525c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800524c:	4b4b      	ldr	r3, [pc, #300]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8005258:	2303      	movs	r3, #3
 800525a:	e2ff      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800525c:	4b47      	ldr	r3, [pc, #284]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005264:	2b00      	cmp	r3, #0
 8005266:	d0ea      	beq.n	800523e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005268:	4b44      	ldr	r3, [pc, #272]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	061b      	lsls	r3, r3, #24
 8005276:	4941      	ldr	r1, [pc, #260]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005278:	4313      	orrs	r3, r2
 800527a:	604b      	str	r3, [r1, #4]
 800527c:	e01e      	b.n	80052bc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800527e:	4b3f      	ldr	r3, [pc, #252]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a3e      	ldr	r2, [pc, #248]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005288:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800528a:	f7fc ff81 	bl	8002190 <HAL_GetTick>
 800528e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005290:	e00e      	b.n	80052b0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005292:	f7fc ff7d 	bl	8002190 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d907      	bls.n	80052b0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052a0:	4b36      	ldr	r3, [pc, #216]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d001      	beq.n	80052b0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e2d5      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80052b0:	4b32      	ldr	r3, [pc, #200]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d1ea      	bne.n	8005292 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d062      	beq.n	800538e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d038      	beq.n	8005342 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	699b      	ldr	r3, [r3, #24]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d108      	bne.n	80052ea <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80052d8:	4b28      	ldr	r3, [pc, #160]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052de:	4a27      	ldr	r2, [pc, #156]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052e0:	f023 0310 	bic.w	r3, r3, #16
 80052e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80052e8:	e007      	b.n	80052fa <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80052ea:	4b24      	ldr	r3, [pc, #144]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052f0:	4a22      	ldr	r2, [pc, #136]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f043 0310 	orr.w	r3, r3, #16
 80052f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052fa:	4b20      	ldr	r3, [pc, #128]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 80052fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005300:	4a1e      	ldr	r2, [pc, #120]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005302:	f043 0301 	orr.w	r3, r3, #1
 8005306:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800530a:	f7fc ff41 	bl	8002190 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005310:	e00f      	b.n	8005332 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005312:	f7fc ff3d 	bl	8002190 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b07      	cmp	r3, #7
 800531e:	d908      	bls.n	8005332 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005320:	4b16      	ldr	r3, [pc, #88]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005322:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005326:	f003 0302 	and.w	r3, r3, #2
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e294      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005332:	4b12      	ldr	r3, [pc, #72]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005334:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	d0e8      	beq.n	8005312 <HAL_RCC_OscConfig+0x44e>
 8005340:	e025      	b.n	800538e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 8005344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005348:	4a0c      	ldr	r2, [pc, #48]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800534a:	f023 0301 	bic.w	r3, r3, #1
 800534e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005352:	f7fc ff1d 	bl	8002190 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005358:	e012      	b.n	8005380 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800535a:	f7fc ff19 	bl	8002190 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b07      	cmp	r3, #7
 8005366:	d90b      	bls.n	8005380 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005368:	4b04      	ldr	r3, [pc, #16]	; (800537c <HAL_RCC_OscConfig+0x4b8>)
 800536a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d004      	beq.n	8005380 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8005376:	2303      	movs	r3, #3
 8005378:	e270      	b.n	800585c <HAL_RCC_OscConfig+0x998>
 800537a:	bf00      	nop
 800537c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005380:	4ba8      	ldr	r3, [pc, #672]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005382:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e5      	bne.n	800535a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0304 	and.w	r3, r3, #4
 8005396:	2b00      	cmp	r3, #0
 8005398:	f000 812d 	beq.w	80055f6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 800539c:	2300      	movs	r3, #0
 800539e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80053a0:	4ba0      	ldr	r3, [pc, #640]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80053a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10d      	bne.n	80053c8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ac:	4b9d      	ldr	r3, [pc, #628]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80053ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053b0:	4a9c      	ldr	r2, [pc, #624]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80053b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053b6:	6593      	str	r3, [r2, #88]	; 0x58
 80053b8:	4b9a      	ldr	r3, [pc, #616]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80053ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053c0:	60bb      	str	r3, [r7, #8]
 80053c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053c4:	2301      	movs	r3, #1
 80053c6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053c8:	4b97      	ldr	r3, [pc, #604]	; (8005628 <HAL_RCC_OscConfig+0x764>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d11e      	bne.n	8005412 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d4:	4b94      	ldr	r3, [pc, #592]	; (8005628 <HAL_RCC_OscConfig+0x764>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a93      	ldr	r2, [pc, #588]	; (8005628 <HAL_RCC_OscConfig+0x764>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80053e0:	f7fc fed6 	bl	8002190 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053e6:	e00e      	b.n	8005406 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053e8:	f7fc fed2 	bl	8002190 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d907      	bls.n	8005406 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80053f6:	4b8c      	ldr	r3, [pc, #560]	; (8005628 <HAL_RCC_OscConfig+0x764>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005402:	2303      	movs	r3, #3
 8005404:	e22a      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005406:	4b88      	ldr	r3, [pc, #544]	; (8005628 <HAL_RCC_OscConfig+0x764>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540e:	2b00      	cmp	r3, #0
 8005410:	d0ea      	beq.n	80053e8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f003 0301 	and.w	r3, r3, #1
 800541a:	2b00      	cmp	r3, #0
 800541c:	d01f      	beq.n	800545e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d010      	beq.n	800544c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800542a:	4b7e      	ldr	r3, [pc, #504]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800542c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005430:	4a7c      	ldr	r2, [pc, #496]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005432:	f043 0304 	orr.w	r3, r3, #4
 8005436:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800543a:	4b7a      	ldr	r3, [pc, #488]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800543c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005440:	4a78      	ldr	r2, [pc, #480]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005442:	f043 0301 	orr.w	r3, r3, #1
 8005446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800544a:	e018      	b.n	800547e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800544c:	4b75      	ldr	r3, [pc, #468]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800544e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005452:	4a74      	ldr	r2, [pc, #464]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005454:	f043 0301 	orr.w	r3, r3, #1
 8005458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800545c:	e00f      	b.n	800547e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800545e:	4b71      	ldr	r3, [pc, #452]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005464:	4a6f      	ldr	r2, [pc, #444]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800546e:	4b6d      	ldr	r3, [pc, #436]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005470:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005474:	4a6b      	ldr	r2, [pc, #428]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005476:	f023 0304 	bic.w	r3, r3, #4
 800547a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d068      	beq.n	8005558 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005486:	f7fc fe83 	bl	8002190 <HAL_GetTick>
 800548a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800548c:	e011      	b.n	80054b2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800548e:	f7fc fe7f 	bl	8002190 <HAL_GetTick>
 8005492:	4602      	mov	r2, r0
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	1ad3      	subs	r3, r2, r3
 8005498:	f241 3288 	movw	r2, #5000	; 0x1388
 800549c:	4293      	cmp	r3, r2
 800549e:	d908      	bls.n	80054b2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054a0:	4b60      	ldr	r3, [pc, #384]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80054a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d101      	bne.n	80054b2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1d4      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054b2:	4b5c      	ldr	r3, [pc, #368]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80054b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d0e6      	beq.n	800548e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d022      	beq.n	8005512 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80054cc:	4b55      	ldr	r3, [pc, #340]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	4a54      	ldr	r2, [pc, #336]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80054d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80054dc:	e011      	b.n	8005502 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054de:	f7fc fe57 	bl	8002190 <HAL_GetTick>
 80054e2:	4602      	mov	r2, r0
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d908      	bls.n	8005502 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80054f0:	4b4c      	ldr	r3, [pc, #304]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80054f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1ac      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005502:	4b48      	ldr	r3, [pc, #288]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005508:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550c:	2b00      	cmp	r3, #0
 800550e:	d0e6      	beq.n	80054de <HAL_RCC_OscConfig+0x61a>
 8005510:	e068      	b.n	80055e4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005512:	4b44      	ldr	r3, [pc, #272]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005518:	4a42      	ldr	r2, [pc, #264]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800551a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800551e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005522:	e011      	b.n	8005548 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005524:	f7fc fe34 	bl	8002190 <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005532:	4293      	cmp	r3, r2
 8005534:	d908      	bls.n	8005548 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005536:	4b3b      	ldr	r3, [pc, #236]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005538:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800553c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005540:	2b00      	cmp	r3, #0
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e189      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005548:	4b36      	ldr	r3, [pc, #216]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e6      	bne.n	8005524 <HAL_RCC_OscConfig+0x660>
 8005556:	e045      	b.n	80055e4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005558:	f7fc fe1a 	bl	8002190 <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800555e:	e011      	b.n	8005584 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fc fe16 	bl	8002190 <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d908      	bls.n	8005584 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005572:	4b2c      	ldr	r3, [pc, #176]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005578:	f003 0302 	and.w	r3, r3, #2
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005580:	2303      	movs	r3, #3
 8005582:	e16b      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005584:	4b27      	ldr	r3, [pc, #156]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f003 0302 	and.w	r3, r3, #2
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1e6      	bne.n	8005560 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005592:	4b24      	ldr	r3, [pc, #144]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005594:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800559c:	2b00      	cmp	r3, #0
 800559e:	d021      	beq.n	80055e4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80055a0:	4b20      	ldr	r3, [pc, #128]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055a6:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055b0:	e011      	b.n	80055d6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b2:	f7fc fded 	bl	8002190 <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d908      	bls.n	80055d6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055c4:	4b17      	ldr	r3, [pc, #92]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e142      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80055d6:	4b13      	ldr	r3, [pc, #76]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d1e6      	bne.n	80055b2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80055e4:	7ffb      	ldrb	r3, [r7, #31]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d105      	bne.n	80055f6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055ea:	4b0e      	ldr	r3, [pc, #56]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055ee:	4a0d      	ldr	r2, [pc, #52]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 80055f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0320 	and.w	r3, r3, #32
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d04f      	beq.n	80056a2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005606:	2b00      	cmp	r3, #0
 8005608:	d028      	beq.n	800565c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800560a:	4b06      	ldr	r3, [pc, #24]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 800560c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005610:	4a04      	ldr	r2, [pc, #16]	; (8005624 <HAL_RCC_OscConfig+0x760>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fc fdb9 	bl	8002190 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005620:	e014      	b.n	800564c <HAL_RCC_OscConfig+0x788>
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800562c:	f7fc fdb0 	bl	8002190 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d908      	bls.n	800564c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800563a:	4b8a      	ldr	r3, [pc, #552]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 800563c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d101      	bne.n	800564c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005648:	2303      	movs	r3, #3
 800564a:	e107      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800564c:	4b85      	ldr	r3, [pc, #532]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 800564e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005652:	f003 0302 	and.w	r3, r3, #2
 8005656:	2b00      	cmp	r3, #0
 8005658:	d0e8      	beq.n	800562c <HAL_RCC_OscConfig+0x768>
 800565a:	e022      	b.n	80056a2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800565c:	4b81      	ldr	r3, [pc, #516]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 800565e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005662:	4a80      	ldr	r2, [pc, #512]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005664:	f023 0301 	bic.w	r3, r3, #1
 8005668:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800566c:	f7fc fd90 	bl	8002190 <HAL_GetTick>
 8005670:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005672:	e00f      	b.n	8005694 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005674:	f7fc fd8c 	bl	8002190 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	2b02      	cmp	r3, #2
 8005680:	d908      	bls.n	8005694 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005682:	4b78      	ldr	r3, [pc, #480]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005684:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005688:	f003 0302 	and.w	r3, r3, #2
 800568c:	2b00      	cmp	r3, #0
 800568e:	d001      	beq.n	8005694 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e0e3      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005694:	4b73      	ldr	r3, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005696:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800569a:	f003 0302 	and.w	r3, r3, #2
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e8      	bne.n	8005674 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	f000 80d7 	beq.w	800585a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80056ac:	4b6d      	ldr	r3, [pc, #436]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f003 030c 	and.w	r3, r3, #12
 80056b4:	2b0c      	cmp	r3, #12
 80056b6:	f000 8091 	beq.w	80057dc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056be:	2b02      	cmp	r3, #2
 80056c0:	d166      	bne.n	8005790 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b68      	ldr	r3, [pc, #416]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a67      	ldr	r2, [pc, #412]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80056c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fc fd5f 	bl	8002190 <HAL_GetTick>
 80056d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056d4:	e00e      	b.n	80056f4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fc fd5b 	bl	8002190 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d907      	bls.n	80056f4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056e4:	4b5f      	ldr	r3, [pc, #380]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0b3      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ea      	bne.n	80056d6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005700:	4b58      	ldr	r3, [pc, #352]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	4b58      	ldr	r3, [pc, #352]	; (8005868 <HAL_RCC_OscConfig+0x9a4>)
 8005706:	4013      	ands	r3, r2
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005710:	3a01      	subs	r2, #1
 8005712:	0112      	lsls	r2, r2, #4
 8005714:	4311      	orrs	r1, r2
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800571a:	0212      	lsls	r2, r2, #8
 800571c:	4311      	orrs	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005722:	0852      	lsrs	r2, r2, #1
 8005724:	3a01      	subs	r2, #1
 8005726:	0552      	lsls	r2, r2, #21
 8005728:	4311      	orrs	r1, r2
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800572e:	0852      	lsrs	r2, r2, #1
 8005730:	3a01      	subs	r2, #1
 8005732:	0652      	lsls	r2, r2, #25
 8005734:	4311      	orrs	r1, r2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800573a:	06d2      	lsls	r2, r2, #27
 800573c:	430a      	orrs	r2, r1
 800573e:	4949      	ldr	r1, [pc, #292]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005740:	4313      	orrs	r3, r2
 8005742:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005744:	4b47      	ldr	r3, [pc, #284]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a46      	ldr	r2, [pc, #280]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 800574a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800574e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005750:	4b44      	ldr	r3, [pc, #272]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005752:	68db      	ldr	r3, [r3, #12]
 8005754:	4a43      	ldr	r2, [pc, #268]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800575a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800575c:	f7fc fd18 	bl	8002190 <HAL_GetTick>
 8005760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005762:	e00e      	b.n	8005782 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005764:	f7fc fd14 	bl	8002190 <HAL_GetTick>
 8005768:	4602      	mov	r2, r0
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	2b02      	cmp	r3, #2
 8005770:	d907      	bls.n	8005782 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005772:	4b3c      	ldr	r3, [pc, #240]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	e06c      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005782:	4b38      	ldr	r3, [pc, #224]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d0ea      	beq.n	8005764 <HAL_RCC_OscConfig+0x8a0>
 800578e:	e064      	b.n	800585a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005790:	4b34      	ldr	r3, [pc, #208]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a33      	ldr	r2, [pc, #204]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 8005796:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800579a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579c:	f7fc fcf8 	bl	8002190 <HAL_GetTick>
 80057a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057a2:	e00e      	b.n	80057c2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057a4:	f7fc fcf4 	bl	8002190 <HAL_GetTick>
 80057a8:	4602      	mov	r2, r0
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	1ad3      	subs	r3, r2, r3
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d907      	bls.n	80057c2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b2:	4b2c      	ldr	r3, [pc, #176]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e04c      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c2:	4b28      	ldr	r3, [pc, #160]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ea      	bne.n	80057a4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80057ce:	4b25      	ldr	r3, [pc, #148]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	4924      	ldr	r1, [pc, #144]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80057d4:	4b25      	ldr	r3, [pc, #148]	; (800586c <HAL_RCC_OscConfig+0x9a8>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	60cb      	str	r3, [r1, #12]
 80057da:	e03e      	b.n	800585a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e0:	2b01      	cmp	r3, #1
 80057e2:	d101      	bne.n	80057e8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e039      	b.n	800585c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80057e8:	4b1e      	ldr	r3, [pc, #120]	; (8005864 <HAL_RCC_OscConfig+0x9a0>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f003 0203 	and.w	r2, r3, #3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d12c      	bne.n	8005856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005806:	3b01      	subs	r3, #1
 8005808:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	429a      	cmp	r2, r3
 800580c:	d123      	bne.n	8005856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005818:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581a:	429a      	cmp	r2, r3
 800581c:	d11b      	bne.n	8005856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005828:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800582a:	429a      	cmp	r2, r3
 800582c:	d113      	bne.n	8005856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	085b      	lsrs	r3, r3, #1
 800583a:	3b01      	subs	r3, #1
 800583c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d109      	bne.n	8005856 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	085b      	lsrs	r3, r3, #1
 800584e:	3b01      	subs	r3, #1
 8005850:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005852:	429a      	cmp	r2, r3
 8005854:	d001      	beq.n	800585a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e000      	b.n	800585c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40021000 	.word	0x40021000
 8005868:	019f800c 	.word	0x019f800c
 800586c:	feeefffc 	.word	0xfeeefffc

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800587a:	2300      	movs	r3, #0
 800587c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d101      	bne.n	8005888 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e11c      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005888:	4b90      	ldr	r3, [pc, #576]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 030f 	and.w	r3, r3, #15
 8005890:	683a      	ldr	r2, [r7, #0]
 8005892:	429a      	cmp	r2, r3
 8005894:	d910      	bls.n	80058b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005896:	4b8d      	ldr	r3, [pc, #564]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f023 020f 	bic.w	r2, r3, #15
 800589e:	498b      	ldr	r1, [pc, #556]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058a6:	4b89      	ldr	r3, [pc, #548]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d001      	beq.n	80058b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e104      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	689a      	ldr	r2, [r3, #8]
 80058c8:	4b81      	ldr	r3, [pc, #516]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d908      	bls.n	80058e6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058d4:	4b7e      	ldr	r3, [pc, #504]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	497b      	ldr	r1, [pc, #492]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f003 0301 	and.w	r3, r3, #1
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 8085 	beq.w	80059fe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	2b03      	cmp	r3, #3
 80058fa:	d11f      	bne.n	800593c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058fc:	4b74      	ldr	r3, [pc, #464]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d101      	bne.n	800590c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0da      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800590c:	f000 fa58 	bl	8005dc0 <RCC_GetSysClockFreqFromPLLSource>
 8005910:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4a6f      	ldr	r2, [pc, #444]	; (8005ad4 <HAL_RCC_ClockConfig+0x264>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d947      	bls.n	80059aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800591a:	4b6d      	ldr	r3, [pc, #436]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d141      	bne.n	80059aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005926:	4b6a      	ldr	r3, [pc, #424]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800592e:	4a68      	ldr	r2, [pc, #416]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005934:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005936:	2380      	movs	r3, #128	; 0x80
 8005938:	617b      	str	r3, [r7, #20]
 800593a:	e036      	b.n	80059aa <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b02      	cmp	r3, #2
 8005942:	d107      	bne.n	8005954 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005944:	4b62      	ldr	r3, [pc, #392]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d115      	bne.n	800597c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0b6      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d107      	bne.n	800596c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800595c:	4b5c      	ldr	r3, [pc, #368]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d109      	bne.n	800597c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e0aa      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800596c:	4b58      	ldr	r3, [pc, #352]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e0a2      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800597c:	f000 f8b0 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005980:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	4a53      	ldr	r2, [pc, #332]	; (8005ad4 <HAL_RCC_ClockConfig+0x264>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d90f      	bls.n	80059aa <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800598a:	4b51      	ldr	r3, [pc, #324]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d109      	bne.n	80059aa <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005996:	4b4e      	ldr	r3, [pc, #312]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005998:	689b      	ldr	r3, [r3, #8]
 800599a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800599e:	4a4c      	ldr	r2, [pc, #304]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80059a6:	2380      	movs	r3, #128	; 0x80
 80059a8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059aa:	4b49      	ldr	r3, [pc, #292]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0203 	bic.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	4946      	ldr	r1, [pc, #280]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059bc:	f7fc fbe8 	bl	8002190 <HAL_GetTick>
 80059c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059c2:	e013      	b.n	80059ec <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059c4:	f7fc fbe4 	bl	8002190 <HAL_GetTick>
 80059c8:	4602      	mov	r2, r0
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	1ad3      	subs	r3, r2, r3
 80059ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d90a      	bls.n	80059ec <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	f003 020c 	and.w	r2, r3, #12
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	009b      	lsls	r3, r3, #2
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d001      	beq.n	80059ec <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 80059e8:	2303      	movs	r3, #3
 80059ea:	e06a      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ec:	4b38      	ldr	r3, [pc, #224]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f003 020c 	and.w	r2, r3, #12
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	685b      	ldr	r3, [r3, #4]
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d1e2      	bne.n	80059c4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b80      	cmp	r3, #128	; 0x80
 8005a02:	d105      	bne.n	8005a10 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a04:	4b32      	ldr	r3, [pc, #200]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a0e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0302 	and.w	r3, r3, #2
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d010      	beq.n	8005a3e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689a      	ldr	r2, [r3, #8]
 8005a20:	4b2b      	ldr	r3, [pc, #172]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d208      	bcs.n	8005a3e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	4925      	ldr	r1, [pc, #148]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a3e:	4b23      	ldr	r3, [pc, #140]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f003 030f 	and.w	r3, r3, #15
 8005a46:	683a      	ldr	r2, [r7, #0]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d210      	bcs.n	8005a6e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a4c:	4b1f      	ldr	r3, [pc, #124]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f023 020f 	bic.w	r2, r3, #15
 8005a54:	491d      	ldr	r1, [pc, #116]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a5c:	4b1b      	ldr	r3, [pc, #108]	; (8005acc <HAL_RCC_ClockConfig+0x25c>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	683a      	ldr	r2, [r7, #0]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d001      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e029      	b.n	8005ac2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0304 	and.w	r3, r3, #4
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d008      	beq.n	8005a8c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a7a:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	4912      	ldr	r1, [pc, #72]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d009      	beq.n	8005aac <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a98:	4b0d      	ldr	r3, [pc, #52]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	00db      	lsls	r3, r3, #3
 8005aa6:	490a      	ldr	r1, [pc, #40]	; (8005ad0 <HAL_RCC_ClockConfig+0x260>)
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005aac:	f000 f8b6 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <HAL_RCC_ClockConfig+0x268>)
 8005ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ab6:	4b09      	ldr	r3, [pc, #36]	; (8005adc <HAL_RCC_ClockConfig+0x26c>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fc f8ce 	bl	8001c5c <HAL_InitTick>
 8005ac0:	4603      	mov	r3, r0
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3718      	adds	r7, #24
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	40022000 	.word	0x40022000
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	04c4b400 	.word	0x04c4b400
 8005ad8:	2001b6a0 	.word	0x2001b6a0
 8005adc:	2001b6a4 	.word	0x2001b6a4

08005ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b089      	sub	sp, #36	; 0x24
 8005ae4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	61fb      	str	r3, [r7, #28]
 8005aea:	2300      	movs	r3, #0
 8005aec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005aee:	4b47      	ldr	r3, [pc, #284]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005af0:	689b      	ldr	r3, [r3, #8]
 8005af2:	f003 030c 	and.w	r3, r3, #12
 8005af6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005af8:	4b44      	ldr	r3, [pc, #272]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f003 0303 	and.w	r3, r3, #3
 8005b00:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d005      	beq.n	8005b14 <HAL_RCC_GetSysClockFreq+0x34>
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	2b0c      	cmp	r3, #12
 8005b0c:	d121      	bne.n	8005b52 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d11e      	bne.n	8005b52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b14:	4b3d      	ldr	r3, [pc, #244]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0308 	and.w	r3, r3, #8
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d107      	bne.n	8005b30 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b20:	4b3a      	ldr	r3, [pc, #232]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b26:	0a1b      	lsrs	r3, r3, #8
 8005b28:	f003 030f 	and.w	r3, r3, #15
 8005b2c:	61fb      	str	r3, [r7, #28]
 8005b2e:	e005      	b.n	8005b3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b30:	4b36      	ldr	r3, [pc, #216]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	091b      	lsrs	r3, r3, #4
 8005b36:	f003 030f 	and.w	r3, r3, #15
 8005b3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8005b3c:	4a34      	ldr	r2, [pc, #208]	; (8005c10 <HAL_RCC_GetSysClockFreq+0x130>)
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b44:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10d      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005b50:	e00a      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d102      	bne.n	8005b5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b58:	4b2e      	ldr	r3, [pc, #184]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x134>)
 8005b5a:	61bb      	str	r3, [r7, #24]
 8005b5c:	e004      	b.n	8005b68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d101      	bne.n	8005b68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b64:	4b2c      	ldr	r3, [pc, #176]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8005b66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	2b0c      	cmp	r3, #12
 8005b6c:	d146      	bne.n	8005bfc <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005b6e:	4b27      	ldr	r3, [pc, #156]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b70:	68db      	ldr	r3, [r3, #12]
 8005b72:	f003 0303 	and.w	r3, r3, #3
 8005b76:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b78:	4b24      	ldr	r3, [pc, #144]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	091b      	lsrs	r3, r3, #4
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	3301      	adds	r3, #1
 8005b84:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d003      	beq.n	8005b94 <HAL_RCC_GetSysClockFreq+0xb4>
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b03      	cmp	r3, #3
 8005b90:	d00d      	beq.n	8005bae <HAL_RCC_GetSysClockFreq+0xce>
 8005b92:	e019      	b.n	8005bc8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b94:	4a1f      	ldr	r2, [pc, #124]	; (8005c14 <HAL_RCC_GetSysClockFreq+0x134>)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005b9e:	68d2      	ldr	r2, [r2, #12]
 8005ba0:	0a12      	lsrs	r2, r2, #8
 8005ba2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ba6:	fb02 f303 	mul.w	r3, r2, r3
 8005baa:	617b      	str	r3, [r7, #20]
        break;
 8005bac:	e019      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bae:	4a1a      	ldr	r2, [pc, #104]	; (8005c18 <HAL_RCC_GetSysClockFreq+0x138>)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bb6:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005bb8:	68d2      	ldr	r2, [r2, #12]
 8005bba:	0a12      	lsrs	r2, r2, #8
 8005bbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bc0:	fb02 f303 	mul.w	r3, r2, r3
 8005bc4:	617b      	str	r3, [r7, #20]
        break;
 8005bc6:	e00c      	b.n	8005be2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bc8:	69fa      	ldr	r2, [r7, #28]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd0:	4a0e      	ldr	r2, [pc, #56]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005bd2:	68d2      	ldr	r2, [r2, #12]
 8005bd4:	0a12      	lsrs	r2, r2, #8
 8005bd6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005bda:	fb02 f303 	mul.w	r3, r2, r3
 8005bde:	617b      	str	r3, [r7, #20]
        break;
 8005be0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005be2:	4b0a      	ldr	r3, [pc, #40]	; (8005c0c <HAL_RCC_GetSysClockFreq+0x12c>)
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	0e5b      	lsrs	r3, r3, #25
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	3301      	adds	r3, #1
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005bfc:	69bb      	ldr	r3, [r7, #24]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3724      	adds	r7, #36	; 0x24
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr
 8005c0a:	bf00      	nop
 8005c0c:	40021000 	.word	0x40021000
 8005c10:	080166c8 	.word	0x080166c8
 8005c14:	00f42400 	.word	0x00f42400
 8005c18:	00989680 	.word	0x00989680

08005c1c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005c20:	f7ff ff5e 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8005c24:	4602      	mov	r2, r0
 8005c26:	4b05      	ldr	r3, [pc, #20]	; (8005c3c <HAL_RCC_GetHCLKFreq+0x20>)
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	091b      	lsrs	r3, r3, #4
 8005c2c:	f003 030f 	and.w	r3, r3, #15
 8005c30:	4903      	ldr	r1, [pc, #12]	; (8005c40 <HAL_RCC_GetHCLKFreq+0x24>)
 8005c32:	5ccb      	ldrb	r3, [r1, r3]
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	40021000 	.word	0x40021000
 8005c40:	080166b0 	.word	0x080166b0

08005c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c48:	f7ff ffe8 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c4c:	4602      	mov	r2, r0
 8005c4e:	4b05      	ldr	r3, [pc, #20]	; (8005c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	0a1b      	lsrs	r3, r3, #8
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	4903      	ldr	r1, [pc, #12]	; (8005c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c5a:	5ccb      	ldrb	r3, [r1, r3]
 8005c5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	40021000 	.word	0x40021000
 8005c68:	080166c0 	.word	0x080166c0

08005c6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005c70:	f7ff ffd4 	bl	8005c1c <HAL_RCC_GetHCLKFreq>
 8005c74:	4602      	mov	r2, r0
 8005c76:	4b05      	ldr	r3, [pc, #20]	; (8005c8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	0adb      	lsrs	r3, r3, #11
 8005c7c:	f003 0307 	and.w	r3, r3, #7
 8005c80:	4903      	ldr	r1, [pc, #12]	; (8005c90 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c82:	5ccb      	ldrb	r3, [r1, r3]
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	080166c0 	.word	0x080166c0

08005c94 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b083      	sub	sp, #12
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	220f      	movs	r2, #15
 8005ca2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005ca4:	4b12      	ldr	r3, [pc, #72]	; (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	f003 0203 	and.w	r2, r3, #3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005cb0:	4b0f      	ldr	r3, [pc, #60]	; (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005cbc:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005cc8:	4b09      	ldr	r3, [pc, #36]	; (8005cf0 <HAL_RCC_GetClockConfig+0x5c>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	08db      	lsrs	r3, r3, #3
 8005cce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005cd6:	4b07      	ldr	r3, [pc, #28]	; (8005cf4 <HAL_RCC_GetClockConfig+0x60>)
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f003 020f 	and.w	r2, r3, #15
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	601a      	str	r2, [r3, #0]
}
 8005ce2:	bf00      	nop
 8005ce4:	370c      	adds	r7, #12
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40021000 	.word	0x40021000
 8005cf4:	40022000 	.word	0x40022000

08005cf8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b086      	sub	sp, #24
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005d00:	2300      	movs	r3, #0
 8005d02:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d04:	4b2c      	ldr	r3, [pc, #176]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005d10:	f7ff f83a 	bl	8004d88 <HAL_PWREx_GetVoltageRange>
 8005d14:	6138      	str	r0, [r7, #16]
 8005d16:	e014      	b.n	8005d42 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d1c:	4a26      	ldr	r2, [pc, #152]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d22:	6593      	str	r3, [r2, #88]	; 0x58
 8005d24:	4b24      	ldr	r3, [pc, #144]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d2c:	60fb      	str	r3, [r7, #12]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005d30:	f7ff f82a 	bl	8004d88 <HAL_PWREx_GetVoltageRange>
 8005d34:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005d36:	4b20      	ldr	r3, [pc, #128]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d40:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d4e:	d10b      	bne.n	8005d68 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2b80      	cmp	r3, #128	; 0x80
 8005d54:	d919      	bls.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2ba0      	cmp	r3, #160	; 0xa0
 8005d5a:	d902      	bls.n	8005d62 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005d60:	e013      	b.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d62:	2301      	movs	r3, #1
 8005d64:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005d66:	e010      	b.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b80      	cmp	r3, #128	; 0x80
 8005d6c:	d902      	bls.n	8005d74 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005d6e:	2303      	movs	r3, #3
 8005d70:	617b      	str	r3, [r7, #20]
 8005d72:	e00a      	b.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b80      	cmp	r3, #128	; 0x80
 8005d78:	d102      	bne.n	8005d80 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005d7a:	2302      	movs	r3, #2
 8005d7c:	617b      	str	r3, [r7, #20]
 8005d7e:	e004      	b.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b70      	cmp	r3, #112	; 0x70
 8005d84:	d101      	bne.n	8005d8a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005d86:	2301      	movs	r3, #1
 8005d88:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005d8a:	4b0c      	ldr	r3, [pc, #48]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f023 020f 	bic.w	r2, r3, #15
 8005d92:	490a      	ldr	r1, [pc, #40]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	4313      	orrs	r3, r2
 8005d98:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005d9a:	4b08      	ldr	r3, [pc, #32]	; (8005dbc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f003 030f 	and.w	r3, r3, #15
 8005da2:	697a      	ldr	r2, [r7, #20]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d001      	beq.n	8005dac <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3718      	adds	r7, #24
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}
 8005db6:	bf00      	nop
 8005db8:	40021000 	.word	0x40021000
 8005dbc:	40022000 	.word	0x40022000

08005dc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b087      	sub	sp, #28
 8005dc4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dc6:	4b31      	ldr	r3, [pc, #196]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f003 0303 	and.w	r3, r3, #3
 8005dce:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dd0:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	091b      	lsrs	r3, r3, #4
 8005dd6:	f003 030f 	and.w	r3, r3, #15
 8005dda:	3301      	adds	r3, #1
 8005ddc:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2b03      	cmp	r3, #3
 8005de2:	d015      	beq.n	8005e10 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2b03      	cmp	r3, #3
 8005de8:	d839      	bhi.n	8005e5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d01c      	beq.n	8005e2a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d133      	bne.n	8005e5e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005df6:	4a26      	ldr	r2, [pc, #152]	; (8005e90 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dfe:	4a23      	ldr	r2, [pc, #140]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e00:	68d2      	ldr	r2, [r2, #12]
 8005e02:	0a12      	lsrs	r2, r2, #8
 8005e04:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e08:	fb02 f303 	mul.w	r3, r2, r3
 8005e0c:	613b      	str	r3, [r7, #16]
      break;
 8005e0e:	e029      	b.n	8005e64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e10:	4a20      	ldr	r2, [pc, #128]	; (8005e94 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e18:	4a1c      	ldr	r2, [pc, #112]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e1a:	68d2      	ldr	r2, [r2, #12]
 8005e1c:	0a12      	lsrs	r2, r2, #8
 8005e1e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e22:	fb02 f303 	mul.w	r3, r2, r3
 8005e26:	613b      	str	r3, [r7, #16]
      break;
 8005e28:	e01c      	b.n	8005e64 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005e2a:	4b18      	ldr	r3, [pc, #96]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d107      	bne.n	8005e46 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005e36:	4b15      	ldr	r3, [pc, #84]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e3c:	0a1b      	lsrs	r3, r3, #8
 8005e3e:	f003 030f 	and.w	r3, r3, #15
 8005e42:	617b      	str	r3, [r7, #20]
 8005e44:	e005      	b.n	8005e52 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005e46:	4b11      	ldr	r3, [pc, #68]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	091b      	lsrs	r3, r3, #4
 8005e4c:	f003 030f 	and.w	r3, r3, #15
 8005e50:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005e52:	4a11      	ldr	r2, [pc, #68]	; (8005e98 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e5a:	613b      	str	r3, [r7, #16]
        break;
 8005e5c:	e002      	b.n	8005e64 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	613b      	str	r3, [r7, #16]
      break;
 8005e62:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005e64:	4b09      	ldr	r3, [pc, #36]	; (8005e8c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	0e5b      	lsrs	r3, r3, #25
 8005e6a:	f003 0303 	and.w	r3, r3, #3
 8005e6e:	3301      	adds	r3, #1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005e74:	693a      	ldr	r2, [r7, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005e7e:	683b      	ldr	r3, [r7, #0]
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	371c      	adds	r7, #28
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	00f42400 	.word	0x00f42400
 8005e94:	00989680 	.word	0x00989680
 8005e98:	080166c8 	.word	0x080166c8

08005e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d040      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ebc:	2b80      	cmp	r3, #128	; 0x80
 8005ebe:	d02a      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ec0:	2b80      	cmp	r3, #128	; 0x80
 8005ec2:	d825      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ec4:	2b60      	cmp	r3, #96	; 0x60
 8005ec6:	d026      	beq.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005ec8:	2b60      	cmp	r3, #96	; 0x60
 8005eca:	d821      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ecc:	2b40      	cmp	r3, #64	; 0x40
 8005ece:	d006      	beq.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005ed0:	2b40      	cmp	r3, #64	; 0x40
 8005ed2:	d81d      	bhi.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d009      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005ed8:	2b20      	cmp	r3, #32
 8005eda:	d010      	beq.n	8005efe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005edc:	e018      	b.n	8005f10 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ede:	4b8f      	ldr	r3, [pc, #572]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	4a8e      	ldr	r2, [pc, #568]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ee4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ee8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005eea:	e015      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f001 faf8 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005efc:	e00c      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	3320      	adds	r3, #32
 8005f02:	2100      	movs	r1, #0
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 fbd5 	bl	80076b4 <RCCEx_PLLSAI2_Config>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005f0e:	e003      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	77fb      	strb	r3, [r7, #31]
        break;
 8005f14:	e000      	b.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005f16:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f18:	7ffb      	ldrb	r3, [r7, #31]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10b      	bne.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f1e:	4b7f      	ldr	r3, [pc, #508]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005f24:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f2c:	497b      	ldr	r1, [pc, #492]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005f34:	e001      	b.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f36:	7ffb      	ldrb	r3, [r7, #31]
 8005f38:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d047      	beq.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f4e:	d030      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f54:	d82a      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f5a:	d02a      	beq.n	8005fb2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005f5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f60:	d824      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f66:	d008      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d81e      	bhi.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f76:	d010      	beq.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005f78:	e018      	b.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005f7a:	4b68      	ldr	r3, [pc, #416]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	4a67      	ldr	r2, [pc, #412]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f84:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f86:	e015      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	2100      	movs	r1, #0
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 faaa 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 8005f94:	4603      	mov	r3, r0
 8005f96:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005f98:	e00c      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	3320      	adds	r3, #32
 8005f9e:	2100      	movs	r1, #0
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f001 fb87 	bl	80076b4 <RCCEx_PLLSAI2_Config>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005faa:	e003      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	77fb      	strb	r3, [r7, #31]
        break;
 8005fb0:	e000      	b.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005fb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005fb4:	7ffb      	ldrb	r3, [r7, #31]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d10b      	bne.n	8005fd2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005fba:	4b58      	ldr	r3, [pc, #352]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	4954      	ldr	r1, [pc, #336]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005fd0:	e001      	b.n	8005fd6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fd2:	7ffb      	ldrb	r3, [r7, #31]
 8005fd4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f000 80ab 	beq.w	800613a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fe8:	4b4c      	ldr	r3, [pc, #304]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d10d      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ff4:	4b49      	ldr	r3, [pc, #292]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ff8:	4a48      	ldr	r2, [pc, #288]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ffe:	6593      	str	r3, [r2, #88]	; 0x58
 8006000:	4b46      	ldr	r3, [pc, #280]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006002:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800600c:	2301      	movs	r3, #1
 800600e:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006010:	4b43      	ldr	r3, [pc, #268]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a42      	ldr	r2, [pc, #264]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800601a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800601c:	f7fc f8b8 	bl	8002190 <HAL_GetTick>
 8006020:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006022:	e00f      	b.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006024:	f7fc f8b4 	bl	8002190 <HAL_GetTick>
 8006028:	4602      	mov	r2, r0
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	2b02      	cmp	r3, #2
 8006030:	d908      	bls.n	8006044 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006032:	4b3b      	ldr	r3, [pc, #236]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800603a:	2b00      	cmp	r3, #0
 800603c:	d109      	bne.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8006042:	e006      	b.n	8006052 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006044:	4b36      	ldr	r3, [pc, #216]	; (8006120 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800604c:	2b00      	cmp	r3, #0
 800604e:	d0e9      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8006050:	e000      	b.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8006052:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8006054:	7ffb      	ldrb	r3, [r7, #31]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d164      	bne.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800605a:	4b30      	ldr	r3, [pc, #192]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800605c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006060:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006064:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01f      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x210>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	429a      	cmp	r2, r3
 8006076:	d019      	beq.n	80060ac <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006078:	4b28      	ldr	r3, [pc, #160]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800607e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006082:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006084:	4b25      	ldr	r3, [pc, #148]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800608a:	4a24      	ldr	r2, [pc, #144]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800608c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006094:	4b21      	ldr	r3, [pc, #132]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800609a:	4a20      	ldr	r2, [pc, #128]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800609c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80060a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060a4:	4a1d      	ldr	r2, [pc, #116]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	f003 0301 	and.w	r3, r3, #1
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d01f      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060b6:	f7fc f86b 	bl	8002190 <HAL_GetTick>
 80060ba:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060bc:	e012      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060be:	f7fc f867 	bl	8002190 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d909      	bls.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060d0:	4b12      	ldr	r3, [pc, #72]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060d6:	f003 0302 	and.w	r3, r3, #2
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d10a      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80060e2:	e007      	b.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060e4:	4b0d      	ldr	r3, [pc, #52]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060ea:	f003 0302 	and.w	r3, r3, #2
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0e5      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x222>
 80060f2:	e000      	b.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80060f4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80060f6:	7ffb      	ldrb	r3, [r7, #31]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10c      	bne.n	8006116 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060fc:	4b07      	ldr	r3, [pc, #28]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80060fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	4903      	ldr	r1, [pc, #12]	; (800611c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006114:	e008      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006116:	7ffb      	ldrb	r3, [r7, #31]
 8006118:	77bb      	strb	r3, [r7, #30]
 800611a:	e005      	b.n	8006128 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 800611c:	40021000 	.word	0x40021000
 8006120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006124:	7ffb      	ldrb	r3, [r7, #31]
 8006126:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006128:	7dfb      	ldrb	r3, [r7, #23]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d105      	bne.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800612e:	4b9c      	ldr	r3, [pc, #624]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006132:	4a9b      	ldr	r2, [pc, #620]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f003 0301 	and.w	r3, r3, #1
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006146:	4b96      	ldr	r3, [pc, #600]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f023 0203 	bic.w	r2, r3, #3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006154:	4992      	ldr	r1, [pc, #584]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f003 0302 	and.w	r3, r3, #2
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00a      	beq.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006168:	4b8d      	ldr	r3, [pc, #564]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f023 020c 	bic.w	r2, r3, #12
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006176:	498a      	ldr	r1, [pc, #552]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f003 0304 	and.w	r3, r3, #4
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00a      	beq.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800618a:	4b85      	ldr	r3, [pc, #532]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800618c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006190:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	4981      	ldr	r1, [pc, #516]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800619a:	4313      	orrs	r3, r2
 800619c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 0308 	and.w	r3, r3, #8
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d00a      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80061ac:	4b7c      	ldr	r3, [pc, #496]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	4979      	ldr	r1, [pc, #484]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061bc:	4313      	orrs	r3, r2
 80061be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0310 	and.w	r3, r3, #16
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00a      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80061ce:	4b74      	ldr	r3, [pc, #464]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061dc:	4970      	ldr	r1, [pc, #448]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061de:	4313      	orrs	r3, r2
 80061e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0320 	and.w	r3, r3, #32
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00a      	beq.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f0:	4b6b      	ldr	r3, [pc, #428]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fe:	4968      	ldr	r1, [pc, #416]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006200:	4313      	orrs	r3, r2
 8006202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800620e:	2b00      	cmp	r3, #0
 8006210:	d00a      	beq.n	8006228 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006212:	4b63      	ldr	r3, [pc, #396]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006218:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006220:	495f      	ldr	r1, [pc, #380]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006222:	4313      	orrs	r3, r2
 8006224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006230:	2b00      	cmp	r3, #0
 8006232:	d00a      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006234:	4b5a      	ldr	r3, [pc, #360]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800623a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006242:	4957      	ldr	r1, [pc, #348]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006244:	4313      	orrs	r3, r2
 8006246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006256:	4b52      	ldr	r3, [pc, #328]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800625c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006264:	494e      	ldr	r1, [pc, #312]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006274:	2b00      	cmp	r3, #0
 8006276:	d031      	beq.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800627c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006280:	d00e      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006286:	d814      	bhi.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006288:	2b00      	cmp	r3, #0
 800628a:	d015      	beq.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800628c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006290:	d10f      	bne.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006292:	4b43      	ldr	r3, [pc, #268]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	4a42      	ldr	r2, [pc, #264]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006298:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800629c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 800629e:	e00c      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	3304      	adds	r3, #4
 80062a4:	2100      	movs	r1, #0
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 f91e 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 80062ac:	4603      	mov	r3, r0
 80062ae:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80062b0:	e003      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	77fb      	strb	r3, [r7, #31]
        break;
 80062b6:	e000      	b.n	80062ba <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80062b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062ba:	7ffb      	ldrb	r3, [r7, #31]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d10b      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062c0:	4b37      	ldr	r3, [pc, #220]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062c6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80062ce:	4934      	ldr	r1, [pc, #208]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80062d6:	e001      	b.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d8:	7ffb      	ldrb	r3, [r7, #31]
 80062da:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062e8:	4b2d      	ldr	r3, [pc, #180]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062f6:	492a      	ldr	r1, [pc, #168]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00a      	beq.n	8006320 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800630a:	4b25      	ldr	r3, [pc, #148]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006318:	4921      	ldr	r1, [pc, #132]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006328:	2b00      	cmp	r3, #0
 800632a:	d00a      	beq.n	8006342 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800632c:	4b1c      	ldr	r3, [pc, #112]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006332:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	4919      	ldr	r1, [pc, #100]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800633c:	4313      	orrs	r3, r2
 800633e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d00a      	beq.n	8006364 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800634e:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006350:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006354:	f023 0203 	bic.w	r2, r3, #3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800635c:	4910      	ldr	r1, [pc, #64]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800635e:	4313      	orrs	r3, r2
 8006360:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d02b      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006370:	4b0b      	ldr	r3, [pc, #44]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006376:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800637e:	4908      	ldr	r1, [pc, #32]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800638a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800638e:	d109      	bne.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006390:	4b03      	ldr	r3, [pc, #12]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	4a02      	ldr	r2, [pc, #8]	; (80063a0 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006396:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800639a:	60d3      	str	r3, [r2, #12]
 800639c:	e014      	b.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 800639e:	bf00      	nop
 80063a0:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80063ac:	d10c      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	3304      	adds	r3, #4
 80063b2:	2101      	movs	r1, #1
 80063b4:	4618      	mov	r0, r3
 80063b6:	f001 f897 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 80063ba:	4603      	mov	r3, r0
 80063bc:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80063be:	7ffb      	ldrb	r3, [r7, #31]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d001      	beq.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80063c4:	7ffb      	ldrb	r3, [r7, #31]
 80063c6:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d04a      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063dc:	d108      	bne.n	80063f0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80063de:	4b70      	ldr	r3, [pc, #448]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063e4:	4a6e      	ldr	r2, [pc, #440]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80063ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80063ee:	e012      	b.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80063f0:	4b6b      	ldr	r3, [pc, #428]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80063fe:	4968      	ldr	r1, [pc, #416]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006400:	4313      	orrs	r3, r2
 8006402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006406:	4b66      	ldr	r3, [pc, #408]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006408:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800640c:	4a64      	ldr	r2, [pc, #400]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800640e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006412:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800641a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800641e:	d10d      	bne.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	3304      	adds	r3, #4
 8006424:	2101      	movs	r1, #1
 8006426:	4618      	mov	r0, r3
 8006428:	f001 f85e 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 800642c:	4603      	mov	r3, r0
 800642e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006430:	7ffb      	ldrb	r3, [r7, #31]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d019      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 8006436:	7ffb      	ldrb	r3, [r7, #31]
 8006438:	77bb      	strb	r3, [r7, #30]
 800643a:	e016      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006440:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006444:	d106      	bne.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006446:	4b56      	ldr	r3, [pc, #344]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006448:	68db      	ldr	r3, [r3, #12]
 800644a:	4a55      	ldr	r2, [pc, #340]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800644c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006450:	60d3      	str	r3, [r2, #12]
 8006452:	e00a      	b.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006458:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800645c:	d105      	bne.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800645e:	4b50      	ldr	r3, [pc, #320]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006460:	68db      	ldr	r3, [r3, #12]
 8006462:	4a4f      	ldr	r2, [pc, #316]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006468:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006472:	2b00      	cmp	r3, #0
 8006474:	d028      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006476:	4b4a      	ldr	r3, [pc, #296]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006478:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800647c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006484:	4946      	ldr	r1, [pc, #280]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006486:	4313      	orrs	r3, r2
 8006488:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006490:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006494:	d106      	bne.n	80064a4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006496:	4b42      	ldr	r3, [pc, #264]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	4a41      	ldr	r2, [pc, #260]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800649c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064a0:	60d3      	str	r3, [r2, #12]
 80064a2:	e011      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80064a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80064ac:	d10c      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	3304      	adds	r3, #4
 80064b2:	2101      	movs	r1, #1
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 f817 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 80064ba:	4603      	mov	r3, r0
 80064bc:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80064be:	7ffb      	ldrb	r3, [r7, #31]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d001      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80064c4:	7ffb      	ldrb	r3, [r7, #31]
 80064c6:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d01e      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064d4:	4b32      	ldr	r3, [pc, #200]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064e4:	492e      	ldr	r1, [pc, #184]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064f6:	d10c      	bne.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	3304      	adds	r3, #4
 80064fc:	2102      	movs	r1, #2
 80064fe:	4618      	mov	r0, r3
 8006500:	f000 fff2 	bl	80074e8 <RCCEx_PLLSAI1_Config>
 8006504:	4603      	mov	r3, r0
 8006506:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006508:	7ffb      	ldrb	r3, [r7, #31]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d001      	beq.n	8006512 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 800650e:	7ffb      	ldrb	r3, [r7, #31]
 8006510:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00b      	beq.n	8006536 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800651e:	4b20      	ldr	r3, [pc, #128]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006520:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006524:	f023 0204 	bic.w	r2, r3, #4
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800652e:	491c      	ldr	r1, [pc, #112]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006530:	4313      	orrs	r3, r2
 8006532:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d00b      	beq.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8006542:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006544:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006548:	f023 0218 	bic.w	r2, r3, #24
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006552:	4913      	ldr	r1, [pc, #76]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006554:	4313      	orrs	r3, r2
 8006556:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006562:	2b00      	cmp	r3, #0
 8006564:	d017      	beq.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006566:	4b0e      	ldr	r3, [pc, #56]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800656c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006576:	490a      	ldr	r1, [pc, #40]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006578:	4313      	orrs	r3, r2
 800657a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006584:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006588:	d105      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	4a04      	ldr	r2, [pc, #16]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006590:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006594:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8006596:	7fbb      	ldrb	r3, [r7, #30]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3720      	adds	r7, #32
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	40021000 	.word	0x40021000

080065a4 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 80065ac:	2300      	movs	r3, #0
 80065ae:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80065b6:	d13e      	bne.n	8006636 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 80065b8:	4b45      	ldr	r3, [pc, #276]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c2:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065ca:	d028      	beq.n	800661e <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80065d2:	f200 8773 	bhi.w	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065dc:	d005      	beq.n	80065ea <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065e4:	d00e      	beq.n	8006604 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 80065e6:	f000 bf69 	b.w	80074bc <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80065ea:	4b39      	ldr	r3, [pc, #228]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80065ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065f0:	f003 0302 	and.w	r3, r3, #2
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	f040 8763 	bne.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 80065fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065fe:	61fb      	str	r3, [r7, #28]
        break;
 8006600:	f000 bf5e 	b.w	80074c0 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006604:	4b32      	ldr	r3, [pc, #200]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800660a:	f003 0302 	and.w	r3, r3, #2
 800660e:	2b02      	cmp	r3, #2
 8006610:	f040 8758 	bne.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 8006614:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006618:	61fb      	str	r3, [r7, #28]
        break;
 800661a:	f000 bf53 	b.w	80074c4 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800661e:	4b2c      	ldr	r3, [pc, #176]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800662a:	f040 874d 	bne.w	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 800662e:	4b29      	ldr	r3, [pc, #164]	; (80066d4 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8006630:	61fb      	str	r3, [r7, #28]
        break;
 8006632:	f000 bf49 	b.w	80074c8 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006636:	4b26      	ldr	r3, [pc, #152]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006638:	68db      	ldr	r3, [r3, #12]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	2b03      	cmp	r3, #3
 8006644:	d036      	beq.n	80066b4 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	2b03      	cmp	r3, #3
 800664a:	d84b      	bhi.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d003      	beq.n	800665a <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b02      	cmp	r3, #2
 8006656:	d020      	beq.n	800669a <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8006658:	e044      	b.n	80066e4 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800665a:	4b1d      	ldr	r3, [pc, #116]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 0302 	and.w	r3, r3, #2
 8006662:	2b02      	cmp	r3, #2
 8006664:	d116      	bne.n	8006694 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006666:	4b1a      	ldr	r3, [pc, #104]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f003 0308 	and.w	r3, r3, #8
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006672:	4b17      	ldr	r3, [pc, #92]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	091b      	lsrs	r3, r3, #4
 8006678:	f003 030f 	and.w	r3, r3, #15
 800667c:	e005      	b.n	800668a <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 800667e:	4b14      	ldr	r3, [pc, #80]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006684:	0a1b      	lsrs	r3, r3, #8
 8006686:	f003 030f 	and.w	r3, r3, #15
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 800668c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006690:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006692:	e02a      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8006694:	2300      	movs	r3, #0
 8006696:	61bb      	str	r3, [r7, #24]
        break;
 8006698:	e027      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800669a:	4b0d      	ldr	r3, [pc, #52]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80066a6:	d102      	bne.n	80066ae <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 80066a8:	4b0c      	ldr	r3, [pc, #48]	; (80066dc <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 80066aa:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80066ac:	e01d      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	61bb      	str	r3, [r7, #24]
        break;
 80066b2:	e01a      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80066b4:	4b06      	ldr	r3, [pc, #24]	; (80066d0 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066c0:	d102      	bne.n	80066c8 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 80066c2:	4b07      	ldr	r3, [pc, #28]	; (80066e0 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 80066c4:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 80066c6:	e010      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 80066c8:	2300      	movs	r3, #0
 80066ca:	61bb      	str	r3, [r7, #24]
        break;
 80066cc:	e00d      	b.n	80066ea <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80066ce:	bf00      	nop
 80066d0:	40021000 	.word	0x40021000
 80066d4:	0004c4b4 	.word	0x0004c4b4
 80066d8:	080166c8 	.word	0x080166c8
 80066dc:	00f42400 	.word	0x00f42400
 80066e0:	00989680 	.word	0x00989680
      default:
        /* No source */
        pllvco = 0U;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
        break;
 80066e8:	bf00      	nop
    }

    switch (PeriphClk)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066f0:	f000 8659 	beq.w	80073a6 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80066fa:	f200 86e7 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006704:	f000 8605 	beq.w	8007312 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800670e:	f200 86dd 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006718:	f000 8468 	beq.w	8006fec <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006722:	f200 86d3 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800672c:	f000 8530 	beq.w	8007190 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006736:	f200 86c9 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006740:	f000 8180 	beq.w	8006a44 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800674a:	f200 86bf 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006754:	f000 80c2 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800675e:	f200 86b5 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006768:	f000 842f 	beq.w	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006772:	f200 86ab 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800677c:	f000 83e7 	beq.w	8006f4e <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006786:	f200 86a1 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006790:	f000 80a4 	beq.w	80068dc <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800679a:	f200 8697 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067a4:	f000 8092 	beq.w	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ae:	f200 868d 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067b8:	f000 8080 	beq.w	80068bc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067c2:	f200 8683 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067cc:	f000 8553 	beq.w	8007276 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d6:	f200 8679 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067e0:	f000 84ff 	beq.w	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ea:	f200 866f 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f4:	f000 84a0 	beq.w	8007138 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fe:	f200 8665 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	f000 846b 	beq.w	80070e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2b80      	cmp	r3, #128	; 0x80
 800680e:	f200 865d 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2b20      	cmp	r3, #32
 8006816:	d84b      	bhi.n	80068b0 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 8656 	beq.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	3b01      	subs	r3, #1
 8006824:	2b1f      	cmp	r3, #31
 8006826:	f200 8651 	bhi.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800682a:	a201      	add	r2, pc, #4	; (adr r2, 8006830 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 800682c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006830:	08006c49 	.word	0x08006c49
 8006834:	08006cbd 	.word	0x08006cbd
 8006838:	080074cd 	.word	0x080074cd
 800683c:	08006d4f 	.word	0x08006d4f
 8006840:	080074cd 	.word	0x080074cd
 8006844:	080074cd 	.word	0x080074cd
 8006848:	080074cd 	.word	0x080074cd
 800684c:	08006dc7 	.word	0x08006dc7
 8006850:	080074cd 	.word	0x080074cd
 8006854:	080074cd 	.word	0x080074cd
 8006858:	080074cd 	.word	0x080074cd
 800685c:	080074cd 	.word	0x080074cd
 8006860:	080074cd 	.word	0x080074cd
 8006864:	080074cd 	.word	0x080074cd
 8006868:	080074cd 	.word	0x080074cd
 800686c:	08006e4b 	.word	0x08006e4b
 8006870:	080074cd 	.word	0x080074cd
 8006874:	080074cd 	.word	0x080074cd
 8006878:	080074cd 	.word	0x080074cd
 800687c:	080074cd 	.word	0x080074cd
 8006880:	080074cd 	.word	0x080074cd
 8006884:	080074cd 	.word	0x080074cd
 8006888:	080074cd 	.word	0x080074cd
 800688c:	080074cd 	.word	0x080074cd
 8006890:	080074cd 	.word	0x080074cd
 8006894:	080074cd 	.word	0x080074cd
 8006898:	080074cd 	.word	0x080074cd
 800689c:	080074cd 	.word	0x080074cd
 80068a0:	080074cd 	.word	0x080074cd
 80068a4:	080074cd 	.word	0x080074cd
 80068a8:	080074cd 	.word	0x080074cd
 80068ac:	08006ecd 	.word	0x08006ecd
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2b40      	cmp	r3, #64	; 0x40
 80068b4:	f000 83e8 	beq.w	8007088 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 80068b8:	f000 be08 	b.w	80074cc <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80068bc:	69b9      	ldr	r1, [r7, #24]
 80068be:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80068c2:	f001 f857 	bl	8007974 <RCCEx_GetSAIxPeriphCLKFreq>
 80068c6:	61f8      	str	r0, [r7, #28]
        break;
 80068c8:	f000 be03 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 80068cc:	69b9      	ldr	r1, [r7, #24]
 80068ce:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80068d2:	f001 f84f 	bl	8007974 <RCCEx_GetSAIxPeriphCLKFreq>
 80068d6:	61f8      	str	r0, [r7, #28]
        break;
 80068d8:	f000 bdfb 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 80068dc:	4b9c      	ldr	r3, [pc, #624]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 80068e6:	60fb      	str	r3, [r7, #12]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068ee:	d015      	beq.n	800691c <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80068f6:	f200 8096 	bhi.w	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006900:	d02a      	beq.n	8006958 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006908:	f200 808d 	bhi.w	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d07f      	beq.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006918:	d04b      	beq.n	80069b2 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 800691a:	e084      	b.n	8006a26 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 800691c:	4b8c      	ldr	r3, [pc, #560]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b02      	cmp	r3, #2
 8006926:	f040 8081 	bne.w	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800692a:	4b89      	ldr	r3, [pc, #548]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f003 0308 	and.w	r3, r3, #8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d005      	beq.n	8006942 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8006936:	4b86      	ldr	r3, [pc, #536]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	091b      	lsrs	r3, r3, #4
 800693c:	f003 030f 	and.w	r3, r3, #15
 8006940:	e005      	b.n	800694e <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8006942:	4b83      	ldr	r3, [pc, #524]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006948:	0a1b      	lsrs	r3, r3, #8
 800694a:	f003 030f 	and.w	r3, r3, #15
 800694e:	4a81      	ldr	r2, [pc, #516]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8006950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006954:	61fb      	str	r3, [r7, #28]
            break;
 8006956:	e069      	b.n	8006a2c <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006958:	4b7d      	ldr	r3, [pc, #500]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006964:	d165      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006966:	4b7a      	ldr	r3, [pc, #488]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800696e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006972:	d15e      	bne.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006974:	4b76      	ldr	r3, [pc, #472]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	f003 030f 	and.w	r3, r3, #15
 800697e:	3301      	adds	r3, #1
 8006980:	69ba      	ldr	r2, [r7, #24]
 8006982:	fbb2 f3f3 	udiv	r3, r2, r3
 8006986:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006988:	4b71      	ldr	r3, [pc, #452]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800698a:	68db      	ldr	r3, [r3, #12]
 800698c:	0a1b      	lsrs	r3, r3, #8
 800698e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006992:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006994:	69bb      	ldr	r3, [r7, #24]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	fb03 f202 	mul.w	r2, r3, r2
 800699c:	4b6c      	ldr	r3, [pc, #432]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	0d5b      	lsrs	r3, r3, #21
 80069a2:	f003 0303 	and.w	r3, r3, #3
 80069a6:	3301      	adds	r3, #1
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ae:	61fb      	str	r3, [r7, #28]
            break;
 80069b0:	e03f      	b.n	8006a32 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 80069b2:	4b67      	ldr	r3, [pc, #412]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80069be:	d13b      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 80069c0:	4b63      	ldr	r3, [pc, #396]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80069c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069cc:	d134      	bne.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80069ce:	f000 ff1d 	bl	800780c <RCCEx_PLLSAI1_GetVCOFreq>
 80069d2:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80069d4:	4b5e      	ldr	r3, [pc, #376]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	091b      	lsrs	r3, r3, #4
 80069da:	f003 030f 	and.w	r3, r3, #15
 80069de:	3301      	adds	r3, #1
 80069e0:	69ba      	ldr	r2, [r7, #24]
 80069e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80069e6:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80069e8:	4b59      	ldr	r3, [pc, #356]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069ea:	691b      	ldr	r3, [r3, #16]
 80069ec:	0a1b      	lsrs	r3, r3, #8
 80069ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80069f2:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	fb03 f202 	mul.w	r2, r3, r2
 80069fc:	4b54      	ldr	r3, [pc, #336]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069fe:	691b      	ldr	r3, [r3, #16]
 8006a00:	0d5b      	lsrs	r3, r3, #21
 8006a02:	f003 0303 	and.w	r3, r3, #3
 8006a06:	3301      	adds	r3, #1
 8006a08:	005b      	lsls	r3, r3, #1
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	61fb      	str	r3, [r7, #28]
            break;
 8006a10:	e012      	b.n	8006a38 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006a12:	4b4f      	ldr	r3, [pc, #316]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006a18:	f003 0302 	and.w	r3, r3, #2
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d10e      	bne.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8006a20:	4b4d      	ldr	r3, [pc, #308]	; (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8006a22:	61fb      	str	r3, [r7, #28]
            break;
 8006a24:	e00b      	b.n	8006a3e <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 8006a26:	bf00      	nop
 8006a28:	f000 bd53 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006a2c:	bf00      	nop
 8006a2e:	f000 bd50 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006a32:	bf00      	nop
 8006a34:	f000 bd4d 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006a38:	bf00      	nop
 8006a3a:	f000 bd4a 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006a3e:	bf00      	nop
        break;
 8006a40:	f000 bd47 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8006a44:	4b42      	ldr	r3, [pc, #264]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a4e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a52:	d13d      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006a54:	4b3e      	ldr	r3, [pc, #248]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006a60:	f040 8536 	bne.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8006a64:	4b3a      	ldr	r3, [pc, #232]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a70:	f040 852e 	bne.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a74:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	091b      	lsrs	r3, r3, #4
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	3301      	adds	r3, #1
 8006a80:	69ba      	ldr	r2, [r7, #24]
 8006a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a86:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a88:	4b31      	ldr	r3, [pc, #196]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a8a:	68db      	ldr	r3, [r3, #12]
 8006a8c:	0a1b      	lsrs	r3, r3, #8
 8006a8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a92:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006a94:	4b2e      	ldr	r3, [pc, #184]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	0edb      	lsrs	r3, r3, #27
 8006a9a:	f003 031f 	and.w	r3, r3, #31
 8006a9e:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d10a      	bne.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8006aa6:	4b2a      	ldr	r3, [pc, #168]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006aa8:	68db      	ldr	r3, [r3, #12]
 8006aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d002      	beq.n	8006ab8 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 8006ab2:	2311      	movs	r3, #17
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	e001      	b.n	8006abc <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8006ab8:	2307      	movs	r3, #7
 8006aba:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	68ba      	ldr	r2, [r7, #8]
 8006ac0:	fb03 f202 	mul.w	r2, r3, r2
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	61fb      	str	r3, [r7, #28]
        break;
 8006acc:	f000 bd00 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8006ad0:	4b1f      	ldr	r3, [pc, #124]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ad6:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006ae2:	d016      	beq.n	8006b12 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006aea:	f200 809e 	bhi.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006af4:	d032      	beq.n	8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006afc:	f200 8095 	bhi.w	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 8087 	beq.w	8006c16 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b0e:	d052      	beq.n	8006bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 8006b10:	e08b      	b.n	8006c2a <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006b12:	4b0f      	ldr	r3, [pc, #60]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	f040 8088 	bne.w	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006b20:	4b0b      	ldr	r3, [pc, #44]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f003 0308 	and.w	r3, r3, #8
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 8006b2c:	4b08      	ldr	r3, [pc, #32]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	091b      	lsrs	r3, r3, #4
 8006b32:	f003 030f 	and.w	r3, r3, #15
 8006b36:	e005      	b.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 8006b38:	4b05      	ldr	r3, [pc, #20]	; (8006b50 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006b3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b3e:	0a1b      	lsrs	r3, r3, #8
 8006b40:	f003 030f 	and.w	r3, r3, #15
 8006b44:	4a03      	ldr	r2, [pc, #12]	; (8006b54 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8006b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b4a:	61fb      	str	r3, [r7, #28]
              break;
 8006b4c:	e070      	b.n	8006c30 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 8006b4e:	bf00      	nop
 8006b50:	40021000 	.word	0x40021000
 8006b54:	080166c8 	.word	0x080166c8
 8006b58:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8006b5c:	4baa      	ldr	r3, [pc, #680]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b68:	d165      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8006b6a:	4ba7      	ldr	r3, [pc, #668]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b76:	d15e      	bne.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006b78:	4ba3      	ldr	r3, [pc, #652]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b7a:	68db      	ldr	r3, [r3, #12]
 8006b7c:	091b      	lsrs	r3, r3, #4
 8006b7e:	f003 030f 	and.w	r3, r3, #15
 8006b82:	3301      	adds	r3, #1
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b8a:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006b8c:	4b9e      	ldr	r3, [pc, #632]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b8e:	68db      	ldr	r3, [r3, #12]
 8006b90:	0a1b      	lsrs	r3, r3, #8
 8006b92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b96:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	fb03 f202 	mul.w	r2, r3, r2
 8006ba0:	4b99      	ldr	r3, [pc, #612]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	0d5b      	lsrs	r3, r3, #21
 8006ba6:	f003 0303 	and.w	r3, r3, #3
 8006baa:	3301      	adds	r3, #1
 8006bac:	005b      	lsls	r3, r3, #1
 8006bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb2:	61fb      	str	r3, [r7, #28]
              break;
 8006bb4:	e03f      	b.n	8006c36 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006bb6:	4b94      	ldr	r3, [pc, #592]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bc2:	d13b      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006bc4:	4b90      	ldr	r3, [pc, #576]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bd0:	d134      	bne.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006bd2:	f000 fe1b 	bl	800780c <RCCEx_PLLSAI1_GetVCOFreq>
 8006bd6:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006bd8:	4b8b      	ldr	r3, [pc, #556]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	091b      	lsrs	r3, r3, #4
 8006bde:	f003 030f 	and.w	r3, r3, #15
 8006be2:	3301      	adds	r3, #1
 8006be4:	69ba      	ldr	r2, [r7, #24]
 8006be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bea:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006bec:	4b86      	ldr	r3, [pc, #536]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	0a1b      	lsrs	r3, r3, #8
 8006bf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bf6:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	fb03 f202 	mul.w	r2, r3, r2
 8006c00:	4b81      	ldr	r3, [pc, #516]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c02:	691b      	ldr	r3, [r3, #16]
 8006c04:	0d5b      	lsrs	r3, r3, #21
 8006c06:	f003 0303 	and.w	r3, r3, #3
 8006c0a:	3301      	adds	r3, #1
 8006c0c:	005b      	lsls	r3, r3, #1
 8006c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c12:	61fb      	str	r3, [r7, #28]
              break;
 8006c14:	e012      	b.n	8006c3c <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006c16:	4b7c      	ldr	r3, [pc, #496]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006c1c:	f003 0302 	and.w	r3, r3, #2
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d10e      	bne.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8006c24:	4b79      	ldr	r3, [pc, #484]	; (8006e0c <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8006c26:	61fb      	str	r3, [r7, #28]
              break;
 8006c28:	e00b      	b.n	8006c42 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8006c2a:	bf00      	nop
 8006c2c:	f000 bc50 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006c30:	bf00      	nop
 8006c32:	f000 bc4d 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006c36:	bf00      	nop
 8006c38:	f000 bc4a 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006c3c:	bf00      	nop
 8006c3e:	f000 bc47 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006c42:	bf00      	nop
        break;
 8006c44:	f000 bc44 	b.w	80074d0 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006c48:	4b6f      	ldr	r3, [pc, #444]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	2b03      	cmp	r3, #3
 8006c58:	d827      	bhi.n	8006caa <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8006c5a:	a201      	add	r2, pc, #4	; (adr r2, 8006c60 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006c71 	.word	0x08006c71
 8006c64:	08006c79 	.word	0x08006c79
 8006c68:	08006c81 	.word	0x08006c81
 8006c6c:	08006c95 	.word	0x08006c95
            frequency = HAL_RCC_GetPCLK2Freq();
 8006c70:	f7fe fffc 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 8006c74:	61f8      	str	r0, [r7, #28]
            break;
 8006c76:	e01f      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8006c78:	f7fe ff32 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006c7c:	61f8      	str	r0, [r7, #28]
            break;
 8006c7e:	e01b      	b.n	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c80:	4b61      	ldr	r3, [pc, #388]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c8c:	d110      	bne.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8006c8e:	4b60      	ldr	r3, [pc, #384]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006c90:	61fb      	str	r3, [r7, #28]
            break;
 8006c92:	e00d      	b.n	8006cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c94:	4b5c      	ldr	r3, [pc, #368]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c9a:	f003 0302 	and.w	r3, r3, #2
 8006c9e:	2b02      	cmp	r3, #2
 8006ca0:	d109      	bne.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8006ca2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ca6:	61fb      	str	r3, [r7, #28]
            break;
 8006ca8:	e005      	b.n	8006cb6 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8006caa:	bf00      	nop
 8006cac:	f000 bc11 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006cb0:	bf00      	nop
 8006cb2:	f000 bc0e 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006cb6:	bf00      	nop
        break;
 8006cb8:	f000 bc0b 	b.w	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006cbc:	4b52      	ldr	r3, [pc, #328]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cc2:	f003 030c 	and.w	r3, r3, #12
 8006cc6:	60fb      	str	r3, [r7, #12]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b0c      	cmp	r3, #12
 8006ccc:	d839      	bhi.n	8006d42 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8006cce:	a201      	add	r2, pc, #4	; (adr r2, 8006cd4 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8006cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd4:	08006d09 	.word	0x08006d09
 8006cd8:	08006d43 	.word	0x08006d43
 8006cdc:	08006d43 	.word	0x08006d43
 8006ce0:	08006d43 	.word	0x08006d43
 8006ce4:	08006d11 	.word	0x08006d11
 8006ce8:	08006d43 	.word	0x08006d43
 8006cec:	08006d43 	.word	0x08006d43
 8006cf0:	08006d43 	.word	0x08006d43
 8006cf4:	08006d19 	.word	0x08006d19
 8006cf8:	08006d43 	.word	0x08006d43
 8006cfc:	08006d43 	.word	0x08006d43
 8006d00:	08006d43 	.word	0x08006d43
 8006d04:	08006d2d 	.word	0x08006d2d
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d08:	f7fe ff9c 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8006d0c:	61f8      	str	r0, [r7, #28]
            break;
 8006d0e:	e01d      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8006d10:	f7fe fee6 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006d14:	61f8      	str	r0, [r7, #28]
            break;
 8006d16:	e019      	b.n	8006d4c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d18:	4b3b      	ldr	r3, [pc, #236]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d24:	d10f      	bne.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8006d26:	4b3a      	ldr	r3, [pc, #232]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006d28:	61fb      	str	r3, [r7, #28]
            break;
 8006d2a:	e00c      	b.n	8006d46 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d2c:	4b36      	ldr	r3, [pc, #216]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d107      	bne.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8006d3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d3e:	61fb      	str	r3, [r7, #28]
            break;
 8006d40:	e003      	b.n	8006d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8006d42:	bf00      	nop
 8006d44:	e3c5      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006d46:	bf00      	nop
 8006d48:	e3c3      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006d4a:	bf00      	nop
        break;
 8006d4c:	e3c1      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006d4e:	4b2e      	ldr	r3, [pc, #184]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d54:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d58:	60fb      	str	r3, [r7, #12]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2b30      	cmp	r3, #48	; 0x30
 8006d5e:	d021      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2b30      	cmp	r3, #48	; 0x30
 8006d64:	d829      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2b20      	cmp	r3, #32
 8006d6a:	d011      	beq.n	8006d90 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2b20      	cmp	r3, #32
 8006d70:	d823      	bhi.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d003      	beq.n	8006d80 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d004      	beq.n	8006d88 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8006d7e:	e01c      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d80:	f7fe ff60 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8006d84:	61f8      	str	r0, [r7, #28]
            break;
 8006d86:	e01d      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8006d88:	f7fe feaa 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006d8c:	61f8      	str	r0, [r7, #28]
            break;
 8006d8e:	e019      	b.n	8006dc4 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d90:	4b1d      	ldr	r3, [pc, #116]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d9c:	d10f      	bne.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8006d9e:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006da0:	61fb      	str	r3, [r7, #28]
            break;
 8006da2:	e00c      	b.n	8006dbe <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006da4:	4b18      	ldr	r3, [pc, #96]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006daa:	f003 0302 	and.w	r3, r3, #2
 8006dae:	2b02      	cmp	r3, #2
 8006db0:	d107      	bne.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db6:	61fb      	str	r3, [r7, #28]
            break;
 8006db8:	e003      	b.n	8006dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8006dba:	bf00      	nop
 8006dbc:	e389      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006dbe:	bf00      	nop
 8006dc0:	e387      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006dc2:	bf00      	nop
        break;
 8006dc4:	e385      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006dc6:	4b10      	ldr	r3, [pc, #64]	; (8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006dc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dcc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006dd0:	60fb      	str	r3, [r7, #12]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2bc0      	cmp	r3, #192	; 0xc0
 8006dd6:	d027      	beq.n	8006e28 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2bc0      	cmp	r3, #192	; 0xc0
 8006ddc:	d82f      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2b80      	cmp	r3, #128	; 0x80
 8006de2:	d017      	beq.n	8006e14 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2b80      	cmp	r3, #128	; 0x80
 8006de8:	d829      	bhi.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d003      	beq.n	8006df8 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	d004      	beq.n	8006e00 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8006df6:	e022      	b.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006df8:	f7fe ff24 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8006dfc:	61f8      	str	r0, [r7, #28]
            break;
 8006dfe:	e023      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8006e00:	f7fe fe6e 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006e04:	61f8      	str	r0, [r7, #28]
            break;
 8006e06:	e01f      	b.n	8006e48 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	02dc6c00 	.word	0x02dc6c00
 8006e10:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e14:	4b99      	ldr	r3, [pc, #612]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e20:	d10f      	bne.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8006e22:	4b97      	ldr	r3, [pc, #604]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006e24:	61fb      	str	r3, [r7, #28]
            break;
 8006e26:	e00c      	b.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006e28:	4b94      	ldr	r3, [pc, #592]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e2e:	f003 0302 	and.w	r3, r3, #2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d107      	bne.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8006e36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e3a:	61fb      	str	r3, [r7, #28]
            break;
 8006e3c:	e003      	b.n	8006e46 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8006e3e:	bf00      	nop
 8006e40:	e347      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006e42:	bf00      	nop
 8006e44:	e345      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006e46:	bf00      	nop
        break;
 8006e48:	e343      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006e4a:	4b8c      	ldr	r3, [pc, #560]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e54:	60fb      	str	r3, [r7, #12]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e5c:	d025      	beq.n	8006eaa <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e64:	d82c      	bhi.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e6c:	d013      	beq.n	8006e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e74:	d824      	bhi.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e82:	d004      	beq.n	8006e8e <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8006e84:	e01c      	b.n	8006ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006e86:	f7fe fedd 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8006e8a:	61f8      	str	r0, [r7, #28]
            break;
 8006e8c:	e01d      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8006e8e:	f7fe fe27 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006e92:	61f8      	str	r0, [r7, #28]
            break;
 8006e94:	e019      	b.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006e96:	4b79      	ldr	r3, [pc, #484]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ea2:	d10f      	bne.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8006ea4:	4b76      	ldr	r3, [pc, #472]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006ea6:	61fb      	str	r3, [r7, #28]
            break;
 8006ea8:	e00c      	b.n	8006ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006eaa:	4b74      	ldr	r3, [pc, #464]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006eb0:	f003 0302 	and.w	r3, r3, #2
 8006eb4:	2b02      	cmp	r3, #2
 8006eb6:	d107      	bne.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8006eb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ebc:	61fb      	str	r3, [r7, #28]
            break;
 8006ebe:	e003      	b.n	8006ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8006ec0:	bf00      	nop
 8006ec2:	e306      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006ec4:	bf00      	nop
 8006ec6:	e304      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006ec8:	bf00      	nop
        break;
 8006eca:	e302      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006ecc:	4b6b      	ldr	r3, [pc, #428]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed6:	60fb      	str	r3, [r7, #12]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ede:	d025      	beq.n	8006f2c <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee6:	d82c      	bhi.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eee:	d013      	beq.n	8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ef6:	d824      	bhi.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d004      	beq.n	8006f08 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f04:	d004      	beq.n	8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8006f06:	e01c      	b.n	8006f42 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006f08:	f7fe fe9c 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8006f0c:	61f8      	str	r0, [r7, #28]
            break;
 8006f0e:	e01d      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8006f10:	f7fe fde6 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006f14:	61f8      	str	r0, [r7, #28]
            break;
 8006f16:	e019      	b.n	8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f18:	4b58      	ldr	r3, [pc, #352]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f24:	d10f      	bne.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8006f26:	4b56      	ldr	r3, [pc, #344]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006f28:	61fb      	str	r3, [r7, #28]
            break;
 8006f2a:	e00c      	b.n	8006f46 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006f2c:	4b53      	ldr	r3, [pc, #332]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	2b02      	cmp	r3, #2
 8006f38:	d107      	bne.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8006f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3e:	61fb      	str	r3, [r7, #28]
            break;
 8006f40:	e003      	b.n	8006f4a <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8006f42:	bf00      	nop
 8006f44:	e2c5      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006f46:	bf00      	nop
 8006f48:	e2c3      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006f4a:	bf00      	nop
        break;
 8006f4c:	e2c1      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006f4e:	4b4b      	ldr	r3, [pc, #300]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f58:	60fb      	str	r3, [r7, #12]
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f60:	d007      	beq.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006f68:	d12b      	bne.n	8006fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8006f6a:	f7fe fdb9 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006f6e:	61f8      	str	r0, [r7, #28]
            break;
 8006f70:	e02a      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006f72:	4b42      	ldr	r3, [pc, #264]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d023      	beq.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006f7e:	f000 fc45 	bl	800780c <RCCEx_PLLSAI1_GetVCOFreq>
 8006f82:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f86:	691b      	ldr	r3, [r3, #16]
 8006f88:	091b      	lsrs	r3, r3, #4
 8006f8a:	f003 030f 	and.w	r3, r3, #15
 8006f8e:	3301      	adds	r3, #1
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f96:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006f98:	4b38      	ldr	r3, [pc, #224]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa2:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	fb03 f202 	mul.w	r2, r3, r2
 8006fac:	4b33      	ldr	r3, [pc, #204]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	0e5b      	lsrs	r3, r3, #25
 8006fb2:	f003 0303 	and.w	r3, r3, #3
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	005b      	lsls	r3, r3, #1
 8006fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fbe:	61fb      	str	r3, [r7, #28]
            break;
 8006fc0:	e001      	b.n	8006fc6 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8006fc2:	bf00      	nop
 8006fc4:	e285      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006fc6:	bf00      	nop
        break;
 8006fc8:	e283      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006fca:	4b2c      	ldr	r3, [pc, #176]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006fcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fd0:	f003 0304 	and.w	r3, r3, #4
 8006fd4:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d103      	bne.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006fdc:	f7fe fe46 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 8006fe0:	61f8      	str	r0, [r7, #28]
        break;
 8006fe2:	e276      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006fe4:	f7fe fd7c 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8006fe8:	61f8      	str	r0, [r7, #28]
        break;
 8006fea:	e272      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006fec:	4b23      	ldr	r3, [pc, #140]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006fee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ff2:	f003 0318 	and.w	r3, r3, #24
 8006ff6:	60fb      	str	r3, [r7, #12]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2b10      	cmp	r3, #16
 8006ffc:	d010      	beq.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2b10      	cmp	r3, #16
 8007002:	d834      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2b08      	cmp	r3, #8
 800700e:	d024      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8007010:	e02d      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007018:	f000 fcac 	bl	8007974 <RCCEx_GetSAIxPeriphCLKFreq>
 800701c:	61f8      	str	r0, [r7, #28]
            break;
 800701e:	e02b      	b.n	8007078 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007020:	4b16      	ldr	r3, [pc, #88]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0302 	and.w	r3, r3, #2
 8007028:	2b02      	cmp	r3, #2
 800702a:	d122      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800702c:	4b13      	ldr	r3, [pc, #76]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f003 0308 	and.w	r3, r3, #8
 8007034:	2b00      	cmp	r3, #0
 8007036:	d005      	beq.n	8007044 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8007038:	4b10      	ldr	r3, [pc, #64]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	091b      	lsrs	r3, r3, #4
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	e005      	b.n	8007050 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8007044:	4b0d      	ldr	r3, [pc, #52]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8007046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800704a:	0a1b      	lsrs	r3, r3, #8
 800704c:	f003 030f 	and.w	r3, r3, #15
 8007050:	4a0c      	ldr	r2, [pc, #48]	; (8007084 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8007052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007056:	61fb      	str	r3, [r7, #28]
            break;
 8007058:	e00b      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800705a:	4b08      	ldr	r3, [pc, #32]	; (800707c <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007066:	d106      	bne.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 800706a:	61fb      	str	r3, [r7, #28]
            break;
 800706c:	e003      	b.n	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 800706e:	bf00      	nop
 8007070:	e22f      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007072:	bf00      	nop
 8007074:	e22d      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007076:	bf00      	nop
        break;
 8007078:	e22b      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 800707a:	bf00      	nop
 800707c:	40021000 	.word	0x40021000
 8007080:	00f42400 	.word	0x00f42400
 8007084:	080166c8 	.word	0x080166c8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8007088:	4b96      	ldr	r3, [pc, #600]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800708a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800708e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007092:	60fb      	str	r3, [r7, #12]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800709a:	d013      	beq.n	80070c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80070a2:	d819      	bhi.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d004      	beq.n	80070b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b0:	d004      	beq.n	80070bc <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 80070b2:	e011      	b.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 80070b4:	f7fe fdc6 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 80070b8:	61f8      	str	r0, [r7, #28]
            break;
 80070ba:	e010      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 80070bc:	f7fe fd10 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 80070c0:	61f8      	str	r0, [r7, #28]
            break;
 80070c2:	e00c      	b.n	80070de <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070c4:	4b87      	ldr	r3, [pc, #540]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070d0:	d104      	bne.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 80070d2:	4b85      	ldr	r3, [pc, #532]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070d4:	61fb      	str	r3, [r7, #28]
            break;
 80070d6:	e001      	b.n	80070dc <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 80070d8:	bf00      	nop
 80070da:	e1fa      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80070dc:	bf00      	nop
        break;
 80070de:	e1f8      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80070e0:	4b80      	ldr	r3, [pc, #512]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80070ea:	60fb      	str	r3, [r7, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070f2:	d013      	beq.n	800711c <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070fa:	d819      	bhi.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d004      	beq.n	800710c <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007108:	d004      	beq.n	8007114 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 800710a:	e011      	b.n	8007130 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 800710c:	f7fe fd9a 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007110:	61f8      	str	r0, [r7, #28]
            break;
 8007112:	e010      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 8007114:	f7fe fce4 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8007118:	61f8      	str	r0, [r7, #28]
            break;
 800711a:	e00c      	b.n	8007136 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800711c:	4b71      	ldr	r3, [pc, #452]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007124:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007128:	d104      	bne.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 800712a:	4b6f      	ldr	r3, [pc, #444]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800712c:	61fb      	str	r3, [r7, #28]
            break;
 800712e:	e001      	b.n	8007134 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8007130:	bf00      	nop
 8007132:	e1ce      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007134:	bf00      	nop
        break;
 8007136:	e1cc      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8007138:	4b6a      	ldr	r3, [pc, #424]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800713e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800714a:	d013      	beq.n	8007174 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007152:	d819      	bhi.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d004      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007160:	d004      	beq.n	800716c <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8007162:	e011      	b.n	8007188 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007164:	f7fe fd6e 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007168:	61f8      	str	r0, [r7, #28]
            break;
 800716a:	e010      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 800716c:	f7fe fcb8 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 8007170:	61f8      	str	r0, [r7, #28]
            break;
 8007172:	e00c      	b.n	800718e <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007174:	4b5b      	ldr	r3, [pc, #364]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800717c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007180:	d104      	bne.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8007182:	4b59      	ldr	r3, [pc, #356]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007184:	61fb      	str	r3, [r7, #28]
            break;
 8007186:	e001      	b.n	800718c <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8007188:	bf00      	nop
 800718a:	e1a2      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800718c:	bf00      	nop
        break;
 800718e:	e1a0      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007190:	4b54      	ldr	r3, [pc, #336]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007192:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d011      	beq.n	80071c6 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d818      	bhi.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d003      	beq.n	80071b6 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b01      	cmp	r3, #1
 80071b2:	d004      	beq.n	80071be <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 80071b4:	e011      	b.n	80071da <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 80071b6:	f7fe fd45 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 80071ba:	61f8      	str	r0, [r7, #28]
            break;
 80071bc:	e010      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 80071be:	f7fe fc8f 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 80071c2:	61f8      	str	r0, [r7, #28]
            break;
 80071c4:	e00c      	b.n	80071e0 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80071c6:	4b47      	ldr	r3, [pc, #284]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071d2:	d104      	bne.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 80071d4:	4b44      	ldr	r3, [pc, #272]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80071d6:	61fb      	str	r3, [r7, #28]
            break;
 80071d8:	e001      	b.n	80071de <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 80071da:	bf00      	nop
 80071dc:	e179      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80071de:	bf00      	nop
        break;
 80071e0:	e177      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80071e2:	4b40      	ldr	r3, [pc, #256]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80071e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071e8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071f4:	d02c      	beq.n	8007250 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80071fc:	d833      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007204:	d01a      	beq.n	800723c <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800720c:	d82b      	bhi.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800721a:	d004      	beq.n	8007226 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 800721c:	e023      	b.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800721e:	f7fe fd11 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007222:	61f8      	str	r0, [r7, #28]
            break;
 8007224:	e026      	b.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007226:	4b2f      	ldr	r3, [pc, #188]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800722c:	f003 0302 	and.w	r3, r3, #2
 8007230:	2b02      	cmp	r3, #2
 8007232:	d11a      	bne.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 8007234:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007238:	61fb      	str	r3, [r7, #28]
            break;
 800723a:	e016      	b.n	800726a <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800723c:	4b29      	ldr	r3, [pc, #164]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007248:	d111      	bne.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 800724a:	4b27      	ldr	r3, [pc, #156]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800724c:	61fb      	str	r3, [r7, #28]
            break;
 800724e:	e00e      	b.n	800726e <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007250:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007256:	f003 0302 	and.w	r3, r3, #2
 800725a:	2b02      	cmp	r3, #2
 800725c:	d109      	bne.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 800725e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007262:	61fb      	str	r3, [r7, #28]
            break;
 8007264:	e005      	b.n	8007272 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 8007266:	bf00      	nop
 8007268:	e133      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800726a:	bf00      	nop
 800726c:	e131      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800726e:	bf00      	nop
 8007270:	e12f      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007272:	bf00      	nop
        break;
 8007274:	e12d      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8007276:	4b1b      	ldr	r3, [pc, #108]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800727c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007280:	60fb      	str	r3, [r7, #12]
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007288:	d030      	beq.n	80072ec <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007290:	d837      	bhi.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007298:	d01a      	beq.n	80072d0 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80072a0:	d82f      	bhi.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d004      	beq.n	80072b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072ae:	d004      	beq.n	80072ba <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 80072b0:	e027      	b.n	8007302 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80072b2:	f7fe fcc7 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 80072b6:	61f8      	str	r0, [r7, #28]
            break;
 80072b8:	e02a      	b.n	8007310 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80072ba:	4b0a      	ldr	r3, [pc, #40]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80072bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d11e      	bne.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 80072c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80072cc:	61fb      	str	r3, [r7, #28]
            break;
 80072ce:	e01a      	b.n	8007306 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80072d0:	4b04      	ldr	r3, [pc, #16]	; (80072e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80072d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072dc:	d115      	bne.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 80072de:	4b02      	ldr	r3, [pc, #8]	; (80072e8 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80072e0:	61fb      	str	r3, [r7, #28]
            break;
 80072e2:	e012      	b.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 80072e4:	40021000 	.word	0x40021000
 80072e8:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80072ec:	4b7b      	ldr	r3, [pc, #492]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f2:	f003 0302 	and.w	r3, r3, #2
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d109      	bne.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 80072fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072fe:	61fb      	str	r3, [r7, #28]
            break;
 8007300:	e005      	b.n	800730e <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8007302:	bf00      	nop
 8007304:	e0e5      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007306:	bf00      	nop
 8007308:	e0e3      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800730a:	bf00      	nop
 800730c:	e0e1      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800730e:	bf00      	nop
        break;
 8007310:	e0df      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 8007312:	4b72      	ldr	r3, [pc, #456]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007318:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800731c:	60fb      	str	r3, [r7, #12]
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007324:	d02c      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800732c:	d833      	bhi.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007334:	d01a      	beq.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800733c:	d82b      	bhi.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d004      	beq.n	800734e <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800734a:	d004      	beq.n	8007356 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 800734c:	e023      	b.n	8007396 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 800734e:	f7fe fc79 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 8007352:	61f8      	str	r0, [r7, #28]
            break;
 8007354:	e026      	b.n	80073a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8007356:	4b61      	ldr	r3, [pc, #388]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007358:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800735c:	f003 0302 	and.w	r3, r3, #2
 8007360:	2b02      	cmp	r3, #2
 8007362:	d11a      	bne.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 8007364:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007368:	61fb      	str	r3, [r7, #28]
            break;
 800736a:	e016      	b.n	800739a <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800736c:	4b5b      	ldr	r3, [pc, #364]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007378:	d111      	bne.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 800737a:	4b59      	ldr	r3, [pc, #356]	; (80074e0 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 800737c:	61fb      	str	r3, [r7, #28]
            break;
 800737e:	e00e      	b.n	800739e <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007380:	4b56      	ldr	r3, [pc, #344]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d109      	bne.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 800738e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007392:	61fb      	str	r3, [r7, #28]
            break;
 8007394:	e005      	b.n	80073a2 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 8007396:	bf00      	nop
 8007398:	e09b      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800739a:	bf00      	nop
 800739c:	e099      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800739e:	bf00      	nop
 80073a0:	e097      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80073a2:	bf00      	nop
        break;
 80073a4:	e095      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 80073a6:	4b4d      	ldr	r3, [pc, #308]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80073a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80073ac:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 80073b0:	60fb      	str	r3, [r7, #12]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073b8:	d042      	beq.n	8007440 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073c0:	d874      	bhi.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80073ce:	d00a      	beq.n	80073e6 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 80073d0:	e06c      	b.n	80074ac <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80073d2:	4b42      	ldr	r3, [pc, #264]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80073de:	d167      	bne.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 80073e0:	4b40      	ldr	r3, [pc, #256]	; (80074e4 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 80073e2:	61fb      	str	r3, [r7, #28]
            break;
 80073e4:	e064      	b.n	80074b0 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80073e6:	4b3d      	ldr	r3, [pc, #244]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073ee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80073f2:	d15f      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80073f4:	4b39      	ldr	r3, [pc, #228]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007400:	d158      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007402:	4b36      	ldr	r3, [pc, #216]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 030f 	and.w	r3, r3, #15
 800740c:	3301      	adds	r3, #1
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	fbb2 f3f3 	udiv	r3, r2, r3
 8007414:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007416:	4b31      	ldr	r3, [pc, #196]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	0a1b      	lsrs	r3, r3, #8
 800741c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007420:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8007422:	69bb      	ldr	r3, [r7, #24]
 8007424:	68ba      	ldr	r2, [r7, #8]
 8007426:	fb03 f202 	mul.w	r2, r3, r2
 800742a:	4b2c      	ldr	r3, [pc, #176]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	0d5b      	lsrs	r3, r3, #21
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	3301      	adds	r3, #1
 8007436:	005b      	lsls	r3, r3, #1
 8007438:	fbb2 f3f3 	udiv	r3, r2, r3
 800743c:	61fb      	str	r3, [r7, #28]
            break;
 800743e:	e039      	b.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8007440:	4b26      	ldr	r3, [pc, #152]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007448:	2b00      	cmp	r3, #0
 800744a:	d035      	beq.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 800744c:	f000 f9de 	bl	800780c <RCCEx_PLLSAI1_GetVCOFreq>
 8007450:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007452:	4b22      	ldr	r3, [pc, #136]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	091b      	lsrs	r3, r3, #4
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	3301      	adds	r3, #1
 800745e:	69ba      	ldr	r2, [r7, #24]
 8007460:	fbb2 f3f3 	udiv	r3, r2, r3
 8007464:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007466:	4b1d      	ldr	r3, [pc, #116]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	0a1b      	lsrs	r3, r3, #8
 800746c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007470:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007472:	4b1a      	ldr	r3, [pc, #104]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	0edb      	lsrs	r3, r3, #27
 8007478:	f003 031f 	and.w	r3, r3, #31
 800747c:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d10a      	bne.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007484:	4b15      	ldr	r3, [pc, #84]	; (80074dc <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8007490:	2311      	movs	r3, #17
 8007492:	617b      	str	r3, [r7, #20]
 8007494:	e001      	b.n	800749a <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 8007496:	2307      	movs	r3, #7
 8007498:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	68ba      	ldr	r2, [r7, #8]
 800749e:	fb03 f202 	mul.w	r2, r3, r2
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074a8:	61fb      	str	r3, [r7, #28]
            break;
 80074aa:	e005      	b.n	80074b8 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 80074ac:	bf00      	nop
 80074ae:	e010      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80074b0:	bf00      	nop
 80074b2:	e00e      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80074b4:	bf00      	nop
 80074b6:	e00c      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80074b8:	bf00      	nop
        break;
 80074ba:	e00a      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074bc:	bf00      	nop
 80074be:	e008      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074c0:	bf00      	nop
 80074c2:	e006      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074c4:	bf00      	nop
 80074c6:	e004      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074c8:	bf00      	nop
 80074ca:	e002      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074cc:	bf00      	nop
 80074ce:	e000      	b.n	80074d2 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 80074d0:	bf00      	nop
    }
  }

  return (frequency);
 80074d2:	69fb      	ldr	r3, [r7, #28]
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	3720      	adds	r7, #32
 80074d8:	46bd      	mov	sp, r7
 80074da:	bd80      	pop	{r7, pc}
 80074dc:	40021000 	.word	0x40021000
 80074e0:	00f42400 	.word	0x00f42400
 80074e4:	00989680 	.word	0x00989680

080074e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b084      	sub	sp, #16
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80074f2:	2300      	movs	r3, #0
 80074f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2b03      	cmp	r3, #3
 80074fc:	d018      	beq.n	8007530 <RCCEx_PLLSAI1_Config+0x48>
 80074fe:	2b03      	cmp	r3, #3
 8007500:	d81f      	bhi.n	8007542 <RCCEx_PLLSAI1_Config+0x5a>
 8007502:	2b01      	cmp	r3, #1
 8007504:	d002      	beq.n	800750c <RCCEx_PLLSAI1_Config+0x24>
 8007506:	2b02      	cmp	r3, #2
 8007508:	d009      	beq.n	800751e <RCCEx_PLLSAI1_Config+0x36>
 800750a:	e01a      	b.n	8007542 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800750c:	4b65      	ldr	r3, [pc, #404]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f003 0302 	and.w	r3, r3, #2
 8007514:	2b00      	cmp	r3, #0
 8007516:	d117      	bne.n	8007548 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8007518:	2301      	movs	r3, #1
 800751a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800751c:	e014      	b.n	8007548 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800751e:	4b61      	ldr	r3, [pc, #388]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007526:	2b00      	cmp	r3, #0
 8007528:	d110      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800752e:	e00d      	b.n	800754c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8007530:	4b5c      	ldr	r3, [pc, #368]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007538:	2b00      	cmp	r3, #0
 800753a:	d109      	bne.n	8007550 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007540:	e006      	b.n	8007550 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8007542:	2301      	movs	r3, #1
 8007544:	73fb      	strb	r3, [r7, #15]
      break;
 8007546:	e004      	b.n	8007552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007548:	bf00      	nop
 800754a:	e002      	b.n	8007552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 800754c:	bf00      	nop
 800754e:	e000      	b.n	8007552 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007550:	bf00      	nop
  }

  if (status == HAL_OK)
 8007552:	7bfb      	ldrb	r3, [r7, #15]
 8007554:	2b00      	cmp	r3, #0
 8007556:	f040 809f 	bne.w	8007698 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800755a:	4b52      	ldr	r3, [pc, #328]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a51      	ldr	r2, [pc, #324]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007560:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007564:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007566:	f7fa fe13 	bl	8002190 <HAL_GetTick>
 800756a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800756c:	e00f      	b.n	800758e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800756e:	f7fa fe0f 	bl	8002190 <HAL_GetTick>
 8007572:	4602      	mov	r2, r0
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	2b02      	cmp	r3, #2
 800757a:	d908      	bls.n	800758e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800757c:	4b49      	ldr	r3, [pc, #292]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007584:	2b00      	cmp	r3, #0
 8007586:	d009      	beq.n	800759c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800758c:	e006      	b.n	800759c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800758e:	4b45      	ldr	r3, [pc, #276]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d1e9      	bne.n	800756e <RCCEx_PLLSAI1_Config+0x86>
 800759a:	e000      	b.n	800759e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 800759c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d179      	bne.n	8007698 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80075a4:	683b      	ldr	r3, [r7, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d116      	bne.n	80075d8 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075aa:	4b3e      	ldr	r3, [pc, #248]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80075ac:	691a      	ldr	r2, [r3, #16]
 80075ae:	4b3e      	ldr	r3, [pc, #248]	; (80076a8 <RCCEx_PLLSAI1_Config+0x1c0>)
 80075b0:	4013      	ands	r3, r2
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	6892      	ldr	r2, [r2, #8]
 80075b6:	0211      	lsls	r1, r2, #8
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	68d2      	ldr	r2, [r2, #12]
 80075bc:	06d2      	lsls	r2, r2, #27
 80075be:	4311      	orrs	r1, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6852      	ldr	r2, [r2, #4]
 80075c4:	3a01      	subs	r2, #1
 80075c6:	0112      	lsls	r2, r2, #4
 80075c8:	4311      	orrs	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	6812      	ldr	r2, [r2, #0]
 80075ce:	430a      	orrs	r2, r1
 80075d0:	4934      	ldr	r1, [pc, #208]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80075d2:	4313      	orrs	r3, r2
 80075d4:	610b      	str	r3, [r1, #16]
 80075d6:	e033      	b.n	8007640 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d118      	bne.n	8007610 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80075de:	4b31      	ldr	r3, [pc, #196]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	4b32      	ldr	r3, [pc, #200]	; (80076ac <RCCEx_PLLSAI1_Config+0x1c4>)
 80075e4:	4013      	ands	r3, r2
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	6892      	ldr	r2, [r2, #8]
 80075ea:	0211      	lsls	r1, r2, #8
 80075ec:	687a      	ldr	r2, [r7, #4]
 80075ee:	6912      	ldr	r2, [r2, #16]
 80075f0:	0852      	lsrs	r2, r2, #1
 80075f2:	3a01      	subs	r2, #1
 80075f4:	0552      	lsls	r2, r2, #21
 80075f6:	4311      	orrs	r1, r2
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6852      	ldr	r2, [r2, #4]
 80075fc:	3a01      	subs	r2, #1
 80075fe:	0112      	lsls	r2, r2, #4
 8007600:	4311      	orrs	r1, r2
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	6812      	ldr	r2, [r2, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	4926      	ldr	r1, [pc, #152]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800760a:	4313      	orrs	r3, r2
 800760c:	610b      	str	r3, [r1, #16]
 800760e:	e017      	b.n	8007640 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007610:	4b24      	ldr	r3, [pc, #144]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8007616:	4013      	ands	r3, r2
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	6892      	ldr	r2, [r2, #8]
 800761c:	0211      	lsls	r1, r2, #8
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	6952      	ldr	r2, [r2, #20]
 8007622:	0852      	lsrs	r2, r2, #1
 8007624:	3a01      	subs	r2, #1
 8007626:	0652      	lsls	r2, r2, #25
 8007628:	4311      	orrs	r1, r2
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	6852      	ldr	r2, [r2, #4]
 800762e:	3a01      	subs	r2, #1
 8007630:	0112      	lsls	r2, r2, #4
 8007632:	4311      	orrs	r1, r2
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	430a      	orrs	r2, r1
 800763a:	491a      	ldr	r1, [pc, #104]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800763c:	4313      	orrs	r3, r2
 800763e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007640:	4b18      	ldr	r3, [pc, #96]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a17      	ldr	r2, [pc, #92]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800764a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800764c:	f7fa fda0 	bl	8002190 <HAL_GetTick>
 8007650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007652:	e00f      	b.n	8007674 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007654:	f7fa fd9c 	bl	8002190 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b02      	cmp	r3, #2
 8007660:	d908      	bls.n	8007674 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007662:	4b10      	ldr	r3, [pc, #64]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800766a:	2b00      	cmp	r3, #0
 800766c:	d109      	bne.n	8007682 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 800766e:	2303      	movs	r3, #3
 8007670:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007672:	e006      	b.n	8007682 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007674:	4b0b      	ldr	r3, [pc, #44]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0e9      	beq.n	8007654 <RCCEx_PLLSAI1_Config+0x16c>
 8007680:	e000      	b.n	8007684 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8007682:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007684:	7bfb      	ldrb	r3, [r7, #15]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d106      	bne.n	8007698 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 800768c:	691a      	ldr	r2, [r3, #16]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	4904      	ldr	r1, [pc, #16]	; (80076a4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007694:	4313      	orrs	r3, r2
 8007696:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007698:	7bfb      	ldrb	r3, [r7, #15]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
 80076a2:	bf00      	nop
 80076a4:	40021000 	.word	0x40021000
 80076a8:	07ff800c 	.word	0x07ff800c
 80076ac:	ff9f800c 	.word	0xff9f800c
 80076b0:	f9ff800c 	.word	0xf9ff800c

080076b4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d018      	beq.n	80076fc <RCCEx_PLLSAI2_Config+0x48>
 80076ca:	2b03      	cmp	r3, #3
 80076cc:	d81f      	bhi.n	800770e <RCCEx_PLLSAI2_Config+0x5a>
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d002      	beq.n	80076d8 <RCCEx_PLLSAI2_Config+0x24>
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	d009      	beq.n	80076ea <RCCEx_PLLSAI2_Config+0x36>
 80076d6:	e01a      	b.n	800770e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80076d8:	4b4a      	ldr	r3, [pc, #296]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f003 0302 	and.w	r3, r3, #2
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d117      	bne.n	8007714 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 80076e4:	2301      	movs	r3, #1
 80076e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076e8:	e014      	b.n	8007714 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80076ea:	4b46      	ldr	r3, [pc, #280]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80076fa:	e00d      	b.n	8007718 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80076fc:	4b41      	ldr	r3, [pc, #260]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8007704:	2b00      	cmp	r3, #0
 8007706:	d109      	bne.n	800771c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800770c:	e006      	b.n	800771c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	73fb      	strb	r3, [r7, #15]
      break;
 8007712:	e004      	b.n	800771e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007714:	bf00      	nop
 8007716:	e002      	b.n	800771e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8007718:	bf00      	nop
 800771a:	e000      	b.n	800771e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 800771c:	bf00      	nop
  }

  if (status == HAL_OK)
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d169      	bne.n	80077f8 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007724:	4b37      	ldr	r3, [pc, #220]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a36      	ldr	r2, [pc, #216]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 800772a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800772e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007730:	f7fa fd2e 	bl	8002190 <HAL_GetTick>
 8007734:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007736:	e00f      	b.n	8007758 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007738:	f7fa fd2a 	bl	8002190 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d908      	bls.n	8007758 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007746:	4b2f      	ldr	r3, [pc, #188]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800774e:	2b00      	cmp	r3, #0
 8007750:	d009      	beq.n	8007766 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007756:	e006      	b.n	8007766 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007758:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e9      	bne.n	8007738 <RCCEx_PLLSAI2_Config+0x84>
 8007764:	e000      	b.n	8007768 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8007766:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d144      	bne.n	80077f8 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d115      	bne.n	80077a0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007774:	4b23      	ldr	r3, [pc, #140]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	4b23      	ldr	r3, [pc, #140]	; (8007808 <RCCEx_PLLSAI2_Config+0x154>)
 800777a:	4013      	ands	r3, r2
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	6892      	ldr	r2, [r2, #8]
 8007780:	0211      	lsls	r1, r2, #8
 8007782:	687a      	ldr	r2, [r7, #4]
 8007784:	68d2      	ldr	r2, [r2, #12]
 8007786:	06d2      	lsls	r2, r2, #27
 8007788:	4311      	orrs	r1, r2
 800778a:	687a      	ldr	r2, [r7, #4]
 800778c:	6852      	ldr	r2, [r2, #4]
 800778e:	3a01      	subs	r2, #1
 8007790:	0112      	lsls	r2, r2, #4
 8007792:	4311      	orrs	r1, r2
 8007794:	687a      	ldr	r2, [r7, #4]
 8007796:	6812      	ldr	r2, [r2, #0]
 8007798:	430a      	orrs	r2, r1
 800779a:	491a      	ldr	r1, [pc, #104]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 800779c:	4313      	orrs	r3, r2
 800779e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80077a0:	4b18      	ldr	r3, [pc, #96]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a17      	ldr	r2, [pc, #92]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077ac:	f7fa fcf0 	bl	8002190 <HAL_GetTick>
 80077b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077b2:	e00f      	b.n	80077d4 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80077b4:	f7fa fcec 	bl	8002190 <HAL_GetTick>
 80077b8:	4602      	mov	r2, r0
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	1ad3      	subs	r3, r2, r3
 80077be:	2b02      	cmp	r3, #2
 80077c0:	d908      	bls.n	80077d4 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077c2:	4b10      	ldr	r3, [pc, #64]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d109      	bne.n	80077e2 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 80077ce:	2303      	movs	r3, #3
 80077d0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80077d2:	e006      	b.n	80077e2 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80077d4:	4b0b      	ldr	r3, [pc, #44]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0e9      	beq.n	80077b4 <RCCEx_PLLSAI2_Config+0x100>
 80077e0:	e000      	b.n	80077e4 <RCCEx_PLLSAI2_Config+0x130>
          break;
 80077e2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 80077ea:	4b06      	ldr	r3, [pc, #24]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077ec:	695a      	ldr	r2, [r3, #20]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	4904      	ldr	r1, [pc, #16]	; (8007804 <RCCEx_PLLSAI2_Config+0x150>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80077fa:	4618      	mov	r0, r3
 80077fc:	3710      	adds	r7, #16
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40021000 	.word	0x40021000
 8007808:	07ff800c 	.word	0x07ff800c

0800780c <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 800780c:	b480      	push	{r7}
 800780e:	b083      	sub	sp, #12
 8007810:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 8007816:	4b26      	ldr	r3, [pc, #152]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0303 	and.w	r3, r3, #3
 800781e:	2b03      	cmp	r3, #3
 8007820:	d02d      	beq.n	800787e <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8007822:	2b03      	cmp	r3, #3
 8007824:	d835      	bhi.n	8007892 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 8007826:	2b01      	cmp	r3, #1
 8007828:	d002      	beq.n	8007830 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 800782a:	2b02      	cmp	r3, #2
 800782c:	d01d      	beq.n	800786a <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 800782e:	e030      	b.n	8007892 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007830:	4b1f      	ldr	r3, [pc, #124]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b02      	cmp	r3, #2
 800783a:	d12c      	bne.n	8007896 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 800783c:	4b1c      	ldr	r3, [pc, #112]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0308 	and.w	r3, r3, #8
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8007848:	4b19      	ldr	r3, [pc, #100]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	091b      	lsrs	r3, r3, #4
 800784e:	f003 030f 	and.w	r3, r3, #15
 8007852:	e005      	b.n	8007860 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8007854:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007856:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800785a:	0a1b      	lsrs	r3, r3, #8
 800785c:	f003 030f 	and.w	r3, r3, #15
 8007860:	4a14      	ldr	r2, [pc, #80]	; (80078b4 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8007862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007866:	607b      	str	r3, [r7, #4]
      break;
 8007868:	e015      	b.n	8007896 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800786a:	4b11      	ldr	r3, [pc, #68]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007872:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007876:	d110      	bne.n	800789a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800787a:	607b      	str	r3, [r7, #4]
      break;
 800787c:	e00d      	b.n	800789a <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800787e:	4b0c      	ldr	r3, [pc, #48]	; (80078b0 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800788a:	d108      	bne.n	800789e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 800788c:	4b0b      	ldr	r3, [pc, #44]	; (80078bc <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 800788e:	607b      	str	r3, [r7, #4]
      break;
 8007890:	e005      	b.n	800789e <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8007892:	bf00      	nop
 8007894:	e004      	b.n	80078a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8007896:	bf00      	nop
 8007898:	e002      	b.n	80078a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800789a:	bf00      	nop
 800789c:	e000      	b.n	80078a0 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800789e:	bf00      	nop
  }

  return pllvco;
 80078a0:	687b      	ldr	r3, [r7, #4]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	370c      	adds	r7, #12
 80078a6:	46bd      	mov	sp, r7
 80078a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ac:	4770      	bx	lr
 80078ae:	bf00      	nop
 80078b0:	40021000 	.word	0x40021000
 80078b4:	080166c8 	.word	0x080166c8
 80078b8:	00f42400 	.word	0x00f42400
 80078bc:	00989680 	.word	0x00989680

080078c0 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80078c6:	2300      	movs	r3, #0
 80078c8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 80078ca:	4b26      	ldr	r3, [pc, #152]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80078cc:	695b      	ldr	r3, [r3, #20]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d02d      	beq.n	8007932 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 80078d6:	2b03      	cmp	r3, #3
 80078d8:	d835      	bhi.n	8007946 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 80078da:	2b01      	cmp	r3, #1
 80078dc:	d002      	beq.n	80078e4 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d01d      	beq.n	800791e <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80078e2:	e030      	b.n	8007946 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80078e4:	4b1f      	ldr	r3, [pc, #124]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 0302 	and.w	r3, r3, #2
 80078ec:	2b02      	cmp	r3, #2
 80078ee:	d12c      	bne.n	800794a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80078f0:	4b1c      	ldr	r3, [pc, #112]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 0308 	and.w	r3, r3, #8
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80078fc:	4b19      	ldr	r3, [pc, #100]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	091b      	lsrs	r3, r3, #4
 8007902:	f003 030f 	and.w	r3, r3, #15
 8007906:	e005      	b.n	8007914 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8007908:	4b16      	ldr	r3, [pc, #88]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800790a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800790e:	0a1b      	lsrs	r3, r3, #8
 8007910:	f003 030f 	and.w	r3, r3, #15
 8007914:	4a14      	ldr	r2, [pc, #80]	; (8007968 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 8007916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800791a:	607b      	str	r3, [r7, #4]
      break;
 800791c:	e015      	b.n	800794a <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800791e:	4b11      	ldr	r3, [pc, #68]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007926:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800792a:	d110      	bne.n	800794e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800792c:	4b0f      	ldr	r3, [pc, #60]	; (800796c <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 800792e:	607b      	str	r3, [r7, #4]
      break;
 8007930:	e00d      	b.n	800794e <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007932:	4b0c      	ldr	r3, [pc, #48]	; (8007964 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800793e:	d108      	bne.n	8007952 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8007940:	4b0b      	ldr	r3, [pc, #44]	; (8007970 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 8007942:	607b      	str	r3, [r7, #4]
      break;
 8007944:	e005      	b.n	8007952 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8007946:	bf00      	nop
 8007948:	e004      	b.n	8007954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800794a:	bf00      	nop
 800794c:	e002      	b.n	8007954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 800794e:	bf00      	nop
 8007950:	e000      	b.n	8007954 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007952:	bf00      	nop
  }

  return pllvco;
 8007954:	687b      	ldr	r3, [r7, #4]
}
 8007956:	4618      	mov	r0, r3
 8007958:	370c      	adds	r7, #12
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	40021000 	.word	0x40021000
 8007968:	080166c8 	.word	0x080166c8
 800796c:	00f42400 	.word	0x00f42400
 8007970:	00989680 	.word	0x00989680

08007974 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007974:	b580      	push	{r7, lr}
 8007976:	b088      	sub	sp, #32
 8007978:	af00      	add	r7, sp, #0
 800797a:	6078      	str	r0, [r7, #4]
 800797c:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 800797e:	2300      	movs	r3, #0
 8007980:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007988:	d10c      	bne.n	80079a4 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800798a:	4b78      	ldr	r3, [pc, #480]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800798c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007990:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007994:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8007996:	69bb      	ldr	r3, [r7, #24]
 8007998:	2b60      	cmp	r3, #96	; 0x60
 800799a:	d110      	bne.n	80079be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800799c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	e00c      	b.n	80079be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 80079a4:	4b71      	ldr	r3, [pc, #452]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80079aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80079ae:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b6:	d102      	bne.n	80079be <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 80079b8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80079bc:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 80079be:	69fb      	ldr	r3, [r7, #28]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f040 80cd 	bne.w	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b40      	cmp	r3, #64	; 0x40
 80079ce:	d003      	beq.n	80079d8 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 80079d0:	69bb      	ldr	r3, [r7, #24]
 80079d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079d6:	d13b      	bne.n	8007a50 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80079d8:	4b64      	ldr	r3, [pc, #400]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079e0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e4:	f040 80bb 	bne.w	8007b5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 80079e8:	4b60      	ldr	r3, [pc, #384]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	f000 80b4 	beq.w	8007b5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80079f6:	4b5d      	ldr	r3, [pc, #372]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079f8:	68db      	ldr	r3, [r3, #12]
 80079fa:	091b      	lsrs	r3, r3, #4
 80079fc:	f003 030f 	and.w	r3, r3, #15
 8007a00:	3301      	adds	r3, #1
 8007a02:	693a      	ldr	r2, [r7, #16]
 8007a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a08:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8007a0a:	4b58      	ldr	r3, [pc, #352]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	0a1b      	lsrs	r3, r3, #8
 8007a10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a14:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8007a16:	4b55      	ldr	r3, [pc, #340]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	0edb      	lsrs	r3, r3, #27
 8007a1c:	f003 031f 	and.w	r3, r3, #31
 8007a20:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d10a      	bne.n	8007a3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8007a28:	4b50      	ldr	r3, [pc, #320]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d002      	beq.n	8007a3a <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8007a34:	2311      	movs	r3, #17
 8007a36:	617b      	str	r3, [r7, #20]
 8007a38:	e001      	b.n	8007a3e <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8007a3a:	2307      	movs	r3, #7
 8007a3c:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 8007a3e:	693b      	ldr	r3, [r7, #16]
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	fb03 f202 	mul.w	r2, r3, r2
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a4c:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007a4e:	e086      	b.n	8007b5e <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	2b80      	cmp	r3, #128	; 0x80
 8007a54:	d003      	beq.n	8007a5e <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8007a56:	69bb      	ldr	r3, [r7, #24]
 8007a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a5c:	d109      	bne.n	8007a72 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a5e:	4b43      	ldr	r3, [pc, #268]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007a6a:	d179      	bne.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8007a6c:	4b40      	ldr	r3, [pc, #256]	; (8007b70 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007a6e:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007a70:	e076      	b.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d135      	bne.n	8007ae4 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8007a78:	4b3c      	ldr	r3, [pc, #240]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a7a:	691b      	ldr	r3, [r3, #16]
 8007a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d06d      	beq.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007a84:	f7ff fec2 	bl	800780c <RCCEx_PLLSAI1_GetVCOFreq>
 8007a88:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8007a8a:	4b38      	ldr	r3, [pc, #224]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	091b      	lsrs	r3, r3, #4
 8007a90:	f003 030f 	and.w	r3, r3, #15
 8007a94:	3301      	adds	r3, #1
 8007a96:	693a      	ldr	r2, [r7, #16]
 8007a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a9c:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007a9e:	4b33      	ldr	r3, [pc, #204]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007aa0:	691b      	ldr	r3, [r3, #16]
 8007aa2:	0a1b      	lsrs	r3, r3, #8
 8007aa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007aa8:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007aaa:	4b30      	ldr	r3, [pc, #192]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007aac:	691b      	ldr	r3, [r3, #16]
 8007aae:	0edb      	lsrs	r3, r3, #27
 8007ab0:	f003 031f 	and.w	r3, r3, #31
 8007ab4:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007abc:	4b2b      	ldr	r3, [pc, #172]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007abe:	691b      	ldr	r3, [r3, #16]
 8007ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d002      	beq.n	8007ace <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8007ac8:	2311      	movs	r3, #17
 8007aca:	617b      	str	r3, [r7, #20]
 8007acc:	e001      	b.n	8007ad2 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8007ace:	2307      	movs	r3, #7
 8007ad0:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	fb03 f202 	mul.w	r2, r3, r2
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae0:	61fb      	str	r3, [r7, #28]
 8007ae2:	e03d      	b.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007ae4:	69bb      	ldr	r3, [r7, #24]
 8007ae6:	2b20      	cmp	r3, #32
 8007ae8:	d003      	beq.n	8007af2 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 8007aea:	69bb      	ldr	r3, [r7, #24]
 8007aec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007af0:	d136      	bne.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 8007af2:	4b1e      	ldr	r3, [pc, #120]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007af4:	695b      	ldr	r3, [r3, #20]
 8007af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d030      	beq.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 8007afe:	f7ff fedf 	bl	80078c0 <RCCEx_PLLSAI2_GetVCOFreq>
 8007b02:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 8007b04:	4b19      	ldr	r3, [pc, #100]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	091b      	lsrs	r3, r3, #4
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	3301      	adds	r3, #1
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b16:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8007b18:	4b14      	ldr	r3, [pc, #80]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007b1a:	695b      	ldr	r3, [r3, #20]
 8007b1c:	0a1b      	lsrs	r3, r3, #8
 8007b1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b22:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 8007b24:	4b11      	ldr	r3, [pc, #68]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007b26:	695b      	ldr	r3, [r3, #20]
 8007b28:	0edb      	lsrs	r3, r3, #27
 8007b2a:	f003 031f 	and.w	r3, r3, #31
 8007b2e:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d10a      	bne.n	8007b4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8007b36:	4b0d      	ldr	r3, [pc, #52]	; (8007b6c <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007b38:	695b      	ldr	r3, [r3, #20]
 8007b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 8007b42:	2311      	movs	r3, #17
 8007b44:	617b      	str	r3, [r7, #20]
 8007b46:	e001      	b.n	8007b4c <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8007b48:	2307      	movs	r3, #7
 8007b4a:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007b4c:	693b      	ldr	r3, [r7, #16]
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	fb03 f202 	mul.w	r2, r3, r2
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5a:	61fb      	str	r3, [r7, #28]
 8007b5c:	e000      	b.n	8007b60 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007b5e:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8007b60:	69fb      	ldr	r3, [r7, #28]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3720      	adds	r7, #32
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	40021000 	.word	0x40021000
 8007b70:	00f42400 	.word	0x00f42400

08007b74 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d066      	beq.n	8007c54 <HAL_RTC_Init+0xe0>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d106      	bne.n	8007ba0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2200      	movs	r2, #0
 8007b96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f7f9 feac 	bl	80018f8 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2202      	movs	r2, #2
 8007ba4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68db      	ldr	r3, [r3, #12]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b10      	cmp	r3, #16
 8007bb4:	d045      	beq.n	8007c42 <HAL_RTC_Init+0xce>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007bb6:	4b2a      	ldr	r3, [pc, #168]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007bb8:	22ca      	movs	r2, #202	; 0xca
 8007bba:	625a      	str	r2, [r3, #36]	; 0x24
 8007bbc:	4b28      	ldr	r3, [pc, #160]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007bbe:	2253      	movs	r2, #83	; 0x53
 8007bc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa38 	bl	8008038 <RTC_EnterInitMode>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d121      	bne.n	8007c16 <HAL_RTC_Init+0xa2>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8007bd2:	4b23      	ldr	r3, [pc, #140]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	4a22      	ldr	r2, [pc, #136]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007bd8:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be0:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8007be2:	4b1f      	ldr	r3, [pc, #124]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6859      	ldr	r1, [r3, #4]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	691b      	ldr	r3, [r3, #16]
 8007bee:	4319      	orrs	r1, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	430b      	orrs	r3, r1
 8007bf6:	491a      	ldr	r1, [pc, #104]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68da      	ldr	r2, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	689b      	ldr	r3, [r3, #8]
 8007c04:	041b      	lsls	r3, r3, #16
 8007c06:	4916      	ldr	r1, [pc, #88]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	610b      	str	r3, [r1, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 fa47 	bl	80080a0 <RTC_ExitInitMode>
 8007c12:	4603      	mov	r3, r0
 8007c14:	73fb      	strb	r3, [r7, #15]
      }

      if (status == HAL_OK)
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d10e      	bne.n	8007c3a <HAL_RTC_Init+0xc6>
      {
        MODIFY_REG(RTC->CR, \
 8007c1c:	4b10      	ldr	r3, [pc, #64]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007c1e:	699b      	ldr	r3, [r3, #24]
 8007c20:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6a19      	ldr	r1, [r3, #32]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	4319      	orrs	r1, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	695b      	ldr	r3, [r3, #20]
 8007c32:	430b      	orrs	r3, r1
 8007c34:	490a      	ldr	r1, [pc, #40]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }


    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_RTC_Init+0xec>)
 8007c3c:	22ff      	movs	r2, #255	; 0xff
 8007c3e:	625a      	str	r2, [r3, #36]	; 0x24
 8007c40:	e001      	b.n	8007c46 <HAL_RTC_Init+0xd2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8007c42:	2300      	movs	r3, #0
 8007c44:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d103      	bne.n	8007c54 <HAL_RTC_Init+0xe0>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }

  return status;
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	40002800 	.word	0x40002800

08007c64 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b087      	sub	sp, #28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_RTC_SetTime+0x1a>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e081      	b.n	8007d82 <HAL_RTC_SetTime+0x11e>
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007c8e:	4b3f      	ldr	r3, [pc, #252]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007c90:	22ca      	movs	r2, #202	; 0xca
 8007c92:	625a      	str	r2, [r3, #36]	; 0x24
 8007c94:	4b3d      	ldr	r3, [pc, #244]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007c96:	2253      	movs	r2, #83	; 0x53
 8007c98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007c9a:	68f8      	ldr	r0, [r7, #12]
 8007c9c:	f000 f9cc 	bl	8008038 <RTC_EnterInitMode>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007ca4:	7cfb      	ldrb	r3, [r7, #19]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d15c      	bne.n	8007d64 <HAL_RTC_SetTime+0x100>
  {
    if (Format == RTC_FORMAT_BIN)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d125      	bne.n	8007cfc <HAL_RTC_SetTime+0x98>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007cb0:	4b36      	ldr	r3, [pc, #216]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d102      	bne.n	8007cc2 <HAL_RTC_SetTime+0x5e>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fa28 	bl	800811c <RTC_ByteToBcd2>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	785b      	ldrb	r3, [r3, #1]
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 fa21 	bl	800811c <RTC_ByteToBcd2>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007cde:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	789b      	ldrb	r3, [r3, #2]
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	f000 fa19 	bl	800811c <RTC_ByteToBcd2>
 8007cea:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007cec:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	78db      	ldrb	r3, [r3, #3]
 8007cf4:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007cf6:	4313      	orrs	r3, r2
 8007cf8:	617b      	str	r3, [r7, #20]
 8007cfa:	e017      	b.n	8007d2c <HAL_RTC_SetTime+0xc8>
    }
    else
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8007cfc:	4b23      	ldr	r3, [pc, #140]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d102      	bne.n	8007d0e <HAL_RTC_SetTime+0xaa>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d1a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007d20:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	78db      	ldrb	r3, [r3, #3]
 8007d26:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    WRITE_REG(RTC->TR, (tmpreg & RTC_TR_RESERVED_MASK));
 8007d2c:	4a17      	ldr	r2, [pc, #92]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007d34:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007d38:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    CLEAR_BIT(RTC->CR, RTC_CR_BKP);
 8007d3a:	4b14      	ldr	r3, [pc, #80]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d3c:	699b      	ldr	r3, [r3, #24]
 8007d3e:	4a13      	ldr	r2, [pc, #76]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007d44:	6193      	str	r3, [r2, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    SET_BIT(RTC->CR, (sTime->DayLightSaving | sTime->StoreOperation));
 8007d46:	4b11      	ldr	r3, [pc, #68]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d48:	699a      	ldr	r2, [r3, #24]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	68d9      	ldr	r1, [r3, #12]
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	691b      	ldr	r3, [r3, #16]
 8007d52:	430b      	orrs	r3, r1
 8007d54:	490d      	ldr	r1, [pc, #52]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	618b      	str	r3, [r1, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007d5a:	68f8      	ldr	r0, [r7, #12]
 8007d5c:	f000 f9a0 	bl	80080a0 <RTC_ExitInitMode>
 8007d60:	4603      	mov	r3, r0
 8007d62:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_RTC_SetTime+0x128>)
 8007d66:	22ff      	movs	r2, #255	; 0xff
 8007d68:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007d6a:	7cfb      	ldrb	r3, [r7, #19]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d103      	bne.n	8007d78 <HAL_RTC_SetTime+0x114>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007d80:	7cfb      	ldrb	r3, [r7, #19]
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	371c      	adds	r7, #28
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd90      	pop	{r4, r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	40002800 	.word	0x40002800

08007d90 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b086      	sub	sp, #24
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = READ_REG(RTC->SSR);
 8007d9c:	4b29      	ldr	r3, [pc, #164]	; (8007e44 <HAL_RTC_GetTime+0xb4>)
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(READ_REG(RTC->PRER) & RTC_PRER_PREDIV_S);
 8007da4:	4b27      	ldr	r3, [pc, #156]	; (8007e44 <HAL_RTC_GetTime+0xb4>)
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007dac:	68bb      	ldr	r3, [r7, #8]
 8007dae:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(READ_REG(RTC->TR) & RTC_TR_RESERVED_MASK);
 8007db0:	4b24      	ldr	r3, [pc, #144]	; (8007e44 <HAL_RTC_GetTime+0xb4>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8007db8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007dbc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	0c1b      	lsrs	r3, r3, #16
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007dc8:	b2da      	uxtb	r2, r3
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	0a1b      	lsrs	r3, r3, #8
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dd8:	b2da      	uxtb	r2, r3
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007de6:	b2da      	uxtb	r2, r3
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	0d9b      	lsrs	r3, r3, #22
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	f003 0301 	and.w	r3, r3, #1
 8007df6:	b2da      	uxtb	r2, r3
 8007df8:	68bb      	ldr	r3, [r7, #8]
 8007dfa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d11a      	bne.n	8007e38 <HAL_RTC_GetTime+0xa8>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	f000 f9a8 	bl	800815c <RTC_Bcd2ToByte>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	461a      	mov	r2, r3
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	785b      	ldrb	r3, [r3, #1]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f000 f99f 	bl	800815c <RTC_Bcd2ToByte>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	461a      	mov	r2, r3
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	789b      	ldrb	r3, [r3, #2]
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f000 f996 	bl	800815c <RTC_Bcd2ToByte>
 8007e30:	4603      	mov	r3, r0
 8007e32:	461a      	mov	r2, r3
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3718      	adds	r7, #24
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	40002800 	.word	0x40002800

08007e48 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007e48:	b590      	push	{r4, r7, lr}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d101      	bne.n	8007e62 <HAL_RTC_SetDate+0x1a>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	e071      	b.n	8007f46 <HAL_RTC_SetDate+0xfe>
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2202      	movs	r2, #2
 8007e6e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d10e      	bne.n	8007e96 <HAL_RTC_SetDate+0x4e>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	785b      	ldrb	r3, [r3, #1]
 8007e7c:	f003 0310 	and.w	r3, r3, #16
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d008      	beq.n	8007e96 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	785b      	ldrb	r3, [r3, #1]
 8007e88:	f023 0310 	bic.w	r3, r3, #16
 8007e8c:	b2db      	uxtb	r3, r3
 8007e8e:	330a      	adds	r3, #10
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d11c      	bne.n	8007ed6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	78db      	ldrb	r3, [r3, #3]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f93b 	bl	800811c <RTC_ByteToBcd2>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	785b      	ldrb	r3, [r3, #1]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f934 	bl	800811c <RTC_ByteToBcd2>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007eb8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	789b      	ldrb	r3, [r3, #2]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f000 f92c 	bl	800811c <RTC_ByteToBcd2>
 8007ec4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007ec6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	617b      	str	r3, [r7, #20]
 8007ed4:	e00e      	b.n	8007ef4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	78db      	ldrb	r3, [r3, #3]
 8007eda:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	785b      	ldrb	r3, [r3, #1]
 8007ee0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007ee2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8007ee4:	68ba      	ldr	r2, [r7, #8]
 8007ee6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8007ee8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	781b      	ldrb	r3, [r3, #0]
 8007eee:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007ef4:	4b16      	ldr	r3, [pc, #88]	; (8007f50 <HAL_RTC_SetDate+0x108>)
 8007ef6:	22ca      	movs	r2, #202	; 0xca
 8007ef8:	625a      	str	r2, [r3, #36]	; 0x24
 8007efa:	4b15      	ldr	r3, [pc, #84]	; (8007f50 <HAL_RTC_SetDate+0x108>)
 8007efc:	2253      	movs	r2, #83	; 0x53
 8007efe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f000 f899 	bl	8008038 <RTC_EnterInitMode>
 8007f06:	4603      	mov	r3, r0
 8007f08:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8007f0a:	7cfb      	ldrb	r3, [r7, #19]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d10b      	bne.n	8007f28 <HAL_RTC_SetDate+0xe0>
  {
    /* Set the RTC_DR register */
    WRITE_REG(RTC->DR, (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK));
 8007f10:	4a0f      	ldr	r2, [pc, #60]	; (8007f50 <HAL_RTC_SetDate+0x108>)
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f18:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f1c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 f8be 	bl	80080a0 <RTC_ExitInitMode>
 8007f24:	4603      	mov	r3, r0
 8007f26:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007f28:	4b09      	ldr	r3, [pc, #36]	; (8007f50 <HAL_RTC_SetDate+0x108>)
 8007f2a:	22ff      	movs	r2, #255	; 0xff
 8007f2c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8007f2e:	7cfb      	ldrb	r3, [r7, #19]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d103      	bne.n	8007f3c <HAL_RTC_SetDate+0xf4>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	2201      	movs	r2, #1
 8007f38:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007f44:	7cfb      	ldrb	r3, [r7, #19]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	371c      	adds	r7, #28
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd90      	pop	{r4, r7, pc}
 8007f4e:	bf00      	nop
 8007f50:	40002800 	.word	0x40002800

08007f54 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b086      	sub	sp, #24
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	60f8      	str	r0, [r7, #12]
 8007f5c:	60b9      	str	r1, [r7, #8]
 8007f5e:	607a      	str	r2, [r7, #4]
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(READ_REG(RTC->DR) & RTC_DR_RESERVED_MASK);
 8007f60:	4b22      	ldr	r3, [pc, #136]	; (8007fec <HAL_RTC_GetDate+0x98>)
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007f68:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	0c1b      	lsrs	r3, r3, #16
 8007f72:	b2da      	uxtb	r2, r3
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	0a1b      	lsrs	r3, r3, #8
 8007f7c:	b2db      	uxtb	r3, r3
 8007f7e:	f003 031f 	and.w	r3, r3, #31
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8007f88:	697b      	ldr	r3, [r7, #20]
 8007f8a:	b2db      	uxtb	r3, r3
 8007f8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	68bb      	ldr	r3, [r7, #8]
 8007f94:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	0b5b      	lsrs	r3, r3, #13
 8007f9a:	b2db      	uxtb	r3, r3
 8007f9c:	f003 0307 	and.w	r3, r3, #7
 8007fa0:	b2da      	uxtb	r2, r3
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d11a      	bne.n	8007fe2 <HAL_RTC_GetDate+0x8e>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	78db      	ldrb	r3, [r3, #3]
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f000 f8d3 	bl	800815c <RTC_Bcd2ToByte>
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	461a      	mov	r2, r3
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	785b      	ldrb	r3, [r3, #1]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 f8ca 	bl	800815c <RTC_Bcd2ToByte>
 8007fc8:	4603      	mov	r3, r0
 8007fca:	461a      	mov	r2, r3
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007fd0:	68bb      	ldr	r3, [r7, #8]
 8007fd2:	789b      	ldrb	r3, [r3, #2]
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f000 f8c1 	bl	800815c <RTC_Bcd2ToByte>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	461a      	mov	r2, r3
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3718      	adds	r7, #24
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	40002800 	.word	0x40002800

08007ff0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b084      	sub	sp, #16
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  WRITE_REG(RTC->ICSR, ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK)));
 8007ff8:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <HAL_RTC_WaitForSynchro+0x40>)
 8007ffa:	4a0e      	ldr	r2, [pc, #56]	; (8008034 <HAL_RTC_WaitForSynchro+0x44>)
 8007ffc:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8007ffe:	f7fa f8c7 	bl	8002190 <HAL_GetTick>
 8008002:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8008004:	e009      	b.n	800801a <HAL_RTC_WaitForSynchro+0x2a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008006:	f7fa f8c3 	bl	8002190 <HAL_GetTick>
 800800a:	4602      	mov	r2, r0
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	1ad3      	subs	r3, r2, r3
 8008010:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008014:	d901      	bls.n	800801a <HAL_RTC_WaitForSynchro+0x2a>
    {
      return HAL_TIMEOUT;
 8008016:	2303      	movs	r3, #3
 8008018:	e006      	b.n	8008028 <HAL_RTC_WaitForSynchro+0x38>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800801a:	4b05      	ldr	r3, [pc, #20]	; (8008030 <HAL_RTC_WaitForSynchro+0x40>)
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f003 0320 	and.w	r3, r3, #32
 8008022:	2b00      	cmp	r3, #0
 8008024:	d0ef      	beq.n	8008006 <HAL_RTC_WaitForSynchro+0x16>
    }
  }

  return HAL_OK;
 8008026:	2300      	movs	r3, #0
}
 8008028:	4618      	mov	r0, r3
 800802a:	3710      	adds	r7, #16
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	40002800 	.word	0x40002800
 8008034:	0001005c 	.word	0x0001005c

08008038 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008040:	2300      	movs	r3, #0
 8008042:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8008044:	4b15      	ldr	r3, [pc, #84]	; (800809c <RTC_EnterInitMode+0x64>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800804c:	2b00      	cmp	r3, #0
 800804e:	d120      	bne.n	8008092 <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8008050:	4b12      	ldr	r3, [pc, #72]	; (800809c <RTC_EnterInitMode+0x64>)
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	4a11      	ldr	r2, [pc, #68]	; (800809c <RTC_EnterInitMode+0x64>)
 8008056:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800805a:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800805c:	f7fa f898 	bl	8002190 <HAL_GetTick>
 8008060:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008062:	e00d      	b.n	8008080 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008064:	f7fa f894 	bl	8002190 <HAL_GetTick>
 8008068:	4602      	mov	r2, r0
 800806a:	68bb      	ldr	r3, [r7, #8]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008072:	d905      	bls.n	8008080 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	2203      	movs	r2, #3
 800807c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008080:	4b06      	ldr	r3, [pc, #24]	; (800809c <RTC_EnterInitMode+0x64>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008088:	2b00      	cmp	r3, #0
 800808a:	d102      	bne.n	8008092 <RTC_EnterInitMode+0x5a>
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	2b03      	cmp	r3, #3
 8008090:	d1e8      	bne.n	8008064 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8008092:	7bfb      	ldrb	r3, [r7, #15]
}
 8008094:	4618      	mov	r0, r3
 8008096:	3710      	adds	r7, #16
 8008098:	46bd      	mov	sp, r7
 800809a:	bd80      	pop	{r7, pc}
 800809c:	40002800 	.word	0x40002800

080080a0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80080ac:	4b1a      	ldr	r3, [pc, #104]	; (8008118 <RTC_ExitInitMode+0x78>)
 80080ae:	68db      	ldr	r3, [r3, #12]
 80080b0:	4a19      	ldr	r2, [pc, #100]	; (8008118 <RTC_ExitInitMode+0x78>)
 80080b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080b6:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80080b8:	4b17      	ldr	r3, [pc, #92]	; (8008118 <RTC_ExitInitMode+0x78>)
 80080ba:	699b      	ldr	r3, [r3, #24]
 80080bc:	f003 0320 	and.w	r3, r3, #32
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10c      	bne.n	80080de <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7ff ff93 	bl	8007ff0 <HAL_RTC_WaitForSynchro>
 80080ca:	4603      	mov	r3, r0
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d01e      	beq.n	800810e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2203      	movs	r2, #3
 80080d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	73fb      	strb	r3, [r7, #15]
 80080dc:	e017      	b.n	800810e <RTC_ExitInitMode+0x6e>
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32L552xx STM32L562xx Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80080de:	4b0e      	ldr	r3, [pc, #56]	; (8008118 <RTC_ExitInitMode+0x78>)
 80080e0:	699b      	ldr	r3, [r3, #24]
 80080e2:	4a0d      	ldr	r2, [pc, #52]	; (8008118 <RTC_ExitInitMode+0x78>)
 80080e4:	f023 0320 	bic.w	r3, r3, #32
 80080e8:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f7ff ff80 	bl	8007ff0 <HAL_RTC_WaitForSynchro>
 80080f0:	4603      	mov	r3, r0
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d005      	beq.n	8008102 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2203      	movs	r2, #3
 80080fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      status = HAL_TIMEOUT;
 80080fe:	2303      	movs	r3, #3
 8008100:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008102:	4b05      	ldr	r3, [pc, #20]	; (8008118 <RTC_ExitInitMode+0x78>)
 8008104:	699b      	ldr	r3, [r3, #24]
 8008106:	4a04      	ldr	r2, [pc, #16]	; (8008118 <RTC_ExitInitMode+0x78>)
 8008108:	f043 0320 	orr.w	r3, r3, #32
 800810c:	6193      	str	r3, [r2, #24]
  }

  return status;
 800810e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008110:	4618      	mov	r0, r3
 8008112:	3710      	adds	r7, #16
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	40002800 	.word	0x40002800

0800811c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	4603      	mov	r3, r0
 8008124:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008126:	2300      	movs	r3, #0
 8008128:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 800812a:	79fb      	ldrb	r3, [r7, #7]
 800812c:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 800812e:	e005      	b.n	800813c <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	3301      	adds	r3, #1
 8008134:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8008136:	7afb      	ldrb	r3, [r7, #11]
 8008138:	3b0a      	subs	r3, #10
 800813a:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 800813c:	7afb      	ldrb	r3, [r7, #11]
 800813e:	2b09      	cmp	r3, #9
 8008140:	d8f6      	bhi.n	8008130 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	b2db      	uxtb	r3, r3
 8008146:	011b      	lsls	r3, r3, #4
 8008148:	b2da      	uxtb	r2, r3
 800814a:	7afb      	ldrb	r3, [r7, #11]
 800814c:	4313      	orrs	r3, r2
 800814e:	b2db      	uxtb	r3, r3
}
 8008150:	4618      	mov	r0, r3
 8008152:	3714      	adds	r7, #20
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr

0800815c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	4603      	mov	r3, r0
 8008164:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4) * 10U;
 8008166:	79fb      	ldrb	r3, [r7, #7]
 8008168:	091b      	lsrs	r3, r3, #4
 800816a:	b2db      	uxtb	r3, r3
 800816c:	461a      	mov	r2, r3
 800816e:	4613      	mov	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	4413      	add	r3, r2
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	b2da      	uxtb	r2, r3
 800817c:	79fb      	ldrb	r3, [r7, #7]
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	b2db      	uxtb	r3, r3
 8008184:	4413      	add	r3, r2
 8008186:	b2db      	uxtb	r3, r3
}
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	490f      	ldr	r1, [pc, #60]	; (80081e4 <HAL_RTCEx_PrivilegeModeSet+0x50>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	61cb      	str	r3, [r1, #28]

  /* TAMP and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone);
 80081ac:	683b      	ldr	r3, [r7, #0]
 80081ae:	689a      	ldr	r2, [r3, #8]
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	490c      	ldr	r1, [pc, #48]	; (80081e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	624b      	str	r3, [r1, #36]	; 0x24

  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SMCR,
 80081ba:	4b0b      	ldr	r3, [pc, #44]	; (80081e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80081bc:	6a1b      	ldr	r3, [r3, #32]
 80081be:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	6919      	ldr	r1, [r3, #16]
 80081c6:	683b      	ldr	r3, [r7, #0]
 80081c8:	695b      	ldr	r3, [r3, #20]
 80081ca:	041b      	lsls	r3, r3, #16
 80081cc:	430b      	orrs	r3, r1
 80081ce:	4906      	ldr	r1, [pc, #24]	; (80081e8 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80081d0:	4313      	orrs	r3, r2
 80081d2:	620b      	str	r3, [r1, #32]
             (TAMP_SMCR_BKPRWDPROT | TAMP_SMCR_BKPWDPROT),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SMCR_BKPRWDPROT_Pos) | (privilegeState->backupRegisterStartZone3 << TAMP_SMCR_BKPWDPROT_Pos)));

  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40002800 	.word	0x40002800
 80081e8:	40003400 	.word	0x40003400

080081ec <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	; 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d101      	bne.n	80081fe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80081fa:	2301      	movs	r3, #1
 80081fc:	e075      	b.n	80082ea <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008204:	b2db      	uxtb	r3, r3
 8008206:	2b00      	cmp	r3, #0
 8008208:	d105      	bne.n	8008216 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7f9 fbaf 	bl	8001974 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2204      	movs	r2, #4
 800821a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f868 	bl	80082f4 <HAL_SD_InitCard>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d001      	beq.n	800822e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800822a:	2301      	movs	r3, #1
 800822c:	e05d      	b.n	80082ea <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800822e:	f107 0308 	add.w	r3, r7, #8
 8008232:	4619      	mov	r1, r3
 8008234:	6878      	ldr	r0, [r7, #4]
 8008236:	f000 fd9b 	bl	8008d70 <HAL_SD_GetCardStatus>
 800823a:	4603      	mov	r3, r0
 800823c:	2b00      	cmp	r3, #0
 800823e:	d001      	beq.n	8008244 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e052      	b.n	80082ea <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8008244:	7e3b      	ldrb	r3, [r7, #24]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800824a:	7e7b      	ldrb	r3, [r7, #25]
 800824c:	b2db      	uxtb	r3, r3
 800824e:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	2b01      	cmp	r3, #1
 8008256:	d10a      	bne.n	800826e <HAL_SD_Init+0x82>
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d102      	bne.n	8008264 <HAL_SD_Init+0x78>
 800825e:	6a3b      	ldr	r3, [r7, #32]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d004      	beq.n	800826e <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800826a:	659a      	str	r2, [r3, #88]	; 0x58
 800826c:	e00b      	b.n	8008286 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	2b01      	cmp	r3, #1
 8008274:	d104      	bne.n	8008280 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800827c:	659a      	str	r2, [r3, #88]	; 0x58
 800827e:	e002      	b.n	8008286 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f000 fe59 	bl	8008f44 <HAL_SD_ConfigWideBusOperation>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d001      	beq.n	800829c <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e026      	b.n	80082ea <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800829c:	f7f9 ff78 	bl	8002190 <HAL_GetTick>
 80082a0:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80082a2:	e011      	b.n	80082c8 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80082a4:	f7f9 ff74 	bl	8002190 <HAL_GetTick>
 80082a8:	4602      	mov	r2, r0
 80082aa:	69fb      	ldr	r3, [r7, #28]
 80082ac:	1ad3      	subs	r3, r2, r3
 80082ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082b2:	d109      	bne.n	80082c8 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80082ba:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	2201      	movs	r2, #1
 80082c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e010      	b.n	80082ea <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 ff4b 	bl	8009164 <HAL_SD_GetCardState>
 80082ce:	4603      	mov	r3, r0
 80082d0:	2b04      	cmp	r3, #4
 80082d2:	d1e7      	bne.n	80082a4 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2200      	movs	r2, #0
 80082d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3728      	adds	r7, #40	; 0x28
 80082ee:	46bd      	mov	sp, r7
 80082f0:	bd80      	pop	{r7, pc}
	...

080082f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80082f4:	b590      	push	{r4, r7, lr}
 80082f6:	b08d      	sub	sp, #52	; 0x34
 80082f8:	af02      	add	r7, sp, #8
 80082fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80082fc:	2300      	movs	r3, #0
 80082fe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008300:	2300      	movs	r3, #0
 8008302:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008304:	2300      	movs	r3, #0
 8008306:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008308:	2300      	movs	r3, #0
 800830a:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 800830c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008310:	f7fe f948 	bl	80065a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008314:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 8008316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008318:	2b00      	cmp	r3, #0
 800831a:	d109      	bne.n	8008330 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800832a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e06a      	b.n	8008406 <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8008330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008332:	0a1b      	lsrs	r3, r3, #8
 8008334:	4a36      	ldr	r2, [pc, #216]	; (8008410 <HAL_SD_InitCard+0x11c>)
 8008336:	fba2 2303 	umull	r2, r3, r2, r3
 800833a:	091b      	lsrs	r3, r3, #4
 800833c:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681c      	ldr	r4, [r3, #0]
 8008342:	466a      	mov	r2, sp
 8008344:	f107 0318 	add.w	r3, r7, #24
 8008348:	e893 0003 	ldmia.w	r3, {r0, r1}
 800834c:	e882 0003 	stmia.w	r2, {r0, r1}
 8008350:	f107 030c 	add.w	r3, r7, #12
 8008354:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008356:	4620      	mov	r0, r4
 8008358:	f003 ff92 	bl	800c280 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4618      	mov	r0, r3
 8008362:	f003 ffd5 	bl	800c310 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	005b      	lsls	r3, r3, #1
 800836a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8008372:	4a28      	ldr	r2, [pc, #160]	; (8008414 <HAL_SD_InitCard+0x120>)
 8008374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008376:	fbb2 f3f3 	udiv	r3, r2, r3
 800837a:	3301      	adds	r3, #1
 800837c:	4618      	mov	r0, r3
 800837e:	f7f9 ff13 	bl	80021a8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008382:	6878      	ldr	r0, [r7, #4]
 8008384:	f000 ffdc 	bl	8009340 <SD_PowerON>
 8008388:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800838a:	6a3b      	ldr	r3, [r7, #32]
 800838c:	2b00      	cmp	r3, #0
 800838e:	d00b      	beq.n	80083a8 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2201      	movs	r2, #1
 8008394:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	431a      	orrs	r2, r3
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083a4:	2301      	movs	r3, #1
 80083a6:	e02e      	b.n	8008406 <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fefb 	bl	80091a4 <SD_InitCard>
 80083ae:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	431a      	orrs	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e01b      	b.n	8008406 <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083d6:	4618      	mov	r0, r3
 80083d8:	f004 f830 	bl	800c43c <SDMMC_CmdBlockLength>
 80083dc:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d00f      	beq.n	8008404 <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a0b      	ldr	r2, [pc, #44]	; (8008418 <HAL_SD_InitCard+0x124>)
 80083ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	431a      	orrs	r2, r3
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e000      	b.n	8008406 <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	372c      	adds	r7, #44	; 0x2c
 800840a:	46bd      	mov	sp, r7
 800840c:	bd90      	pop	{r4, r7, pc}
 800840e:	bf00      	nop
 8008410:	014f8b59 	.word	0x014f8b59
 8008414:	00012110 	.word	0x00012110
 8008418:	1fe00fff 	.word	0x1fe00fff

0800841c <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08c      	sub	sp, #48	; 0x30
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	607a      	str	r2, [r7, #4]
 8008428:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d107      	bne.n	8008444 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008438:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e08d      	b.n	8008560 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b01      	cmp	r3, #1
 800844e:	f040 8086 	bne.w	800855e <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	2200      	movs	r2, #0
 8008456:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008462:	429a      	cmp	r2, r3
 8008464:	d907      	bls.n	8008476 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800846a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e074      	b.n	8008560 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2203      	movs	r2, #3
 800847a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	2200      	movs	r2, #0
 8008484:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	025a      	lsls	r2, r3, #9
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	629a      	str	r2, [r3, #40]	; 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008498:	2b01      	cmp	r3, #1
 800849a:	d002      	beq.n	80084a2 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	025b      	lsls	r3, r3, #9
 80084a0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80084a2:	f04f 33ff 	mov.w	r3, #4294967295
 80084a6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	025b      	lsls	r3, r3, #9
 80084ac:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80084ae:	2390      	movs	r3, #144	; 0x90
 80084b0:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80084b2:	2302      	movs	r3, #2
 80084b4:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80084b6:	2300      	movs	r3, #0
 80084b8:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 80084ba:	2300      	movs	r3, #0
 80084bc:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f107 0210 	add.w	r2, r7, #16
 80084c6:	4611      	mov	r1, r2
 80084c8:	4618      	mov	r0, r3
 80084ca:	f003 ff8b 	bl	800c3e4 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68da      	ldr	r2, [r3, #12]
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084dc:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	68ba      	ldr	r2, [r7, #8]
 80084e4:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	2201      	movs	r2, #1
 80084ec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d90a      	bls.n	800850a <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2282      	movs	r2, #130	; 0x82
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008500:	4618      	mov	r0, r3
 8008502:	f003 ffe1 	bl	800c4c8 <SDMMC_CmdReadMultiBlock>
 8008506:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008508:	e009      	b.n	800851e <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2281      	movs	r2, #129	; 0x81
 800850e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008516:	4618      	mov	r0, r3
 8008518:	f003 ffb3 	bl	800c482 <SDMMC_CmdReadSingleBlock>
 800851c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800851e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a0f      	ldr	r2, [pc, #60]	; (8008568 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800852a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008532:	431a      	orrs	r2, r3
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2201      	movs	r2, #1
 800853c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2200      	movs	r2, #0
 8008544:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e00a      	b.n	8008560 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008558:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800855a:	2300      	movs	r3, #0
 800855c:	e000      	b.n	8008560 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800855e:	2302      	movs	r3, #2
  }
}
 8008560:	4618      	mov	r0, r3
 8008562:	3730      	adds	r7, #48	; 0x30
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	1fe00fff 	.word	0x1fe00fff

0800856c <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b08c      	sub	sp, #48	; 0x30
 8008570:	af00      	add	r7, sp, #0
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	60b9      	str	r1, [r7, #8]
 8008576:	607a      	str	r2, [r7, #4]
 8008578:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (NULL == pData)
 800857e:	68bb      	ldr	r3, [r7, #8]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d107      	bne.n	8008594 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008588:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e08d      	b.n	80086b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800859a:	b2db      	uxtb	r3, r3
 800859c:	2b01      	cmp	r3, #1
 800859e:	f040 8086 	bne.w	80086ae <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	635a      	str	r2, [r3, #52]	; 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80085a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80085aa:	683b      	ldr	r3, [r7, #0]
 80085ac:	441a      	add	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d907      	bls.n	80085c6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085ba:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	635a      	str	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e074      	b.n	80086b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2203      	movs	r2, #3
 80085ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2200      	movs	r2, #0
 80085d4:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	68ba      	ldr	r2, [r7, #8]
 80085da:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 80085dc:	683b      	ldr	r3, [r7, #0]
 80085de:	025a      	lsls	r2, r3, #9
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d002      	beq.n	80085f2 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 80085ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ee:	025b      	lsls	r3, r3, #9
 80085f0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80085f2:	f04f 33ff 	mov.w	r3, #4294967295
 80085f6:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	025b      	lsls	r3, r3, #9
 80085fc:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80085fe:	2390      	movs	r3, #144	; 0x90
 8008600:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008602:	2300      	movs	r3, #0
 8008604:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008606:	2300      	movs	r3, #0
 8008608:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800860a:	2300      	movs	r3, #0
 800860c:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f107 0210 	add.w	r2, r7, #16
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f003 fee3 	bl	800c3e4 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800862c:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	68ba      	ldr	r2, [r7, #8]
 8008634:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	2201      	movs	r2, #1
 800863c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	2b01      	cmp	r3, #1
 8008642:	d90a      	bls.n	800865a <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	22a0      	movs	r2, #160	; 0xa0
 8008648:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008650:	4618      	mov	r0, r3
 8008652:	f003 ff7f 	bl	800c554 <SDMMC_CmdWriteMultiBlock>
 8008656:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008658:	e009      	b.n	800866e <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2290      	movs	r2, #144	; 0x90
 800865e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008666:	4618      	mov	r0, r3
 8008668:	f003 ff51 	bl	800c50e <SDMMC_CmdWriteSingleBlock>
 800866c:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 800866e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008670:	2b00      	cmp	r3, #0
 8008672:	d012      	beq.n	800869a <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a0f      	ldr	r2, [pc, #60]	; (80086b8 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800867a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008682:	431a      	orrs	r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2200      	movs	r2, #0
 8008694:	62da      	str	r2, [r3, #44]	; 0x2c
      return HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e00a      	b.n	80086b0 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 80086a8:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80086aa:	2300      	movs	r3, #0
 80086ac:	e000      	b.n	80086b0 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 80086ae:	2302      	movs	r3, #2
  }
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3730      	adds	r7, #48	; 0x30
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	1fe00fff 	.word	0x1fe00fff

080086bc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b084      	sub	sp, #16
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c8:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d008      	beq.n	80086ea <HAL_SD_IRQHandler+0x2e>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d003      	beq.n	80086ea <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f001 f918 	bl	8009918 <SD_Read_IT>
 80086e8:	e199      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	f000 80ae 	beq.w	8008856 <HAL_SD_IRQHandler+0x19a>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008702:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	6812      	ldr	r2, [r2, #0]
 800870e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8008712:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8008716:	63d3      	str	r3, [r2, #60]	; 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008726:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68da      	ldr	r2, [r3, #12]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008736:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f003 0308 	and.w	r3, r3, #8
 800873e:	2b00      	cmp	r3, #0
 8008740:	d038      	beq.n	80087b4 <HAL_SD_IRQHandler+0xf8>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	f003 0302 	and.w	r3, r3, #2
 8008748:	2b00      	cmp	r3, #0
 800874a:	d104      	bne.n	8008756 <HAL_SD_IRQHandler+0x9a>
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f003 0320 	and.w	r3, r3, #32
 8008752:	2b00      	cmp	r3, #0
 8008754:	d011      	beq.n	800877a <HAL_SD_IRQHandler+0xbe>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4618      	mov	r0, r3
 800875c:	f003 ff1e 	bl	800c59c <SDMMC_CmdStopTransfer>
 8008760:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d008      	beq.n	800877a <HAL_SD_IRQHandler+0xbe>
        {
          hsd->ErrorCode |= errorstate;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	431a      	orrs	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	635a      	str	r2, [r3, #52]	; 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7f8 faa3 	bl	8000cc0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a90      	ldr	r2, [pc, #576]	; (80089c0 <HAL_SD_IRQHandler+0x304>)
 8008780:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2201      	movs	r2, #1
 8008786:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	f003 0301 	and.w	r3, r3, #1
 8008796:	2b00      	cmp	r3, #0
 8008798:	d104      	bne.n	80087a4 <HAL_SD_IRQHandler+0xe8>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	f003 0302 	and.w	r3, r3, #2
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d003      	beq.n	80087ac <HAL_SD_IRQHandler+0xf0>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f7f8 fa7b 	bl	8000ca0 <HAL_SD_RxCpltCallback>
 80087aa:	e138      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f7f8 fa67 	bl	8000c80 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80087b2:	e134      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	f000 812f 	beq.w	8008a1e <HAL_SD_IRQHandler+0x362>
      hsd->Instance->DLEN = 0;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2200      	movs	r2, #0
 80087c6:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	2200      	movs	r2, #0
 80087ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2200      	movs	r2, #0
 80087d6:	651a      	str	r2, [r3, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	f003 0302 	and.w	r3, r3, #2
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d104      	bne.n	80087ec <HAL_SD_IRQHandler+0x130>
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d011      	beq.n	8008810 <HAL_SD_IRQHandler+0x154>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4618      	mov	r0, r3
 80087f2:	f003 fed3 	bl	800c59c <SDMMC_CmdStopTransfer>
 80087f6:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d008      	beq.n	8008810 <HAL_SD_IRQHandler+0x154>
          hsd->ErrorCode |= errorstate;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	431a      	orrs	r2, r3
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	635a      	str	r2, [r3, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f7f8 fa58 	bl	8000cc0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	62da      	str	r2, [r3, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b00      	cmp	r3, #0
 8008826:	d104      	bne.n	8008832 <HAL_SD_IRQHandler+0x176>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	f003 0320 	and.w	r3, r3, #32
 800882e:	2b00      	cmp	r3, #0
 8008830:	d002      	beq.n	8008838 <HAL_SD_IRQHandler+0x17c>
        HAL_SD_TxCpltCallback(hsd);
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f7f8 fa24 	bl	8000c80 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f003 0301 	and.w	r3, r3, #1
 800883e:	2b00      	cmp	r3, #0
 8008840:	d105      	bne.n	800884e <HAL_SD_IRQHandler+0x192>
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	f003 0302 	and.w	r3, r3, #2
 8008848:	2b00      	cmp	r3, #0
 800884a:	f000 80e8 	beq.w	8008a1e <HAL_SD_IRQHandler+0x362>
        HAL_SD_RxCpltCallback(hsd);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f7f8 fa26 	bl	8000ca0 <HAL_SD_RxCpltCallback>
}
 8008854:	e0e3      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800885c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <HAL_SD_IRQHandler+0x1ba>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	f003 0308 	and.w	r3, r3, #8
 800886a:	2b00      	cmp	r3, #0
 800886c:	d003      	beq.n	8008876 <HAL_SD_IRQHandler+0x1ba>
    SD_Write_IT(hsd);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f001 f898 	bl	80099a4 <SD_Write_IT>
 8008874:	e0d3      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800887c:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 809f 	beq.w	80089c4 <HAL_SD_IRQHandler+0x308>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800888c:	f003 0302 	and.w	r3, r3, #2
 8008890:	2b00      	cmp	r3, #0
 8008892:	d005      	beq.n	80088a0 <HAL_SD_IRQHandler+0x1e4>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008898:	f043 0202 	orr.w	r2, r3, #2
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088a6:	f003 0308 	and.w	r3, r3, #8
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d005      	beq.n	80088ba <HAL_SD_IRQHandler+0x1fe>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088b2:	f043 0208 	orr.w	r2, r3, #8
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c0:	f003 0320 	and.w	r3, r3, #32
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d005      	beq.n	80088d4 <HAL_SD_IRQHandler+0x218>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088cc:	f043 0220 	orr.w	r2, r3, #32
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	635a      	str	r2, [r3, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088da:	f003 0310 	and.w	r3, r3, #16
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d005      	beq.n	80088ee <HAL_SD_IRQHandler+0x232>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088e6:	f043 0210 	orr.w	r2, r3, #16
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	4a33      	ldr	r2, [pc, #204]	; (80089c0 <HAL_SD_IRQHandler+0x304>)
 80088f4:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008904:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	68da      	ldr	r2, [r3, #12]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008914:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008924:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68da      	ldr	r2, [r3, #12]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008934:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4618      	mov	r0, r3
 800893c:	f003 fe2e 	bl	800c59c <SDMMC_CmdStopTransfer>
 8008940:	4602      	mov	r2, r0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008946:	431a      	orrs	r2, r3
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68da      	ldr	r2, [r3, #12]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800895a:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008964:	639a      	str	r2, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f003 0308 	and.w	r3, r3, #8
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <HAL_SD_IRQHandler+0x2ca>
      hsd->State = HAL_SD_STATE_READY;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	62da      	str	r2, [r3, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f7f8 f99e 	bl	8000cc0 <HAL_SD_ErrorCallback>
}
 8008984:	e04b      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800898c:	2b00      	cmp	r3, #0
 800898e:	d046      	beq.n	8008a1e <HAL_SD_IRQHandler+0x362>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008994:	2b00      	cmp	r3, #0
 8008996:	d042      	beq.n	8008a1e <HAL_SD_IRQHandler+0x362>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80089a6:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	2200      	movs	r2, #0
 80089ae:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f7f8 f981 	bl	8000cc0 <HAL_SD_ErrorCallback>
}
 80089be:	e02e      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
 80089c0:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d025      	beq.n	8008a1e <HAL_SD_IRQHandler+0x362>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089da:	639a      	str	r2, [r3, #56]	; 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e2:	f003 0304 	and.w	r3, r3, #4
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10c      	bne.n	8008a04 <HAL_SD_IRQHandler+0x348>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f003 0320 	and.w	r3, r3, #32
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d003      	beq.n	80089fc <HAL_SD_IRQHandler+0x340>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f001 f83d 	bl	8009a74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 80089fa:	e010      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f001 f825 	bl	8009a4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008a02:	e00c      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <HAL_SD_IRQHandler+0x35a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f001 f826 	bl	8009a60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008a14:	e003      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 f80e 	bl	8009a38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008a1c:	e7ff      	b.n	8008a1e <HAL_SD_IRQHandler+0x362>
 8008a1e:	bf00      	nop
 8008a20:	3710      	adds	r7, #16
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}
 8008a26:	bf00      	nop

08008a28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
 8008a30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a36:	0f9b      	lsrs	r3, r3, #30
 8008a38:	b2da      	uxtb	r2, r3
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a42:	0e9b      	lsrs	r3, r3, #26
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	f003 030f 	and.w	r3, r3, #15
 8008a4a:	b2da      	uxtb	r2, r3
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a54:	0e1b      	lsrs	r3, r3, #24
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	f003 0303 	and.w	r3, r3, #3
 8008a5c:	b2da      	uxtb	r2, r3
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a66:	0c1b      	lsrs	r3, r3, #16
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	683b      	ldr	r3, [r7, #0]
 8008a6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a72:	0a1b      	lsrs	r3, r3, #8
 8008a74:	b2da      	uxtb	r2, r3
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a7e:	b2da      	uxtb	r2, r3
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a88:	0d1b      	lsrs	r3, r3, #20
 8008a8a:	b29a      	uxth	r2, r3
 8008a8c:	683b      	ldr	r3, [r7, #0]
 8008a8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a94:	0c1b      	lsrs	r3, r3, #16
 8008a96:	b2db      	uxtb	r3, r3
 8008a98:	f003 030f 	and.w	r3, r3, #15
 8008a9c:	b2da      	uxtb	r2, r3
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aa6:	0bdb      	lsrs	r3, r3, #15
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ab8:	0b9b      	lsrs	r3, r3, #14
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	f003 0301 	and.w	r3, r3, #1
 8008ac0:	b2da      	uxtb	r2, r3
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008aca:	0b5b      	lsrs	r3, r3, #13
 8008acc:	b2db      	uxtb	r3, r3
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	b2da      	uxtb	r2, r3
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008adc:	0b1b      	lsrs	r3, r3, #12
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	f003 0301 	and.w	r3, r3, #1
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	2200      	movs	r2, #0
 8008aee:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d163      	bne.n	8008bc0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008afc:	009a      	lsls	r2, r3, #2
 8008afe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b02:	4013      	ands	r3, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6e52      	ldr	r2, [r2, #100]	; 0x64
 8008b08:	0f92      	lsrs	r2, r2, #30
 8008b0a:	431a      	orrs	r2, r3
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b14:	0edb      	lsrs	r3, r3, #27
 8008b16:	b2db      	uxtb	r3, r3
 8008b18:	f003 0307 	and.w	r3, r3, #7
 8008b1c:	b2da      	uxtb	r2, r3
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b26:	0e1b      	lsrs	r3, r3, #24
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	f003 0307 	and.w	r3, r3, #7
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b38:	0d5b      	lsrs	r3, r3, #21
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	b2da      	uxtb	r2, r3
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b4a:	0c9b      	lsrs	r3, r3, #18
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	f003 0307 	and.w	r3, r3, #7
 8008b52:	b2da      	uxtb	r2, r3
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b5c:	0bdb      	lsrs	r3, r3, #15
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	f003 0307 	and.w	r3, r3, #7
 8008b64:	b2da      	uxtb	r2, r3
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	691b      	ldr	r3, [r3, #16]
 8008b6e:	1c5a      	adds	r2, r3, #1
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	7e1b      	ldrb	r3, [r3, #24]
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	f003 0307 	and.w	r3, r3, #7
 8008b7e:	3302      	adds	r3, #2
 8008b80:	2201      	movs	r2, #1
 8008b82:	fa02 f303 	lsl.w	r3, r2, r3
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b8a:	fb03 f202 	mul.w	r2, r3, r2
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	7a1b      	ldrb	r3, [r3, #8]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	f003 030f 	and.w	r3, r3, #15
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008bac:	0a52      	lsrs	r2, r2, #9
 8008bae:	fb03 f202 	mul.w	r2, r3, r2
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bbc:	655a      	str	r2, [r3, #84]	; 0x54
 8008bbe:	e031      	b.n	8008c24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc4:	2b01      	cmp	r3, #1
 8008bc6:	d11d      	bne.n	8008c04 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bcc:	041b      	lsls	r3, r3, #16
 8008bce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bd6:	0c1b      	lsrs	r3, r3, #16
 8008bd8:	431a      	orrs	r2, r3
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	691b      	ldr	r3, [r3, #16]
 8008be2:	3301      	adds	r3, #1
 8008be4:	029a      	lsls	r2, r3, #10
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bf8:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	655a      	str	r2, [r3, #84]	; 0x54
 8008c02:	e00f      	b.n	8008c24 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	4a58      	ldr	r2, [pc, #352]	; (8008d6c <HAL_SD_GetCardCSD+0x344>)
 8008c0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e09d      	b.n	8008d60 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c28:	0b9b      	lsrs	r3, r3, #14
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	f003 0301 	and.w	r3, r3, #1
 8008c30:	b2da      	uxtb	r2, r3
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c3a:	09db      	lsrs	r3, r3, #7
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c42:	b2da      	uxtb	r2, r3
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5c:	0fdb      	lsrs	r3, r3, #31
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c68:	0f5b      	lsrs	r3, r3, #29
 8008c6a:	b2db      	uxtb	r3, r3
 8008c6c:	f003 0303 	and.w	r3, r3, #3
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c7a:	0e9b      	lsrs	r3, r3, #26
 8008c7c:	b2db      	uxtb	r3, r3
 8008c7e:	f003 0307 	and.w	r3, r3, #7
 8008c82:	b2da      	uxtb	r2, r3
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c8c:	0d9b      	lsrs	r3, r3, #22
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	f003 030f 	and.w	r3, r3, #15
 8008c94:	b2da      	uxtb	r2, r3
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c9e:	0d5b      	lsrs	r3, r3, #21
 8008ca0:	b2db      	uxtb	r3, r3
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	b2da      	uxtb	r2, r3
 8008ca8:	683b      	ldr	r3, [r7, #0]
 8008caa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cba:	0c1b      	lsrs	r3, r3, #16
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cce:	0bdb      	lsrs	r3, r3, #15
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ce2:	0b9b      	lsrs	r3, r3, #14
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	f003 0301 	and.w	r3, r3, #1
 8008cea:	b2da      	uxtb	r2, r3
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008cf6:	0b5b      	lsrs	r3, r3, #13
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	f003 0301 	and.w	r3, r3, #1
 8008cfe:	b2da      	uxtb	r2, r3
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d0a:	0b1b      	lsrs	r3, r3, #12
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	b2da      	uxtb	r2, r3
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d1e:	0a9b      	lsrs	r3, r3, #10
 8008d20:	b2db      	uxtb	r3, r3
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	b2da      	uxtb	r2, r3
 8008d28:	683b      	ldr	r3, [r7, #0]
 8008d2a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d32:	0a1b      	lsrs	r3, r3, #8
 8008d34:	b2db      	uxtb	r3, r3
 8008d36:	f003 0303 	and.w	r3, r3, #3
 8008d3a:	b2da      	uxtb	r2, r3
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d46:	085b      	lsrs	r3, r3, #1
 8008d48:	b2db      	uxtb	r3, r3
 8008d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d4e:	b2da      	uxtb	r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008d5e:	2300      	movs	r3, #0
}
 8008d60:	4618      	mov	r0, r3
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr
 8008d6c:	1fe00fff 	.word	0x1fe00fff

08008d70 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b094      	sub	sp, #80	; 0x50
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
 8008d78:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b03      	cmp	r3, #3
 8008d8a:	d101      	bne.n	8008d90 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	e0a7      	b.n	8008ee0 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008d90:	f107 0308 	add.w	r3, r7, #8
 8008d94:	4619      	mov	r1, r3
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f000 fb60 	bl	800945c <SD_SendSDStatus>
 8008d9c:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008d9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d011      	beq.n	8008dc8 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a4f      	ldr	r2, [pc, #316]	; (8008ee8 <HAL_SD_GetCardStatus+0x178>)
 8008daa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008db0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008db2:	431a      	orrs	r2, r3
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8008dc6:	e070      	b.n	8008eaa <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	099b      	lsrs	r3, r3, #6
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	f003 0303 	and.w	r3, r3, #3
 8008dd2:	b2da      	uxtb	r2, r3
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8008dd8:	68bb      	ldr	r3, [r7, #8]
 8008dda:	095b      	lsrs	r3, r3, #5
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	f003 0301 	and.w	r3, r3, #1
 8008de2:	b2da      	uxtb	r2, r3
 8008de4:	683b      	ldr	r3, [r7, #0]
 8008de6:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8008de8:	68bb      	ldr	r3, [r7, #8]
 8008dea:	0a1b      	lsrs	r3, r3, #8
 8008dec:	b29b      	uxth	r3, r3
 8008dee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008df2:	b29a      	uxth	r2, r3
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	0e1b      	lsrs	r3, r3, #24
 8008df8:	b29b      	uxth	r3, r3
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	061a      	lsls	r2, r3, #24
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	021b      	lsls	r3, r3, #8
 8008e0a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008e0e:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	0a1b      	lsrs	r3, r3, #8
 8008e14:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008e18:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	0e1b      	lsrs	r3, r3, #24
 8008e1e:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8008e20:	683b      	ldr	r3, [r7, #0]
 8008e22:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	0a1b      	lsrs	r3, r3, #8
 8008e30:	b2da      	uxtb	r2, r3
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	0d1b      	lsrs	r3, r3, #20
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	f003 030f 	and.w	r3, r3, #15
 8008e40:	b2da      	uxtb	r2, r3
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	0c1b      	lsrs	r3, r3, #16
 8008e4a:	b29b      	uxth	r3, r3
 8008e4c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	697b      	ldr	r3, [r7, #20]
 8008e54:	b29b      	uxth	r3, r3
 8008e56:	b2db      	uxtb	r3, r3
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	0a9b      	lsrs	r3, r3, #10
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e6c:	b2da      	uxtb	r2, r3
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	0a1b      	lsrs	r3, r3, #8
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	f003 0303 	and.w	r3, r3, #3
 8008e7c:	b2da      	uxtb	r2, r3
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	091b      	lsrs	r3, r3, #4
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	f003 030f 	and.w	r3, r3, #15
 8008e8c:	b2da      	uxtb	r2, r3
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	f003 030f 	and.w	r3, r3, #15
 8008e9a:	b2da      	uxtb	r2, r3
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008ea0:	69bb      	ldr	r3, [r7, #24]
 8008ea2:	0e1b      	lsrs	r3, r3, #24
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f003 fac2 	bl	800c43c <SDMMC_CmdBlockLength>
 8008eb8:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8008eba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00d      	beq.n	8008edc <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a08      	ldr	r2, [pc, #32]	; (8008ee8 <HAL_SD_GetCardStatus+0x178>)
 8008ec6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ecc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8008edc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	3750      	adds	r7, #80	; 0x50
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	bd80      	pop	{r7, pc}
 8008ee8:	1fe00fff 	.word	0x1fe00fff

08008eec <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	370c      	adds	r7, #12
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f42:	4770      	bx	lr

08008f44 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008f44:	b590      	push	{r4, r7, lr}
 8008f46:	b08d      	sub	sp, #52	; 0x34
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2203      	movs	r2, #3
 8008f58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f60:	2b03      	cmp	r3, #3
 8008f62:	d02e      	beq.n	8008fc2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f6a:	d106      	bne.n	8008f7a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	635a      	str	r2, [r3, #52]	; 0x34
 8008f78:	e029      	b.n	8008fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008f80:	d10a      	bne.n	8008f98 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 fb62 	bl	800964c <SD_WideBus_Enable>
 8008f88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f8e:	6a3b      	ldr	r3, [r7, #32]
 8008f90:	431a      	orrs	r2, r3
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	635a      	str	r2, [r3, #52]	; 0x34
 8008f96:	e01a      	b.n	8008fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10a      	bne.n	8008fb4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f000 fb9f 	bl	80096e2 <SD_WideBus_Disable>
 8008fa4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	431a      	orrs	r2, r3
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fb2:	e00c      	b.n	8008fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fb8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	635a      	str	r2, [r3, #52]	; 0x34
 8008fc0:	e005      	b.n	8008fce <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d007      	beq.n	8008fe6 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4a5e      	ldr	r2, [pc, #376]	; (8009154 <HAL_SD_ConfigWideBusOperation+0x210>)
 8008fdc:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008fe4:	e094      	b.n	8009110 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8008fe6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8008fea:	f7fd fadb 	bl	80065a4 <HAL_RCCEx_GetPeriphCLKFreq>
 8008fee:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	f000 8083 	beq.w	80090fe <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	689b      	ldr	r3, [r3, #8]
 8009002:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4950      	ldr	r1, [pc, #320]	; (8009158 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009016:	fba1 1303 	umull	r1, r3, r1, r3
 800901a:	0e1b      	lsrs	r3, r3, #24
 800901c:	429a      	cmp	r2, r3
 800901e:	d303      	bcc.n	8009028 <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	695b      	ldr	r3, [r3, #20]
 8009024:	61bb      	str	r3, [r7, #24]
 8009026:	e05a      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800902c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009030:	d103      	bne.n	800903a <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	695b      	ldr	r3, [r3, #20]
 8009036:	61bb      	str	r3, [r7, #24]
 8009038:	e051      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009042:	d126      	bne.n	8009092 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10e      	bne.n	800906a <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800904c:	69fb      	ldr	r3, [r7, #28]
 800904e:	4a43      	ldr	r2, [pc, #268]	; (800915c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d906      	bls.n	8009062 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	4a40      	ldr	r2, [pc, #256]	; (8009158 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009058:	fba2 2303 	umull	r2, r3, r2, r3
 800905c:	0e5b      	lsrs	r3, r3, #25
 800905e:	61bb      	str	r3, [r7, #24]
 8009060:	e03d      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	695b      	ldr	r3, [r3, #20]
 8009066:	61bb      	str	r3, [r7, #24]
 8009068:	e039      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	695b      	ldr	r3, [r3, #20]
 800906e:	005b      	lsls	r3, r3, #1
 8009070:	69fa      	ldr	r2, [r7, #28]
 8009072:	fbb2 f3f3 	udiv	r3, r2, r3
 8009076:	4a39      	ldr	r2, [pc, #228]	; (800915c <HAL_SD_ConfigWideBusOperation+0x218>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d906      	bls.n	800908a <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800907c:	69fb      	ldr	r3, [r7, #28]
 800907e:	4a36      	ldr	r2, [pc, #216]	; (8009158 <HAL_SD_ConfigWideBusOperation+0x214>)
 8009080:	fba2 2303 	umull	r2, r3, r2, r3
 8009084:	0e5b      	lsrs	r3, r3, #25
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	e029      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	61bb      	str	r3, [r7, #24]
 8009090:	e025      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	695b      	ldr	r3, [r3, #20]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10e      	bne.n	80090b8 <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4a30      	ldr	r2, [pc, #192]	; (8009160 <HAL_SD_ConfigWideBusOperation+0x21c>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d906      	bls.n	80090b0 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80090a2:	69fb      	ldr	r3, [r7, #28]
 80090a4:	4a2c      	ldr	r2, [pc, #176]	; (8009158 <HAL_SD_ConfigWideBusOperation+0x214>)
 80090a6:	fba2 2303 	umull	r2, r3, r2, r3
 80090aa:	0e1b      	lsrs	r3, r3, #24
 80090ac:	61bb      	str	r3, [r7, #24]
 80090ae:	e016      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	695b      	ldr	r3, [r3, #20]
 80090b4:	61bb      	str	r3, [r7, #24]
 80090b6:	e012      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	005b      	lsls	r3, r3, #1
 80090be:	69fa      	ldr	r2, [r7, #28]
 80090c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80090c4:	4a26      	ldr	r2, [pc, #152]	; (8009160 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d906      	bls.n	80090d8 <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	4a22      	ldr	r2, [pc, #136]	; (8009158 <HAL_SD_ConfigWideBusOperation+0x214>)
 80090ce:	fba2 2303 	umull	r2, r3, r2, r3
 80090d2:	0e1b      	lsrs	r3, r3, #24
 80090d4:	61bb      	str	r3, [r7, #24]
 80090d6:	e002      	b.n	80090de <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	695b      	ldr	r3, [r3, #20]
 80090dc:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681c      	ldr	r4, [r3, #0]
 80090e2:	466a      	mov	r2, sp
 80090e4:	f107 0314 	add.w	r3, r7, #20
 80090e8:	e893 0003 	ldmia.w	r3, {r0, r1}
 80090ec:	e882 0003 	stmia.w	r2, {r0, r1}
 80090f0:	f107 0308 	add.w	r3, r7, #8
 80090f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80090f6:	4620      	mov	r0, r4
 80090f8:	f003 f8c2 	bl	800c280 <SDMMC_Init>
 80090fc:	e008      	b.n	8009110 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009102:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 800910a:	2301      	movs	r3, #1
 800910c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009118:	4618      	mov	r0, r3
 800911a:	f003 f98f 	bl	800c43c <SDMMC_CmdBlockLength>
 800911e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009120:	6a3b      	ldr	r3, [r7, #32]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00c      	beq.n	8009140 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a0a      	ldr	r2, [pc, #40]	; (8009154 <HAL_SD_ConfigWideBusOperation+0x210>)
 800912c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009132:	6a3b      	ldr	r3, [r7, #32]
 8009134:	431a      	orrs	r2, r3
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2201      	movs	r2, #1
 8009144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8009148:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800914c:	4618      	mov	r0, r3
 800914e:	372c      	adds	r7, #44	; 0x2c
 8009150:	46bd      	mov	sp, r7
 8009152:	bd90      	pop	{r4, r7, pc}
 8009154:	1fe00fff 	.word	0x1fe00fff
 8009158:	55e63b89 	.word	0x55e63b89
 800915c:	02faf080 	.word	0x02faf080
 8009160:	017d7840 	.word	0x017d7840

08009164 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b086      	sub	sp, #24
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800916c:	2300      	movs	r3, #0
 800916e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	4619      	mov	r1, r3
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa40 	bl	80095fc <SD_SendStatus>
 800917c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800917e:	697b      	ldr	r3, [r7, #20]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d005      	beq.n	8009190 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	431a      	orrs	r2, r3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	0a5b      	lsrs	r3, r3, #9
 8009194:	f003 030f 	and.w	r3, r3, #15
 8009198:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800919a:	693b      	ldr	r3, [r7, #16]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3718      	adds	r7, #24
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}

080091a4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b090      	sub	sp, #64	; 0x40
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 80091ac:	2300      	movs	r3, #0
 80091ae:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 80091b0:	f7f8 ffee 	bl	8002190 <HAL_GetTick>
 80091b4:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4618      	mov	r0, r3
 80091bc:	f003 f8b9 	bl	800c332 <SDMMC_GetPowerState>
 80091c0:	4603      	mov	r3, r0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80091c6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80091ca:	e0b5      	b.n	8009338 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d0:	2b03      	cmp	r3, #3
 80091d2:	d02e      	beq.n	8009232 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4618      	mov	r0, r3
 80091da:	f003 fb04 	bl	800c7e6 <SDMMC_CmdSendCID>
 80091de:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 80091e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d001      	beq.n	80091ea <SD_InitCard+0x46>
    {
      return errorstate;
 80091e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e8:	e0a6      	b.n	8009338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	2100      	movs	r1, #0
 80091f0:	4618      	mov	r0, r3
 80091f2:	f003 f8e4 	bl	800c3be <SDMMC_GetResponse>
 80091f6:	4602      	mov	r2, r0
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2104      	movs	r1, #4
 8009202:	4618      	mov	r0, r3
 8009204:	f003 f8db 	bl	800c3be <SDMMC_GetResponse>
 8009208:	4602      	mov	r2, r0
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2108      	movs	r1, #8
 8009214:	4618      	mov	r0, r3
 8009216:	f003 f8d2 	bl	800c3be <SDMMC_GetResponse>
 800921a:	4602      	mov	r2, r0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	210c      	movs	r1, #12
 8009226:	4618      	mov	r0, r3
 8009228:	f003 f8c9 	bl	800c3be <SDMMC_GetResponse>
 800922c:	4602      	mov	r2, r0
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009236:	2b03      	cmp	r3, #3
 8009238:	d01d      	beq.n	8009276 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 800923a:	e019      	b.n	8009270 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f107 020a 	add.w	r2, r7, #10
 8009244:	4611      	mov	r1, r2
 8009246:	4618      	mov	r0, r3
 8009248:	f003 fb0c 	bl	800c864 <SDMMC_CmdSetRelAdd>
 800924c:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 800924e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <SD_InitCard+0xb4>
      {
        return errorstate;
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	e06f      	b.n	8009338 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8009258:	f7f8 ff9a 	bl	8002190 <HAL_GetTick>
 800925c:	4602      	mov	r2, r0
 800925e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	f241 3287 	movw	r2, #4999	; 0x1387
 8009266:	4293      	cmp	r3, r2
 8009268:	d902      	bls.n	8009270 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 800926a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800926e:	e063      	b.n	8009338 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8009270:	897b      	ldrh	r3, [r7, #10]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0e2      	beq.n	800923c <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800927a:	2b03      	cmp	r3, #3
 800927c:	d036      	beq.n	80092ec <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800927e:	897b      	ldrh	r3, [r7, #10]
 8009280:	461a      	mov	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681a      	ldr	r2, [r3, #0]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800928e:	041b      	lsls	r3, r3, #16
 8009290:	4619      	mov	r1, r3
 8009292:	4610      	mov	r0, r2
 8009294:	f003 fac6 	bl	800c824 <SDMMC_CmdSendCSD>
 8009298:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <SD_InitCard+0x100>
    {
      return errorstate;
 80092a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a2:	e049      	b.n	8009338 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2100      	movs	r1, #0
 80092aa:	4618      	mov	r0, r3
 80092ac:	f003 f887 	bl	800c3be <SDMMC_GetResponse>
 80092b0:	4602      	mov	r2, r0
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2104      	movs	r1, #4
 80092bc:	4618      	mov	r0, r3
 80092be:	f003 f87e 	bl	800c3be <SDMMC_GetResponse>
 80092c2:	4602      	mov	r2, r0
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2108      	movs	r1, #8
 80092ce:	4618      	mov	r0, r3
 80092d0:	f003 f875 	bl	800c3be <SDMMC_GetResponse>
 80092d4:	4602      	mov	r2, r0
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	210c      	movs	r1, #12
 80092e0:	4618      	mov	r0, r3
 80092e2:	f003 f86c 	bl	800c3be <SDMMC_GetResponse>
 80092e6:	4602      	mov	r2, r0
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	2104      	movs	r1, #4
 80092f2:	4618      	mov	r0, r3
 80092f4:	f003 f863 	bl	800c3be <SDMMC_GetResponse>
 80092f8:	4603      	mov	r3, r0
 80092fa:	0d1a      	lsrs	r2, r3, #20
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8009300:	f107 030c 	add.w	r3, r7, #12
 8009304:	4619      	mov	r1, r3
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f7ff fb8e 	bl	8008a28 <HAL_SD_GetCardCSD>
 800930c:	4603      	mov	r3, r0
 800930e:	2b00      	cmp	r3, #0
 8009310:	d002      	beq.n	8009318 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009312:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009316:	e00f      	b.n	8009338 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	041b      	lsls	r3, r3, #16
 8009322:	4619      	mov	r1, r3
 8009324:	4610      	mov	r0, r2
 8009326:	f003 f975 	bl	800c614 <SDMMC_CmdSelDesel>
 800932a:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 800932c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932e:	2b00      	cmp	r3, #0
 8009330:	d001      	beq.n	8009336 <SD_InitCard+0x192>
  {
    return errorstate;
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009334:	e000      	b.n	8009338 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8009336:	2300      	movs	r3, #0
}
 8009338:	4618      	mov	r0, r3
 800933a:	3740      	adds	r7, #64	; 0x40
 800933c:	46bd      	mov	sp, r7
 800933e:	bd80      	pop	{r7, pc}

08009340 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b086      	sub	sp, #24
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009348:	2300      	movs	r3, #0
 800934a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 800934c:	2300      	movs	r3, #0
 800934e:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8009350:	2300      	movs	r3, #0
 8009352:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4618      	mov	r0, r3
 800935a:	f003 f97e 	bl	800c65a <SDMMC_CmdGoIdleState>
 800935e:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d001      	beq.n	800936a <SD_PowerON+0x2a>
  {
    return errorstate;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	e072      	b.n	8009450 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4618      	mov	r0, r3
 8009370:	f003 f991 	bl	800c696 <SDMMC_CmdOperCond>
 8009374:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800937c:	d10d      	bne.n	800939a <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	2200      	movs	r2, #0
 8009382:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	4618      	mov	r0, r3
 800938a:	f003 f966 	bl	800c65a <SDMMC_CmdGoIdleState>
 800938e:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d004      	beq.n	80093a0 <SD_PowerON+0x60>
    {
      return errorstate;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	e05a      	b.n	8009450 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093a4:	2b01      	cmp	r3, #1
 80093a6:	d137      	bne.n	8009418 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	2100      	movs	r1, #0
 80093ae:	4618      	mov	r0, r3
 80093b0:	f003 f991 	bl	800c6d6 <SDMMC_CmdAppCommand>
 80093b4:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d02d      	beq.n	8009418 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093bc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093c0:	e046      	b.n	8009450 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f003 f984 	bl	800c6d6 <SDMMC_CmdAppCommand>
 80093ce:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d001      	beq.n	80093da <SD_PowerON+0x9a>
    {
      return errorstate;
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	e03a      	b.n	8009450 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	491e      	ldr	r1, [pc, #120]	; (8009458 <SD_PowerON+0x118>)
 80093e0:	4618      	mov	r0, r3
 80093e2:	f003 f99b 	bl	800c71c <SDMMC_CmdAppOperCommand>
 80093e6:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d002      	beq.n	80093f4 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80093ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80093f2:	e02d      	b.n	8009450 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	2100      	movs	r1, #0
 80093fa:	4618      	mov	r0, r3
 80093fc:	f002 ffdf 	bl	800c3be <SDMMC_GetResponse>
 8009400:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009402:	697b      	ldr	r3, [r7, #20]
 8009404:	0fdb      	lsrs	r3, r3, #31
 8009406:	2b01      	cmp	r3, #1
 8009408:	d101      	bne.n	800940e <SD_PowerON+0xce>
 800940a:	2301      	movs	r3, #1
 800940c:	e000      	b.n	8009410 <SD_PowerON+0xd0>
 800940e:	2300      	movs	r3, #0
 8009410:	613b      	str	r3, [r7, #16]

    count++;
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	3301      	adds	r3, #1
 8009416:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800941e:	4293      	cmp	r3, r2
 8009420:	d802      	bhi.n	8009428 <SD_PowerON+0xe8>
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d0cc      	beq.n	80093c2 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800942e:	4293      	cmp	r3, r2
 8009430:	d902      	bls.n	8009438 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009432:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009436:	e00b      	b.n	8009450 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2200      	movs	r2, #0
 800943c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800943e:	697b      	ldr	r3, [r7, #20]
 8009440:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009444:	2b00      	cmp	r3, #0
 8009446:	d002      	beq.n	800944e <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2201      	movs	r2, #1
 800944c:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800944e:	2300      	movs	r3, #0
}
 8009450:	4618      	mov	r0, r3
 8009452:	3718      	adds	r7, #24
 8009454:	46bd      	mov	sp, r7
 8009456:	bd80      	pop	{r7, pc}
 8009458:	c1100000 	.word	0xc1100000

0800945c <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b08c      	sub	sp, #48	; 0x30
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009466:	f7f8 fe93 	bl	8002190 <HAL_GetTick>
 800946a:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	2100      	movs	r1, #0
 8009476:	4618      	mov	r0, r3
 8009478:	f002 ffa1 	bl	800c3be <SDMMC_GetResponse>
 800947c:	4603      	mov	r3, r0
 800947e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009482:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009486:	d102      	bne.n	800948e <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009488:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800948c:	e0b0      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2140      	movs	r1, #64	; 0x40
 8009494:	4618      	mov	r0, r3
 8009496:	f002 ffd1 	bl	800c43c <SDMMC_CmdBlockLength>
 800949a:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800949c:	6a3b      	ldr	r3, [r7, #32]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d005      	beq.n	80094ae <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80094aa:	6a3b      	ldr	r3, [r7, #32]
 80094ac:	e0a0      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094b6:	041b      	lsls	r3, r3, #16
 80094b8:	4619      	mov	r1, r3
 80094ba:	4610      	mov	r0, r2
 80094bc:	f003 f90b 	bl	800c6d6 <SDMMC_CmdAppCommand>
 80094c0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80094c2:	6a3b      	ldr	r3, [r7, #32]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d005      	beq.n	80094d4 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80094d0:	6a3b      	ldr	r3, [r7, #32]
 80094d2:	e08d      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80094d4:	f04f 33ff 	mov.w	r3, #4294967295
 80094d8:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80094da:	2340      	movs	r3, #64	; 0x40
 80094dc:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80094de:	2360      	movs	r3, #96	; 0x60
 80094e0:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80094e2:	2302      	movs	r3, #2
 80094e4:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80094e6:	2300      	movs	r3, #0
 80094e8:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f107 0208 	add.w	r2, r7, #8
 80094f6:	4611      	mov	r1, r2
 80094f8:	4618      	mov	r0, r3
 80094fa:	f002 ff73 	bl	800c3e4 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4618      	mov	r0, r3
 8009504:	f003 f9f3 	bl	800c8ee <SDMMC_CmdStatusRegister>
 8009508:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 800950a:	6a3b      	ldr	r3, [r7, #32]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d02b      	beq.n	8009568 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8009518:	6a3b      	ldr	r3, [r7, #32]
 800951a:	e069      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009522:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009526:	2b00      	cmp	r3, #0
 8009528:	d013      	beq.n	8009552 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 800952a:	2300      	movs	r3, #0
 800952c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800952e:	e00d      	b.n	800954c <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4618      	mov	r0, r3
 8009536:	f002 fecd 	bl	800c2d4 <SDMMC_ReadFIFO>
 800953a:	4602      	mov	r2, r0
 800953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800953e:	601a      	str	r2, [r3, #0]
        pData++;
 8009540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009542:	3304      	adds	r3, #4
 8009544:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 8009546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009548:	3301      	adds	r3, #1
 800954a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800954c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800954e:	2b07      	cmp	r3, #7
 8009550:	d9ee      	bls.n	8009530 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009552:	f7f8 fe1d 	bl	8002190 <HAL_GetTick>
 8009556:	4602      	mov	r2, r0
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	1ad3      	subs	r3, r2, r3
 800955c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009560:	d102      	bne.n	8009568 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009562:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009566:	e043      	b.n	80095f0 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800956e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009572:	2b00      	cmp	r3, #0
 8009574:	d0d2      	beq.n	800951c <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800957c:	f003 0308 	and.w	r3, r3, #8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009584:	2308      	movs	r3, #8
 8009586:	e033      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800958e:	f003 0302 	and.w	r3, r3, #2
 8009592:	2b00      	cmp	r3, #0
 8009594:	d001      	beq.n	800959a <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009596:	2302      	movs	r3, #2
 8009598:	e02a      	b.n	80095f0 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a0:	f003 0320 	and.w	r3, r3, #32
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d017      	beq.n	80095d8 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80095a8:	2320      	movs	r3, #32
 80095aa:	e021      	b.n	80095f0 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4618      	mov	r0, r3
 80095b2:	f002 fe8f 	bl	800c2d4 <SDMMC_ReadFIFO>
 80095b6:	4602      	mov	r2, r0
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	601a      	str	r2, [r3, #0]
    pData++;
 80095bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095be:	3304      	adds	r3, #4
 80095c0:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80095c2:	f7f8 fde5 	bl	8002190 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095d0:	d102      	bne.n	80095d8 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80095d2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80095d6:	e00b      	b.n	80095f0 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d1e2      	bne.n	80095ac <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a03      	ldr	r2, [pc, #12]	; (80095f8 <SD_SendSDStatus+0x19c>)
 80095ec:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3730      	adds	r7, #48	; 0x30
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}
 80095f8:	18000f3a 	.word	0x18000f3a

080095fc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b084      	sub	sp, #16
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
 8009604:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d102      	bne.n	8009612 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800960c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009610:	e018      	b.n	8009644 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800961a:	041b      	lsls	r3, r3, #16
 800961c:	4619      	mov	r1, r3
 800961e:	4610      	mov	r0, r2
 8009620:	f003 f942 	bl	800c8a8 <SDMMC_CmdSendStatus>
 8009624:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d001      	beq.n	8009630 <SD_SendStatus+0x34>
  {
    return errorstate;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	e009      	b.n	8009644 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2100      	movs	r1, #0
 8009636:	4618      	mov	r0, r3
 8009638:	f002 fec1 	bl	800c3be <SDMMC_GetResponse>
 800963c:	4602      	mov	r2, r0
 800963e:	683b      	ldr	r3, [r7, #0]
 8009640:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009642:	2300      	movs	r3, #0
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}

0800964c <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
 8009658:	2300      	movs	r3, #0
 800965a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f002 feab 	bl	800c3be <SDMMC_GetResponse>
 8009668:	4603      	mov	r3, r0
 800966a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800966e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009672:	d102      	bne.n	800967a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009678:	e02f      	b.n	80096da <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800967a:	f107 030c 	add.w	r3, r7, #12
 800967e:	4619      	mov	r1, r3
 8009680:	6878      	ldr	r0, [r7, #4]
 8009682:	f000 f879 	bl	8009778 <SD_FindSCR>
 8009686:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	2b00      	cmp	r3, #0
 800968c:	d001      	beq.n	8009692 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800968e:	697b      	ldr	r3, [r7, #20]
 8009690:	e023      	b.n	80096da <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009698:	2b00      	cmp	r3, #0
 800969a:	d01c      	beq.n	80096d6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681a      	ldr	r2, [r3, #0]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096a4:	041b      	lsls	r3, r3, #16
 80096a6:	4619      	mov	r1, r3
 80096a8:	4610      	mov	r0, r2
 80096aa:	f003 f814 	bl	800c6d6 <SDMMC_CmdAppCommand>
 80096ae:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d001      	beq.n	80096ba <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80096b6:	697b      	ldr	r3, [r7, #20]
 80096b8:	e00f      	b.n	80096da <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2102      	movs	r1, #2
 80096c0:	4618      	mov	r0, r3
 80096c2:	f003 f84b 	bl	800c75c <SDMMC_CmdBusWidth>
 80096c6:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d001      	beq.n	80096d2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	e003      	b.n	80096da <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80096d2:	2300      	movs	r3, #0
 80096d4:	e001      	b.n	80096da <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80096d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3718      	adds	r7, #24
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b086      	sub	sp, #24
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 80096ea:	2300      	movs	r3, #0
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	2300      	movs	r3, #0
 80096f0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2100      	movs	r1, #0
 80096f8:	4618      	mov	r0, r3
 80096fa:	f002 fe60 	bl	800c3be <SDMMC_GetResponse>
 80096fe:	4603      	mov	r3, r0
 8009700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009704:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009708:	d102      	bne.n	8009710 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800970a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800970e:	e02f      	b.n	8009770 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009710:	f107 030c 	add.w	r3, r7, #12
 8009714:	4619      	mov	r1, r3
 8009716:	6878      	ldr	r0, [r7, #4]
 8009718:	f000 f82e 	bl	8009778 <SD_FindSCR>
 800971c:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d001      	beq.n	8009728 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	e023      	b.n	8009770 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800972e:	2b00      	cmp	r3, #0
 8009730:	d01c      	beq.n	800976c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681a      	ldr	r2, [r3, #0]
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800973a:	041b      	lsls	r3, r3, #16
 800973c:	4619      	mov	r1, r3
 800973e:	4610      	mov	r0, r2
 8009740:	f002 ffc9 	bl	800c6d6 <SDMMC_CmdAppCommand>
 8009744:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d001      	beq.n	8009750 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800974c:	697b      	ldr	r3, [r7, #20]
 800974e:	e00f      	b.n	8009770 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	2100      	movs	r1, #0
 8009756:	4618      	mov	r0, r3
 8009758:	f003 f800 	bl	800c75c <SDMMC_CmdBusWidth>
 800975c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009764:	697b      	ldr	r3, [r7, #20]
 8009766:	e003      	b.n	8009770 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009768:	2300      	movs	r3, #0
 800976a:	e001      	b.n	8009770 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800976c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009770:	4618      	mov	r0, r3
 8009772:	3718      	adds	r7, #24
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}

08009778 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b08e      	sub	sp, #56	; 0x38
 800977c:	af00      	add	r7, sp, #0
 800977e:	6078      	str	r0, [r7, #4]
 8009780:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009782:	f7f8 fd05 	bl	8002190 <HAL_GetTick>
 8009786:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009788:	2300      	movs	r3, #0
 800978a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800978c:	2300      	movs	r3, #0
 800978e:	60bb      	str	r3, [r7, #8]
 8009790:	2300      	movs	r3, #0
 8009792:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	2108      	movs	r1, #8
 800979e:	4618      	mov	r0, r3
 80097a0:	f002 fe4c 	bl	800c43c <SDMMC_CmdBlockLength>
 80097a4:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80097a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d001      	beq.n	80097b0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	e0ad      	b.n	800990c <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681a      	ldr	r2, [r3, #0]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097b8:	041b      	lsls	r3, r3, #16
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f002 ff8a 	bl	800c6d6 <SDMMC_CmdAppCommand>
 80097c2:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80097c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d001      	beq.n	80097ce <SD_FindSCR+0x56>
  {
    return errorstate;
 80097ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097cc:	e09e      	b.n	800990c <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80097ce:	f04f 33ff 	mov.w	r3, #4294967295
 80097d2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80097d4:	2308      	movs	r3, #8
 80097d6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 80097d8:	2330      	movs	r3, #48	; 0x30
 80097da:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80097dc:	2302      	movs	r3, #2
 80097de:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80097e4:	2301      	movs	r3, #1
 80097e6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	f107 0210 	add.w	r2, r7, #16
 80097f0:	4611      	mov	r1, r2
 80097f2:	4618      	mov	r0, r3
 80097f4:	f002 fdf6 	bl	800c3e4 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4618      	mov	r0, r3
 80097fe:	f002 ffd0 	bl	800c7a2 <SDMMC_CmdSendSCR>
 8009802:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8009804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009806:	2b00      	cmp	r3, #0
 8009808:	d027      	beq.n	800985a <SD_FindSCR+0xe2>
  {
    return errorstate;
 800980a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800980c:	e07e      	b.n	800990c <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009818:	2b00      	cmp	r3, #0
 800981a:	d113      	bne.n	8009844 <SD_FindSCR+0xcc>
 800981c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981e:	2b00      	cmp	r3, #0
 8009820:	d110      	bne.n	8009844 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	4618      	mov	r0, r3
 8009828:	f002 fd54 	bl	800c2d4 <SDMMC_ReadFIFO>
 800982c:	4603      	mov	r3, r0
 800982e:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4618      	mov	r0, r3
 8009836:	f002 fd4d 	bl	800c2d4 <SDMMC_ReadFIFO>
 800983a:	4603      	mov	r3, r0
 800983c:	60fb      	str	r3, [r7, #12]
      index++;
 800983e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009840:	3301      	adds	r3, #1
 8009842:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009844:	f7f8 fca4 	bl	8002190 <HAL_GetTick>
 8009848:	4602      	mov	r2, r0
 800984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984c:	1ad3      	subs	r3, r2, r3
 800984e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009852:	d102      	bne.n	800985a <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009854:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009858:	e058      	b.n	800990c <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009860:	f240 532a 	movw	r3, #1322	; 0x52a
 8009864:	4013      	ands	r3, r2
 8009866:	2b00      	cmp	r3, #0
 8009868:	d0d1      	beq.n	800980e <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009870:	f003 0308 	and.w	r3, r3, #8
 8009874:	2b00      	cmp	r3, #0
 8009876:	d005      	beq.n	8009884 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	2208      	movs	r2, #8
 800987e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009880:	2308      	movs	r3, #8
 8009882:	e043      	b.n	800990c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800988a:	f003 0302 	and.w	r3, r3, #2
 800988e:	2b00      	cmp	r3, #0
 8009890:	d005      	beq.n	800989e <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	2202      	movs	r2, #2
 8009898:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800989a:	2302      	movs	r3, #2
 800989c:	e036      	b.n	800990c <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a4:	f003 0320 	and.w	r3, r3, #32
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d005      	beq.n	80098b8 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	2220      	movs	r2, #32
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80098b4:	2320      	movs	r3, #32
 80098b6:	e029      	b.n	800990c <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a15      	ldr	r2, [pc, #84]	; (8009914 <SD_FindSCR+0x19c>)
 80098be:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	061a      	lsls	r2, r3, #24
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	021b      	lsls	r3, r3, #8
 80098c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098cc:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	0a1b      	lsrs	r3, r3, #8
 80098d2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80098d6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	0e1b      	lsrs	r3, r3, #24
 80098dc:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 80098de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e0:	601a      	str	r2, [r3, #0]
    scr++;
 80098e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e4:	3304      	adds	r3, #4
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	061a      	lsls	r2, r3, #24
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	021b      	lsls	r3, r3, #8
 80098f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80098f4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	0a1b      	lsrs	r3, r3, #8
 80098fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 80098fe:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	0e1b      	lsrs	r3, r3, #24
 8009904:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3738      	adds	r7, #56	; 0x38
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	18000f3a 	.word	0x18000f3a

08009918 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b086      	sub	sp, #24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009924:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992a:	2b1f      	cmp	r3, #31
 800992c:	d936      	bls.n	800999c <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < 8U; count++)
 800992e:	2300      	movs	r3, #0
 8009930:	617b      	str	r3, [r7, #20]
 8009932:	e027      	b.n	8009984 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4618      	mov	r0, r3
 800993a:	f002 fccb 	bl	800c2d4 <SDMMC_ReadFIFO>
 800993e:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	b2da      	uxtb	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	3301      	adds	r3, #1
 800994c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	0a1b      	lsrs	r3, r3, #8
 8009952:	b2da      	uxtb	r2, r3
 8009954:	693b      	ldr	r3, [r7, #16]
 8009956:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	3301      	adds	r3, #1
 800995c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	0c1b      	lsrs	r3, r3, #16
 8009962:	b2da      	uxtb	r2, r3
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	3301      	adds	r3, #1
 800996c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	0e1b      	lsrs	r3, r3, #24
 8009972:	b2da      	uxtb	r2, r3
 8009974:	693b      	ldr	r3, [r7, #16]
 8009976:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	3301      	adds	r3, #1
 800997c:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < 8U; count++)
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	3301      	adds	r3, #1
 8009982:	617b      	str	r3, [r7, #20]
 8009984:	697b      	ldr	r3, [r7, #20]
 8009986:	2b07      	cmp	r3, #7
 8009988:	d9d4      	bls.n	8009934 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	693a      	ldr	r2, [r7, #16]
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009994:	f1a3 0220 	sub.w	r2, r3, #32
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 800999c:	bf00      	nop
 800999e:	3718      	adds	r7, #24
 80099a0:	46bd      	mov	sp, r7
 80099a2:	bd80      	pop	{r7, pc}

080099a4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b086      	sub	sp, #24
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	69db      	ldr	r3, [r3, #28]
 80099b0:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6a1b      	ldr	r3, [r3, #32]
 80099b6:	2b1f      	cmp	r3, #31
 80099b8:	d93a      	bls.n	8009a30 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < 8U; count++)
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]
 80099be:	e02b      	b.n	8009a18 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	3301      	adds	r3, #1
 80099ca:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	021a      	lsls	r2, r3, #8
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	4313      	orrs	r3, r2
 80099d6:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	3301      	adds	r3, #1
 80099dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80099de:	693b      	ldr	r3, [r7, #16]
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	041a      	lsls	r2, r3, #16
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	3301      	adds	r3, #1
 80099ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80099f0:	693b      	ldr	r3, [r7, #16]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	061a      	lsls	r2, r3, #24
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	4313      	orrs	r3, r2
 80099fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	3301      	adds	r3, #1
 8009a00:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	f107 020c 	add.w	r2, r7, #12
 8009a0a:	4611      	mov	r1, r2
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	f002 fc6e 	bl	800c2ee <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 8009a12:	697b      	ldr	r3, [r7, #20]
 8009a14:	3301      	adds	r3, #1
 8009a16:	617b      	str	r3, [r7, #20]
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	2b07      	cmp	r3, #7
 8009a1c:	d9d0      	bls.n	80099c0 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	693a      	ldr	r2, [r7, #16]
 8009a22:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= 32U;
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6a1b      	ldr	r3, [r3, #32]
 8009a28:	f1a3 0220 	sub.w	r2, r3, #32
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	621a      	str	r2, [r3, #32]
  }
}
 8009a30:	bf00      	nop
 8009a32:	3718      	adds	r7, #24
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009a40:	bf00      	nop
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009a54:	bf00      	nop
 8009a56:	370c      	adds	r7, #12
 8009a58:	46bd      	mov	sp, r7
 8009a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a5e:	4770      	bx	lr

08009a60 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a60:	b480      	push	{r7}
 8009a62:	b083      	sub	sp, #12
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009a68:	bf00      	nop
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b082      	sub	sp, #8
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d101      	bne.n	8009a9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009a96:	2301      	movs	r3, #1
 8009a98:	e049      	b.n	8009b2e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d106      	bne.n	8009ab4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009aae:	6878      	ldr	r0, [r7, #4]
 8009ab0:	f000 f841 	bl	8009b36 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2202      	movs	r2, #2
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681a      	ldr	r2, [r3, #0]
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f000 f9f8 	bl	8009ebc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2201      	movs	r2, #1
 8009ad0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2201      	movs	r2, #1
 8009ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	2201      	movs	r2, #1
 8009ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b2c:	2300      	movs	r3, #0
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8009b36:	b480      	push	{r7}
 8009b38:	b083      	sub	sp, #12
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8009b3e:	bf00      	nop
 8009b40:	370c      	adds	r7, #12
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
	...

08009b4c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b085      	sub	sp, #20
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d001      	beq.n	8009b64 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b60:	2301      	movs	r3, #1
 8009b62:	e04f      	b.n	8009c04 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2202      	movs	r2, #2
 8009b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	68da      	ldr	r2, [r3, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	f042 0201 	orr.w	r2, r2, #1
 8009b7a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4a23      	ldr	r2, [pc, #140]	; (8009c10 <HAL_TIM_Base_Start_IT+0xc4>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d01d      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b8e:	d018      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a1f      	ldr	r2, [pc, #124]	; (8009c14 <HAL_TIM_Base_Start_IT+0xc8>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d013      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a1e      	ldr	r2, [pc, #120]	; (8009c18 <HAL_TIM_Base_Start_IT+0xcc>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d00e      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a1c      	ldr	r2, [pc, #112]	; (8009c1c <HAL_TIM_Base_Start_IT+0xd0>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d009      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a1b      	ldr	r2, [pc, #108]	; (8009c20 <HAL_TIM_Base_Start_IT+0xd4>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d004      	beq.n	8009bc2 <HAL_TIM_Base_Start_IT+0x76>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d115      	bne.n	8009bee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	689a      	ldr	r2, [r3, #8]
 8009bc8:	4b17      	ldr	r3, [pc, #92]	; (8009c28 <HAL_TIM_Base_Start_IT+0xdc>)
 8009bca:	4013      	ands	r3, r2
 8009bcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	2b06      	cmp	r3, #6
 8009bd2:	d015      	beq.n	8009c00 <HAL_TIM_Base_Start_IT+0xb4>
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bda:	d011      	beq.n	8009c00 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f042 0201 	orr.w	r2, r2, #1
 8009bea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bec:	e008      	b.n	8009c00 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	681a      	ldr	r2, [r3, #0]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f042 0201 	orr.w	r2, r2, #1
 8009bfc:	601a      	str	r2, [r3, #0]
 8009bfe:	e000      	b.n	8009c02 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c02:	2300      	movs	r3, #0
}
 8009c04:	4618      	mov	r0, r3
 8009c06:	3714      	adds	r7, #20
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0e:	4770      	bx	lr
 8009c10:	40012c00 	.word	0x40012c00
 8009c14:	40000400 	.word	0x40000400
 8009c18:	40000800 	.word	0x40000800
 8009c1c:	40000c00 	.word	0x40000c00
 8009c20:	40013400 	.word	0x40013400
 8009c24:	40014000 	.word	0x40014000
 8009c28:	00010007 	.word	0x00010007

08009c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	691b      	ldr	r3, [r3, #16]
 8009c3a:	f003 0302 	and.w	r3, r3, #2
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d122      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	f003 0302 	and.w	r3, r3, #2
 8009c4c:	2b02      	cmp	r3, #2
 8009c4e:	d11b      	bne.n	8009c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f06f 0202 	mvn.w	r2, #2
 8009c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	699b      	ldr	r3, [r3, #24]
 8009c66:	f003 0303 	and.w	r3, r3, #3
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d003      	beq.n	8009c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f000 f905 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009c74:	e005      	b.n	8009c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f000 f8f7 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f000 f908 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	691b      	ldr	r3, [r3, #16]
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	d122      	bne.n	8009cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	f003 0304 	and.w	r3, r3, #4
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	d11b      	bne.n	8009cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f06f 0204 	mvn.w	r2, #4
 8009cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2202      	movs	r2, #2
 8009cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	699b      	ldr	r3, [r3, #24]
 8009cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d003      	beq.n	8009cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f000 f8db 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009cc8:	e005      	b.n	8009cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 f8cd 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f8de 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2200      	movs	r2, #0
 8009cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	691b      	ldr	r3, [r3, #16]
 8009ce2:	f003 0308 	and.w	r3, r3, #8
 8009ce6:	2b08      	cmp	r3, #8
 8009ce8:	d122      	bne.n	8009d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68db      	ldr	r3, [r3, #12]
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d11b      	bne.n	8009d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f06f 0208 	mvn.w	r2, #8
 8009d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2204      	movs	r2, #4
 8009d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69db      	ldr	r3, [r3, #28]
 8009d0e:	f003 0303 	and.w	r3, r3, #3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d003      	beq.n	8009d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f8b1 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009d1c:	e005      	b.n	8009d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f000 f8a3 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d24:	6878      	ldr	r0, [r7, #4]
 8009d26:	f000 f8b4 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	691b      	ldr	r3, [r3, #16]
 8009d36:	f003 0310 	and.w	r3, r3, #16
 8009d3a:	2b10      	cmp	r3, #16
 8009d3c:	d122      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	68db      	ldr	r3, [r3, #12]
 8009d44:	f003 0310 	and.w	r3, r3, #16
 8009d48:	2b10      	cmp	r3, #16
 8009d4a:	d11b      	bne.n	8009d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	f06f 0210 	mvn.w	r2, #16
 8009d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2208      	movs	r2, #8
 8009d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	69db      	ldr	r3, [r3, #28]
 8009d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d003      	beq.n	8009d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f887 	bl	8009e7e <HAL_TIM_IC_CaptureCallback>
 8009d70:	e005      	b.n	8009d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d72:	6878      	ldr	r0, [r7, #4]
 8009d74:	f000 f879 	bl	8009e6a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d78:	6878      	ldr	r0, [r7, #4]
 8009d7a:	f000 f88a 	bl	8009e92 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2200      	movs	r2, #0
 8009d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691b      	ldr	r3, [r3, #16]
 8009d8a:	f003 0301 	and.w	r3, r3, #1
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	d10e      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	f003 0301 	and.w	r3, r3, #1
 8009d9c:	2b01      	cmp	r3, #1
 8009d9e:	d107      	bne.n	8009db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f06f 0201 	mvn.w	r2, #1
 8009da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7f7 fc36 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	691b      	ldr	r3, [r3, #16]
 8009db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dba:	2b80      	cmp	r3, #128	; 0x80
 8009dbc:	d10e      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	68db      	ldr	r3, [r3, #12]
 8009dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dc8:	2b80      	cmp	r3, #128	; 0x80
 8009dca:	d107      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	f000 f914 	bl	800a004 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009de6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009dea:	d10e      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009df6:	2b80      	cmp	r3, #128	; 0x80
 8009df8:	d107      	bne.n	8009e0a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f907 	bl	800a018 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	691b      	ldr	r3, [r3, #16]
 8009e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e14:	2b40      	cmp	r3, #64	; 0x40
 8009e16:	d10e      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e22:	2b40      	cmp	r3, #64	; 0x40
 8009e24:	d107      	bne.n	8009e36 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	f000 f838 	bl	8009ea6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	691b      	ldr	r3, [r3, #16]
 8009e3c:	f003 0320 	and.w	r3, r3, #32
 8009e40:	2b20      	cmp	r3, #32
 8009e42:	d10e      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f003 0320 	and.w	r3, r3, #32
 8009e4e:	2b20      	cmp	r3, #32
 8009e50:	d107      	bne.n	8009e62 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f06f 0220 	mvn.w	r2, #32
 8009e5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f8c7 	bl	8009ff0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e62:	bf00      	nop
 8009e64:	3708      	adds	r7, #8
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b083      	sub	sp, #12
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e72:	bf00      	nop
 8009e74:	370c      	adds	r7, #12
 8009e76:	46bd      	mov	sp, r7
 8009e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e7e:	b480      	push	{r7}
 8009e80:	b083      	sub	sp, #12
 8009e82:	af00      	add	r7, sp, #0
 8009e84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e86:	bf00      	nop
 8009e88:	370c      	adds	r7, #12
 8009e8a:	46bd      	mov	sp, r7
 8009e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e90:	4770      	bx	lr

08009e92 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e92:	b480      	push	{r7}
 8009e94:	b083      	sub	sp, #12
 8009e96:	af00      	add	r7, sp, #0
 8009e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e9a:	bf00      	nop
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009ea6:	b480      	push	{r7}
 8009ea8:	b083      	sub	sp, #12
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009eae:	bf00      	nop
 8009eb0:	370c      	adds	r7, #12
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb8:	4770      	bx	lr
	...

08009ebc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
 8009ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a40      	ldr	r2, [pc, #256]	; (8009fd0 <TIM_Base_SetConfig+0x114>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d013      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009eda:	d00f      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a3d      	ldr	r2, [pc, #244]	; (8009fd4 <TIM_Base_SetConfig+0x118>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d00b      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a3c      	ldr	r2, [pc, #240]	; (8009fd8 <TIM_Base_SetConfig+0x11c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d007      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	4a3b      	ldr	r2, [pc, #236]	; (8009fdc <TIM_Base_SetConfig+0x120>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d003      	beq.n	8009efc <TIM_Base_SetConfig+0x40>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	4a3a      	ldr	r2, [pc, #232]	; (8009fe0 <TIM_Base_SetConfig+0x124>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d108      	bne.n	8009f0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a2f      	ldr	r2, [pc, #188]	; (8009fd0 <TIM_Base_SetConfig+0x114>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d01f      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009f1c:	d01b      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	4a2c      	ldr	r2, [pc, #176]	; (8009fd4 <TIM_Base_SetConfig+0x118>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d017      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	4a2b      	ldr	r2, [pc, #172]	; (8009fd8 <TIM_Base_SetConfig+0x11c>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d013      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a2a      	ldr	r2, [pc, #168]	; (8009fdc <TIM_Base_SetConfig+0x120>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d00f      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	4a29      	ldr	r2, [pc, #164]	; (8009fe0 <TIM_Base_SetConfig+0x124>)
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	d00b      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	4a28      	ldr	r2, [pc, #160]	; (8009fe4 <TIM_Base_SetConfig+0x128>)
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d007      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	4a27      	ldr	r2, [pc, #156]	; (8009fe8 <TIM_Base_SetConfig+0x12c>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d003      	beq.n	8009f56 <TIM_Base_SetConfig+0x9a>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a26      	ldr	r2, [pc, #152]	; (8009fec <TIM_Base_SetConfig+0x130>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d108      	bne.n	8009f68 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	68db      	ldr	r3, [r3, #12]
 8009f62:	68fa      	ldr	r2, [r7, #12]
 8009f64:	4313      	orrs	r3, r2
 8009f66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	695b      	ldr	r3, [r3, #20]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	68fa      	ldr	r2, [r7, #12]
 8009f7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	689a      	ldr	r2, [r3, #8]
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	681a      	ldr	r2, [r3, #0]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	4a10      	ldr	r2, [pc, #64]	; (8009fd0 <TIM_Base_SetConfig+0x114>)
 8009f90:	4293      	cmp	r3, r2
 8009f92:	d00f      	beq.n	8009fb4 <TIM_Base_SetConfig+0xf8>
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	4a12      	ldr	r2, [pc, #72]	; (8009fe0 <TIM_Base_SetConfig+0x124>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d00b      	beq.n	8009fb4 <TIM_Base_SetConfig+0xf8>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	4a11      	ldr	r2, [pc, #68]	; (8009fe4 <TIM_Base_SetConfig+0x128>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d007      	beq.n	8009fb4 <TIM_Base_SetConfig+0xf8>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	4a10      	ldr	r2, [pc, #64]	; (8009fe8 <TIM_Base_SetConfig+0x12c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d003      	beq.n	8009fb4 <TIM_Base_SetConfig+0xf8>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	4a0f      	ldr	r2, [pc, #60]	; (8009fec <TIM_Base_SetConfig+0x130>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d103      	bne.n	8009fbc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	691a      	ldr	r2, [r3, #16]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	615a      	str	r2, [r3, #20]
}
 8009fc2:	bf00      	nop
 8009fc4:	3714      	adds	r7, #20
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	40012c00 	.word	0x40012c00
 8009fd4:	40000400 	.word	0x40000400
 8009fd8:	40000800 	.word	0x40000800
 8009fdc:	40000c00 	.word	0x40000c00
 8009fe0:	40013400 	.word	0x40013400
 8009fe4:	40014000 	.word	0x40014000
 8009fe8:	40014400 	.word	0x40014400
 8009fec:	40014800 	.word	0x40014800

08009ff0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ff8:	bf00      	nop
 8009ffa:	370c      	adds	r7, #12
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a004:	b480      	push	{r7}
 800a006:	b083      	sub	sp, #12
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a00c:	bf00      	nop
 800a00e:	370c      	adds	r7, #12
 800a010:	46bd      	mov	sp, r7
 800a012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a016:	4770      	bx	lr

0800a018 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a018:	b480      	push	{r7}
 800a01a:	b083      	sub	sp, #12
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a020:	bf00      	nop
 800a022:	370c      	adds	r7, #12
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr

0800a02c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b082      	sub	sp, #8
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e042      	b.n	800a0c4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a044:	2b00      	cmp	r3, #0
 800a046:	d106      	bne.n	800a056 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f7f7 fd1b 	bl	8001a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2224      	movs	r2, #36	; 0x24
 800a05a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	681a      	ldr	r2, [r3, #0]
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f022 0201 	bic.w	r2, r2, #1
 800a06c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f000 fc4a 	bl	800a908 <UART_SetConfig>
 800a074:	4603      	mov	r3, r0
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a07a:	2301      	movs	r3, #1
 800a07c:	e022      	b.n	800a0c4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a082:	2b00      	cmp	r3, #0
 800a084:	d002      	beq.n	800a08c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a086:	6878      	ldr	r0, [r7, #4]
 800a088:	f000 ff3e 	bl	800af08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	685a      	ldr	r2, [r3, #4]
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a09a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	689a      	ldr	r2, [r3, #8]
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a0aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	681a      	ldr	r2, [r3, #0]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f042 0201 	orr.w	r2, r2, #1
 800a0ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 ffc5 	bl	800b04c <UART_CheckIdleState>
 800a0c2:	4603      	mov	r3, r0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b08a      	sub	sp, #40	; 0x28
 800a0d0:	af02      	add	r7, sp, #8
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	603b      	str	r3, [r7, #0]
 800a0d8:	4613      	mov	r3, r2
 800a0da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a0e2:	2b20      	cmp	r3, #32
 800a0e4:	d17b      	bne.n	800a1de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <HAL_UART_Transmit+0x26>
 800a0ec:	88fb      	ldrh	r3, [r7, #6]
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d101      	bne.n	800a0f6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	e074      	b.n	800a1e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	2221      	movs	r2, #33	; 0x21
 800a102:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a106:	f7f8 f843 	bl	8002190 <HAL_GetTick>
 800a10a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	88fa      	ldrh	r2, [r7, #6]
 800a110:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	88fa      	ldrh	r2, [r7, #6]
 800a118:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a124:	d108      	bne.n	800a138 <HAL_UART_Transmit+0x6c>
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d104      	bne.n	800a138 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a12e:	2300      	movs	r3, #0
 800a130:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	61bb      	str	r3, [r7, #24]
 800a136:	e003      	b.n	800a140 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a13c:	2300      	movs	r3, #0
 800a13e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a140:	e030      	b.n	800a1a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	2200      	movs	r2, #0
 800a14a:	2180      	movs	r1, #128	; 0x80
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f001 f827 	bl	800b1a0 <UART_WaitOnFlagUntilTimeout>
 800a152:	4603      	mov	r3, r0
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	2220      	movs	r2, #32
 800a15c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a160:	2303      	movs	r3, #3
 800a162:	e03d      	b.n	800a1e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d10b      	bne.n	800a182 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	881b      	ldrh	r3, [r3, #0]
 800a16e:	461a      	mov	r2, r3
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a178:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a17a:	69bb      	ldr	r3, [r7, #24]
 800a17c:	3302      	adds	r3, #2
 800a17e:	61bb      	str	r3, [r7, #24]
 800a180:	e007      	b.n	800a192 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	781a      	ldrb	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	3301      	adds	r3, #1
 800a190:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a198:	b29b      	uxth	r3, r3
 800a19a:	3b01      	subs	r3, #1
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a1aa:	b29b      	uxth	r3, r3
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d1c8      	bne.n	800a142 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	9300      	str	r3, [sp, #0]
 800a1b4:	697b      	ldr	r3, [r7, #20]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	2140      	movs	r1, #64	; 0x40
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fff0 	bl	800b1a0 <UART_WaitOnFlagUntilTimeout>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2220      	movs	r2, #32
 800a1ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a1ce:	2303      	movs	r3, #3
 800a1d0:	e006      	b.n	800a1e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2220      	movs	r2, #32
 800a1d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e000      	b.n	800a1e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a1de:	2302      	movs	r3, #2
  }
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3720      	adds	r7, #32
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08a      	sub	sp, #40	; 0x28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a1fc:	2b20      	cmp	r3, #32
 800a1fe:	d137      	bne.n	800a270 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2b00      	cmp	r3, #0
 800a204:	d002      	beq.n	800a20c <HAL_UART_Receive_IT+0x24>
 800a206:	88fb      	ldrh	r3, [r7, #6]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d101      	bne.n	800a210 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e030      	b.n	800a272 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a18      	ldr	r2, [pc, #96]	; (800a27c <HAL_UART_Receive_IT+0x94>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d01f      	beq.n	800a260 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d018      	beq.n	800a260 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a234:	697b      	ldr	r3, [r7, #20]
 800a236:	e853 3f00 	ldrex	r3, [r3]
 800a23a:	613b      	str	r3, [r7, #16]
   return(result);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a242:	627b      	str	r3, [r7, #36]	; 0x24
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	461a      	mov	r2, r3
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	623b      	str	r3, [r7, #32]
 800a24e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a250:	69f9      	ldr	r1, [r7, #28]
 800a252:	6a3a      	ldr	r2, [r7, #32]
 800a254:	e841 2300 	strex	r3, r2, [r1]
 800a258:	61bb      	str	r3, [r7, #24]
   return(result);
 800a25a:	69bb      	ldr	r3, [r7, #24]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1e6      	bne.n	800a22e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800a260:	88fb      	ldrh	r3, [r7, #6]
 800a262:	461a      	mov	r2, r3
 800a264:	68b9      	ldr	r1, [r7, #8]
 800a266:	68f8      	ldr	r0, [r7, #12]
 800a268:	f001 f802 	bl	800b270 <UART_Start_Receive_IT>
 800a26c:	4603      	mov	r3, r0
 800a26e:	e000      	b.n	800a272 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800a270:	2302      	movs	r3, #2
  }
}
 800a272:	4618      	mov	r0, r3
 800a274:	3728      	adds	r7, #40	; 0x28
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}
 800a27a:	bf00      	nop
 800a27c:	40008000 	.word	0x40008000

0800a280 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b0ba      	sub	sp, #232	; 0xe8
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	69db      	ldr	r3, [r3, #28]
 800a28e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	689b      	ldr	r3, [r3, #8]
 800a2a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a2a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800a2aa:	f640 030f 	movw	r3, #2063	; 0x80f
 800a2ae:	4013      	ands	r3, r2
 800a2b0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800a2b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d11b      	bne.n	800a2f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a2bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a2c0:	f003 0320 	and.w	r3, r3, #32
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d015      	beq.n	800a2f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a2c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2cc:	f003 0320 	and.w	r3, r3, #32
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d105      	bne.n	800a2e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a2d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a2d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d009      	beq.n	800a2f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f000 82e3 	beq.w	800a8b0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	4798      	blx	r3
      }
      return;
 800a2f2:	e2dd      	b.n	800a8b0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a2f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	f000 8123 	beq.w	800a544 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800a2fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a302:	4b8d      	ldr	r3, [pc, #564]	; (800a538 <HAL_UART_IRQHandler+0x2b8>)
 800a304:	4013      	ands	r3, r2
 800a306:	2b00      	cmp	r3, #0
 800a308:	d106      	bne.n	800a318 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800a30a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800a30e:	4b8b      	ldr	r3, [pc, #556]	; (800a53c <HAL_UART_IRQHandler+0x2bc>)
 800a310:	4013      	ands	r3, r2
 800a312:	2b00      	cmp	r3, #0
 800a314:	f000 8116 	beq.w	800a544 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a31c:	f003 0301 	and.w	r3, r3, #1
 800a320:	2b00      	cmp	r3, #0
 800a322:	d011      	beq.n	800a348 <HAL_UART_IRQHandler+0xc8>
 800a324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d00b      	beq.n	800a348 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	2201      	movs	r2, #1
 800a336:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a33e:	f043 0201 	orr.w	r2, r3, #1
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a348:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a34c:	f003 0302 	and.w	r3, r3, #2
 800a350:	2b00      	cmp	r3, #0
 800a352:	d011      	beq.n	800a378 <HAL_UART_IRQHandler+0xf8>
 800a354:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a358:	f003 0301 	and.w	r3, r3, #1
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d00b      	beq.n	800a378 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	2202      	movs	r2, #2
 800a366:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a36e:	f043 0204 	orr.w	r2, r3, #4
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a378:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a37c:	f003 0304 	and.w	r3, r3, #4
 800a380:	2b00      	cmp	r3, #0
 800a382:	d011      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x128>
 800a384:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d00b      	beq.n	800a3a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	2204      	movs	r2, #4
 800a396:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a39e:	f043 0202 	orr.w	r2, r3, #2
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a3a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3ac:	f003 0308 	and.w	r3, r3, #8
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d017      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a3b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3b8:	f003 0320 	and.w	r3, r3, #32
 800a3bc:	2b00      	cmp	r3, #0
 800a3be:	d105      	bne.n	800a3cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800a3c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800a3c4:	4b5c      	ldr	r3, [pc, #368]	; (800a538 <HAL_UART_IRQHandler+0x2b8>)
 800a3c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d00b      	beq.n	800a3e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	2208      	movs	r2, #8
 800a3d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3da:	f043 0208 	orr.w	r2, r3, #8
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a3e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a3e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d012      	beq.n	800a416 <HAL_UART_IRQHandler+0x196>
 800a3f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a3f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00c      	beq.n	800a416 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a404:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a40c:	f043 0220 	orr.w	r2, r3, #32
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	f000 8249 	beq.w	800a8b4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800a422:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a426:	f003 0320 	and.w	r3, r3, #32
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d013      	beq.n	800a456 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800a42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a432:	f003 0320 	and.w	r3, r3, #32
 800a436:	2b00      	cmp	r3, #0
 800a438:	d105      	bne.n	800a446 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800a43a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a43e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a442:	2b00      	cmp	r3, #0
 800a444:	d007      	beq.n	800a456 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d003      	beq.n	800a456 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a452:	6878      	ldr	r0, [r7, #4]
 800a454:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a45c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a46a:	2b40      	cmp	r3, #64	; 0x40
 800a46c:	d005      	beq.n	800a47a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a46e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a472:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a476:	2b00      	cmp	r3, #0
 800a478:	d054      	beq.n	800a524 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f001 f81a 	bl	800b4b4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	689b      	ldr	r3, [r3, #8]
 800a486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48a:	2b40      	cmp	r3, #64	; 0x40
 800a48c:	d146      	bne.n	800a51c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	3308      	adds	r3, #8
 800a494:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a498:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a49c:	e853 3f00 	ldrex	r3, [r3]
 800a4a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a4a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a4a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a4ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	3308      	adds	r3, #8
 800a4b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a4ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a4be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a4c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a4ca:	e841 2300 	strex	r3, r2, [r1]
 800a4ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a4d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d1d9      	bne.n	800a48e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d017      	beq.n	800a514 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4ea:	4a15      	ldr	r2, [pc, #84]	; (800a540 <HAL_UART_IRQHandler+0x2c0>)
 800a4ec:	641a      	str	r2, [r3, #64]	; 0x40

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7f8 f85f 	bl	80025b8 <HAL_DMA_Abort_IT>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d019      	beq.n	800a534 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800a50e:	4610      	mov	r0, r2
 800a510:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a512:	e00f      	b.n	800a534 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a514:	6878      	ldr	r0, [r7, #4]
 800a516:	f000 f9e1 	bl	800a8dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a51a:	e00b      	b.n	800a534 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 f9dd 	bl	800a8dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a522:	e007      	b.n	800a534 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 f9d9 	bl	800a8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	2200      	movs	r2, #0
 800a52e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800a532:	e1bf      	b.n	800a8b4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a534:	bf00      	nop
    return;
 800a536:	e1bd      	b.n	800a8b4 <HAL_UART_IRQHandler+0x634>
 800a538:	10000001 	.word	0x10000001
 800a53c:	04000120 	.word	0x04000120
 800a540:	0800b581 	.word	0x0800b581

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a548:	2b01      	cmp	r3, #1
 800a54a:	f040 8153 	bne.w	800a7f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800a54e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a552:	f003 0310 	and.w	r3, r3, #16
 800a556:	2b00      	cmp	r3, #0
 800a558:	f000 814c 	beq.w	800a7f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800a55c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a560:	f003 0310 	and.w	r3, r3, #16
 800a564:	2b00      	cmp	r3, #0
 800a566:	f000 8145 	beq.w	800a7f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2210      	movs	r2, #16
 800a570:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a57c:	2b40      	cmp	r3, #64	; 0x40
 800a57e:	f040 80bb 	bne.w	800a6f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a590:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a594:	2b00      	cmp	r3, #0
 800a596:	f000 818f 	beq.w	800a8b8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800a5a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	f080 8187 	bcs.w	800a8b8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a5b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f003 0320 	and.w	r3, r3, #32
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f040 8087 	bne.w	800a6d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a5d4:	e853 3f00 	ldrex	r3, [r3]
 800a5d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a5dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a5e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800a5f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a5f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a5fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a602:	e841 2300 	strex	r3, r2, [r1]
 800a606:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a60a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d1da      	bne.n	800a5c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3308      	adds	r3, #8
 800a618:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a61a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a61c:	e853 3f00 	ldrex	r3, [r3]
 800a620:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a624:	f023 0301 	bic.w	r3, r3, #1
 800a628:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	3308      	adds	r3, #8
 800a632:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a636:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a63a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a63c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a63e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a642:	e841 2300 	strex	r3, r2, [r1]
 800a646:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a648:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d1e1      	bne.n	800a612 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3308      	adds	r3, #8
 800a654:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a656:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a658:	e853 3f00 	ldrex	r3, [r3]
 800a65c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a664:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	3308      	adds	r3, #8
 800a66e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a672:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a674:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a676:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a678:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a67a:	e841 2300 	strex	r3, r2, [r1]
 800a67e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a682:	2b00      	cmp	r3, #0
 800a684:	d1e3      	bne.n	800a64e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2220      	movs	r2, #32
 800a68a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2200      	movs	r2, #0
 800a692:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a69a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a69c:	e853 3f00 	ldrex	r3, [r3]
 800a6a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a6a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a6a4:	f023 0310 	bic.w	r3, r3, #16
 800a6a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	461a      	mov	r2, r3
 800a6b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a6b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800a6b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a6bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a6be:	e841 2300 	strex	r3, r2, [r1]
 800a6c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a6c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d1e4      	bne.n	800a694 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7f7 ff15 	bl	8002500 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2202      	movs	r2, #2
 800a6da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a6e8:	b29b      	uxth	r3, r3
 800a6ea:	1ad3      	subs	r3, r2, r3
 800a6ec:	b29b      	uxth	r3, r3
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f8fd 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a6f6:	e0df      	b.n	800a8b8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a704:	b29b      	uxth	r3, r3
 800a706:	1ad3      	subs	r3, r2, r3
 800a708:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800a712:	b29b      	uxth	r3, r3
 800a714:	2b00      	cmp	r3, #0
 800a716:	f000 80d1 	beq.w	800a8bc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800a71a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a71e:	2b00      	cmp	r3, #0
 800a720:	f000 80cc 	beq.w	800a8bc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a72c:	e853 3f00 	ldrex	r3, [r3]
 800a730:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a734:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a738:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	461a      	mov	r2, r3
 800a742:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800a746:	647b      	str	r3, [r7, #68]	; 0x44
 800a748:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a74a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a74c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a74e:	e841 2300 	strex	r3, r2, [r1]
 800a752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1e4      	bne.n	800a724 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3308      	adds	r3, #8
 800a760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a764:	e853 3f00 	ldrex	r3, [r3]
 800a768:	623b      	str	r3, [r7, #32]
   return(result);
 800a76a:	6a3b      	ldr	r3, [r7, #32]
 800a76c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a770:	f023 0301 	bic.w	r3, r3, #1
 800a774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	3308      	adds	r3, #8
 800a77e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a782:	633a      	str	r2, [r7, #48]	; 0x30
 800a784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78a:	e841 2300 	strex	r3, r2, [r1]
 800a78e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a792:	2b00      	cmp	r3, #0
 800a794:	d1e1      	bne.n	800a75a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2220      	movs	r2, #32
 800a79a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	2200      	movs	r2, #0
 800a7a8:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7b0:	693b      	ldr	r3, [r7, #16]
 800a7b2:	e853 3f00 	ldrex	r3, [r3]
 800a7b6:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	f023 0310 	bic.w	r3, r3, #16
 800a7be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800a7cc:	61fb      	str	r3, [r7, #28]
 800a7ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7d0:	69b9      	ldr	r1, [r7, #24]
 800a7d2:	69fa      	ldr	r2, [r7, #28]
 800a7d4:	e841 2300 	strex	r3, r2, [r1]
 800a7d8:	617b      	str	r3, [r7, #20]
   return(result);
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d1e4      	bne.n	800a7aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2202      	movs	r2, #2
 800a7e4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a7e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f87f 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800a7f2:	e063      	b.n	800a8bc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800a7f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a7f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00e      	beq.n	800a81e <HAL_UART_IRQHandler+0x59e>
 800a800:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d008      	beq.n	800a81e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800a814:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f001 fc10 	bl	800c03c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a81c:	e051      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800a81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a826:	2b00      	cmp	r3, #0
 800a828:	d014      	beq.n	800a854 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800a82a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a82e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a832:	2b00      	cmp	r3, #0
 800a834:	d105      	bne.n	800a842 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800a836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a83a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d008      	beq.n	800a854 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a846:	2b00      	cmp	r3, #0
 800a848:	d03a      	beq.n	800a8c0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	4798      	blx	r3
    }
    return;
 800a852:	e035      	b.n	800a8c0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a854:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a858:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d009      	beq.n	800a874 <HAL_UART_IRQHandler+0x5f4>
 800a860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d003      	beq.n	800a874 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800a86c:	6878      	ldr	r0, [r7, #4]
 800a86e:	f000 fe9d 	bl	800b5ac <UART_EndTransmit_IT>
    return;
 800a872:	e026      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800a874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d009      	beq.n	800a894 <HAL_UART_IRQHandler+0x614>
 800a880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a884:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f001 fbe9 	bl	800c064 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a892:	e016      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800a894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a898:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d010      	beq.n	800a8c2 <HAL_UART_IRQHandler+0x642>
 800a8a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	da0c      	bge.n	800a8c2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fbd1 	bl	800c050 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800a8ae:	e008      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
      return;
 800a8b0:	bf00      	nop
 800a8b2:	e006      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
    return;
 800a8b4:	bf00      	nop
 800a8b6:	e004      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
      return;
 800a8b8:	bf00      	nop
 800a8ba:	e002      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
      return;
 800a8bc:	bf00      	nop
 800a8be:	e000      	b.n	800a8c2 <HAL_UART_IRQHandler+0x642>
    return;
 800a8c0:	bf00      	nop
  }
}
 800a8c2:	37e8      	adds	r7, #232	; 0xe8
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}

0800a8c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b083      	sub	sp, #12
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8e4:	bf00      	nop
 800a8e6:	370c      	adds	r7, #12
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ee:	4770      	bx	lr

0800a8f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a8f0:	b480      	push	{r7}
 800a8f2:	b083      	sub	sp, #12
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
 800a8f8:	460b      	mov	r3, r1
 800a8fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a8fc:	bf00      	nop
 800a8fe:	370c      	adds	r7, #12
 800a900:	46bd      	mov	sp, r7
 800a902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a906:	4770      	bx	lr

0800a908 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a908:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a90c:	b08c      	sub	sp, #48	; 0x30
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	689a      	ldr	r2, [r3, #8]
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	431a      	orrs	r2, r3
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	695b      	ldr	r3, [r3, #20]
 800a926:	431a      	orrs	r2, r3
 800a928:	697b      	ldr	r3, [r7, #20]
 800a92a:	69db      	ldr	r3, [r3, #28]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a930:	697b      	ldr	r3, [r7, #20]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	681a      	ldr	r2, [r3, #0]
 800a936:	4baa      	ldr	r3, [pc, #680]	; (800abe0 <UART_SetConfig+0x2d8>)
 800a938:	4013      	ands	r3, r2
 800a93a:	697a      	ldr	r2, [r7, #20]
 800a93c:	6812      	ldr	r2, [r2, #0]
 800a93e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a940:	430b      	orrs	r3, r1
 800a942:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	68da      	ldr	r2, [r3, #12]
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	430a      	orrs	r2, r1
 800a958:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	4a9f      	ldr	r2, [pc, #636]	; (800abe4 <UART_SetConfig+0x2dc>)
 800a966:	4293      	cmp	r3, r2
 800a968:	d004      	beq.n	800a974 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a96a:	697b      	ldr	r3, [r7, #20]
 800a96c:	6a1b      	ldr	r3, [r3, #32]
 800a96e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a970:	4313      	orrs	r3, r2
 800a972:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	689b      	ldr	r3, [r3, #8]
 800a97a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800a97e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	6812      	ldr	r2, [r2, #0]
 800a986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a988:	430b      	orrs	r3, r1
 800a98a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a992:	f023 010f 	bic.w	r1, r3, #15
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	430a      	orrs	r2, r1
 800a9a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4a90      	ldr	r2, [pc, #576]	; (800abe8 <UART_SetConfig+0x2e0>)
 800a9a8:	4293      	cmp	r3, r2
 800a9aa:	d125      	bne.n	800a9f8 <UART_SetConfig+0xf0>
 800a9ac:	4b8f      	ldr	r3, [pc, #572]	; (800abec <UART_SetConfig+0x2e4>)
 800a9ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9b2:	f003 0303 	and.w	r3, r3, #3
 800a9b6:	2b03      	cmp	r3, #3
 800a9b8:	d81a      	bhi.n	800a9f0 <UART_SetConfig+0xe8>
 800a9ba:	a201      	add	r2, pc, #4	; (adr r2, 800a9c0 <UART_SetConfig+0xb8>)
 800a9bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c0:	0800a9d1 	.word	0x0800a9d1
 800a9c4:	0800a9e1 	.word	0x0800a9e1
 800a9c8:	0800a9d9 	.word	0x0800a9d9
 800a9cc:	0800a9e9 	.word	0x0800a9e9
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9d6:	e116      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9d8:	2302      	movs	r3, #2
 800a9da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9de:	e112      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9e0:	2304      	movs	r3, #4
 800a9e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9e6:	e10e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9e8:	2308      	movs	r3, #8
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9ee:	e10a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800a9f6:	e106      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	4a7c      	ldr	r2, [pc, #496]	; (800abf0 <UART_SetConfig+0x2e8>)
 800a9fe:	4293      	cmp	r3, r2
 800aa00:	d138      	bne.n	800aa74 <UART_SetConfig+0x16c>
 800aa02:	4b7a      	ldr	r3, [pc, #488]	; (800abec <UART_SetConfig+0x2e4>)
 800aa04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa08:	f003 030c 	and.w	r3, r3, #12
 800aa0c:	2b0c      	cmp	r3, #12
 800aa0e:	d82d      	bhi.n	800aa6c <UART_SetConfig+0x164>
 800aa10:	a201      	add	r2, pc, #4	; (adr r2, 800aa18 <UART_SetConfig+0x110>)
 800aa12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa16:	bf00      	nop
 800aa18:	0800aa4d 	.word	0x0800aa4d
 800aa1c:	0800aa6d 	.word	0x0800aa6d
 800aa20:	0800aa6d 	.word	0x0800aa6d
 800aa24:	0800aa6d 	.word	0x0800aa6d
 800aa28:	0800aa5d 	.word	0x0800aa5d
 800aa2c:	0800aa6d 	.word	0x0800aa6d
 800aa30:	0800aa6d 	.word	0x0800aa6d
 800aa34:	0800aa6d 	.word	0x0800aa6d
 800aa38:	0800aa55 	.word	0x0800aa55
 800aa3c:	0800aa6d 	.word	0x0800aa6d
 800aa40:	0800aa6d 	.word	0x0800aa6d
 800aa44:	0800aa6d 	.word	0x0800aa6d
 800aa48:	0800aa65 	.word	0x0800aa65
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa52:	e0d8      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa54:	2302      	movs	r3, #2
 800aa56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa5a:	e0d4      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa62:	e0d0      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa6a:	e0cc      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aa72:	e0c8      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a5e      	ldr	r2, [pc, #376]	; (800abf4 <UART_SetConfig+0x2ec>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d125      	bne.n	800aaca <UART_SetConfig+0x1c2>
 800aa7e:	4b5b      	ldr	r3, [pc, #364]	; (800abec <UART_SetConfig+0x2e4>)
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa88:	2b30      	cmp	r3, #48	; 0x30
 800aa8a:	d016      	beq.n	800aaba <UART_SetConfig+0x1b2>
 800aa8c:	2b30      	cmp	r3, #48	; 0x30
 800aa8e:	d818      	bhi.n	800aac2 <UART_SetConfig+0x1ba>
 800aa90:	2b20      	cmp	r3, #32
 800aa92:	d00a      	beq.n	800aaaa <UART_SetConfig+0x1a2>
 800aa94:	2b20      	cmp	r3, #32
 800aa96:	d814      	bhi.n	800aac2 <UART_SetConfig+0x1ba>
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d002      	beq.n	800aaa2 <UART_SetConfig+0x19a>
 800aa9c:	2b10      	cmp	r3, #16
 800aa9e:	d008      	beq.n	800aab2 <UART_SetConfig+0x1aa>
 800aaa0:	e00f      	b.n	800aac2 <UART_SetConfig+0x1ba>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aaa8:	e0ad      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaaa:	2302      	movs	r3, #2
 800aaac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aab0:	e0a9      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aab2:	2304      	movs	r3, #4
 800aab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aab8:	e0a5      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaba:	2308      	movs	r3, #8
 800aabc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac0:	e0a1      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aac2:	2310      	movs	r3, #16
 800aac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aac8:	e09d      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800aaca:	697b      	ldr	r3, [r7, #20]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a4a      	ldr	r2, [pc, #296]	; (800abf8 <UART_SetConfig+0x2f0>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d125      	bne.n	800ab20 <UART_SetConfig+0x218>
 800aad4:	4b45      	ldr	r3, [pc, #276]	; (800abec <UART_SetConfig+0x2e4>)
 800aad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aada:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aade:	2bc0      	cmp	r3, #192	; 0xc0
 800aae0:	d016      	beq.n	800ab10 <UART_SetConfig+0x208>
 800aae2:	2bc0      	cmp	r3, #192	; 0xc0
 800aae4:	d818      	bhi.n	800ab18 <UART_SetConfig+0x210>
 800aae6:	2b80      	cmp	r3, #128	; 0x80
 800aae8:	d00a      	beq.n	800ab00 <UART_SetConfig+0x1f8>
 800aaea:	2b80      	cmp	r3, #128	; 0x80
 800aaec:	d814      	bhi.n	800ab18 <UART_SetConfig+0x210>
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d002      	beq.n	800aaf8 <UART_SetConfig+0x1f0>
 800aaf2:	2b40      	cmp	r3, #64	; 0x40
 800aaf4:	d008      	beq.n	800ab08 <UART_SetConfig+0x200>
 800aaf6:	e00f      	b.n	800ab18 <UART_SetConfig+0x210>
 800aaf8:	2300      	movs	r3, #0
 800aafa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800aafe:	e082      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab00:	2302      	movs	r3, #2
 800ab02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab06:	e07e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab08:	2304      	movs	r3, #4
 800ab0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab0e:	e07a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab10:	2308      	movs	r3, #8
 800ab12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab16:	e076      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab18:	2310      	movs	r3, #16
 800ab1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab1e:	e072      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	4a35      	ldr	r2, [pc, #212]	; (800abfc <UART_SetConfig+0x2f4>)
 800ab26:	4293      	cmp	r3, r2
 800ab28:	d12a      	bne.n	800ab80 <UART_SetConfig+0x278>
 800ab2a:	4b30      	ldr	r3, [pc, #192]	; (800abec <UART_SetConfig+0x2e4>)
 800ab2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab38:	d01a      	beq.n	800ab70 <UART_SetConfig+0x268>
 800ab3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ab3e:	d81b      	bhi.n	800ab78 <UART_SetConfig+0x270>
 800ab40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab44:	d00c      	beq.n	800ab60 <UART_SetConfig+0x258>
 800ab46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ab4a:	d815      	bhi.n	800ab78 <UART_SetConfig+0x270>
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d003      	beq.n	800ab58 <UART_SetConfig+0x250>
 800ab50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab54:	d008      	beq.n	800ab68 <UART_SetConfig+0x260>
 800ab56:	e00f      	b.n	800ab78 <UART_SetConfig+0x270>
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab5e:	e052      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab60:	2302      	movs	r3, #2
 800ab62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab66:	e04e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab68:	2304      	movs	r3, #4
 800ab6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab6e:	e04a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab70:	2308      	movs	r3, #8
 800ab72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab76:	e046      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab78:	2310      	movs	r3, #16
 800ab7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800ab7e:	e042      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	4a17      	ldr	r2, [pc, #92]	; (800abe4 <UART_SetConfig+0x2dc>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d13a      	bne.n	800ac00 <UART_SetConfig+0x2f8>
 800ab8a:	4b18      	ldr	r3, [pc, #96]	; (800abec <UART_SetConfig+0x2e4>)
 800ab8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ab90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ab94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab98:	d01a      	beq.n	800abd0 <UART_SetConfig+0x2c8>
 800ab9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab9e:	d81b      	bhi.n	800abd8 <UART_SetConfig+0x2d0>
 800aba0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aba4:	d00c      	beq.n	800abc0 <UART_SetConfig+0x2b8>
 800aba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800abaa:	d815      	bhi.n	800abd8 <UART_SetConfig+0x2d0>
 800abac:	2b00      	cmp	r3, #0
 800abae:	d003      	beq.n	800abb8 <UART_SetConfig+0x2b0>
 800abb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb4:	d008      	beq.n	800abc8 <UART_SetConfig+0x2c0>
 800abb6:	e00f      	b.n	800abd8 <UART_SetConfig+0x2d0>
 800abb8:	2300      	movs	r3, #0
 800abba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abbe:	e022      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abc0:	2302      	movs	r3, #2
 800abc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abc6:	e01e      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abc8:	2304      	movs	r3, #4
 800abca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abce:	e01a      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abd0:	2308      	movs	r3, #8
 800abd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abd6:	e016      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abd8:	2310      	movs	r3, #16
 800abda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800abde:	e012      	b.n	800ac06 <UART_SetConfig+0x2fe>
 800abe0:	cfff69f3 	.word	0xcfff69f3
 800abe4:	40008000 	.word	0x40008000
 800abe8:	40013800 	.word	0x40013800
 800abec:	40021000 	.word	0x40021000
 800abf0:	40004400 	.word	0x40004400
 800abf4:	40004800 	.word	0x40004800
 800abf8:	40004c00 	.word	0x40004c00
 800abfc:	40005000 	.word	0x40005000
 800ac00:	2310      	movs	r3, #16
 800ac02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	4ab0      	ldr	r2, [pc, #704]	; (800aecc <UART_SetConfig+0x5c4>)
 800ac0c:	4293      	cmp	r3, r2
 800ac0e:	f040 809b 	bne.w	800ad48 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ac12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ac16:	2b08      	cmp	r3, #8
 800ac18:	d827      	bhi.n	800ac6a <UART_SetConfig+0x362>
 800ac1a:	a201      	add	r2, pc, #4	; (adr r2, 800ac20 <UART_SetConfig+0x318>)
 800ac1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac20:	0800ac45 	.word	0x0800ac45
 800ac24:	0800ac4d 	.word	0x0800ac4d
 800ac28:	0800ac55 	.word	0x0800ac55
 800ac2c:	0800ac6b 	.word	0x0800ac6b
 800ac30:	0800ac5b 	.word	0x0800ac5b
 800ac34:	0800ac6b 	.word	0x0800ac6b
 800ac38:	0800ac6b 	.word	0x0800ac6b
 800ac3c:	0800ac6b 	.word	0x0800ac6b
 800ac40:	0800ac63 	.word	0x0800ac63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac44:	f7fa fffe 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 800ac48:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac4a:	e014      	b.n	800ac76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac4c:	f7fb f80e 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800ac50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac52:	e010      	b.n	800ac76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac54:	4b9e      	ldr	r3, [pc, #632]	; (800aed0 <UART_SetConfig+0x5c8>)
 800ac56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac58:	e00d      	b.n	800ac76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac5a:	f7fa ff41 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 800ac5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ac60:	e009      	b.n	800ac76 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ac68:	e005      	b.n	800ac76 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ac6e:	2301      	movs	r3, #1
 800ac70:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ac74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ac76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	f000 8130 	beq.w	800aede <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac82:	4a94      	ldr	r2, [pc, #592]	; (800aed4 <UART_SetConfig+0x5cc>)
 800ac84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac88:	461a      	mov	r2, r3
 800ac8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac8c:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	685a      	ldr	r2, [r3, #4]
 800ac96:	4613      	mov	r3, r2
 800ac98:	005b      	lsls	r3, r3, #1
 800ac9a:	4413      	add	r3, r2
 800ac9c:	69ba      	ldr	r2, [r7, #24]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d305      	bcc.n	800acae <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aca8:	69ba      	ldr	r2, [r7, #24]
 800acaa:	429a      	cmp	r2, r3
 800acac:	d903      	bls.n	800acb6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 800acae:	2301      	movs	r3, #1
 800acb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800acb4:	e113      	b.n	800aede <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb8:	2200      	movs	r2, #0
 800acba:	60bb      	str	r3, [r7, #8]
 800acbc:	60fa      	str	r2, [r7, #12]
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acc2:	4a84      	ldr	r2, [pc, #528]	; (800aed4 <UART_SetConfig+0x5cc>)
 800acc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc8:	b29b      	uxth	r3, r3
 800acca:	2200      	movs	r2, #0
 800accc:	603b      	str	r3, [r7, #0]
 800acce:	607a      	str	r2, [r7, #4]
 800acd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800acd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800acd8:	f7f5 faba 	bl	8000250 <__aeabi_uldivmod>
 800acdc:	4602      	mov	r2, r0
 800acde:	460b      	mov	r3, r1
 800ace0:	4610      	mov	r0, r2
 800ace2:	4619      	mov	r1, r3
 800ace4:	f04f 0200 	mov.w	r2, #0
 800ace8:	f04f 0300 	mov.w	r3, #0
 800acec:	020b      	lsls	r3, r1, #8
 800acee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800acf2:	0202      	lsls	r2, r0, #8
 800acf4:	6979      	ldr	r1, [r7, #20]
 800acf6:	6849      	ldr	r1, [r1, #4]
 800acf8:	0849      	lsrs	r1, r1, #1
 800acfa:	2000      	movs	r0, #0
 800acfc:	460c      	mov	r4, r1
 800acfe:	4605      	mov	r5, r0
 800ad00:	eb12 0804 	adds.w	r8, r2, r4
 800ad04:	eb43 0905 	adc.w	r9, r3, r5
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	685b      	ldr	r3, [r3, #4]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	469a      	mov	sl, r3
 800ad10:	4693      	mov	fp, r2
 800ad12:	4652      	mov	r2, sl
 800ad14:	465b      	mov	r3, fp
 800ad16:	4640      	mov	r0, r8
 800ad18:	4649      	mov	r1, r9
 800ad1a:	f7f5 fa99 	bl	8000250 <__aeabi_uldivmod>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	460b      	mov	r3, r1
 800ad22:	4613      	mov	r3, r2
 800ad24:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ad26:	6a3b      	ldr	r3, [r7, #32]
 800ad28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad2c:	d308      	bcc.n	800ad40 <UART_SetConfig+0x438>
 800ad2e:	6a3b      	ldr	r3, [r7, #32]
 800ad30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad34:	d204      	bcs.n	800ad40 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	6a3a      	ldr	r2, [r7, #32]
 800ad3c:	60da      	str	r2, [r3, #12]
 800ad3e:	e0ce      	b.n	800aede <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 800ad40:	2301      	movs	r3, #1
 800ad42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ad46:	e0ca      	b.n	800aede <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ad48:	697b      	ldr	r3, [r7, #20]
 800ad4a:	69db      	ldr	r3, [r3, #28]
 800ad4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad50:	d166      	bne.n	800ae20 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800ad52:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ad56:	2b08      	cmp	r3, #8
 800ad58:	d827      	bhi.n	800adaa <UART_SetConfig+0x4a2>
 800ad5a:	a201      	add	r2, pc, #4	; (adr r2, 800ad60 <UART_SetConfig+0x458>)
 800ad5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad60:	0800ad85 	.word	0x0800ad85
 800ad64:	0800ad8d 	.word	0x0800ad8d
 800ad68:	0800ad95 	.word	0x0800ad95
 800ad6c:	0800adab 	.word	0x0800adab
 800ad70:	0800ad9b 	.word	0x0800ad9b
 800ad74:	0800adab 	.word	0x0800adab
 800ad78:	0800adab 	.word	0x0800adab
 800ad7c:	0800adab 	.word	0x0800adab
 800ad80:	0800ada3 	.word	0x0800ada3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad84:	f7fa ff5e 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 800ad88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad8a:	e014      	b.n	800adb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad8c:	f7fa ff6e 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800ad90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ad92:	e010      	b.n	800adb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad94:	4b4e      	ldr	r3, [pc, #312]	; (800aed0 <UART_SetConfig+0x5c8>)
 800ad96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ad98:	e00d      	b.n	800adb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad9a:	f7fa fea1 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 800ad9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ada0:	e009      	b.n	800adb6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ada2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ada6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ada8:	e005      	b.n	800adb6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800adaa:	2300      	movs	r3, #0
 800adac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800adae:	2301      	movs	r3, #1
 800adb0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800adb4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	2b00      	cmp	r3, #0
 800adba:	f000 8090 	beq.w	800aede <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800adbe:	697b      	ldr	r3, [r7, #20]
 800adc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adc2:	4a44      	ldr	r2, [pc, #272]	; (800aed4 <UART_SetConfig+0x5cc>)
 800adc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800adc8:	461a      	mov	r2, r3
 800adca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adcc:	fbb3 f3f2 	udiv	r3, r3, r2
 800add0:	005a      	lsls	r2, r3, #1
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	085b      	lsrs	r3, r3, #1
 800add8:	441a      	add	r2, r3
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	685b      	ldr	r3, [r3, #4]
 800adde:	fbb2 f3f3 	udiv	r3, r2, r3
 800ade2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	2b0f      	cmp	r3, #15
 800ade8:	d916      	bls.n	800ae18 <UART_SetConfig+0x510>
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adf0:	d212      	bcs.n	800ae18 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	f023 030f 	bic.w	r3, r3, #15
 800adfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800adfc:	6a3b      	ldr	r3, [r7, #32]
 800adfe:	085b      	lsrs	r3, r3, #1
 800ae00:	b29b      	uxth	r3, r3
 800ae02:	f003 0307 	and.w	r3, r3, #7
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	8bfb      	ldrh	r3, [r7, #30]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	8bfa      	ldrh	r2, [r7, #30]
 800ae14:	60da      	str	r2, [r3, #12]
 800ae16:	e062      	b.n	800aede <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800ae1e:	e05e      	b.n	800aede <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 800ae20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800ae24:	2b08      	cmp	r3, #8
 800ae26:	d828      	bhi.n	800ae7a <UART_SetConfig+0x572>
 800ae28:	a201      	add	r2, pc, #4	; (adr r2, 800ae30 <UART_SetConfig+0x528>)
 800ae2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2e:	bf00      	nop
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800ae5d 	.word	0x0800ae5d
 800ae38:	0800ae65 	.word	0x0800ae65
 800ae3c:	0800ae7b 	.word	0x0800ae7b
 800ae40:	0800ae6b 	.word	0x0800ae6b
 800ae44:	0800ae7b 	.word	0x0800ae7b
 800ae48:	0800ae7b 	.word	0x0800ae7b
 800ae4c:	0800ae7b 	.word	0x0800ae7b
 800ae50:	0800ae73 	.word	0x0800ae73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ae54:	f7fa fef6 	bl	8005c44 <HAL_RCC_GetPCLK1Freq>
 800ae58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae5a:	e014      	b.n	800ae86 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ae5c:	f7fa ff06 	bl	8005c6c <HAL_RCC_GetPCLK2Freq>
 800ae60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae62:	e010      	b.n	800ae86 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ae64:	4b1a      	ldr	r3, [pc, #104]	; (800aed0 <UART_SetConfig+0x5c8>)
 800ae66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae68:	e00d      	b.n	800ae86 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ae6a:	f7fa fe39 	bl	8005ae0 <HAL_RCC_GetSysClockFreq>
 800ae6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800ae70:	e009      	b.n	800ae86 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ae76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800ae78:	e005      	b.n	800ae86 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800ae84:	bf00      	nop
    }

    if (pclk != 0U)
 800ae86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d028      	beq.n	800aede <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae90:	4a10      	ldr	r2, [pc, #64]	; (800aed4 <UART_SetConfig+0x5cc>)
 800ae92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae96:	461a      	mov	r2, r3
 800ae98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	085b      	lsrs	r3, r3, #1
 800aea4:	441a      	add	r2, r3
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800aeae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aeb0:	6a3b      	ldr	r3, [r7, #32]
 800aeb2:	2b0f      	cmp	r3, #15
 800aeb4:	d910      	bls.n	800aed8 <UART_SetConfig+0x5d0>
 800aeb6:	6a3b      	ldr	r3, [r7, #32]
 800aeb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aebc:	d20c      	bcs.n	800aed8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aebe:	6a3b      	ldr	r3, [r7, #32]
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	697b      	ldr	r3, [r7, #20]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	60da      	str	r2, [r3, #12]
 800aec8:	e009      	b.n	800aede <UART_SetConfig+0x5d6>
 800aeca:	bf00      	nop
 800aecc:	40008000 	.word	0x40008000
 800aed0:	00f42400 	.word	0x00f42400
 800aed4:	08016708 	.word	0x08016708
      }
      else
      {
        ret = HAL_ERROR;
 800aed8:	2301      	movs	r3, #1
 800aeda:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	2201      	movs	r2, #1
 800aee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	2201      	movs	r2, #1
 800aeea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	2200      	movs	r2, #0
 800aef2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2200      	movs	r2, #0
 800aef8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800aefa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800aefe:	4618      	mov	r0, r3
 800af00:	3730      	adds	r7, #48	; 0x30
 800af02:	46bd      	mov	sp, r7
 800af04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800af08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800af08:	b480      	push	{r7}
 800af0a:	b083      	sub	sp, #12
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af14:	f003 0301 	and.w	r3, r3, #1
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00a      	beq.n	800af32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af36:	f003 0302 	and.w	r3, r3, #2
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af58:	f003 0304 	and.w	r3, r3, #4
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d00a      	beq.n	800af76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	430a      	orrs	r2, r1
 800af74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d00a      	beq.n	800af98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	430a      	orrs	r2, r1
 800af96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af9c:	f003 0310 	and.w	r3, r3, #16
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d00a      	beq.n	800afba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	430a      	orrs	r2, r1
 800afb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afbe:	f003 0320 	and.w	r3, r3, #32
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d00a      	beq.n	800afdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	689b      	ldr	r3, [r3, #8]
 800afcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	430a      	orrs	r2, r1
 800afda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d01a      	beq.n	800b01e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	685b      	ldr	r3, [r3, #4]
 800afee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	430a      	orrs	r2, r1
 800affc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b006:	d10a      	bne.n	800b01e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	685b      	ldr	r3, [r3, #4]
 800b00e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	430a      	orrs	r2, r1
 800b01c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b026:	2b00      	cmp	r3, #0
 800b028:	d00a      	beq.n	800b040 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	685b      	ldr	r3, [r3, #4]
 800b030:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	430a      	orrs	r2, r1
 800b03e:	605a      	str	r2, [r3, #4]
  }
}
 800b040:	bf00      	nop
 800b042:	370c      	adds	r7, #12
 800b044:	46bd      	mov	sp, r7
 800b046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04a:	4770      	bx	lr

0800b04c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b098      	sub	sp, #96	; 0x60
 800b050:	af02      	add	r7, sp, #8
 800b052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2200      	movs	r2, #0
 800b058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b05c:	f7f7 f898 	bl	8002190 <HAL_GetTick>
 800b060:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0308 	and.w	r3, r3, #8
 800b06c:	2b08      	cmp	r3, #8
 800b06e:	d12f      	bne.n	800b0d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b070:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b074:	9300      	str	r3, [sp, #0]
 800b076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b078:	2200      	movs	r2, #0
 800b07a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b07e:	6878      	ldr	r0, [r7, #4]
 800b080:	f000 f88e 	bl	800b1a0 <UART_WaitOnFlagUntilTimeout>
 800b084:	4603      	mov	r3, r0
 800b086:	2b00      	cmp	r3, #0
 800b088:	d022      	beq.n	800b0d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b092:	e853 3f00 	ldrex	r3, [r3]
 800b096:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b09a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b09e:	653b      	str	r3, [r7, #80]	; 0x50
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	461a      	mov	r2, r3
 800b0a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0a8:	647b      	str	r3, [r7, #68]	; 0x44
 800b0aa:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0b0:	e841 2300 	strex	r3, r2, [r1]
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1e6      	bne.n	800b08a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2220      	movs	r2, #32
 800b0c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b0cc:	2303      	movs	r3, #3
 800b0ce:	e063      	b.n	800b198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f003 0304 	and.w	r3, r3, #4
 800b0da:	2b04      	cmp	r3, #4
 800b0dc:	d149      	bne.n	800b172 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b0de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b0e2:	9300      	str	r3, [sp, #0]
 800b0e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 f857 	bl	800b1a0 <UART_WaitOnFlagUntilTimeout>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d03c      	beq.n	800b172 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b100:	e853 3f00 	ldrex	r3, [r3]
 800b104:	623b      	str	r3, [r7, #32]
   return(result);
 800b106:	6a3b      	ldr	r3, [r7, #32]
 800b108:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b10c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	461a      	mov	r2, r3
 800b114:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b116:	633b      	str	r3, [r7, #48]	; 0x30
 800b118:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b11a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b11c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b11e:	e841 2300 	strex	r3, r2, [r1]
 800b122:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	2b00      	cmp	r3, #0
 800b128:	d1e6      	bne.n	800b0f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	3308      	adds	r3, #8
 800b130:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	e853 3f00 	ldrex	r3, [r3]
 800b138:	60fb      	str	r3, [r7, #12]
   return(result);
 800b13a:	68fb      	ldr	r3, [r7, #12]
 800b13c:	f023 0301 	bic.w	r3, r3, #1
 800b140:	64bb      	str	r3, [r7, #72]	; 0x48
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	3308      	adds	r3, #8
 800b148:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b14a:	61fa      	str	r2, [r7, #28]
 800b14c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b14e:	69b9      	ldr	r1, [r7, #24]
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	e841 2300 	strex	r3, r2, [r1]
 800b156:	617b      	str	r3, [r7, #20]
   return(result);
 800b158:	697b      	ldr	r3, [r7, #20]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d1e5      	bne.n	800b12a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2220      	movs	r2, #32
 800b162:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	2200      	movs	r2, #0
 800b16a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b16e:	2303      	movs	r3, #3
 800b170:	e012      	b.n	800b198 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2220      	movs	r2, #32
 800b176:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	2220      	movs	r2, #32
 800b17e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2200      	movs	r2, #0
 800b18c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2200      	movs	r2, #0
 800b192:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b196:	2300      	movs	r3, #0
}
 800b198:	4618      	mov	r0, r3
 800b19a:	3758      	adds	r7, #88	; 0x58
 800b19c:	46bd      	mov	sp, r7
 800b19e:	bd80      	pop	{r7, pc}

0800b1a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b1a0:	b580      	push	{r7, lr}
 800b1a2:	b084      	sub	sp, #16
 800b1a4:	af00      	add	r7, sp, #0
 800b1a6:	60f8      	str	r0, [r7, #12]
 800b1a8:	60b9      	str	r1, [r7, #8]
 800b1aa:	603b      	str	r3, [r7, #0]
 800b1ac:	4613      	mov	r3, r2
 800b1ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b1b0:	e049      	b.n	800b246 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1b2:	69bb      	ldr	r3, [r7, #24]
 800b1b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1b8:	d045      	beq.n	800b246 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ba:	f7f6 ffe9 	bl	8002190 <HAL_GetTick>
 800b1be:	4602      	mov	r2, r0
 800b1c0:	683b      	ldr	r3, [r7, #0]
 800b1c2:	1ad3      	subs	r3, r2, r3
 800b1c4:	69ba      	ldr	r2, [r7, #24]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d302      	bcc.n	800b1d0 <UART_WaitOnFlagUntilTimeout+0x30>
 800b1ca:	69bb      	ldr	r3, [r7, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d101      	bne.n	800b1d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b1d0:	2303      	movs	r3, #3
 800b1d2:	e048      	b.n	800b266 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f003 0304 	and.w	r3, r3, #4
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d031      	beq.n	800b246 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	69db      	ldr	r3, [r3, #28]
 800b1e8:	f003 0308 	and.w	r3, r3, #8
 800b1ec:	2b08      	cmp	r3, #8
 800b1ee:	d110      	bne.n	800b212 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2208      	movs	r2, #8
 800b1f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 f95b 	bl	800b4b4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2208      	movs	r2, #8
 800b202:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	2200      	movs	r2, #0
 800b20a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e029      	b.n	800b266 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	69db      	ldr	r3, [r3, #28]
 800b218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b21c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b220:	d111      	bne.n	800b246 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b22a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b22c:	68f8      	ldr	r0, [r7, #12]
 800b22e:	f000 f941 	bl	800b4b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2220      	movs	r2, #32
 800b236:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	2200      	movs	r2, #0
 800b23e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b242:	2303      	movs	r3, #3
 800b244:	e00f      	b.n	800b266 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	69da      	ldr	r2, [r3, #28]
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	4013      	ands	r3, r2
 800b250:	68ba      	ldr	r2, [r7, #8]
 800b252:	429a      	cmp	r2, r3
 800b254:	bf0c      	ite	eq
 800b256:	2301      	moveq	r3, #1
 800b258:	2300      	movne	r3, #0
 800b25a:	b2db      	uxtb	r3, r3
 800b25c:	461a      	mov	r2, r3
 800b25e:	79fb      	ldrb	r3, [r7, #7]
 800b260:	429a      	cmp	r2, r3
 800b262:	d0a6      	beq.n	800b1b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3710      	adds	r7, #16
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}
	...

0800b270 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b270:	b480      	push	{r7}
 800b272:	b0a3      	sub	sp, #140	; 0x8c
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	88fa      	ldrh	r2, [r7, #6]
 800b288:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	88fa      	ldrh	r2, [r7, #6]
 800b290:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	689b      	ldr	r3, [r3, #8]
 800b29e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2a2:	d10e      	bne.n	800b2c2 <UART_Start_Receive_IT+0x52>
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d105      	bne.n	800b2b8 <UART_Start_Receive_IT+0x48>
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b2b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2b6:	e02d      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	22ff      	movs	r2, #255	; 0xff
 800b2bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2c0:	e028      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	689b      	ldr	r3, [r3, #8]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d10d      	bne.n	800b2e6 <UART_Start_Receive_IT+0x76>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	691b      	ldr	r3, [r3, #16]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d104      	bne.n	800b2dc <UART_Start_Receive_IT+0x6c>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	22ff      	movs	r2, #255	; 0xff
 800b2d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2da:	e01b      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	227f      	movs	r2, #127	; 0x7f
 800b2e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b2e4:	e016      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b2ee:	d10d      	bne.n	800b30c <UART_Start_Receive_IT+0x9c>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	691b      	ldr	r3, [r3, #16]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d104      	bne.n	800b302 <UART_Start_Receive_IT+0x92>
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	227f      	movs	r2, #127	; 0x7f
 800b2fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b300:	e008      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	223f      	movs	r2, #63	; 0x3f
 800b306:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b30a:	e003      	b.n	800b314 <UART_Start_Receive_IT+0xa4>
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2200      	movs	r2, #0
 800b310:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	2222      	movs	r2, #34	; 0x22
 800b320:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	3308      	adds	r3, #8
 800b32a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b32c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b32e:	e853 3f00 	ldrex	r3, [r3]
 800b332:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800b334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b336:	f043 0301 	orr.w	r3, r3, #1
 800b33a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	3308      	adds	r3, #8
 800b344:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800b348:	673a      	str	r2, [r7, #112]	; 0x70
 800b34a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b34c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800b34e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b350:	e841 2300 	strex	r3, r2, [r1]
 800b354:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800b356:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d1e3      	bne.n	800b324 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b364:	d14f      	bne.n	800b406 <UART_Start_Receive_IT+0x196>
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b36c:	88fa      	ldrh	r2, [r7, #6]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d349      	bcc.n	800b406 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b37a:	d107      	bne.n	800b38c <UART_Start_Receive_IT+0x11c>
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d103      	bne.n	800b38c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4a47      	ldr	r2, [pc, #284]	; (800b4a4 <UART_Start_Receive_IT+0x234>)
 800b388:	675a      	str	r2, [r3, #116]	; 0x74
 800b38a:	e002      	b.n	800b392 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	4a46      	ldr	r2, [pc, #280]	; (800b4a8 <UART_Start_Receive_IT+0x238>)
 800b390:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d01a      	beq.n	800b3d0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b3a2:	e853 3f00 	ldrex	r3, [r3]
 800b3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	461a      	mov	r2, r3
 800b3b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b3be:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3c0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800b3c2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b3c4:	e841 2300 	strex	r3, r2, [r1]
 800b3c8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800b3ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d1e4      	bne.n	800b39a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3308      	adds	r3, #8
 800b3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b3da:	e853 3f00 	ldrex	r3, [r3]
 800b3de:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800b3f0:	64ba      	str	r2, [r7, #72]	; 0x48
 800b3f2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3f4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b3f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b3f8:	e841 2300 	strex	r3, r2, [r1]
 800b3fc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800b3fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b400:	2b00      	cmp	r3, #0
 800b402:	d1e5      	bne.n	800b3d0 <UART_Start_Receive_IT+0x160>
 800b404:	e046      	b.n	800b494 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b40e:	d107      	bne.n	800b420 <UART_Start_Receive_IT+0x1b0>
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d103      	bne.n	800b420 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	4a24      	ldr	r2, [pc, #144]	; (800b4ac <UART_Start_Receive_IT+0x23c>)
 800b41c:	675a      	str	r2, [r3, #116]	; 0x74
 800b41e:	e002      	b.n	800b426 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4a23      	ldr	r2, [pc, #140]	; (800b4b0 <UART_Start_Receive_IT+0x240>)
 800b424:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d019      	beq.n	800b462 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	e853 3f00 	ldrex	r3, [r3]
 800b43a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b43c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800b442:	677b      	str	r3, [r7, #116]	; 0x74
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	461a      	mov	r2, r3
 800b44a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b44c:	637b      	str	r3, [r7, #52]	; 0x34
 800b44e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b450:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b452:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b454:	e841 2300 	strex	r3, r2, [r1]
 800b458:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d1e6      	bne.n	800b42e <UART_Start_Receive_IT+0x1be>
 800b460:	e018      	b.n	800b494 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b468:	697b      	ldr	r3, [r7, #20]
 800b46a:	e853 3f00 	ldrex	r3, [r3]
 800b46e:	613b      	str	r3, [r7, #16]
   return(result);
 800b470:	693b      	ldr	r3, [r7, #16]
 800b472:	f043 0320 	orr.w	r3, r3, #32
 800b476:	67bb      	str	r3, [r7, #120]	; 0x78
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	461a      	mov	r2, r3
 800b47e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b480:	623b      	str	r3, [r7, #32]
 800b482:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b484:	69f9      	ldr	r1, [r7, #28]
 800b486:	6a3a      	ldr	r2, [r7, #32]
 800b488:	e841 2300 	strex	r3, r2, [r1]
 800b48c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b48e:	69bb      	ldr	r3, [r7, #24]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d1e6      	bne.n	800b462 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	378c      	adds	r7, #140	; 0x8c
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	0800bcd5 	.word	0x0800bcd5
 800b4a8:	0800b975 	.word	0x0800b975
 800b4ac:	0800b7bd 	.word	0x0800b7bd
 800b4b0:	0800b605 	.word	0x0800b605

0800b4b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b095      	sub	sp, #84	; 0x54
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c4:	e853 3f00 	ldrex	r3, [r3]
 800b4c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b4ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b4d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	461a      	mov	r2, r3
 800b4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4da:	643b      	str	r3, [r7, #64]	; 0x40
 800b4dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b4e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b4e2:	e841 2300 	strex	r3, r2, [r1]
 800b4e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b4e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1e6      	bne.n	800b4bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	3308      	adds	r3, #8
 800b4f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4f6:	6a3b      	ldr	r3, [r7, #32]
 800b4f8:	e853 3f00 	ldrex	r3, [r3]
 800b4fc:	61fb      	str	r3, [r7, #28]
   return(result);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b504:	f023 0301 	bic.w	r3, r3, #1
 800b508:	64bb      	str	r3, [r7, #72]	; 0x48
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	3308      	adds	r3, #8
 800b510:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b512:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b514:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b516:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b518:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b51a:	e841 2300 	strex	r3, r2, [r1]
 800b51e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b522:	2b00      	cmp	r3, #0
 800b524:	d1e3      	bne.n	800b4ee <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d118      	bne.n	800b560 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	e853 3f00 	ldrex	r3, [r3]
 800b53a:	60bb      	str	r3, [r7, #8]
   return(result);
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f023 0310 	bic.w	r3, r3, #16
 800b542:	647b      	str	r3, [r7, #68]	; 0x44
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	461a      	mov	r2, r3
 800b54a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b54c:	61bb      	str	r3, [r7, #24]
 800b54e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b550:	6979      	ldr	r1, [r7, #20]
 800b552:	69ba      	ldr	r2, [r7, #24]
 800b554:	e841 2300 	strex	r3, r2, [r1]
 800b558:	613b      	str	r3, [r7, #16]
   return(result);
 800b55a:	693b      	ldr	r3, [r7, #16]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1e6      	bne.n	800b52e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2220      	movs	r2, #32
 800b564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	2200      	movs	r2, #0
 800b572:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b574:	bf00      	nop
 800b576:	3754      	adds	r7, #84	; 0x54
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr

0800b580 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b084      	sub	sp, #16
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b58c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	2200      	movs	r2, #0
 800b592:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	2200      	movs	r2, #0
 800b59a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b59e:	68f8      	ldr	r0, [r7, #12]
 800b5a0:	f7ff f99c 	bl	800a8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5a4:	bf00      	nop
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b088      	sub	sp, #32
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	e853 3f00 	ldrex	r3, [r3]
 800b5c0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c2:	68bb      	ldr	r3, [r7, #8]
 800b5c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b5c8:	61fb      	str	r3, [r7, #28]
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	461a      	mov	r2, r3
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	61bb      	str	r3, [r7, #24]
 800b5d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d6:	6979      	ldr	r1, [r7, #20]
 800b5d8:	69ba      	ldr	r2, [r7, #24]
 800b5da:	e841 2300 	strex	r3, r2, [r1]
 800b5de:	613b      	str	r3, [r7, #16]
   return(result);
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d1e6      	bne.n	800b5b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b5f4:	6878      	ldr	r0, [r7, #4]
 800b5f6:	f7ff f967 	bl	800a8c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5fa:	bf00      	nop
 800b5fc:	3720      	adds	r7, #32
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
	...

0800b604 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b604:	b580      	push	{r7, lr}
 800b606:	b09c      	sub	sp, #112	; 0x70
 800b608:	af00      	add	r7, sp, #0
 800b60a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b612:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b61c:	2b22      	cmp	r3, #34	; 0x22
 800b61e:	f040 80be 	bne.w	800b79e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b628:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b62c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800b630:	b2d9      	uxtb	r1, r3
 800b632:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b636:	b2da      	uxtb	r2, r3
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b63c:	400a      	ands	r2, r1
 800b63e:	b2d2      	uxtb	r2, r2
 800b640:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b646:	1c5a      	adds	r2, r3, #1
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b652:	b29b      	uxth	r3, r3
 800b654:	3b01      	subs	r3, #1
 800b656:	b29a      	uxth	r2, r3
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b664:	b29b      	uxth	r3, r3
 800b666:	2b00      	cmp	r3, #0
 800b668:	f040 80a1 	bne.w	800b7ae <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b674:	e853 3f00 	ldrex	r3, [r3]
 800b678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b67a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b67c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b680:	66bb      	str	r3, [r7, #104]	; 0x68
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	461a      	mov	r2, r3
 800b688:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b68a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b68c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b690:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d1e6      	bne.n	800b66c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	3308      	adds	r3, #8
 800b6a4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a8:	e853 3f00 	ldrex	r3, [r3]
 800b6ac:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b6ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6b0:	f023 0301 	bic.w	r3, r3, #1
 800b6b4:	667b      	str	r3, [r7, #100]	; 0x64
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3308      	adds	r3, #8
 800b6bc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b6be:	647a      	str	r2, [r7, #68]	; 0x44
 800b6c0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b6c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b6c6:	e841 2300 	strex	r3, r2, [r1]
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b6cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d1e5      	bne.n	800b69e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	2220      	movs	r2, #32
 800b6d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2200      	movs	r2, #0
 800b6de:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	4a33      	ldr	r2, [pc, #204]	; (800b7b8 <UART_RxISR_8BIT+0x1b4>)
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d01f      	beq.n	800b730 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	685b      	ldr	r3, [r3, #4]
 800b6f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d018      	beq.n	800b730 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b706:	e853 3f00 	ldrex	r3, [r3]
 800b70a:	623b      	str	r3, [r7, #32]
   return(result);
 800b70c:	6a3b      	ldr	r3, [r7, #32]
 800b70e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b712:	663b      	str	r3, [r7, #96]	; 0x60
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	461a      	mov	r2, r3
 800b71a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b71c:	633b      	str	r3, [r7, #48]	; 0x30
 800b71e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b724:	e841 2300 	strex	r3, r2, [r1]
 800b728:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b72a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d1e6      	bne.n	800b6fe <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b734:	2b01      	cmp	r3, #1
 800b736:	d12e      	bne.n	800b796 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2200      	movs	r2, #0
 800b73c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	e853 3f00 	ldrex	r3, [r3]
 800b74a:	60fb      	str	r3, [r7, #12]
   return(result);
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	f023 0310 	bic.w	r3, r3, #16
 800b752:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	461a      	mov	r2, r3
 800b75a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b75c:	61fb      	str	r3, [r7, #28]
 800b75e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b760:	69b9      	ldr	r1, [r7, #24]
 800b762:	69fa      	ldr	r2, [r7, #28]
 800b764:	e841 2300 	strex	r3, r2, [r1]
 800b768:	617b      	str	r3, [r7, #20]
   return(result);
 800b76a:	697b      	ldr	r3, [r7, #20]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d1e6      	bne.n	800b73e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69db      	ldr	r3, [r3, #28]
 800b776:	f003 0310 	and.w	r3, r3, #16
 800b77a:	2b10      	cmp	r3, #16
 800b77c:	d103      	bne.n	800b786 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	2210      	movs	r2, #16
 800b784:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b78c:	4619      	mov	r1, r3
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff f8ae 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b794:	e00b      	b.n	800b7ae <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b796:	6878      	ldr	r0, [r7, #4]
 800b798:	f7f5 fab6 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 800b79c:	e007      	b.n	800b7ae <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	699a      	ldr	r2, [r3, #24]
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f042 0208 	orr.w	r2, r2, #8
 800b7ac:	619a      	str	r2, [r3, #24]
}
 800b7ae:	bf00      	nop
 800b7b0:	3770      	adds	r7, #112	; 0x70
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd80      	pop	{r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	40008000 	.word	0x40008000

0800b7bc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b7bc:	b580      	push	{r7, lr}
 800b7be:	b09c      	sub	sp, #112	; 0x70
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b7ca:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b7d4:	2b22      	cmp	r3, #34	; 0x22
 800b7d6:	f040 80be 	bne.w	800b956 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7e0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7e8:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800b7ea:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800b7ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800b7f2:	4013      	ands	r3, r2
 800b7f4:	b29a      	uxth	r2, r3
 800b7f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b7f8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7fe:	1c9a      	adds	r2, r3, #2
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b80a:	b29b      	uxth	r3, r3
 800b80c:	3b01      	subs	r3, #1
 800b80e:	b29a      	uxth	r2, r3
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b81c:	b29b      	uxth	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	f040 80a1 	bne.w	800b966 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b82c:	e853 3f00 	ldrex	r3, [r3]
 800b830:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b832:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b834:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b838:	667b      	str	r3, [r7, #100]	; 0x64
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	461a      	mov	r2, r3
 800b840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b842:	657b      	str	r3, [r7, #84]	; 0x54
 800b844:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b846:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b848:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b84a:	e841 2300 	strex	r3, r2, [r1]
 800b84e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b852:	2b00      	cmp	r3, #0
 800b854:	d1e6      	bne.n	800b824 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	3308      	adds	r3, #8
 800b85c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b860:	e853 3f00 	ldrex	r3, [r3]
 800b864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b868:	f023 0301 	bic.w	r3, r3, #1
 800b86c:	663b      	str	r3, [r7, #96]	; 0x60
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	3308      	adds	r3, #8
 800b874:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b876:	643a      	str	r2, [r7, #64]	; 0x40
 800b878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b87c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b87e:	e841 2300 	strex	r3, r2, [r1]
 800b882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b886:	2b00      	cmp	r3, #0
 800b888:	d1e5      	bne.n	800b856 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	2220      	movs	r2, #32
 800b88e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2200      	movs	r2, #0
 800b896:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2200      	movs	r2, #0
 800b89c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	4a33      	ldr	r2, [pc, #204]	; (800b970 <UART_RxISR_16BIT+0x1b4>)
 800b8a4:	4293      	cmp	r3, r2
 800b8a6:	d01f      	beq.n	800b8e8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d018      	beq.n	800b8e8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8bc:	6a3b      	ldr	r3, [r7, #32]
 800b8be:	e853 3f00 	ldrex	r3, [r3]
 800b8c2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b8c4:	69fb      	ldr	r3, [r7, #28]
 800b8c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800b8ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b8d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b8d6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b8da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8dc:	e841 2300 	strex	r3, r2, [r1]
 800b8e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b8e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1e6      	bne.n	800b8b6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d12e      	bne.n	800b94e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	e853 3f00 	ldrex	r3, [r3]
 800b902:	60bb      	str	r3, [r7, #8]
   return(result);
 800b904:	68bb      	ldr	r3, [r7, #8]
 800b906:	f023 0310 	bic.w	r3, r3, #16
 800b90a:	65bb      	str	r3, [r7, #88]	; 0x58
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	461a      	mov	r2, r3
 800b912:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b914:	61bb      	str	r3, [r7, #24]
 800b916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b918:	6979      	ldr	r1, [r7, #20]
 800b91a:	69ba      	ldr	r2, [r7, #24]
 800b91c:	e841 2300 	strex	r3, r2, [r1]
 800b920:	613b      	str	r3, [r7, #16]
   return(result);
 800b922:	693b      	ldr	r3, [r7, #16]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1e6      	bne.n	800b8f6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f003 0310 	and.w	r3, r3, #16
 800b932:	2b10      	cmp	r3, #16
 800b934:	d103      	bne.n	800b93e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	2210      	movs	r2, #16
 800b93c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b944:	4619      	mov	r1, r3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7fe ffd2 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b94c:	e00b      	b.n	800b966 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f7f5 f9da 	bl	8000d08 <HAL_UART_RxCpltCallback>
}
 800b954:	e007      	b.n	800b966 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	699a      	ldr	r2, [r3, #24]
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	f042 0208 	orr.w	r2, r2, #8
 800b964:	619a      	str	r2, [r3, #24]
}
 800b966:	bf00      	nop
 800b968:	3770      	adds	r7, #112	; 0x70
 800b96a:	46bd      	mov	sp, r7
 800b96c:	bd80      	pop	{r7, pc}
 800b96e:	bf00      	nop
 800b970:	40008000 	.word	0x40008000

0800b974 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800b974:	b580      	push	{r7, lr}
 800b976:	b0ac      	sub	sp, #176	; 0xb0
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800b982:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	69db      	ldr	r3, [r3, #28]
 800b98c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b9aa:	2b22      	cmp	r3, #34	; 0x22
 800b9ac:	f040 8182 	bne.w	800bcb4 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800b9b6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800b9ba:	e125      	b.n	800bc08 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9c2:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b9c6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800b9ca:	b2d9      	uxtb	r1, r3
 800b9cc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800b9d0:	b2da      	uxtb	r2, r3
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9d6:	400a      	ands	r2, r1
 800b9d8:	b2d2      	uxtb	r2, r2
 800b9da:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9e0:	1c5a      	adds	r2, r3, #1
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b9ec:	b29b      	uxth	r3, r3
 800b9ee:	3b01      	subs	r3, #1
 800b9f0:	b29a      	uxth	r2, r3
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	69db      	ldr	r3, [r3, #28]
 800b9fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ba02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba06:	f003 0307 	and.w	r3, r3, #7
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d053      	beq.n	800bab6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba12:	f003 0301 	and.w	r3, r3, #1
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d011      	beq.n	800ba3e <UART_RxISR_8BIT_FIFOEN+0xca>
 800ba1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ba1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d00b      	beq.n	800ba3e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba34:	f043 0201 	orr.w	r2, r3, #1
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba42:	f003 0302 	and.w	r3, r3, #2
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d011      	beq.n	800ba6e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800ba4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba4e:	f003 0301 	and.w	r3, r3, #1
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	d00b      	beq.n	800ba6e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	2202      	movs	r2, #2
 800ba5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba64:	f043 0204 	orr.w	r2, r3, #4
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ba6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d011      	beq.n	800ba9e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800ba7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ba7e:	f003 0301 	and.w	r3, r3, #1
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d00b      	beq.n	800ba9e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2204      	movs	r2, #4
 800ba8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba94:	f043 0202 	orr.w	r2, r3, #2
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d006      	beq.n	800bab6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7fe ff17 	bl	800a8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2200      	movs	r2, #0
 800bab2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800babc:	b29b      	uxth	r3, r3
 800babe:	2b00      	cmp	r3, #0
 800bac0:	f040 80a2 	bne.w	800bc08 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bacc:	e853 3f00 	ldrex	r3, [r3]
 800bad0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800bad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bad8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	461a      	mov	r2, r3
 800bae2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bae6:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bae8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800baec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800baee:	e841 2300 	strex	r3, r2, [r1]
 800baf2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800baf4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d1e4      	bne.n	800bac4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	3308      	adds	r3, #8
 800bb00:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb04:	e853 3f00 	ldrex	r3, [r3]
 800bb08:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800bb0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bb0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb10:	f023 0301 	bic.w	r3, r3, #1
 800bb14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	3308      	adds	r3, #8
 800bb1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bb22:	66ba      	str	r2, [r7, #104]	; 0x68
 800bb24:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb26:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800bb28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb2a:	e841 2300 	strex	r3, r2, [r1]
 800bb2e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800bb30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d1e1      	bne.n	800bafa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2220      	movs	r2, #32
 800bb3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2200      	movs	r2, #0
 800bb48:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	4a5f      	ldr	r2, [pc, #380]	; (800bccc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800bb50:	4293      	cmp	r3, r2
 800bb52:	d021      	beq.n	800bb98 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	685b      	ldr	r3, [r3, #4]
 800bb5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d01a      	beq.n	800bb98 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bb6a:	e853 3f00 	ldrex	r3, [r3]
 800bb6e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800bb70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bb72:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bb84:	657b      	str	r3, [r7, #84]	; 0x54
 800bb86:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb88:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800bb8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb8c:	e841 2300 	strex	r3, r2, [r1]
 800bb90:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800bb92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d1e4      	bne.n	800bb62 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	d130      	bne.n	800bc02 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbae:	e853 3f00 	ldrex	r3, [r3]
 800bbb2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bbb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbb6:	f023 0310 	bic.w	r3, r3, #16
 800bbba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bbc8:	643b      	str	r3, [r7, #64]	; 0x40
 800bbca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbcc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bbce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bbd0:	e841 2300 	strex	r3, r2, [r1]
 800bbd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d1e4      	bne.n	800bba6 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	69db      	ldr	r3, [r3, #28]
 800bbe2:	f003 0310 	and.w	r3, r3, #16
 800bbe6:	2b10      	cmp	r3, #16
 800bbe8:	d103      	bne.n	800bbf2 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	681b      	ldr	r3, [r3, #0]
 800bbee:	2210      	movs	r2, #16
 800bbf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7fe fe78 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
 800bc00:	e002      	b.n	800bc08 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f7f5 f880 	bl	8000d08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bc08:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d006      	beq.n	800bc1e <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800bc10:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bc14:	f003 0320 	and.w	r3, r3, #32
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	f47f aecf 	bne.w	800b9bc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bc24:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bc28:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d049      	beq.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x350>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bc36:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800bc3a:	429a      	cmp	r2, r3
 800bc3c:	d242      	bcs.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	3308      	adds	r3, #8
 800bc44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc46:	6a3b      	ldr	r3, [r7, #32]
 800bc48:	e853 3f00 	ldrex	r3, [r3]
 800bc4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bc54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	3308      	adds	r3, #8
 800bc5e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800bc62:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bc64:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bc68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc6a:	e841 2300 	strex	r3, r2, [r1]
 800bc6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d1e3      	bne.n	800bc3e <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	4a15      	ldr	r2, [pc, #84]	; (800bcd0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800bc7a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	e853 3f00 	ldrex	r3, [r3]
 800bc88:	60bb      	str	r3, [r7, #8]
   return(result);
 800bc8a:	68bb      	ldr	r3, [r7, #8]
 800bc8c:	f043 0320 	orr.w	r3, r3, #32
 800bc90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	461a      	mov	r2, r3
 800bc9a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bc9e:	61bb      	str	r3, [r7, #24]
 800bca0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bca2:	6979      	ldr	r1, [r7, #20]
 800bca4:	69ba      	ldr	r2, [r7, #24]
 800bca6:	e841 2300 	strex	r3, r2, [r1]
 800bcaa:	613b      	str	r3, [r7, #16]
   return(result);
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d1e4      	bne.n	800bc7c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800bcb2:	e007      	b.n	800bcc4 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	699a      	ldr	r2, [r3, #24]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f042 0208 	orr.w	r2, r2, #8
 800bcc2:	619a      	str	r2, [r3, #24]
}
 800bcc4:	bf00      	nop
 800bcc6:	37b0      	adds	r7, #176	; 0xb0
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	40008000 	.word	0x40008000
 800bcd0:	0800b605 	.word	0x0800b605

0800bcd4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b0ae      	sub	sp, #184	; 0xb8
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bce2:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	69db      	ldr	r3, [r3, #28]
 800bcec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd0a:	2b22      	cmp	r3, #34	; 0x22
 800bd0c:	f040 8186 	bne.w	800c01c <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bd16:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bd1a:	e129      	b.n	800bf70 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd22:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800bd2e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800bd32:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800bd36:	4013      	ands	r3, r2
 800bd38:	b29a      	uxth	r2, r3
 800bd3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bd3e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd44:	1c9a      	adds	r2, r3, #2
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bd50:	b29b      	uxth	r3, r3
 800bd52:	3b01      	subs	r3, #1
 800bd54:	b29a      	uxth	r2, r3
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800bd66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd6a:	f003 0307 	and.w	r3, r3, #7
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d053      	beq.n	800be1a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bd72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bd76:	f003 0301 	and.w	r3, r3, #1
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d011      	beq.n	800bda2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800bd7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800bd82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd86:	2b00      	cmp	r3, #0
 800bd88:	d00b      	beq.n	800bda2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	2201      	movs	r2, #1
 800bd90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd98:	f043 0201 	orr.w	r2, r3, #1
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bda2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	2b00      	cmp	r3, #0
 800bdac:	d011      	beq.n	800bdd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800bdae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d00b      	beq.n	800bdd2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	2202      	movs	r2, #2
 800bdc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdc8:	f043 0204 	orr.w	r2, r3, #4
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bdd2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bdd6:	f003 0304 	and.w	r3, r3, #4
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d011      	beq.n	800be02 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800bdde:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800bde2:	f003 0301 	and.w	r3, r3, #1
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d00b      	beq.n	800be02 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	2204      	movs	r2, #4
 800bdf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdf8:	f043 0202 	orr.w	r2, r3, #2
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d006      	beq.n	800be1a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f7fe fd65 	bl	800a8dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	2200      	movs	r2, #0
 800be16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800be20:	b29b      	uxth	r3, r3
 800be22:	2b00      	cmp	r3, #0
 800be24:	f040 80a4 	bne.w	800bf70 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800be30:	e853 3f00 	ldrex	r3, [r3]
 800be34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800be36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800be38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800be3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	461a      	mov	r2, r3
 800be46:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800be4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be4e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800be52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800be56:	e841 2300 	strex	r3, r2, [r1]
 800be5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800be5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1e2      	bne.n	800be28 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	3308      	adds	r3, #8
 800be68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800be6c:	e853 3f00 	ldrex	r3, [r3]
 800be70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800be72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800be74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800be78:	f023 0301 	bic.w	r3, r3, #1
 800be7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	3308      	adds	r3, #8
 800be86:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800be8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800be8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800be90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800be92:	e841 2300 	strex	r3, r2, [r1]
 800be96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800be98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d1e1      	bne.n	800be62 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	2220      	movs	r2, #32
 800bea2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	4a5f      	ldr	r2, [pc, #380]	; (800c034 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d021      	beq.n	800bf00 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d01a      	beq.n	800bf00 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bed2:	e853 3f00 	ldrex	r3, [r3]
 800bed6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800beda:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bede:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	461a      	mov	r2, r3
 800bee8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800beec:	65bb      	str	r3, [r7, #88]	; 0x58
 800beee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bef2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bef4:	e841 2300 	strex	r3, r2, [r1]
 800bef8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800befa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800befc:	2b00      	cmp	r3, #0
 800befe:	d1e4      	bne.n	800beca <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf04:	2b01      	cmp	r3, #1
 800bf06:	d130      	bne.n	800bf6a <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf16:	e853 3f00 	ldrex	r3, [r3]
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bf1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf1e:	f023 0310 	bic.w	r3, r3, #16
 800bf22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	461a      	mov	r2, r3
 800bf2c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800bf30:	647b      	str	r3, [r7, #68]	; 0x44
 800bf32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bf36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bf38:	e841 2300 	strex	r3, r2, [r1]
 800bf3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bf3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d1e4      	bne.n	800bf0e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	69db      	ldr	r3, [r3, #28]
 800bf4a:	f003 0310 	and.w	r3, r3, #16
 800bf4e:	2b10      	cmp	r3, #16
 800bf50:	d103      	bne.n	800bf5a <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	681b      	ldr	r3, [r3, #0]
 800bf56:	2210      	movs	r2, #16
 800bf58:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800bf60:	4619      	mov	r1, r3
 800bf62:	6878      	ldr	r0, [r7, #4]
 800bf64:	f7fe fcc4 	bl	800a8f0 <HAL_UARTEx_RxEventCallback>
 800bf68:	e002      	b.n	800bf70 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800bf6a:	6878      	ldr	r0, [r7, #4]
 800bf6c:	f7f4 fecc 	bl	8000d08 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800bf70:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d006      	beq.n	800bf86 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800bf78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800bf7c:	f003 0320 	and.w	r3, r3, #32
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	f47f aecb 	bne.w	800bd1c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf8c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800bf90:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d049      	beq.n	800c02c <UART_RxISR_16BIT_FIFOEN+0x358>
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800bf9e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d242      	bcs.n	800c02c <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	3308      	adds	r3, #8
 800bfac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb0:	e853 3f00 	ldrex	r3, [r3]
 800bfb4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bfbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	3308      	adds	r3, #8
 800bfc6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800bfca:	633a      	str	r2, [r7, #48]	; 0x30
 800bfcc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfd2:	e841 2300 	strex	r3, r2, [r1]
 800bfd6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d1e3      	bne.n	800bfa6 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	4a15      	ldr	r2, [pc, #84]	; (800c038 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800bfe2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfea:	693b      	ldr	r3, [r7, #16]
 800bfec:	e853 3f00 	ldrex	r3, [r3]
 800bff0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	f043 0320 	orr.w	r3, r3, #32
 800bff8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	461a      	mov	r2, r3
 800c002:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c006:	61fb      	str	r3, [r7, #28]
 800c008:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00a:	69b9      	ldr	r1, [r7, #24]
 800c00c:	69fa      	ldr	r2, [r7, #28]
 800c00e:	e841 2300 	strex	r3, r2, [r1]
 800c012:	617b      	str	r3, [r7, #20]
   return(result);
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d1e4      	bne.n	800bfe4 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c01a:	e007      	b.n	800c02c <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	699a      	ldr	r2, [r3, #24]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f042 0208 	orr.w	r2, r2, #8
 800c02a:	619a      	str	r2, [r3, #24]
}
 800c02c:	bf00      	nop
 800c02e:	37b8      	adds	r7, #184	; 0xb8
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	40008000 	.word	0x40008000
 800c038:	0800b7bd 	.word	0x0800b7bd

0800c03c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c03c:	b480      	push	{r7}
 800c03e:	b083      	sub	sp, #12
 800c040:	af00      	add	r7, sp, #0
 800c042:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c044:	bf00      	nop
 800c046:	370c      	adds	r7, #12
 800c048:	46bd      	mov	sp, r7
 800c04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04e:	4770      	bx	lr

0800c050 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c058:	bf00      	nop
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c064:	b480      	push	{r7}
 800c066:	b083      	sub	sp, #12
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c06c:	bf00      	nop
 800c06e:	370c      	adds	r7, #12
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c086:	2b01      	cmp	r3, #1
 800c088:	d101      	bne.n	800c08e <HAL_UARTEx_DisableFifoMode+0x16>
 800c08a:	2302      	movs	r3, #2
 800c08c:	e027      	b.n	800c0de <HAL_UARTEx_DisableFifoMode+0x66>
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2201      	movs	r2, #1
 800c092:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2224      	movs	r2, #36	; 0x24
 800c09a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	f022 0201 	bic.w	r2, r2, #1
 800c0b4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c0bc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2220      	movs	r2, #32
 800c0d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0dc:	2300      	movs	r3, #0
}
 800c0de:	4618      	mov	r0, r3
 800c0e0:	3714      	adds	r7, #20
 800c0e2:	46bd      	mov	sp, r7
 800c0e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e8:	4770      	bx	lr

0800c0ea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c0fa:	2b01      	cmp	r3, #1
 800c0fc:	d101      	bne.n	800c102 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c0fe:	2302      	movs	r3, #2
 800c100:	e02d      	b.n	800c15e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2201      	movs	r2, #1
 800c106:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2224      	movs	r2, #36	; 0x24
 800c10e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	f022 0201 	bic.w	r2, r2, #1
 800c128:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c13e:	6878      	ldr	r0, [r7, #4]
 800c140:	f000 f850 	bl	800c1e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	2220      	movs	r2, #32
 800c150:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	2200      	movs	r2, #0
 800c158:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c176:	2b01      	cmp	r3, #1
 800c178:	d101      	bne.n	800c17e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c17a:	2302      	movs	r3, #2
 800c17c:	e02d      	b.n	800c1da <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	2201      	movs	r2, #1
 800c182:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	2224      	movs	r2, #36	; 0x24
 800c18a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f022 0201 	bic.w	r2, r2, #1
 800c1a4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	681b      	ldr	r3, [r3, #0]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	683a      	ldr	r2, [r7, #0]
 800c1b6:	430a      	orrs	r2, r1
 800c1b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c1ba:	6878      	ldr	r0, [r7, #4]
 800c1bc:	f000 f812 	bl	800c1e4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2220      	movs	r2, #32
 800c1cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c1d8:	2300      	movs	r3, #0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}
	...

0800c1e4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d108      	bne.n	800c206 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2201      	movs	r2, #1
 800c200:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c204:	e031      	b.n	800c26a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c206:	2308      	movs	r3, #8
 800c208:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c20a:	2308      	movs	r3, #8
 800c20c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	689b      	ldr	r3, [r3, #8]
 800c214:	0e5b      	lsrs	r3, r3, #25
 800c216:	b2db      	uxtb	r3, r3
 800c218:	f003 0307 	and.w	r3, r3, #7
 800c21c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	0f5b      	lsrs	r3, r3, #29
 800c226:	b2db      	uxtb	r3, r3
 800c228:	f003 0307 	and.w	r3, r3, #7
 800c22c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c22e:	7bbb      	ldrb	r3, [r7, #14]
 800c230:	7b3a      	ldrb	r2, [r7, #12]
 800c232:	4911      	ldr	r1, [pc, #68]	; (800c278 <UARTEx_SetNbDataToProcess+0x94>)
 800c234:	5c8a      	ldrb	r2, [r1, r2]
 800c236:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c23a:	7b3a      	ldrb	r2, [r7, #12]
 800c23c:	490f      	ldr	r1, [pc, #60]	; (800c27c <UARTEx_SetNbDataToProcess+0x98>)
 800c23e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c240:	fb93 f3f2 	sdiv	r3, r3, r2
 800c244:	b29a      	uxth	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c24c:	7bfb      	ldrb	r3, [r7, #15]
 800c24e:	7b7a      	ldrb	r2, [r7, #13]
 800c250:	4909      	ldr	r1, [pc, #36]	; (800c278 <UARTEx_SetNbDataToProcess+0x94>)
 800c252:	5c8a      	ldrb	r2, [r1, r2]
 800c254:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c258:	7b7a      	ldrb	r2, [r7, #13]
 800c25a:	4908      	ldr	r1, [pc, #32]	; (800c27c <UARTEx_SetNbDataToProcess+0x98>)
 800c25c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c25e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c262:	b29a      	uxth	r2, r3
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c26a:	bf00      	nop
 800c26c:	3714      	adds	r7, #20
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
 800c276:	bf00      	nop
 800c278:	08016720 	.word	0x08016720
 800c27c:	08016728 	.word	0x08016728

0800c280 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c280:	b084      	sub	sp, #16
 800c282:	b480      	push	{r7}
 800c284:	b085      	sub	sp, #20
 800c286:	af00      	add	r7, sp, #0
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	f107 001c 	add.w	r0, r7, #28
 800c28e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c292:	2300      	movs	r3, #0
 800c294:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800c296:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 800c298:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 800c29a:	431a      	orrs	r2, r3
             Init.BusWide             | \
 800c29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 800c29e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 800c2a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 800c2a2:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 800c2a6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	685a      	ldr	r2, [r3, #4]
 800c2b2:	4b07      	ldr	r3, [pc, #28]	; (800c2d0 <SDMMC_Init+0x50>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	68fa      	ldr	r2, [r7, #12]
 800c2b8:	431a      	orrs	r2, r3
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	b004      	add	sp, #16
 800c2cc:	4770      	bx	lr
 800c2ce:	bf00      	nop
 800c2d0:	ffc02c00 	.word	0xffc02c00

0800c2d4 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c2d4:	b480      	push	{r7}
 800c2d6:	b083      	sub	sp, #12
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	370c      	adds	r7, #12
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr

0800c2ee <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800c2ee:	b480      	push	{r7}
 800c2f0:	b083      	sub	sp, #12
 800c2f2:	af00      	add	r7, sp, #0
 800c2f4:	6078      	str	r0, [r7, #4]
 800c2f6:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	681a      	ldr	r2, [r3, #0]
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c302:	2300      	movs	r3, #0
}
 800c304:	4618      	mov	r0, r3
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	f043 0203 	orr.w	r2, r3, #3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c324:	2300      	movs	r3, #0
}
 800c326:	4618      	mov	r0, r3
 800c328:	370c      	adds	r7, #12
 800c32a:	46bd      	mov	sp, r7
 800c32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c330:	4770      	bx	lr

0800c332 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800c332:	b480      	push	{r7}
 800c334:	b083      	sub	sp, #12
 800c336:	af00      	add	r7, sp, #0
 800c338:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	f003 0303 	and.w	r3, r3, #3
}
 800c342:	4618      	mov	r0, r3
 800c344:	370c      	adds	r7, #12
 800c346:	46bd      	mov	sp, r7
 800c348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34c:	4770      	bx	lr
	...

0800c350 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c35e:	683b      	ldr	r3, [r7, #0]
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c366:	683b      	ldr	r3, [r7, #0]
 800c368:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c36e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 800c374:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c376:	683b      	ldr	r3, [r7, #0]
 800c378:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 800c37a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 800c37c:	68fa      	ldr	r2, [r7, #12]
 800c37e:	4313      	orrs	r3, r2
 800c380:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	68da      	ldr	r2, [r3, #12]
 800c386:	4b06      	ldr	r3, [pc, #24]	; (800c3a0 <SDMMC_SendCommand+0x50>)
 800c388:	4013      	ands	r3, r2
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	431a      	orrs	r2, r3
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c392:	2300      	movs	r3, #0
}
 800c394:	4618      	mov	r0, r3
 800c396:	3714      	adds	r7, #20
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	fffee0c0 	.word	0xfffee0c0

0800c3a4 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c3a4:	b480      	push	{r7}
 800c3a6:	b083      	sub	sp, #12
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	691b      	ldr	r3, [r3, #16]
 800c3b0:	b2db      	uxtb	r3, r3
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	370c      	adds	r7, #12
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	3314      	adds	r3, #20
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	683b      	ldr	r3, [r7, #0]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	681b      	ldr	r3, [r3, #0]
}
 800c3d8:	4618      	mov	r0, r3
 800c3da:	3714      	adds	r7, #20
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b085      	sub	sp, #20
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
 800c3ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	681a      	ldr	r2, [r3, #0]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c3fa:	683b      	ldr	r3, [r7, #0]
 800c3fc:	685a      	ldr	r2, [r3, #4]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c40a:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 800c40c:	683b      	ldr	r3, [r7, #0]
 800c40e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 800c410:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c412:	683b      	ldr	r3, [r7, #0]
 800c414:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 800c416:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800c418:	68fa      	ldr	r2, [r7, #12]
 800c41a:	4313      	orrs	r3, r2
 800c41c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c422:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	431a      	orrs	r2, r3
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0

}
 800c430:	4618      	mov	r0, r3
 800c432:	3714      	adds	r7, #20
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b088      	sub	sp, #32
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
 800c444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c44a:	2310      	movs	r3, #16
 800c44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c44e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c454:	2300      	movs	r3, #0
 800c456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c458:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c45c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c45e:	f107 0308 	add.w	r3, r7, #8
 800c462:	4619      	mov	r1, r3
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff ff73 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c46e:	2110      	movs	r1, #16
 800c470:	6878      	ldr	r0, [r7, #4]
 800c472:	f000 fa5f 	bl	800c934 <SDMMC_GetCmdResp1>
 800c476:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c478:	69fb      	ldr	r3, [r7, #28]
}
 800c47a:	4618      	mov	r0, r3
 800c47c:	3720      	adds	r7, #32
 800c47e:	46bd      	mov	sp, r7
 800c480:	bd80      	pop	{r7, pc}

0800c482 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c482:	b580      	push	{r7, lr}
 800c484:	b088      	sub	sp, #32
 800c486:	af00      	add	r7, sp, #0
 800c488:	6078      	str	r0, [r7, #4]
 800c48a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c490:	2311      	movs	r3, #17
 800c492:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c494:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c498:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c49a:	2300      	movs	r3, #0
 800c49c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c49e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4a2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4a4:	f107 0308 	add.w	r3, r7, #8
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff ff50 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c4b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4b4:	2111      	movs	r1, #17
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fa3c 	bl	800c934 <SDMMC_GetCmdResp1>
 800c4bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c4be:	69fb      	ldr	r3, [r7, #28]
}
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3720      	adds	r7, #32
 800c4c4:	46bd      	mov	sp, r7
 800c4c6:	bd80      	pop	{r7, pc}

0800c4c8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b088      	sub	sp, #32
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
 800c4d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c4d2:	683b      	ldr	r3, [r7, #0]
 800c4d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800c4d6:	2312      	movs	r3, #18
 800c4d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c4da:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c4de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c4e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c4ea:	f107 0308 	add.w	r3, r7, #8
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	6878      	ldr	r0, [r7, #4]
 800c4f2:	f7ff ff2d 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c4f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4fa:	2112      	movs	r1, #18
 800c4fc:	6878      	ldr	r0, [r7, #4]
 800c4fe:	f000 fa19 	bl	800c934 <SDMMC_GetCmdResp1>
 800c502:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c504:	69fb      	ldr	r3, [r7, #28]
}
 800c506:	4618      	mov	r0, r3
 800c508:	3720      	adds	r7, #32
 800c50a:	46bd      	mov	sp, r7
 800c50c:	bd80      	pop	{r7, pc}

0800c50e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c50e:	b580      	push	{r7, lr}
 800c510:	b088      	sub	sp, #32
 800c512:	af00      	add	r7, sp, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c518:	683b      	ldr	r3, [r7, #0]
 800c51a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800c51c:	2318      	movs	r3, #24
 800c51e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c520:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c526:	2300      	movs	r3, #0
 800c528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c52a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c52e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c530:	f107 0308 	add.w	r3, r7, #8
 800c534:	4619      	mov	r1, r3
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff ff0a 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800c53c:	f241 3288 	movw	r2, #5000	; 0x1388
 800c540:	2118      	movs	r1, #24
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f000 f9f6 	bl	800c934 <SDMMC_GetCmdResp1>
 800c548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c54a:	69fb      	ldr	r3, [r7, #28]
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3720      	adds	r7, #32
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b088      	sub	sp, #32
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800c562:	2319      	movs	r3, #25
 800c564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c566:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c56a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c56c:	2300      	movs	r3, #0
 800c56e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c574:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c576:	f107 0308 	add.w	r3, r7, #8
 800c57a:	4619      	mov	r1, r3
 800c57c:	6878      	ldr	r0, [r7, #4]
 800c57e:	f7ff fee7 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800c582:	f241 3288 	movw	r2, #5000	; 0x1388
 800c586:	2119      	movs	r1, #25
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f000 f9d3 	bl	800c934 <SDMMC_GetCmdResp1>
 800c58e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c590:	69fb      	ldr	r3, [r7, #28]
}
 800c592:	4618      	mov	r0, r3
 800c594:	3720      	adds	r7, #32
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b088      	sub	sp, #32
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800c5a4:	2300      	movs	r3, #0
 800c5a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800c5a8:	230c      	movs	r3, #12
 800c5aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c5ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c5b0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c5b2:	2300      	movs	r3, #0
 800c5b4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c5b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c5ba:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c5d4:	f107 0308 	add.w	r3, r7, #8
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7ff feb8 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800c5e0:	4a0b      	ldr	r2, [pc, #44]	; (800c610 <SDMMC_CmdStopTransfer+0x74>)
 800c5e2:	210c      	movs	r1, #12
 800c5e4:	6878      	ldr	r0, [r7, #4]
 800c5e6:	f000 f9a5 	bl	800c934 <SDMMC_GetCmdResp1>
 800c5ea:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	68db      	ldr	r3, [r3, #12]
 800c5f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c5f8:	69fb      	ldr	r3, [r7, #28]
 800c5fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c5fe:	d101      	bne.n	800c604 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800c600:	2300      	movs	r3, #0
 800c602:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800c604:	69fb      	ldr	r3, [r7, #28]
}
 800c606:	4618      	mov	r0, r3
 800c608:	3720      	adds	r7, #32
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	05f5e100 	.word	0x05f5e100

0800c614 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b088      	sub	sp, #32
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
 800c61c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800c622:	2307      	movs	r3, #7
 800c624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c626:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c62a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c62c:	2300      	movs	r3, #0
 800c62e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c634:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c636:	f107 0308 	add.w	r3, r7, #8
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f7ff fe87 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800c642:	f241 3288 	movw	r2, #5000	; 0x1388
 800c646:	2107      	movs	r1, #7
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 f973 	bl	800c934 <SDMMC_GetCmdResp1>
 800c64e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c650:	69fb      	ldr	r3, [r7, #28]
}
 800c652:	4618      	mov	r0, r3
 800c654:	3720      	adds	r7, #32
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800c65a:	b580      	push	{r7, lr}
 800c65c:	b088      	sub	sp, #32
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c662:	2300      	movs	r3, #0
 800c664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800c666:	2300      	movs	r3, #0
 800c668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800c66a:	2300      	movs	r3, #0
 800c66c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c66e:	2300      	movs	r3, #0
 800c670:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c676:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c678:	f107 0308 	add.w	r3, r7, #8
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f7ff fe66 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 fb97 	bl	800cdb8 <SDMMC_GetCmdError>
 800c68a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c68c:	69fb      	ldr	r3, [r7, #28]
}
 800c68e:	4618      	mov	r0, r3
 800c690:	3720      	adds	r7, #32
 800c692:	46bd      	mov	sp, r7
 800c694:	bd80      	pop	{r7, pc}

0800c696 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800c696:	b580      	push	{r7, lr}
 800c698:	b088      	sub	sp, #32
 800c69a:	af00      	add	r7, sp, #0
 800c69c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800c69e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800c6a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800c6a4:	2308      	movs	r3, #8
 800c6a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ae:	2300      	movs	r3, #0
 800c6b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6b6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6b8:	f107 0308 	add.w	r3, r7, #8
 800c6bc:	4619      	mov	r1, r3
 800c6be:	6878      	ldr	r0, [r7, #4]
 800c6c0:	f7ff fe46 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800c6c4:	6878      	ldr	r0, [r7, #4]
 800c6c6:	f000 fb29 	bl	800cd1c <SDMMC_GetCmdResp7>
 800c6ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c6cc:	69fb      	ldr	r3, [r7, #28]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3720      	adds	r7, #32
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b088      	sub	sp, #32
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	6078      	str	r0, [r7, #4]
 800c6de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800c6e0:	683b      	ldr	r3, [r7, #0]
 800c6e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800c6e4:	2337      	movs	r3, #55	; 0x37
 800c6e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c6e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c6ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c6f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c6f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c6f8:	f107 0308 	add.w	r3, r7, #8
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f7ff fe26 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800c704:	f241 3288 	movw	r2, #5000	; 0x1388
 800c708:	2137      	movs	r1, #55	; 0x37
 800c70a:	6878      	ldr	r0, [r7, #4]
 800c70c:	f000 f912 	bl	800c934 <SDMMC_GetCmdResp1>
 800c710:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c712:	69fb      	ldr	r3, [r7, #28]
}
 800c714:	4618      	mov	r0, r3
 800c716:	3720      	adds	r7, #32
 800c718:	46bd      	mov	sp, r7
 800c71a:	bd80      	pop	{r7, pc}

0800c71c <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b088      	sub	sp, #32
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800c72a:	2329      	movs	r3, #41	; 0x29
 800c72c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c72e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c732:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c734:	2300      	movs	r3, #0
 800c736:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c73c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c73e:	f107 0308 	add.w	r3, r7, #8
 800c742:	4619      	mov	r1, r3
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	f7ff fe03 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800c74a:	6878      	ldr	r0, [r7, #4]
 800c74c:	f000 fa2e 	bl	800cbac <SDMMC_GetCmdResp3>
 800c750:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c752:	69fb      	ldr	r3, [r7, #28]
}
 800c754:	4618      	mov	r0, r3
 800c756:	3720      	adds	r7, #32
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b088      	sub	sp, #32
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
 800c764:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800c766:	683b      	ldr	r3, [r7, #0]
 800c768:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800c76a:	2306      	movs	r3, #6
 800c76c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c76e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c772:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c774:	2300      	movs	r3, #0
 800c776:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c77c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c77e:	f107 0308 	add.w	r3, r7, #8
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f7ff fde3 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800c78a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c78e:	2106      	movs	r1, #6
 800c790:	6878      	ldr	r0, [r7, #4]
 800c792:	f000 f8cf 	bl	800c934 <SDMMC_GetCmdResp1>
 800c796:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c798:	69fb      	ldr	r3, [r7, #28]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3720      	adds	r7, #32
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}

0800c7a2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800c7a2:	b580      	push	{r7, lr}
 800c7a4:	b088      	sub	sp, #32
 800c7a6:	af00      	add	r7, sp, #0
 800c7a8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800c7ae:	2333      	movs	r3, #51	; 0x33
 800c7b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c7b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7b8:	2300      	movs	r3, #0
 800c7ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c7bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c7c0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c7c2:	f107 0308 	add.w	r3, r7, #8
 800c7c6:	4619      	mov	r1, r3
 800c7c8:	6878      	ldr	r0, [r7, #4]
 800c7ca:	f7ff fdc1 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800c7ce:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7d2:	2133      	movs	r1, #51	; 0x33
 800c7d4:	6878      	ldr	r0, [r7, #4]
 800c7d6:	f000 f8ad 	bl	800c934 <SDMMC_GetCmdResp1>
 800c7da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c7dc:	69fb      	ldr	r3, [r7, #28]
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3720      	adds	r7, #32
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b088      	sub	sp, #32
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800c7f2:	2302      	movs	r3, #2
 800c7f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c7f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c7fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c804:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c806:	f107 0308 	add.w	r3, r7, #8
 800c80a:	4619      	mov	r1, r3
 800c80c:	6878      	ldr	r0, [r7, #4]
 800c80e:	f7ff fd9f 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c812:	6878      	ldr	r0, [r7, #4]
 800c814:	f000 f980 	bl	800cb18 <SDMMC_GetCmdResp2>
 800c818:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c81a:	69fb      	ldr	r3, [r7, #28]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3720      	adds	r7, #32
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c824:	b580      	push	{r7, lr}
 800c826:	b088      	sub	sp, #32
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
 800c82c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800c832:	2309      	movs	r3, #9
 800c834:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800c836:	f44f 7340 	mov.w	r3, #768	; 0x300
 800c83a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c83c:	2300      	movs	r3, #0
 800c83e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c844:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c846:	f107 0308 	add.w	r3, r7, #8
 800c84a:	4619      	mov	r1, r3
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f7ff fd7f 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f000 f960 	bl	800cb18 <SDMMC_GetCmdResp2>
 800c858:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c85a:	69fb      	ldr	r3, [r7, #28]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3720      	adds	r7, #32
 800c860:	46bd      	mov	sp, r7
 800c862:	bd80      	pop	{r7, pc}

0800c864 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b088      	sub	sp, #32
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
 800c86c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800c86e:	2300      	movs	r3, #0
 800c870:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800c872:	2303      	movs	r3, #3
 800c874:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c876:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c87a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c87c:	2300      	movs	r3, #0
 800c87e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c884:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c886:	f107 0308 	add.w	r3, r7, #8
 800c88a:	4619      	mov	r1, r3
 800c88c:	6878      	ldr	r0, [r7, #4]
 800c88e:	f7ff fd5f 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	2103      	movs	r1, #3
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f9c8 	bl	800cc2c <SDMMC_GetCmdResp6>
 800c89c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c89e:	69fb      	ldr	r3, [r7, #28]
}
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	3720      	adds	r7, #32
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b088      	sub	sp, #32
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
 800c8b0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800c8b2:	683b      	ldr	r3, [r7, #0]
 800c8b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800c8b6:	230d      	movs	r3, #13
 800c8b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c8be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c8c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c8c8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c8ca:	f107 0308 	add.w	r3, r7, #8
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	6878      	ldr	r0, [r7, #4]
 800c8d2:	f7ff fd3d 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800c8d6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c8da:	210d      	movs	r1, #13
 800c8dc:	6878      	ldr	r0, [r7, #4]
 800c8de:	f000 f829 	bl	800c934 <SDMMC_GetCmdResp1>
 800c8e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c8e4:	69fb      	ldr	r3, [r7, #28]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3720      	adds	r7, #32
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800c8ee:	b580      	push	{r7, lr}
 800c8f0:	b088      	sub	sp, #32
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800c8fa:	230d      	movs	r3, #13
 800c8fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c8fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c902:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c904:	2300      	movs	r3, #0
 800c906:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800c90c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c90e:	f107 0308 	add.w	r3, r7, #8
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff fd1b 	bl	800c350 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800c91a:	f241 3288 	movw	r2, #5000	; 0x1388
 800c91e:	210d      	movs	r1, #13
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 f807 	bl	800c934 <SDMMC_GetCmdResp1>
 800c926:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c928:	69fb      	ldr	r3, [r7, #28]
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	3720      	adds	r7, #32
 800c92e:	46bd      	mov	sp, r7
 800c930:	bd80      	pop	{r7, pc}
	...

0800c934 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800c934:	b580      	push	{r7, lr}
 800c936:	b088      	sub	sp, #32
 800c938:	af00      	add	r7, sp, #0
 800c93a:	60f8      	str	r0, [r7, #12]
 800c93c:	460b      	mov	r3, r1
 800c93e:	607a      	str	r2, [r7, #4]
 800c940:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c942:	4b70      	ldr	r3, [pc, #448]	; (800cb04 <SDMMC_GetCmdResp1+0x1d0>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	4a70      	ldr	r2, [pc, #448]	; (800cb08 <SDMMC_GetCmdResp1+0x1d4>)
 800c948:	fba2 2303 	umull	r2, r3, r2, r3
 800c94c:	0a5a      	lsrs	r2, r3, #9
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	fb02 f303 	mul.w	r3, r2, r3
 800c954:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	1e5a      	subs	r2, r3, #1
 800c95a:	61fa      	str	r2, [r7, #28]
 800c95c:	2b00      	cmp	r3, #0
 800c95e:	d102      	bne.n	800c966 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800c960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800c964:	e0c9      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c96a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c96c:	69ba      	ldr	r2, [r7, #24]
 800c96e:	4b67      	ldr	r3, [pc, #412]	; (800cb0c <SDMMC_GetCmdResp1+0x1d8>)
 800c970:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c972:	2b00      	cmp	r3, #0
 800c974:	d0ef      	beq.n	800c956 <SDMMC_GetCmdResp1+0x22>
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1ea      	bne.n	800c956 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c984:	f003 0304 	and.w	r3, r3, #4
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d004      	beq.n	800c996 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2204      	movs	r2, #4
 800c990:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c992:	2304      	movs	r3, #4
 800c994:	e0b1      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c99a:	f003 0301 	and.w	r3, r3, #1
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d004      	beq.n	800c9ac <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	2201      	movs	r2, #1
 800c9a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9a8:	2301      	movs	r3, #1
 800c9aa:	e0a6      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4a58      	ldr	r2, [pc, #352]	; (800cb10 <SDMMC_GetCmdResp1+0x1dc>)
 800c9b0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c9b2:	68f8      	ldr	r0, [r7, #12]
 800c9b4:	f7ff fcf6 	bl	800c3a4 <SDMMC_GetCommandResponse>
 800c9b8:	4603      	mov	r3, r0
 800c9ba:	461a      	mov	r2, r3
 800c9bc:	7afb      	ldrb	r3, [r7, #11]
 800c9be:	4293      	cmp	r3, r2
 800c9c0:	d001      	beq.n	800c9c6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c9c2:	2301      	movs	r3, #1
 800c9c4:	e099      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800c9c6:	2100      	movs	r1, #0
 800c9c8:	68f8      	ldr	r0, [r7, #12]
 800c9ca:	f7ff fcf8 	bl	800c3be <SDMMC_GetResponse>
 800c9ce:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c9d0:	697a      	ldr	r2, [r7, #20]
 800c9d2:	4b50      	ldr	r3, [pc, #320]	; (800cb14 <SDMMC_GetCmdResp1+0x1e0>)
 800c9d4:	4013      	ands	r3, r2
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d101      	bne.n	800c9de <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e08d      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	da02      	bge.n	800c9ea <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c9e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c9e8:	e087      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d001      	beq.n	800c9f8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	e080      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c9f8:	697b      	ldr	r3, [r7, #20]
 800c9fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d001      	beq.n	800ca06 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ca02:	2380      	movs	r3, #128	; 0x80
 800ca04:	e079      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ca10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ca14:	e071      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800ca16:	697b      	ldr	r3, [r7, #20]
 800ca18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d002      	beq.n	800ca26 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ca20:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca24:	e069      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ca30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca34:	e061      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800ca36:	697b      	ldr	r3, [r7, #20]
 800ca38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d002      	beq.n	800ca46 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ca40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ca44:	e059      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ca50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ca54:	e051      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ca64:	e049      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800ca66:	697b      	ldr	r3, [r7, #20]
 800ca68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d002      	beq.n	800ca76 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ca70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ca74:	e041      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800ca80:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ca84:	e039      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d002      	beq.n	800ca96 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ca90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800ca94:	e031      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d002      	beq.n	800caa6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800caa0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800caa4:	e029      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800caac:	2b00      	cmp	r3, #0
 800caae:	d002      	beq.n	800cab6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cab0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cab4:	e021      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d002      	beq.n	800cac6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cac0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800cac4:	e019      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d002      	beq.n	800cad6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800cad4:	e011      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cad6:	697b      	ldr	r3, [r7, #20]
 800cad8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d002      	beq.n	800cae6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800cae0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cae4:	e009      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800cae6:	697b      	ldr	r3, [r7, #20]
 800cae8:	f003 0308 	and.w	r3, r3, #8
 800caec:	2b00      	cmp	r3, #0
 800caee:	d002      	beq.n	800caf6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800caf0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800caf4:	e001      	b.n	800cafa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800caf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cafa:	4618      	mov	r0, r3
 800cafc:	3720      	adds	r7, #32
 800cafe:	46bd      	mov	sp, r7
 800cb00:	bd80      	pop	{r7, pc}
 800cb02:	bf00      	nop
 800cb04:	2001b6a0 	.word	0x2001b6a0
 800cb08:	10624dd3 	.word	0x10624dd3
 800cb0c:	00200045 	.word	0x00200045
 800cb10:	002000c5 	.word	0x002000c5
 800cb14:	fdffe008 	.word	0xfdffe008

0800cb18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800cb18:	b480      	push	{r7}
 800cb1a:	b085      	sub	sp, #20
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cb20:	4b1f      	ldr	r3, [pc, #124]	; (800cba0 <SDMMC_GetCmdResp2+0x88>)
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a1f      	ldr	r2, [pc, #124]	; (800cba4 <SDMMC_GetCmdResp2+0x8c>)
 800cb26:	fba2 2303 	umull	r2, r3, r2, r3
 800cb2a:	0a5b      	lsrs	r3, r3, #9
 800cb2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb30:	fb02 f303 	mul.w	r3, r2, r3
 800cb34:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	1e5a      	subs	r2, r3, #1
 800cb3a:	60fa      	str	r2, [r7, #12]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d102      	bne.n	800cb46 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cb40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cb44:	e026      	b.n	800cb94 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb4a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d0ef      	beq.n	800cb36 <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d1ea      	bne.n	800cb36 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb64:	f003 0304 	and.w	r3, r3, #4
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d004      	beq.n	800cb76 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2204      	movs	r2, #4
 800cb70:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb72:	2304      	movs	r3, #4
 800cb74:	e00e      	b.n	800cb94 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cb7a:	f003 0301 	and.w	r3, r3, #1
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d004      	beq.n	800cb8c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	2201      	movs	r2, #1
 800cb86:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e003      	b.n	800cb94 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a06      	ldr	r2, [pc, #24]	; (800cba8 <SDMMC_GetCmdResp2+0x90>)
 800cb90:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	2001b6a0 	.word	0x2001b6a0
 800cba4:	10624dd3 	.word	0x10624dd3
 800cba8:	002000c5 	.word	0x002000c5

0800cbac <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800cbac:	b480      	push	{r7}
 800cbae:	b085      	sub	sp, #20
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cbb4:	4b1a      	ldr	r3, [pc, #104]	; (800cc20 <SDMMC_GetCmdResp3+0x74>)
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a1a      	ldr	r2, [pc, #104]	; (800cc24 <SDMMC_GetCmdResp3+0x78>)
 800cbba:	fba2 2303 	umull	r2, r3, r2, r3
 800cbbe:	0a5b      	lsrs	r3, r3, #9
 800cbc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbc4:	fb02 f303 	mul.w	r3, r2, r3
 800cbc8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	1e5a      	subs	r2, r3, #1
 800cbce:	60fa      	str	r2, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d102      	bne.n	800cbda <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cbd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cbd8:	e01b      	b.n	800cc12 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbde:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d0ef      	beq.n	800cbca <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d1ea      	bne.n	800cbca <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbf8:	f003 0304 	and.w	r3, r3, #4
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d004      	beq.n	800cc0a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	2204      	movs	r2, #4
 800cc04:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc06:	2304      	movs	r3, #4
 800cc08:	e003      	b.n	800cc12 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	4a06      	ldr	r2, [pc, #24]	; (800cc28 <SDMMC_GetCmdResp3+0x7c>)
 800cc0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3714      	adds	r7, #20
 800cc16:	46bd      	mov	sp, r7
 800cc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1c:	4770      	bx	lr
 800cc1e:	bf00      	nop
 800cc20:	2001b6a0 	.word	0x2001b6a0
 800cc24:	10624dd3 	.word	0x10624dd3
 800cc28:	002000c5 	.word	0x002000c5

0800cc2c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b088      	sub	sp, #32
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	60f8      	str	r0, [r7, #12]
 800cc34:	460b      	mov	r3, r1
 800cc36:	607a      	str	r2, [r7, #4]
 800cc38:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cc3a:	4b35      	ldr	r3, [pc, #212]	; (800cd10 <SDMMC_GetCmdResp6+0xe4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	4a35      	ldr	r2, [pc, #212]	; (800cd14 <SDMMC_GetCmdResp6+0xe8>)
 800cc40:	fba2 2303 	umull	r2, r3, r2, r3
 800cc44:	0a5b      	lsrs	r3, r3, #9
 800cc46:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc4a:	fb02 f303 	mul.w	r3, r2, r3
 800cc4e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	1e5a      	subs	r2, r3, #1
 800cc54:	61fa      	str	r2, [r7, #28]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d102      	bne.n	800cc60 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cc5a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cc5e:	e052      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc64:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc66:	69bb      	ldr	r3, [r7, #24]
 800cc68:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d0ef      	beq.n	800cc50 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc70:	69bb      	ldr	r3, [r7, #24]
 800cc72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cc76:	2b00      	cmp	r3, #0
 800cc78:	d1ea      	bne.n	800cc50 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc7e:	f003 0304 	and.w	r3, r3, #4
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d004      	beq.n	800cc90 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	2204      	movs	r2, #4
 800cc8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cc8c:	2304      	movs	r3, #4
 800cc8e:	e03a      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cc94:	f003 0301 	and.w	r3, r3, #1
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d004      	beq.n	800cca6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2201      	movs	r2, #1
 800cca0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca2:	2301      	movs	r3, #1
 800cca4:	e02f      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cca6:	68f8      	ldr	r0, [r7, #12]
 800cca8:	f7ff fb7c 	bl	800c3a4 <SDMMC_GetCommandResponse>
 800ccac:	4603      	mov	r3, r0
 800ccae:	461a      	mov	r2, r3
 800ccb0:	7afb      	ldrb	r3, [r7, #11]
 800ccb2:	4293      	cmp	r3, r2
 800ccb4:	d001      	beq.n	800ccba <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ccb6:	2301      	movs	r3, #1
 800ccb8:	e025      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	4a16      	ldr	r2, [pc, #88]	; (800cd18 <SDMMC_GetCmdResp6+0xec>)
 800ccbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ccc0:	2100      	movs	r1, #0
 800ccc2:	68f8      	ldr	r0, [r7, #12]
 800ccc4:	f7ff fb7b 	bl	800c3be <SDMMC_GetResponse>
 800ccc8:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d106      	bne.n	800cce2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	0c1b      	lsrs	r3, r3, #16
 800ccd8:	b29a      	uxth	r2, r3
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800ccde:	2300      	movs	r3, #0
 800cce0:	e011      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800cce2:	697b      	ldr	r3, [r7, #20]
 800cce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d002      	beq.n	800ccf2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ccec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ccf0:	e009      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800ccf2:	697b      	ldr	r3, [r7, #20]
 800ccf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d002      	beq.n	800cd02 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccfc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cd00:	e001      	b.n	800cd06 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cd02:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3720      	adds	r7, #32
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	2001b6a0 	.word	0x2001b6a0
 800cd14:	10624dd3 	.word	0x10624dd3
 800cd18:	002000c5 	.word	0x002000c5

0800cd1c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800cd1c:	b480      	push	{r7}
 800cd1e:	b085      	sub	sp, #20
 800cd20:	af00      	add	r7, sp, #0
 800cd22:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cd24:	4b22      	ldr	r3, [pc, #136]	; (800cdb0 <SDMMC_GetCmdResp7+0x94>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	4a22      	ldr	r2, [pc, #136]	; (800cdb4 <SDMMC_GetCmdResp7+0x98>)
 800cd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800cd2e:	0a5b      	lsrs	r3, r3, #9
 800cd30:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd34:	fb02 f303 	mul.w	r3, r2, r3
 800cd38:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	1e5a      	subs	r2, r3, #1
 800cd3e:	60fa      	str	r2, [r7, #12]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d102      	bne.n	800cd4a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cd44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cd48:	e02c      	b.n	800cda4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd4e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d0ef      	beq.n	800cd3a <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d1ea      	bne.n	800cd3a <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd68:	f003 0304 	and.w	r3, r3, #4
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d004      	beq.n	800cd7a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2204      	movs	r2, #4
 800cd74:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cd76:	2304      	movs	r3, #4
 800cd78:	e014      	b.n	800cda4 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d004      	beq.n	800cd90 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2201      	movs	r2, #1
 800cd8a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	e009      	b.n	800cda4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2240      	movs	r2, #64	; 0x40
 800cda0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800cda2:	2300      	movs	r3, #0

}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3714      	adds	r7, #20
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdae:	4770      	bx	lr
 800cdb0:	2001b6a0 	.word	0x2001b6a0
 800cdb4:	10624dd3 	.word	0x10624dd3

0800cdb8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800cdb8:	b480      	push	{r7}
 800cdba:	b085      	sub	sp, #20
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800cdc0:	4b11      	ldr	r3, [pc, #68]	; (800ce08 <SDMMC_GetCmdError+0x50>)
 800cdc2:	681b      	ldr	r3, [r3, #0]
 800cdc4:	4a11      	ldr	r2, [pc, #68]	; (800ce0c <SDMMC_GetCmdError+0x54>)
 800cdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdca:	0a5b      	lsrs	r3, r3, #9
 800cdcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdd0:	fb02 f303 	mul.w	r3, r2, r3
 800cdd4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	1e5a      	subs	r2, r3, #1
 800cdda:	60fa      	str	r2, [r7, #12]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d102      	bne.n	800cde6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cde0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cde4:	e009      	b.n	800cdfa <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cdea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d0f1      	beq.n	800cdd6 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	4a06      	ldr	r2, [pc, #24]	; (800ce10 <SDMMC_GetCmdError+0x58>)
 800cdf6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800cdf8:	2300      	movs	r3, #0
}
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	3714      	adds	r7, #20
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	2001b6a0 	.word	0x2001b6a0
 800ce0c:	10624dd3 	.word	0x10624dd3
 800ce10:	002000c5 	.word	0x002000c5

0800ce14 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/
  if (FATFS_LinkDriver(&SD_Driver, SDPath) != 0)
 800ce18:	4907      	ldr	r1, [pc, #28]	; (800ce38 <MX_FATFS_Init+0x24>)
 800ce1a:	4808      	ldr	r0, [pc, #32]	; (800ce3c <MX_FATFS_Init+0x28>)
 800ce1c:	f004 fd32 	bl	8011884 <FATFS_LinkDriver>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d002      	beq.n	800ce2c <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800ce26:	f04f 33ff 	mov.w	r3, #4294967295
 800ce2a:	e003      	b.n	800ce34 <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800ce2c:	4b04      	ldr	r3, [pc, #16]	; (800ce40 <MX_FATFS_Init+0x2c>)
 800ce2e:	2201      	movs	r2, #1
 800ce30:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800ce32:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	bd80      	pop	{r7, pc}
 800ce38:	20021080 	.word	0x20021080
 800ce3c:	08016730 	.word	0x08016730
 800ce40:	20021084 	.word	0x20021084

0800ce44 <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ce44:	b480      	push	{r7}
 800ce46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ce48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ce4a:	4618      	mov	r0, r3
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr

0800ce54 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b098      	sub	sp, #96	; 0x60
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_initialize */
  Stat = STA_NOINIT;
 800ce5e:	4b24      	ldr	r3, [pc, #144]	; (800cef0 <SD_initialize+0x9c>)
 800ce60:	2201      	movs	r2, #1
 800ce62:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef res1;
  HAL_SD_CardCSDTypeDef CSD;
  HAL_SD_CardInfoTypeDef pCardInfo;

  DSTATUS stat = RES_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f


  print_str("Init");
 800ce6a:	4822      	ldr	r0, [pc, #136]	; (800cef4 <SD_initialize+0xa0>)
 800ce6c:	f7f3 fba0 	bl	80005b0 <print_str>
  while(HAL_SD_Init(&hsd1)!=HAL_OK){
 800ce70:	bf00      	nop
 800ce72:	4821      	ldr	r0, [pc, #132]	; (800cef8 <SD_initialize+0xa4>)
 800ce74:	f7fb f9ba 	bl	80081ec <HAL_SD_Init>
 800ce78:	4603      	mov	r3, r0
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d003      	beq.n	800ce86 <SD_initialize+0x32>

	  print_str("Error");
 800ce7e:	481f      	ldr	r0, [pc, #124]	; (800cefc <SD_initialize+0xa8>)
 800ce80:	f7f3 fb96 	bl	80005b0 <print_str>
	  while(1){};
 800ce84:	e7fe      	b.n	800ce84 <SD_initialize+0x30>
  }

  HAL_SD_GetCardInfo(&hsd1, &pCardInfo);
 800ce86:	f107 030c 	add.w	r3, r7, #12
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	481a      	ldr	r0, [pc, #104]	; (800cef8 <SD_initialize+0xa4>)
 800ce8e:	f7fc f82d 	bl	8008eec <HAL_SD_GetCardInfo>

  print_param("type",pCardInfo.CardType);
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	4619      	mov	r1, r3
 800ce96:	481a      	ldr	r0, [pc, #104]	; (800cf00 <SD_initialize+0xac>)
 800ce98:	f7f3 fb6a 	bl	8000570 <print_param>
  print_param("ver",pCardInfo.CardVersion);
 800ce9c:	693b      	ldr	r3, [r7, #16]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	4818      	ldr	r0, [pc, #96]	; (800cf04 <SD_initialize+0xb0>)
 800cea2:	f7f3 fb65 	bl	8000570 <print_param>
  print_param("class",pCardInfo.Class);
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	4619      	mov	r1, r3
 800ceaa:	4817      	ldr	r0, [pc, #92]	; (800cf08 <SD_initialize+0xb4>)
 800ceac:	f7f3 fb60 	bl	8000570 <print_param>
  print_param("BlockNbr",pCardInfo.BlockNbr);
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	4815      	ldr	r0, [pc, #84]	; (800cf0c <SD_initialize+0xb8>)
 800ceb6:	f7f3 fb5b 	bl	8000570 <print_param>
  print_param("BlockSize",pCardInfo.BlockSize);
 800ceba:	6a3b      	ldr	r3, [r7, #32]
 800cebc:	4619      	mov	r1, r3
 800cebe:	4814      	ldr	r0, [pc, #80]	; (800cf10 <SD_initialize+0xbc>)
 800cec0:	f7f3 fb56 	bl	8000570 <print_param>
  print_param("LogBlockNbr",pCardInfo.LogBlockNbr);
 800cec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cec6:	4619      	mov	r1, r3
 800cec8:	4812      	ldr	r0, [pc, #72]	; (800cf14 <SD_initialize+0xc0>)
 800ceca:	f7f3 fb51 	bl	8000570 <print_param>
  print_param("LogBlockSize",pCardInfo.LogBlockSize);
 800cece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ced0:	4619      	mov	r1, r3
 800ced2:	4811      	ldr	r0, [pc, #68]	; (800cf18 <SD_initialize+0xc4>)
 800ced4:	f7f3 fb4c 	bl	8000570 <print_param>


  print_param("Speed",hsd1.SdCard.CardSpeed);
 800ced8:	4b07      	ldr	r3, [pc, #28]	; (800cef8 <SD_initialize+0xa4>)
 800ceda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cedc:	4619      	mov	r1, r3
 800cede:	480f      	ldr	r0, [pc, #60]	; (800cf1c <SD_initialize+0xc8>)
 800cee0:	f7f3 fb46 	bl	8000570 <print_param>

  return stat;
 800cee4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
  /* USER CODE END SD_initialize */
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3760      	adds	r7, #96	; 0x60
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	2001b6a9 	.word	0x2001b6a9
 800cef4:	0801656c 	.word	0x0801656c
 800cef8:	2001b980 	.word	0x2001b980
 800cefc:	08016574 	.word	0x08016574
 800cf00:	0801657c 	.word	0x0801657c
 800cf04:	08016584 	.word	0x08016584
 800cf08:	08016588 	.word	0x08016588
 800cf0c:	08016590 	.word	0x08016590
 800cf10:	0801659c 	.word	0x0801659c
 800cf14:	080165a8 	.word	0x080165a8
 800cf18:	080165b4 	.word	0x080165b4
 800cf1c:	080165c4 	.word	0x080165c4

0800cf20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	4603      	mov	r3, r0
 800cf28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN SD_status */
  Stat = STA_NOINIT;
 800cf2a:	4b05      	ldr	r3, [pc, #20]	; (800cf40 <SD_status+0x20>)
 800cf2c:	2201      	movs	r2, #1
 800cf2e:	701a      	strb	r2, [r3, #0]
  // HAL_SD_CardStateTypeDef pStatus;
  /* Place for user code (may require BSP functions/defines to be added to the project) */

  //pStatus=HAL_SD_GetCardState(&hsd1);
  //print_param("status",pStatus);
  return RES_OK;
 800cf30:	2300      	movs	r3, #0
  /* USER CODE END SD_status */
}
 800cf32:	4618      	mov	r0, r3
 800cf34:	370c      	adds	r7, #12
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	2001b6a9 	.word	0x2001b6a9

0800cf44 <SD_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cf44:	b580      	push	{r7, lr}
 800cf46:	b086      	sub	sp, #24
 800cf48:	af00      	add	r7, sp, #0
 800cf4a:	60b9      	str	r1, [r7, #8]
 800cf4c:	607a      	str	r2, [r7, #4]
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	4603      	mov	r3, r0
 800cf52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_read */
  uint32_t tickstart;
  sd_dma_rx_semaphore=0;
 800cf54:	4b19      	ldr	r3, [pc, #100]	; (800cfbc <SD_read+0x78>)
 800cf56:	2200      	movs	r2, #0
 800cf58:	601a      	str	r2, [r3, #0]

  while(HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_RECEIVING){}
 800cf5a:	bf00      	nop
 800cf5c:	4818      	ldr	r0, [pc, #96]	; (800cfc0 <SD_read+0x7c>)
 800cf5e:	f7fc f901 	bl	8009164 <HAL_SD_GetCardState>
 800cf62:	4603      	mov	r3, r0
 800cf64:	2b06      	cmp	r3, #6
 800cf66:	d0f9      	beq.n	800cf5c <SD_read+0x18>

  if(HAL_SD_ReadBlocks_DMA(&hsd1, buff, sector, count)==HAL_OK){
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	68b9      	ldr	r1, [r7, #8]
 800cf6e:	4814      	ldr	r0, [pc, #80]	; (800cfc0 <SD_read+0x7c>)
 800cf70:	f7fb fa54 	bl	800841c <HAL_SD_ReadBlocks_DMA>
 800cf74:	4603      	mov	r3, r0
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d11a      	bne.n	800cfb0 <SD_read+0x6c>
   tickstart = HAL_GetTick();
 800cf7a:	f7f5 f909 	bl	8002190 <HAL_GetTick>
 800cf7e:	6178      	str	r0, [r7, #20]
   while (sd_dma_rx_semaphore==0)
 800cf80:	e00a      	b.n	800cf98 <SD_read+0x54>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 800cf82:	f7f5 f905 	bl	8002190 <HAL_GetTick>
 800cf86:	4602      	mov	r2, r0
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	1ad3      	subs	r3, r2, r3
 800cf8c:	f242 720f 	movw	r2, #9999	; 0x270f
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d901      	bls.n	800cf98 <SD_read+0x54>
    	//print_param("rerr",0);
    	return RES_ERROR;
 800cf94:	2301      	movs	r3, #1
 800cf96:	e00c      	b.n	800cfb2 <SD_read+0x6e>
   while (sd_dma_rx_semaphore==0)
 800cf98:	4b08      	ldr	r3, [pc, #32]	; (800cfbc <SD_read+0x78>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d0f0      	beq.n	800cf82 <SD_read+0x3e>
    }
   }
   if(HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER){
 800cfa0:	4807      	ldr	r0, [pc, #28]	; (800cfc0 <SD_read+0x7c>)
 800cfa2:	f7fc f8df 	bl	8009164 <HAL_SD_GetCardState>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	2b04      	cmp	r3, #4
 800cfaa:	d101      	bne.n	800cfb0 <SD_read+0x6c>
     //print_str("rok",0);
     return RES_OK;
 800cfac:	2300      	movs	r3, #0
 800cfae:	e000      	b.n	800cfb2 <SD_read+0x6e>
   }
  }
  return RES_ERROR;
 800cfb0:	2301      	movs	r3, #1
  /* USER CODE END SD_read */
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3718      	adds	r7, #24
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}
 800cfba:	bf00      	nop
 800cfbc:	20021024 	.word	0x20021024
 800cfc0:	2001b980 	.word	0x2001b980

0800cfc4 <SD_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	60b9      	str	r1, [r7, #8]
 800cfcc:	607a      	str	r2, [r7, #4]
 800cfce:	603b      	str	r3, [r7, #0]
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN SD_write */

  uint32_t tickstart;
  sd_dma_tx_semaphore=0;
 800cfd4:	4b1b      	ldr	r3, [pc, #108]	; (800d044 <SD_write+0x80>)
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	601a      	str	r2, [r3, #0]
  HAL_StatusTypeDef write_status;

  /* Place for user code (may require BSP functions/defines to be added to the project) */

  while(HAL_SD_GetCardState(&hsd1)==HAL_SD_CARD_PROGRAMMING){}
 800cfda:	bf00      	nop
 800cfdc:	481a      	ldr	r0, [pc, #104]	; (800d048 <SD_write+0x84>)
 800cfde:	f7fc f8c1 	bl	8009164 <HAL_SD_GetCardState>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	2b07      	cmp	r3, #7
 800cfe6:	d0f9      	beq.n	800cfdc <SD_write+0x18>

  write_status=HAL_SD_WriteBlocks_DMA(&hsd1, buff, sector, count);
 800cfe8:	683b      	ldr	r3, [r7, #0]
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	68b9      	ldr	r1, [r7, #8]
 800cfee:	4816      	ldr	r0, [pc, #88]	; (800d048 <SD_write+0x84>)
 800cff0:	f7fb fabc 	bl	800856c <HAL_SD_WriteBlocks_DMA>
 800cff4:	4603      	mov	r3, r0
 800cff6:	75fb      	strb	r3, [r7, #23]
  if(write_status==HAL_OK){
 800cff8:	7dfb      	ldrb	r3, [r7, #23]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d117      	bne.n	800d02e <SD_write+0x6a>
   tickstart = HAL_GetTick();
 800cffe:	f7f5 f8c7 	bl	8002190 <HAL_GetTick>
 800d002:	6138      	str	r0, [r7, #16]
   while (sd_dma_tx_semaphore==0)
 800d004:	e00d      	b.n	800d022 <SD_write+0x5e>
   {
    if ((HAL_GetTick() - tickstart) >=  10000) {
 800d006:	f7f5 f8c3 	bl	8002190 <HAL_GetTick>
 800d00a:	4602      	mov	r2, r0
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	1ad3      	subs	r3, r2, r3
 800d010:	f242 720f 	movw	r2, #9999	; 0x270f
 800d014:	4293      	cmp	r3, r2
 800d016:	d904      	bls.n	800d022 <SD_write+0x5e>
    	print_str("write_tmout_err");
 800d018:	480c      	ldr	r0, [pc, #48]	; (800d04c <SD_write+0x88>)
 800d01a:	f7f3 fac9 	bl	80005b0 <print_str>
    	return RES_ERROR;
 800d01e:	2301      	movs	r3, #1
 800d020:	e00b      	b.n	800d03a <SD_write+0x76>
   while (sd_dma_tx_semaphore==0)
 800d022:	4b08      	ldr	r3, [pc, #32]	; (800d044 <SD_write+0x80>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d0ed      	beq.n	800d006 <SD_write+0x42>
    }
   }
   return RES_OK;
 800d02a:	2300      	movs	r3, #0
 800d02c:	e005      	b.n	800d03a <SD_write+0x76>

  }
  print_param("write_hal_err",write_status);
 800d02e:	7dfb      	ldrb	r3, [r7, #23]
 800d030:	4619      	mov	r1, r3
 800d032:	4807      	ldr	r0, [pc, #28]	; (800d050 <SD_write+0x8c>)
 800d034:	f7f3 fa9c 	bl	8000570 <print_param>
  return RES_ERROR;
 800d038:	2301      	movs	r3, #1
  /* USER CODE END SD_write */
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20021028 	.word	0x20021028
 800d048:	2001b980 	.word	0x2001b980
 800d04c:	080165cc 	.word	0x080165cc
 800d050:	080165dc 	.word	0x080165dc

0800d054 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d054:	b580      	push	{r7, lr}
 800d056:	b08c      	sub	sp, #48	; 0x30
 800d058:	af00      	add	r7, sp, #0
 800d05a:	4603      	mov	r3, r0
 800d05c:	603a      	str	r2, [r7, #0]
 800d05e:	71fb      	strb	r3, [r7, #7]
 800d060:	460b      	mov	r3, r1
 800d062:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN SD_ioctl */
  DRESULT res = RES_ERROR;
 800d064:	2301      	movs	r3, #1
 800d066:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_SD_CardInfoTypeDef  CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d06a:	4b26      	ldr	r3, [pc, #152]	; (800d104 <SD_ioctl+0xb0>)
 800d06c:	781b      	ldrb	r3, [r3, #0]
 800d06e:	b2db      	uxtb	r3, r3
 800d070:	f003 0301 	and.w	r3, r3, #1
 800d074:	2b00      	cmp	r3, #0
 800d076:	d001      	beq.n	800d07c <SD_ioctl+0x28>
 800d078:	2303      	movs	r3, #3
 800d07a:	e03f      	b.n	800d0fc <SD_ioctl+0xa8>

  switch (cmd)
 800d07c:	79bb      	ldrb	r3, [r7, #6]
 800d07e:	2b03      	cmp	r3, #3
 800d080:	d837      	bhi.n	800d0f2 <SD_ioctl+0x9e>
 800d082:	a201      	add	r2, pc, #4	; (adr r2, 800d088 <SD_ioctl+0x34>)
 800d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d088:	0800d099 	.word	0x0800d099
 800d08c:	0800d0a1 	.word	0x0800d0a1
 800d090:	0800d0bb 	.word	0x0800d0bb
 800d094:	0800d0d7 	.word	0x0800d0d7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d09e:	e02b      	b.n	800d0f8 <SD_ioctl+0xa4>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800d0a0:	f107 0308 	add.w	r3, r7, #8
 800d0a4:	4619      	mov	r1, r3
 800d0a6:	4818      	ldr	r0, [pc, #96]	; (800d108 <SD_ioctl+0xb4>)
 800d0a8:	f7fb ff20 	bl	8008eec <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d0ac:	6a3a      	ldr	r2, [r7, #32]
 800d0ae:	683b      	ldr	r3, [r7, #0]
 800d0b0:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0b8:	e01e      	b.n	800d0f8 <SD_ioctl+0xa4>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800d0ba:	f107 0308 	add.w	r3, r7, #8
 800d0be:	4619      	mov	r1, r3
 800d0c0:	4811      	ldr	r0, [pc, #68]	; (800d108 <SD_ioctl+0xb4>)
 800d0c2:	f7fb ff13 	bl	8008eec <HAL_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0c8:	b29a      	uxth	r2, r3
 800d0ca:	683b      	ldr	r3, [r7, #0]
 800d0cc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d0ce:	2300      	movs	r3, #0
 800d0d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0d4:	e010      	b.n	800d0f8 <SD_ioctl+0xa4>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
	HAL_SD_GetCardInfo(&hsd1, &CardInfo);
 800d0d6:	f107 0308 	add.w	r3, r7, #8
 800d0da:	4619      	mov	r1, r3
 800d0dc:	480a      	ldr	r0, [pc, #40]	; (800d108 <SD_ioctl+0xb4>)
 800d0de:	f7fb ff05 	bl	8008eec <HAL_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d0e4:	0a5a      	lsrs	r2, r3, #9
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	601a      	str	r2, [r3, #0]
	res = RES_OK;
 800d0ea:	2300      	movs	r3, #0
 800d0ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0f0:	e002      	b.n	800d0f8 <SD_ioctl+0xa4>

  default:
    res = RES_PARERR;
 800d0f2:	2304      	movs	r3, #4
 800d0f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d0f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f

  /* USER CODE END SD_ioctl */
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3730      	adds	r7, #48	; 0x30
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}
 800d104:	2001b6a9 	.word	0x2001b6a9
 800d108:	2001b980 	.word	0x2001b980

0800d10c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	4603      	mov	r3, r0
 800d114:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d116:	79fb      	ldrb	r3, [r7, #7]
 800d118:	4a08      	ldr	r2, [pc, #32]	; (800d13c <disk_status+0x30>)
 800d11a:	009b      	lsls	r3, r3, #2
 800d11c:	4413      	add	r3, r2
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	685b      	ldr	r3, [r3, #4]
 800d122:	79fa      	ldrb	r2, [r7, #7]
 800d124:	4905      	ldr	r1, [pc, #20]	; (800d13c <disk_status+0x30>)
 800d126:	440a      	add	r2, r1
 800d128:	7a12      	ldrb	r2, [r2, #8]
 800d12a:	4610      	mov	r0, r2
 800d12c:	4798      	blx	r3
 800d12e:	4603      	mov	r3, r0
 800d130:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d132:	7bfb      	ldrb	r3, [r7, #15]
}
 800d134:	4618      	mov	r0, r3
 800d136:	3710      	adds	r7, #16
 800d138:	46bd      	mov	sp, r7
 800d13a:	bd80      	pop	{r7, pc}
 800d13c:	200210b0 	.word	0x200210b0

0800d140 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	4603      	mov	r3, r0
 800d148:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d14a:	2300      	movs	r3, #0
 800d14c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d14e:	79fb      	ldrb	r3, [r7, #7]
 800d150:	4a0d      	ldr	r2, [pc, #52]	; (800d188 <disk_initialize+0x48>)
 800d152:	5cd3      	ldrb	r3, [r2, r3]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d111      	bne.n	800d17c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d158:	79fb      	ldrb	r3, [r7, #7]
 800d15a:	4a0b      	ldr	r2, [pc, #44]	; (800d188 <disk_initialize+0x48>)
 800d15c:	2101      	movs	r1, #1
 800d15e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d160:	79fb      	ldrb	r3, [r7, #7]
 800d162:	4a09      	ldr	r2, [pc, #36]	; (800d188 <disk_initialize+0x48>)
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	4413      	add	r3, r2
 800d168:	685b      	ldr	r3, [r3, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	79fa      	ldrb	r2, [r7, #7]
 800d16e:	4906      	ldr	r1, [pc, #24]	; (800d188 <disk_initialize+0x48>)
 800d170:	440a      	add	r2, r1
 800d172:	7a12      	ldrb	r2, [r2, #8]
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	4603      	mov	r3, r0
 800d17a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d17c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3710      	adds	r7, #16
 800d182:	46bd      	mov	sp, r7
 800d184:	bd80      	pop	{r7, pc}
 800d186:	bf00      	nop
 800d188:	200210b0 	.word	0x200210b0

0800d18c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d18c:	b590      	push	{r4, r7, lr}
 800d18e:	b087      	sub	sp, #28
 800d190:	af00      	add	r7, sp, #0
 800d192:	60b9      	str	r1, [r7, #8]
 800d194:	607a      	str	r2, [r7, #4]
 800d196:	603b      	str	r3, [r7, #0]
 800d198:	4603      	mov	r3, r0
 800d19a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	4a0a      	ldr	r2, [pc, #40]	; (800d1c8 <disk_read+0x3c>)
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4413      	add	r3, r2
 800d1a4:	685b      	ldr	r3, [r3, #4]
 800d1a6:	689c      	ldr	r4, [r3, #8]
 800d1a8:	7bfb      	ldrb	r3, [r7, #15]
 800d1aa:	4a07      	ldr	r2, [pc, #28]	; (800d1c8 <disk_read+0x3c>)
 800d1ac:	4413      	add	r3, r2
 800d1ae:	7a18      	ldrb	r0, [r3, #8]
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	687a      	ldr	r2, [r7, #4]
 800d1b4:	68b9      	ldr	r1, [r7, #8]
 800d1b6:	47a0      	blx	r4
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	371c      	adds	r7, #28
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd90      	pop	{r4, r7, pc}
 800d1c6:	bf00      	nop
 800d1c8:	200210b0 	.word	0x200210b0

0800d1cc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d1cc:	b590      	push	{r4, r7, lr}
 800d1ce:	b087      	sub	sp, #28
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	60b9      	str	r1, [r7, #8]
 800d1d4:	607a      	str	r2, [r7, #4]
 800d1d6:	603b      	str	r3, [r7, #0]
 800d1d8:	4603      	mov	r3, r0
 800d1da:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d1dc:	7bfb      	ldrb	r3, [r7, #15]
 800d1de:	4a0a      	ldr	r2, [pc, #40]	; (800d208 <disk_write+0x3c>)
 800d1e0:	009b      	lsls	r3, r3, #2
 800d1e2:	4413      	add	r3, r2
 800d1e4:	685b      	ldr	r3, [r3, #4]
 800d1e6:	68dc      	ldr	r4, [r3, #12]
 800d1e8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ea:	4a07      	ldr	r2, [pc, #28]	; (800d208 <disk_write+0x3c>)
 800d1ec:	4413      	add	r3, r2
 800d1ee:	7a18      	ldrb	r0, [r3, #8]
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	687a      	ldr	r2, [r7, #4]
 800d1f4:	68b9      	ldr	r1, [r7, #8]
 800d1f6:	47a0      	blx	r4
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	75fb      	strb	r3, [r7, #23]
  return res;
 800d1fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1fe:	4618      	mov	r0, r3
 800d200:	371c      	adds	r7, #28
 800d202:	46bd      	mov	sp, r7
 800d204:	bd90      	pop	{r4, r7, pc}
 800d206:	bf00      	nop
 800d208:	200210b0 	.word	0x200210b0

0800d20c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	4603      	mov	r3, r0
 800d214:	603a      	str	r2, [r7, #0]
 800d216:	71fb      	strb	r3, [r7, #7]
 800d218:	460b      	mov	r3, r1
 800d21a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d21c:	79fb      	ldrb	r3, [r7, #7]
 800d21e:	4a09      	ldr	r2, [pc, #36]	; (800d244 <disk_ioctl+0x38>)
 800d220:	009b      	lsls	r3, r3, #2
 800d222:	4413      	add	r3, r2
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	691b      	ldr	r3, [r3, #16]
 800d228:	79fa      	ldrb	r2, [r7, #7]
 800d22a:	4906      	ldr	r1, [pc, #24]	; (800d244 <disk_ioctl+0x38>)
 800d22c:	440a      	add	r2, r1
 800d22e:	7a10      	ldrb	r0, [r2, #8]
 800d230:	79b9      	ldrb	r1, [r7, #6]
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	4798      	blx	r3
 800d236:	4603      	mov	r3, r0
 800d238:	73fb      	strb	r3, [r7, #15]
  return res;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	200210b0 	.word	0x200210b0

0800d248 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	3301      	adds	r3, #1
 800d254:	781b      	ldrb	r3, [r3, #0]
 800d256:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d258:	89fb      	ldrh	r3, [r7, #14]
 800d25a:	021b      	lsls	r3, r3, #8
 800d25c:	b21a      	sxth	r2, r3
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	781b      	ldrb	r3, [r3, #0]
 800d262:	b21b      	sxth	r3, r3
 800d264:	4313      	orrs	r3, r2
 800d266:	b21b      	sxth	r3, r3
 800d268:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d26a:	89fb      	ldrh	r3, [r7, #14]
}
 800d26c:	4618      	mov	r0, r3
 800d26e:	3714      	adds	r7, #20
 800d270:	46bd      	mov	sp, r7
 800d272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d276:	4770      	bx	lr

0800d278 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d278:	b480      	push	{r7}
 800d27a:	b085      	sub	sp, #20
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	3303      	adds	r3, #3
 800d284:	781b      	ldrb	r3, [r3, #0]
 800d286:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	021b      	lsls	r3, r3, #8
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	3202      	adds	r2, #2
 800d290:	7812      	ldrb	r2, [r2, #0]
 800d292:	4313      	orrs	r3, r2
 800d294:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	021b      	lsls	r3, r3, #8
 800d29a:	687a      	ldr	r2, [r7, #4]
 800d29c:	3201      	adds	r2, #1
 800d29e:	7812      	ldrb	r2, [r2, #0]
 800d2a0:	4313      	orrs	r3, r2
 800d2a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	021b      	lsls	r3, r3, #8
 800d2a8:	687a      	ldr	r2, [r7, #4]
 800d2aa:	7812      	ldrb	r2, [r2, #0]
 800d2ac:	4313      	orrs	r3, r2
 800d2ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
}
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	3714      	adds	r7, #20
 800d2b6:	46bd      	mov	sp, r7
 800d2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2bc:	4770      	bx	lr

0800d2be <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800d2be:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d2c2:	b09d      	sub	sp, #116	; 0x74
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6678      	str	r0, [r7, #100]	; 0x64
	QWORD rv;

	rv = ptr[7];
 800d2c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2ca:	3307      	adds	r3, #7
 800d2cc:	781b      	ldrb	r3, [r3, #0]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	469a      	mov	sl, r3
 800d2d4:	4693      	mov	fp, r2
 800d2d6:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[6];
 800d2da:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d2de:	f04f 0000 	mov.w	r0, #0
 800d2e2:	f04f 0100 	mov.w	r1, #0
 800d2e6:	0219      	lsls	r1, r3, #8
 800d2e8:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d2ec:	0210      	lsls	r0, r2, #8
 800d2ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d2f0:	3306      	adds	r3, #6
 800d2f2:	781b      	ldrb	r3, [r3, #0]
 800d2f4:	b2db      	uxtb	r3, r3
 800d2f6:	2200      	movs	r2, #0
 800d2f8:	461c      	mov	r4, r3
 800d2fa:	4615      	mov	r5, r2
 800d2fc:	ea40 0804 	orr.w	r8, r0, r4
 800d300:	ea41 0905 	orr.w	r9, r1, r5
 800d304:	e9c7 891a 	strd	r8, r9, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[5];
 800d308:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d30c:	f04f 0000 	mov.w	r0, #0
 800d310:	f04f 0100 	mov.w	r1, #0
 800d314:	0219      	lsls	r1, r3, #8
 800d316:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d31a:	0210      	lsls	r0, r2, #8
 800d31c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d31e:	3305      	adds	r3, #5
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	b2db      	uxtb	r3, r3
 800d324:	2200      	movs	r2, #0
 800d326:	65bb      	str	r3, [r7, #88]	; 0x58
 800d328:	65fa      	str	r2, [r7, #92]	; 0x5c
 800d32a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 800d32e:	4623      	mov	r3, r4
 800d330:	4303      	orrs	r3, r0
 800d332:	62bb      	str	r3, [r7, #40]	; 0x28
 800d334:	462b      	mov	r3, r5
 800d336:	430b      	orrs	r3, r1
 800d338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d33a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800d33e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[4];
 800d342:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d346:	f04f 0000 	mov.w	r0, #0
 800d34a:	f04f 0100 	mov.w	r1, #0
 800d34e:	0219      	lsls	r1, r3, #8
 800d350:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d354:	0210      	lsls	r0, r2, #8
 800d356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d358:	3304      	adds	r3, #4
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	b2db      	uxtb	r3, r3
 800d35e:	2200      	movs	r2, #0
 800d360:	653b      	str	r3, [r7, #80]	; 0x50
 800d362:	657a      	str	r2, [r7, #84]	; 0x54
 800d364:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 800d368:	4623      	mov	r3, r4
 800d36a:	4303      	orrs	r3, r0
 800d36c:	623b      	str	r3, [r7, #32]
 800d36e:	462b      	mov	r3, r5
 800d370:	430b      	orrs	r3, r1
 800d372:	627b      	str	r3, [r7, #36]	; 0x24
 800d374:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800d378:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[3];
 800d37c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d380:	f04f 0000 	mov.w	r0, #0
 800d384:	f04f 0100 	mov.w	r1, #0
 800d388:	0219      	lsls	r1, r3, #8
 800d38a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d38e:	0210      	lsls	r0, r2, #8
 800d390:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d392:	3303      	adds	r3, #3
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b2db      	uxtb	r3, r3
 800d398:	2200      	movs	r2, #0
 800d39a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d39c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800d39e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 800d3a2:	4623      	mov	r3, r4
 800d3a4:	4303      	orrs	r3, r0
 800d3a6:	61bb      	str	r3, [r7, #24]
 800d3a8:	462b      	mov	r3, r5
 800d3aa:	430b      	orrs	r3, r1
 800d3ac:	61fb      	str	r3, [r7, #28]
 800d3ae:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800d3b2:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[2];
 800d3b6:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800d3ba:	f04f 0000 	mov.w	r0, #0
 800d3be:	f04f 0100 	mov.w	r1, #0
 800d3c2:	0219      	lsls	r1, r3, #8
 800d3c4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800d3c8:	0210      	lsls	r0, r2, #8
 800d3ca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d3cc:	3302      	adds	r3, #2
 800d3ce:	781b      	ldrb	r3, [r3, #0]
 800d3d0:	b2db      	uxtb	r3, r3
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	643b      	str	r3, [r7, #64]	; 0x40
 800d3d6:	647a      	str	r2, [r7, #68]	; 0x44
 800d3d8:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 800d3dc:	4623      	mov	r3, r4
 800d3de:	4303      	orrs	r3, r0
 800d3e0:	613b      	str	r3, [r7, #16]
 800d3e2:	462b      	mov	r3, r5
 800d3e4:	430b      	orrs	r3, r1
 800d3e6:	617b      	str	r3, [r7, #20]
 800d3e8:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800d3ec:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[1];
 800d3f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d3f4:	f04f 0200 	mov.w	r2, #0
 800d3f8:	f04f 0300 	mov.w	r3, #0
 800d3fc:	020b      	lsls	r3, r1, #8
 800d3fe:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d402:	0202      	lsls	r2, r0, #8
 800d404:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d406:	3101      	adds	r1, #1
 800d408:	7809      	ldrb	r1, [r1, #0]
 800d40a:	b2c9      	uxtb	r1, r1
 800d40c:	2000      	movs	r0, #0
 800d40e:	63b9      	str	r1, [r7, #56]	; 0x38
 800d410:	63f8      	str	r0, [r7, #60]	; 0x3c
 800d412:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	; 0x38
 800d416:	4621      	mov	r1, r4
 800d418:	4311      	orrs	r1, r2
 800d41a:	60b9      	str	r1, [r7, #8]
 800d41c:	4629      	mov	r1, r5
 800d41e:	4319      	orrs	r1, r3
 800d420:	60f9      	str	r1, [r7, #12]
 800d422:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800d426:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	rv = rv << 8 | ptr[0];
 800d42a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800d42e:	f04f 0200 	mov.w	r2, #0
 800d432:	f04f 0300 	mov.w	r3, #0
 800d436:	020b      	lsls	r3, r1, #8
 800d438:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d43c:	0202      	lsls	r2, r0, #8
 800d43e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d440:	7809      	ldrb	r1, [r1, #0]
 800d442:	b2c9      	uxtb	r1, r1
 800d444:	2000      	movs	r0, #0
 800d446:	6339      	str	r1, [r7, #48]	; 0x30
 800d448:	6378      	str	r0, [r7, #52]	; 0x34
 800d44a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800d44e:	4621      	mov	r1, r4
 800d450:	4311      	orrs	r1, r2
 800d452:	6039      	str	r1, [r7, #0]
 800d454:	4629      	mov	r1, r5
 800d456:	4319      	orrs	r1, r3
 800d458:	6079      	str	r1, [r7, #4]
 800d45a:	e9d7 3400 	ldrd	r3, r4, [r7]
 800d45e:	e9c7 341a 	strd	r3, r4, [r7, #104]	; 0x68
	return rv;
 800d462:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
}
 800d466:	4610      	mov	r0, r2
 800d468:	4619      	mov	r1, r3
 800d46a:	3774      	adds	r7, #116	; 0x74
 800d46c:	46bd      	mov	sp, r7
 800d46e:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800d472:	4770      	bx	lr

0800d474 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d474:	b480      	push	{r7}
 800d476:	b083      	sub	sp, #12
 800d478:	af00      	add	r7, sp, #0
 800d47a:	6078      	str	r0, [r7, #4]
 800d47c:	460b      	mov	r3, r1
 800d47e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	887a      	ldrh	r2, [r7, #2]
 800d488:	b2d2      	uxtb	r2, r2
 800d48a:	701a      	strb	r2, [r3, #0]
 800d48c:	887b      	ldrh	r3, [r7, #2]
 800d48e:	0a1b      	lsrs	r3, r3, #8
 800d490:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	1c5a      	adds	r2, r3, #1
 800d496:	607a      	str	r2, [r7, #4]
 800d498:	887a      	ldrh	r2, [r7, #2]
 800d49a:	b2d2      	uxtb	r2, r2
 800d49c:	701a      	strb	r2, [r3, #0]
}
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
 800d4b2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	1c5a      	adds	r2, r3, #1
 800d4b8:	607a      	str	r2, [r7, #4]
 800d4ba:	683a      	ldr	r2, [r7, #0]
 800d4bc:	b2d2      	uxtb	r2, r2
 800d4be:	701a      	strb	r2, [r3, #0]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	0a1b      	lsrs	r3, r3, #8
 800d4c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	1c5a      	adds	r2, r3, #1
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	683a      	ldr	r2, [r7, #0]
 800d4ce:	b2d2      	uxtb	r2, r2
 800d4d0:	701a      	strb	r2, [r3, #0]
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	0a1b      	lsrs	r3, r3, #8
 800d4d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	607a      	str	r2, [r7, #4]
 800d4de:	683a      	ldr	r2, [r7, #0]
 800d4e0:	b2d2      	uxtb	r2, r2
 800d4e2:	701a      	strb	r2, [r3, #0]
 800d4e4:	683b      	ldr	r3, [r7, #0]
 800d4e6:	0a1b      	lsrs	r3, r3, #8
 800d4e8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	1c5a      	adds	r2, r3, #1
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	683a      	ldr	r2, [r7, #0]
 800d4f2:	b2d2      	uxtb	r2, r2
 800d4f4:	701a      	strb	r2, [r3, #0]
}
 800d4f6:	bf00      	nop
 800d4f8:	370c      	adds	r7, #12
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d500:	4770      	bx	lr

0800d502 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 800d502:	b480      	push	{r7}
 800d504:	b085      	sub	sp, #20
 800d506:	af00      	add	r7, sp, #0
 800d508:	60f8      	str	r0, [r7, #12]
 800d50a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	1c5a      	adds	r2, r3, #1
 800d512:	60fa      	str	r2, [r7, #12]
 800d514:	783a      	ldrb	r2, [r7, #0]
 800d516:	701a      	strb	r2, [r3, #0]
 800d518:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d51c:	f04f 0200 	mov.w	r2, #0
 800d520:	f04f 0300 	mov.w	r3, #0
 800d524:	0a02      	lsrs	r2, r0, #8
 800d526:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d52a:	0a0b      	lsrs	r3, r1, #8
 800d52c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	1c5a      	adds	r2, r3, #1
 800d534:	60fa      	str	r2, [r7, #12]
 800d536:	783a      	ldrb	r2, [r7, #0]
 800d538:	701a      	strb	r2, [r3, #0]
 800d53a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d53e:	f04f 0200 	mov.w	r2, #0
 800d542:	f04f 0300 	mov.w	r3, #0
 800d546:	0a02      	lsrs	r2, r0, #8
 800d548:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d54c:	0a0b      	lsrs	r3, r1, #8
 800d54e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	1c5a      	adds	r2, r3, #1
 800d556:	60fa      	str	r2, [r7, #12]
 800d558:	783a      	ldrb	r2, [r7, #0]
 800d55a:	701a      	strb	r2, [r3, #0]
 800d55c:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d560:	f04f 0200 	mov.w	r2, #0
 800d564:	f04f 0300 	mov.w	r3, #0
 800d568:	0a02      	lsrs	r2, r0, #8
 800d56a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d56e:	0a0b      	lsrs	r3, r1, #8
 800d570:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	1c5a      	adds	r2, r3, #1
 800d578:	60fa      	str	r2, [r7, #12]
 800d57a:	783a      	ldrb	r2, [r7, #0]
 800d57c:	701a      	strb	r2, [r3, #0]
 800d57e:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d582:	f04f 0200 	mov.w	r2, #0
 800d586:	f04f 0300 	mov.w	r3, #0
 800d58a:	0a02      	lsrs	r2, r0, #8
 800d58c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d590:	0a0b      	lsrs	r3, r1, #8
 800d592:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	1c5a      	adds	r2, r3, #1
 800d59a:	60fa      	str	r2, [r7, #12]
 800d59c:	783a      	ldrb	r2, [r7, #0]
 800d59e:	701a      	strb	r2, [r3, #0]
 800d5a0:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5a4:	f04f 0200 	mov.w	r2, #0
 800d5a8:	f04f 0300 	mov.w	r3, #0
 800d5ac:	0a02      	lsrs	r2, r0, #8
 800d5ae:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d5b2:	0a0b      	lsrs	r3, r1, #8
 800d5b4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	1c5a      	adds	r2, r3, #1
 800d5bc:	60fa      	str	r2, [r7, #12]
 800d5be:	783a      	ldrb	r2, [r7, #0]
 800d5c0:	701a      	strb	r2, [r3, #0]
 800d5c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5c6:	f04f 0200 	mov.w	r2, #0
 800d5ca:	f04f 0300 	mov.w	r3, #0
 800d5ce:	0a02      	lsrs	r2, r0, #8
 800d5d0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d5d4:	0a0b      	lsrs	r3, r1, #8
 800d5d6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	1c5a      	adds	r2, r3, #1
 800d5de:	60fa      	str	r2, [r7, #12]
 800d5e0:	783a      	ldrb	r2, [r7, #0]
 800d5e2:	701a      	strb	r2, [r3, #0]
 800d5e4:	e9d7 0100 	ldrd	r0, r1, [r7]
 800d5e8:	f04f 0200 	mov.w	r2, #0
 800d5ec:	f04f 0300 	mov.w	r3, #0
 800d5f0:	0a02      	lsrs	r2, r0, #8
 800d5f2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800d5f6:	0a0b      	lsrs	r3, r1, #8
 800d5f8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	1c5a      	adds	r2, r3, #1
 800d600:	60fa      	str	r2, [r7, #12]
 800d602:	783a      	ldrb	r2, [r7, #0]
 800d604:	701a      	strb	r2, [r3, #0]
}
 800d606:	bf00      	nop
 800d608:	3714      	adds	r7, #20
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr

0800d612 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d612:	b480      	push	{r7}
 800d614:	b087      	sub	sp, #28
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d61e:	68fb      	ldr	r3, [r7, #12]
 800d620:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d622:	68bb      	ldr	r3, [r7, #8]
 800d624:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d00d      	beq.n	800d648 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d62c:	693a      	ldr	r2, [r7, #16]
 800d62e:	1c53      	adds	r3, r2, #1
 800d630:	613b      	str	r3, [r7, #16]
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	1c59      	adds	r1, r3, #1
 800d636:	6179      	str	r1, [r7, #20]
 800d638:	7812      	ldrb	r2, [r2, #0]
 800d63a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	3b01      	subs	r3, #1
 800d640:	607b      	str	r3, [r7, #4]
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d1f1      	bne.n	800d62c <mem_cpy+0x1a>
	}
}
 800d648:	bf00      	nop
 800d64a:	371c      	adds	r7, #28
 800d64c:	46bd      	mov	sp, r7
 800d64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d652:	4770      	bx	lr

0800d654 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d654:	b480      	push	{r7}
 800d656:	b087      	sub	sp, #28
 800d658:	af00      	add	r7, sp, #0
 800d65a:	60f8      	str	r0, [r7, #12]
 800d65c:	60b9      	str	r1, [r7, #8]
 800d65e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d660:	68fb      	ldr	r3, [r7, #12]
 800d662:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	1c5a      	adds	r2, r3, #1
 800d668:	617a      	str	r2, [r7, #20]
 800d66a:	68ba      	ldr	r2, [r7, #8]
 800d66c:	b2d2      	uxtb	r2, r2
 800d66e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	3b01      	subs	r3, #1
 800d674:	607b      	str	r3, [r7, #4]
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d1f3      	bne.n	800d664 <mem_set+0x10>
}
 800d67c:	bf00      	nop
 800d67e:	bf00      	nop
 800d680:	371c      	adds	r7, #28
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d68a:	b480      	push	{r7}
 800d68c:	b089      	sub	sp, #36	; 0x24
 800d68e:	af00      	add	r7, sp, #0
 800d690:	60f8      	str	r0, [r7, #12]
 800d692:	60b9      	str	r1, [r7, #8]
 800d694:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	61fb      	str	r3, [r7, #28]
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d6a2:	69fb      	ldr	r3, [r7, #28]
 800d6a4:	1c5a      	adds	r2, r3, #1
 800d6a6:	61fa      	str	r2, [r7, #28]
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	4619      	mov	r1, r3
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	1c5a      	adds	r2, r3, #1
 800d6b0:	61ba      	str	r2, [r7, #24]
 800d6b2:	781b      	ldrb	r3, [r3, #0]
 800d6b4:	1acb      	subs	r3, r1, r3
 800d6b6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3b01      	subs	r3, #1
 800d6bc:	607b      	str	r3, [r7, #4]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d002      	beq.n	800d6ca <mem_cmp+0x40>
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d0eb      	beq.n	800d6a2 <mem_cmp+0x18>

	return r;
 800d6ca:	697b      	ldr	r3, [r7, #20]
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3724      	adds	r7, #36	; 0x24
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d6:	4770      	bx	lr

0800d6d8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
 800d6e0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d6e2:	e002      	b.n	800d6ea <chk_chr+0x12>
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	607b      	str	r3, [r7, #4]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	781b      	ldrb	r3, [r3, #0]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d005      	beq.n	800d6fe <chk_chr+0x26>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	781b      	ldrb	r3, [r3, #0]
 800d6f6:	461a      	mov	r2, r3
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d1f2      	bne.n	800d6e4 <chk_chr+0xc>
	return *str;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	781b      	ldrb	r3, [r3, #0]
}
 800d702:	4618      	mov	r0, r3
 800d704:	370c      	adds	r7, #12
 800d706:	46bd      	mov	sp, r7
 800d708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d70c:	4770      	bx	lr

0800d70e <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d70e:	b580      	push	{r7, lr}
 800d710:	b082      	sub	sp, #8
 800d712:	af00      	add	r7, sp, #0
 800d714:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2b00      	cmp	r3, #0
 800d71a:	d009      	beq.n	800d730 <lock_fs+0x22>
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	695b      	ldr	r3, [r3, #20]
 800d720:	4618      	mov	r0, r3
 800d722:	f004 f9ac 	bl	8011a7e <ff_req_grant>
 800d726:	4603      	mov	r3, r0
 800d728:	2b00      	cmp	r3, #0
 800d72a:	d001      	beq.n	800d730 <lock_fs+0x22>
 800d72c:	2301      	movs	r3, #1
 800d72e:	e000      	b.n	800d732 <lock_fs+0x24>
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b082      	sub	sp, #8
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
 800d742:	460b      	mov	r3, r1
 800d744:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00d      	beq.n	800d768 <unlock_fs+0x2e>
 800d74c:	78fb      	ldrb	r3, [r7, #3]
 800d74e:	2b0c      	cmp	r3, #12
 800d750:	d00a      	beq.n	800d768 <unlock_fs+0x2e>
 800d752:	78fb      	ldrb	r3, [r7, #3]
 800d754:	2b0b      	cmp	r3, #11
 800d756:	d007      	beq.n	800d768 <unlock_fs+0x2e>
 800d758:	78fb      	ldrb	r3, [r7, #3]
 800d75a:	2b0f      	cmp	r3, #15
 800d75c:	d004      	beq.n	800d768 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	695b      	ldr	r3, [r3, #20]
 800d762:	4618      	mov	r0, r3
 800d764:	f004 f9a0 	bl	8011aa8 <ff_rel_grant>
	}
}
 800d768:	bf00      	nop
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d770:	b480      	push	{r7}
 800d772:	b085      	sub	sp, #20
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
 800d778:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d77a:	2300      	movs	r3, #0
 800d77c:	60bb      	str	r3, [r7, #8]
 800d77e:	68bb      	ldr	r3, [r7, #8]
 800d780:	60fb      	str	r3, [r7, #12]
 800d782:	e029      	b.n	800d7d8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d784:	4a27      	ldr	r2, [pc, #156]	; (800d824 <chk_lock+0xb4>)
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	011b      	lsls	r3, r3, #4
 800d78a:	4413      	add	r3, r2
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d01d      	beq.n	800d7ce <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d792:	4a24      	ldr	r2, [pc, #144]	; (800d824 <chk_lock+0xb4>)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	011b      	lsls	r3, r3, #4
 800d798:	4413      	add	r3, r2
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d116      	bne.n	800d7d2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d7a4:	4a1f      	ldr	r2, [pc, #124]	; (800d824 <chk_lock+0xb4>)
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	011b      	lsls	r3, r3, #4
 800d7aa:	4413      	add	r3, r2
 800d7ac:	3304      	adds	r3, #4
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d10c      	bne.n	800d7d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7b8:	4a1a      	ldr	r2, [pc, #104]	; (800d824 <chk_lock+0xb4>)
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	011b      	lsls	r3, r3, #4
 800d7be:	4413      	add	r3, r2
 800d7c0:	3308      	adds	r3, #8
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
				Files[i].clu == dp->obj.sclust &&
 800d7c8:	429a      	cmp	r2, r3
 800d7ca:	d102      	bne.n	800d7d2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d7cc:	e007      	b.n	800d7de <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d7ce:	2301      	movs	r3, #1
 800d7d0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	3301      	adds	r3, #1
 800d7d6:	60fb      	str	r3, [r7, #12]
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d9d2      	bls.n	800d784 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d109      	bne.n	800d7f8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d102      	bne.n	800d7f0 <chk_lock+0x80>
 800d7ea:	683b      	ldr	r3, [r7, #0]
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d101      	bne.n	800d7f4 <chk_lock+0x84>
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	e010      	b.n	800d816 <chk_lock+0xa6>
 800d7f4:	2312      	movs	r3, #18
 800d7f6:	e00e      	b.n	800d816 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d7f8:	683b      	ldr	r3, [r7, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d108      	bne.n	800d810 <chk_lock+0xa0>
 800d7fe:	4a09      	ldr	r2, [pc, #36]	; (800d824 <chk_lock+0xb4>)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	011b      	lsls	r3, r3, #4
 800d804:	4413      	add	r3, r2
 800d806:	330c      	adds	r3, #12
 800d808:	881b      	ldrh	r3, [r3, #0]
 800d80a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d80e:	d101      	bne.n	800d814 <chk_lock+0xa4>
 800d810:	2310      	movs	r3, #16
 800d812:	e000      	b.n	800d816 <chk_lock+0xa6>
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3714      	adds	r7, #20
 800d81a:	46bd      	mov	sp, r7
 800d81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d820:	4770      	bx	lr
 800d822:	bf00      	nop
 800d824:	20021090 	.word	0x20021090

0800d828 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d828:	b480      	push	{r7}
 800d82a:	b083      	sub	sp, #12
 800d82c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d82e:	2300      	movs	r3, #0
 800d830:	607b      	str	r3, [r7, #4]
 800d832:	e002      	b.n	800d83a <enq_lock+0x12>
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3301      	adds	r3, #1
 800d838:	607b      	str	r3, [r7, #4]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b01      	cmp	r3, #1
 800d83e:	d806      	bhi.n	800d84e <enq_lock+0x26>
 800d840:	4a09      	ldr	r2, [pc, #36]	; (800d868 <enq_lock+0x40>)
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	011b      	lsls	r3, r3, #4
 800d846:	4413      	add	r3, r2
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1f2      	bne.n	800d834 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2b02      	cmp	r3, #2
 800d852:	bf14      	ite	ne
 800d854:	2301      	movne	r3, #1
 800d856:	2300      	moveq	r3, #0
 800d858:	b2db      	uxtb	r3, r3
}
 800d85a:	4618      	mov	r0, r3
 800d85c:	370c      	adds	r7, #12
 800d85e:	46bd      	mov	sp, r7
 800d860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d864:	4770      	bx	lr
 800d866:	bf00      	nop
 800d868:	20021090 	.word	0x20021090

0800d86c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b085      	sub	sp, #20
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d876:	2300      	movs	r3, #0
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	e01f      	b.n	800d8bc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d87c:	4a41      	ldr	r2, [pc, #260]	; (800d984 <inc_lock+0x118>)
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	011b      	lsls	r3, r3, #4
 800d882:	4413      	add	r3, r2
 800d884:	681a      	ldr	r2, [r3, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	681b      	ldr	r3, [r3, #0]
 800d88a:	429a      	cmp	r2, r3
 800d88c:	d113      	bne.n	800d8b6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800d88e:	4a3d      	ldr	r2, [pc, #244]	; (800d984 <inc_lock+0x118>)
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	011b      	lsls	r3, r3, #4
 800d894:	4413      	add	r3, r2
 800d896:	3304      	adds	r3, #4
 800d898:	681a      	ldr	r2, [r3, #0]
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800d89e:	429a      	cmp	r2, r3
 800d8a0:	d109      	bne.n	800d8b6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800d8a2:	4a38      	ldr	r2, [pc, #224]	; (800d984 <inc_lock+0x118>)
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	011b      	lsls	r3, r3, #4
 800d8a8:	4413      	add	r3, r2
 800d8aa:	3308      	adds	r3, #8
 800d8ac:	681a      	ldr	r2, [r3, #0]
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			Files[i].clu == dp->obj.sclust &&
 800d8b2:	429a      	cmp	r2, r3
 800d8b4:	d006      	beq.n	800d8c4 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	60fb      	str	r3, [r7, #12]
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d9dc      	bls.n	800d87c <inc_lock+0x10>
 800d8c2:	e000      	b.n	800d8c6 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800d8c4:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2b02      	cmp	r3, #2
 800d8ca:	d132      	bne.n	800d932 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	60fb      	str	r3, [r7, #12]
 800d8d0:	e002      	b.n	800d8d8 <inc_lock+0x6c>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	3301      	adds	r3, #1
 800d8d6:	60fb      	str	r3, [r7, #12]
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	d806      	bhi.n	800d8ec <inc_lock+0x80>
 800d8de:	4a29      	ldr	r2, [pc, #164]	; (800d984 <inc_lock+0x118>)
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	011b      	lsls	r3, r3, #4
 800d8e4:	4413      	add	r3, r2
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d1f2      	bne.n	800d8d2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	d101      	bne.n	800d8f6 <inc_lock+0x8a>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	e040      	b.n	800d978 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	681a      	ldr	r2, [r3, #0]
 800d8fa:	4922      	ldr	r1, [pc, #136]	; (800d984 <inc_lock+0x118>)
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	011b      	lsls	r3, r3, #4
 800d900:	440b      	add	r3, r1
 800d902:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	689a      	ldr	r2, [r3, #8]
 800d908:	491e      	ldr	r1, [pc, #120]	; (800d984 <inc_lock+0x118>)
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	011b      	lsls	r3, r3, #4
 800d90e:	440b      	add	r3, r1
 800d910:	3304      	adds	r3, #4
 800d912:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d918:	491a      	ldr	r1, [pc, #104]	; (800d984 <inc_lock+0x118>)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	440b      	add	r3, r1
 800d920:	3308      	adds	r3, #8
 800d922:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800d924:	4a17      	ldr	r2, [pc, #92]	; (800d984 <inc_lock+0x118>)
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	011b      	lsls	r3, r3, #4
 800d92a:	4413      	add	r3, r2
 800d92c:	330c      	adds	r3, #12
 800d92e:	2200      	movs	r2, #0
 800d930:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d932:	683b      	ldr	r3, [r7, #0]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d009      	beq.n	800d94c <inc_lock+0xe0>
 800d938:	4a12      	ldr	r2, [pc, #72]	; (800d984 <inc_lock+0x118>)
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	011b      	lsls	r3, r3, #4
 800d93e:	4413      	add	r3, r2
 800d940:	330c      	adds	r3, #12
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d001      	beq.n	800d94c <inc_lock+0xe0>
 800d948:	2300      	movs	r3, #0
 800d94a:	e015      	b.n	800d978 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d108      	bne.n	800d964 <inc_lock+0xf8>
 800d952:	4a0c      	ldr	r2, [pc, #48]	; (800d984 <inc_lock+0x118>)
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	011b      	lsls	r3, r3, #4
 800d958:	4413      	add	r3, r2
 800d95a:	330c      	adds	r3, #12
 800d95c:	881b      	ldrh	r3, [r3, #0]
 800d95e:	3301      	adds	r3, #1
 800d960:	b29a      	uxth	r2, r3
 800d962:	e001      	b.n	800d968 <inc_lock+0xfc>
 800d964:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d968:	4906      	ldr	r1, [pc, #24]	; (800d984 <inc_lock+0x118>)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	011b      	lsls	r3, r3, #4
 800d96e:	440b      	add	r3, r1
 800d970:	330c      	adds	r3, #12
 800d972:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
}
 800d978:	4618      	mov	r0, r3
 800d97a:	3714      	adds	r7, #20
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	20021090 	.word	0x20021090

0800d988 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800d988:	b480      	push	{r7}
 800d98a:	b085      	sub	sp, #20
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	3b01      	subs	r3, #1
 800d994:	607b      	str	r3, [r7, #4]
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2b01      	cmp	r3, #1
 800d99a:	d825      	bhi.n	800d9e8 <dec_lock+0x60>
		n = Files[i].ctr;
 800d99c:	4a17      	ldr	r2, [pc, #92]	; (800d9fc <dec_lock+0x74>)
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	011b      	lsls	r3, r3, #4
 800d9a2:	4413      	add	r3, r2
 800d9a4:	330c      	adds	r3, #12
 800d9a6:	881b      	ldrh	r3, [r3, #0]
 800d9a8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800d9aa:	89fb      	ldrh	r3, [r7, #14]
 800d9ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9b0:	d101      	bne.n	800d9b6 <dec_lock+0x2e>
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800d9b6:	89fb      	ldrh	r3, [r7, #14]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d002      	beq.n	800d9c2 <dec_lock+0x3a>
 800d9bc:	89fb      	ldrh	r3, [r7, #14]
 800d9be:	3b01      	subs	r3, #1
 800d9c0:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800d9c2:	4a0e      	ldr	r2, [pc, #56]	; (800d9fc <dec_lock+0x74>)
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	011b      	lsls	r3, r3, #4
 800d9c8:	4413      	add	r3, r2
 800d9ca:	330c      	adds	r3, #12
 800d9cc:	89fa      	ldrh	r2, [r7, #14]
 800d9ce:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800d9d0:	89fb      	ldrh	r3, [r7, #14]
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d105      	bne.n	800d9e2 <dec_lock+0x5a>
 800d9d6:	4a09      	ldr	r2, [pc, #36]	; (800d9fc <dec_lock+0x74>)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	011b      	lsls	r3, r3, #4
 800d9dc:	4413      	add	r3, r2
 800d9de:	2200      	movs	r2, #0
 800d9e0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	737b      	strb	r3, [r7, #13]
 800d9e6:	e001      	b.n	800d9ec <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800d9ec:	7b7b      	ldrb	r3, [r7, #13]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3714      	adds	r7, #20
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr
 800d9fa:	bf00      	nop
 800d9fc:	20021090 	.word	0x20021090

0800da00 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800da00:	b480      	push	{r7}
 800da02:	b085      	sub	sp, #20
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800da08:	2300      	movs	r3, #0
 800da0a:	60fb      	str	r3, [r7, #12]
 800da0c:	e010      	b.n	800da30 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800da0e:	4a0d      	ldr	r2, [pc, #52]	; (800da44 <clear_lock+0x44>)
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	011b      	lsls	r3, r3, #4
 800da14:	4413      	add	r3, r2
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d105      	bne.n	800da2a <clear_lock+0x2a>
 800da1e:	4a09      	ldr	r2, [pc, #36]	; (800da44 <clear_lock+0x44>)
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	011b      	lsls	r3, r3, #4
 800da24:	4413      	add	r3, r2
 800da26:	2200      	movs	r2, #0
 800da28:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	3301      	adds	r3, #1
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d9eb      	bls.n	800da0e <clear_lock+0xe>
	}
}
 800da36:	bf00      	nop
 800da38:	bf00      	nop
 800da3a:	3714      	adds	r7, #20
 800da3c:	46bd      	mov	sp, r7
 800da3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da42:	4770      	bx	lr
 800da44:	20021090 	.word	0x20021090

0800da48 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b086      	sub	sp, #24
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	78db      	ldrb	r3, [r3, #3]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d034      	beq.n	800dac6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da60:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	7858      	ldrb	r0, [r3, #1]
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800da6c:	2301      	movs	r3, #1
 800da6e:	697a      	ldr	r2, [r7, #20]
 800da70:	f7ff fbac 	bl	800d1cc <disk_write>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	d002      	beq.n	800da80 <sync_window+0x38>
			res = FR_DISK_ERR;
 800da7a:	2301      	movs	r3, #1
 800da7c:	73fb      	strb	r3, [r7, #15]
 800da7e:	e022      	b.n	800dac6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2200      	movs	r2, #0
 800da84:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da8a:	697a      	ldr	r2, [r7, #20]
 800da8c:	1ad2      	subs	r2, r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	429a      	cmp	r2, r3
 800da94:	d217      	bcs.n	800dac6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	789b      	ldrb	r3, [r3, #2]
 800da9a:	613b      	str	r3, [r7, #16]
 800da9c:	e010      	b.n	800dac0 <sync_window+0x78>
					wsect += fs->fsize;
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800daa2:	697a      	ldr	r2, [r7, #20]
 800daa4:	4413      	add	r3, r2
 800daa6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	7858      	ldrb	r0, [r3, #1]
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dab2:	2301      	movs	r3, #1
 800dab4:	697a      	ldr	r2, [r7, #20]
 800dab6:	f7ff fb89 	bl	800d1cc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800daba:	693b      	ldr	r3, [r7, #16]
 800dabc:	3b01      	subs	r3, #1
 800dabe:	613b      	str	r3, [r7, #16]
 800dac0:	693b      	ldr	r3, [r7, #16]
 800dac2:	2b01      	cmp	r3, #1
 800dac4:	d8eb      	bhi.n	800da9e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3718      	adds	r7, #24
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}

0800dad0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dad0:	b580      	push	{r7, lr}
 800dad2:	b084      	sub	sp, #16
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	6078      	str	r0, [r7, #4]
 800dad8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dada:	2300      	movs	r3, #0
 800dadc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	429a      	cmp	r2, r3
 800dae6:	d01b      	beq.n	800db20 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f7ff ffad 	bl	800da48 <sync_window>
 800daee:	4603      	mov	r3, r0
 800daf0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800daf2:	7bfb      	ldrb	r3, [r7, #15]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d113      	bne.n	800db20 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	7858      	ldrb	r0, [r3, #1]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800db02:	2301      	movs	r3, #1
 800db04:	683a      	ldr	r2, [r7, #0]
 800db06:	f7ff fb41 	bl	800d18c <disk_read>
 800db0a:	4603      	mov	r3, r0
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d004      	beq.n	800db1a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800db10:	f04f 33ff 	mov.w	r3, #4294967295
 800db14:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800db16:	2301      	movs	r3, #1
 800db18:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	683a      	ldr	r2, [r7, #0]
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800db20:	7bfb      	ldrb	r3, [r7, #15]
}
 800db22:	4618      	mov	r0, r3
 800db24:	3710      	adds	r7, #16
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
	...

0800db2c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b084      	sub	sp, #16
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff ff87 	bl	800da48 <sync_window>
 800db3a:	4603      	mov	r3, r0
 800db3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800db3e:	7bfb      	ldrb	r3, [r7, #15]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d158      	bne.n	800dbf6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	781b      	ldrb	r3, [r3, #0]
 800db48:	2b03      	cmp	r3, #3
 800db4a:	d148      	bne.n	800dbde <sync_fs+0xb2>
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	791b      	ldrb	r3, [r3, #4]
 800db50:	2b01      	cmp	r3, #1
 800db52:	d144      	bne.n	800dbde <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	333c      	adds	r3, #60	; 0x3c
 800db58:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db5c:	2100      	movs	r1, #0
 800db5e:	4618      	mov	r0, r3
 800db60:	f7ff fd78 	bl	800d654 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	333c      	adds	r3, #60	; 0x3c
 800db68:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800db6c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800db70:	4618      	mov	r0, r3
 800db72:	f7ff fc7f 	bl	800d474 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	333c      	adds	r3, #60	; 0x3c
 800db7a:	4921      	ldr	r1, [pc, #132]	; (800dc00 <sync_fs+0xd4>)
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7ff fc94 	bl	800d4aa <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	333c      	adds	r3, #60	; 0x3c
 800db86:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800db8a:	491e      	ldr	r1, [pc, #120]	; (800dc04 <sync_fs+0xd8>)
 800db8c:	4618      	mov	r0, r3
 800db8e:	f7ff fc8c 	bl	800d4aa <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	333c      	adds	r3, #60	; 0x3c
 800db96:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	69db      	ldr	r3, [r3, #28]
 800db9e:	4619      	mov	r1, r3
 800dba0:	4610      	mov	r0, r2
 800dba2:	f7ff fc82 	bl	800d4aa <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	333c      	adds	r3, #60	; 0x3c
 800dbaa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	699b      	ldr	r3, [r3, #24]
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	4610      	mov	r0, r2
 800dbb6:	f7ff fc78 	bl	800d4aa <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbbe:	1c5a      	adds	r2, r3, #1
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	7858      	ldrb	r0, [r3, #1]
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dbd2:	2301      	movs	r3, #1
 800dbd4:	f7ff fafa 	bl	800d1cc <disk_write>
			fs->fsi_flag = 0;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	2200      	movs	r2, #0
 800dbdc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	785b      	ldrb	r3, [r3, #1]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	2100      	movs	r1, #0
 800dbe6:	4618      	mov	r0, r3
 800dbe8:	f7ff fb10 	bl	800d20c <disk_ioctl>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <sync_fs+0xca>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dbf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3710      	adds	r7, #16
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	bd80      	pop	{r7, pc}
 800dc00:	41615252 	.word	0x41615252
 800dc04:	61417272 	.word	0x61417272

0800dc08 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dc12:	683b      	ldr	r3, [r7, #0]
 800dc14:	3b02      	subs	r3, #2
 800dc16:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	3b02      	subs	r3, #2
 800dc1e:	683a      	ldr	r2, [r7, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d301      	bcc.n	800dc28 <clust2sect+0x20>
 800dc24:	2300      	movs	r3, #0
 800dc26:	e008      	b.n	800dc3a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	895b      	ldrh	r3, [r3, #10]
 800dc2c:	461a      	mov	r2, r3
 800dc2e:	683b      	ldr	r3, [r7, #0]
 800dc30:	fb03 f202 	mul.w	r2, r3, r2
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dc38:	4413      	add	r3, r2
}
 800dc3a:	4618      	mov	r0, r3
 800dc3c:	370c      	adds	r7, #12
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc44:	4770      	bx	lr
	...

0800dc48 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b088      	sub	sp, #32
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800dc52:	6879      	ldr	r1, [r7, #4]
 800dc54:	6809      	ldr	r1, [r1, #0]
 800dc56:	61b9      	str	r1, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	2901      	cmp	r1, #1
 800dc5c:	d904      	bls.n	800dc68 <get_fat+0x20>
 800dc5e:	69b9      	ldr	r1, [r7, #24]
 800dc60:	6a09      	ldr	r1, [r1, #32]
 800dc62:	6838      	ldr	r0, [r7, #0]
 800dc64:	4288      	cmp	r0, r1
 800dc66:	d302      	bcc.n	800dc6e <get_fat+0x26>
		val = 1;	/* Internal error */
 800dc68:	2301      	movs	r3, #1
 800dc6a:	61fb      	str	r3, [r7, #28]
 800dc6c:	e101      	b.n	800de72 <get_fat+0x22a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dc6e:	f04f 31ff 	mov.w	r1, #4294967295
 800dc72:	61f9      	str	r1, [r7, #28]

		switch (fs->fs_type) {
 800dc74:	69b9      	ldr	r1, [r7, #24]
 800dc76:	7809      	ldrb	r1, [r1, #0]
 800dc78:	3901      	subs	r1, #1
 800dc7a:	2903      	cmp	r1, #3
 800dc7c:	f200 80ed 	bhi.w	800de5a <get_fat+0x212>
 800dc80:	a001      	add	r0, pc, #4	; (adr r0, 800dc88 <get_fat+0x40>)
 800dc82:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800dc86:	bf00      	nop
 800dc88:	0800dc99 	.word	0x0800dc99
 800dc8c:	0800dd21 	.word	0x0800dd21
 800dc90:	0800dd57 	.word	0x0800dd57
 800dc94:	0800dd8f 	.word	0x0800dd8f
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800dc98:	683b      	ldr	r3, [r7, #0]
 800dc9a:	60fb      	str	r3, [r7, #12]
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	085b      	lsrs	r3, r3, #1
 800dca0:	68fa      	ldr	r2, [r7, #12]
 800dca2:	4413      	add	r3, r2
 800dca4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dca6:	69bb      	ldr	r3, [r7, #24]
 800dca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	0a5b      	lsrs	r3, r3, #9
 800dcae:	4413      	add	r3, r2
 800dcb0:	4619      	mov	r1, r3
 800dcb2:	69b8      	ldr	r0, [r7, #24]
 800dcb4:	f7ff ff0c 	bl	800dad0 <move_window>
 800dcb8:	4603      	mov	r3, r0
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	f040 80d0 	bne.w	800de60 <get_fat+0x218>
			wc = fs->win[bc++ % SS(fs)];
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	1c5a      	adds	r2, r3, #1
 800dcc4:	60fa      	str	r2, [r7, #12]
 800dcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcca:	69ba      	ldr	r2, [r7, #24]
 800dccc:	4413      	add	r3, r2
 800dcce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcd2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcd4:	69bb      	ldr	r3, [r7, #24]
 800dcd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	0a5b      	lsrs	r3, r3, #9
 800dcdc:	4413      	add	r3, r2
 800dcde:	4619      	mov	r1, r3
 800dce0:	69b8      	ldr	r0, [r7, #24]
 800dce2:	f7ff fef5 	bl	800dad0 <move_window>
 800dce6:	4603      	mov	r3, r0
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	f040 80bb 	bne.w	800de64 <get_fat+0x21c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcf4:	69ba      	ldr	r2, [r7, #24]
 800dcf6:	4413      	add	r3, r2
 800dcf8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcfc:	021b      	lsls	r3, r3, #8
 800dcfe:	461a      	mov	r2, r3
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	4313      	orrs	r3, r2
 800dd04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	f003 0301 	and.w	r3, r3, #1
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d002      	beq.n	800dd16 <get_fat+0xce>
 800dd10:	68bb      	ldr	r3, [r7, #8]
 800dd12:	091b      	lsrs	r3, r3, #4
 800dd14:	e002      	b.n	800dd1c <get_fat+0xd4>
 800dd16:	68bb      	ldr	r3, [r7, #8]
 800dd18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800dd1c:	61fb      	str	r3, [r7, #28]
			break;
 800dd1e:	e0a8      	b.n	800de72 <get_fat+0x22a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800dd20:	69bb      	ldr	r3, [r7, #24]
 800dd22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	0a1b      	lsrs	r3, r3, #8
 800dd28:	4413      	add	r3, r2
 800dd2a:	4619      	mov	r1, r3
 800dd2c:	69b8      	ldr	r0, [r7, #24]
 800dd2e:	f7ff fecf 	bl	800dad0 <move_window>
 800dd32:	4603      	mov	r3, r0
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	f040 8097 	bne.w	800de68 <get_fat+0x220>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dd3a:	69bb      	ldr	r3, [r7, #24]
 800dd3c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	005b      	lsls	r3, r3, #1
 800dd44:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dd48:	4413      	add	r3, r2
 800dd4a:	4618      	mov	r0, r3
 800dd4c:	f7ff fa7c 	bl	800d248 <ld_word>
 800dd50:	4603      	mov	r3, r0
 800dd52:	61fb      	str	r3, [r7, #28]
			break;
 800dd54:	e08d      	b.n	800de72 <get_fat+0x22a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dd56:	69bb      	ldr	r3, [r7, #24]
 800dd58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd5a:	683b      	ldr	r3, [r7, #0]
 800dd5c:	09db      	lsrs	r3, r3, #7
 800dd5e:	4413      	add	r3, r2
 800dd60:	4619      	mov	r1, r3
 800dd62:	69b8      	ldr	r0, [r7, #24]
 800dd64:	f7ff feb4 	bl	800dad0 <move_window>
 800dd68:	4603      	mov	r3, r0
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d17e      	bne.n	800de6c <get_fat+0x224>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800dd6e:	69bb      	ldr	r3, [r7, #24]
 800dd70:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800dd74:	683b      	ldr	r3, [r7, #0]
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800dd7c:	4413      	add	r3, r2
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f7ff fa7a 	bl	800d278 <ld_dword>
 800dd84:	4603      	mov	r3, r0
 800dd86:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800dd8a:	61fb      	str	r3, [r7, #28]
			break;
 800dd8c:	e071      	b.n	800de72 <get_fat+0x22a>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 800dd8e:	6879      	ldr	r1, [r7, #4]
 800dd90:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800dd94:	4301      	orrs	r1, r0
 800dd96:	d060      	beq.n	800de5a <get_fat+0x212>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800dd98:	6879      	ldr	r1, [r7, #4]
 800dd9a:	6889      	ldr	r1, [r1, #8]
 800dd9c:	6838      	ldr	r0, [r7, #0]
 800dd9e:	1a41      	subs	r1, r0, r1
 800dda0:	6179      	str	r1, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 800dda2:	6879      	ldr	r1, [r7, #4]
 800dda4:	e9d1 0104 	ldrd	r0, r1, [r1, #16]
 800dda8:	1e42      	subs	r2, r0, #1
 800ddaa:	f141 33ff 	adc.w	r3, r1, #4294967295
 800ddae:	f04f 0000 	mov.w	r0, #0
 800ddb2:	f04f 0100 	mov.w	r1, #0
 800ddb6:	0a50      	lsrs	r0, r2, #9
 800ddb8:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800ddbc:	0a59      	lsrs	r1, r3, #9
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	69bb      	ldr	r3, [r7, #24]
 800ddc2:	895b      	ldrh	r3, [r3, #10]
 800ddc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddc8:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	79db      	ldrb	r3, [r3, #7]
 800ddce:	2b02      	cmp	r3, #2
 800ddd0:	d10e      	bne.n	800ddf0 <get_fat+0x1a8>
					if (cofs <= clen) {
 800ddd2:	697a      	ldr	r2, [r7, #20]
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	429a      	cmp	r2, r3
 800ddd8:	d80a      	bhi.n	800ddf0 <get_fat+0x1a8>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 800ddda:	697a      	ldr	r2, [r7, #20]
 800dddc:	693b      	ldr	r3, [r7, #16]
 800ddde:	429a      	cmp	r2, r3
 800dde0:	d002      	beq.n	800dde8 <get_fat+0x1a0>
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	3301      	adds	r3, #1
 800dde6:	e001      	b.n	800ddec <get_fat+0x1a4>
 800dde8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ddec:	61fb      	str	r3, [r7, #28]
						break;
 800ddee:	e040      	b.n	800de72 <get_fat+0x22a>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	79db      	ldrb	r3, [r3, #7]
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	d108      	bne.n	800de0a <get_fat+0x1c2>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	699b      	ldr	r3, [r3, #24]
 800ddfc:	697a      	ldr	r2, [r7, #20]
 800ddfe:	429a      	cmp	r2, r3
 800de00:	d203      	bcs.n	800de0a <get_fat+0x1c2>
					val = clst + 1; 	/* Generate the value */
 800de02:	683b      	ldr	r3, [r7, #0]
 800de04:	3301      	adds	r3, #1
 800de06:	61fb      	str	r3, [r7, #28]
					break;
 800de08:	e033      	b.n	800de72 <get_fat+0x22a>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	79db      	ldrb	r3, [r3, #7]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d023      	beq.n	800de5a <get_fat+0x212>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	69db      	ldr	r3, [r3, #28]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d003      	beq.n	800de22 <get_fat+0x1da>
						val = 0x7FFFFFFF;	/* Generate EOC */
 800de1a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800de1e:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 800de20:	e027      	b.n	800de72 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	09db      	lsrs	r3, r3, #7
 800de2a:	4413      	add	r3, r2
 800de2c:	4619      	mov	r1, r3
 800de2e:	69b8      	ldr	r0, [r7, #24]
 800de30:	f7ff fe4e 	bl	800dad0 <move_window>
 800de34:	4603      	mov	r3, r0
 800de36:	2b00      	cmp	r3, #0
 800de38:	d11a      	bne.n	800de70 <get_fat+0x228>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800de40:	683b      	ldr	r3, [r7, #0]
 800de42:	009b      	lsls	r3, r3, #2
 800de44:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800de48:	4413      	add	r3, r2
 800de4a:	4618      	mov	r0, r3
 800de4c:	f7ff fa14 	bl	800d278 <ld_dword>
 800de50:	4603      	mov	r3, r0
 800de52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de56:	61fb      	str	r3, [r7, #28]
					break;
 800de58:	e00b      	b.n	800de72 <get_fat+0x22a>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800de5a:	2301      	movs	r3, #1
 800de5c:	61fb      	str	r3, [r7, #28]
 800de5e:	e008      	b.n	800de72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de60:	bf00      	nop
 800de62:	e006      	b.n	800de72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de64:	bf00      	nop
 800de66:	e004      	b.n	800de72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800de68:	bf00      	nop
 800de6a:	e002      	b.n	800de72 <get_fat+0x22a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de6c:	bf00      	nop
 800de6e:	e000      	b.n	800de72 <get_fat+0x22a>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800de70:	bf00      	nop
		}
	}

	return val;
 800de72:	69fb      	ldr	r3, [r7, #28]
}
 800de74:	4618      	mov	r0, r3
 800de76:	3720      	adds	r7, #32
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b089      	sub	sp, #36	; 0x24
 800de80:	af00      	add	r7, sp, #0
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800de88:	2302      	movs	r3, #2
 800de8a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	f240 80dd 	bls.w	800e04e <put_fat+0x1d2>
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6a1b      	ldr	r3, [r3, #32]
 800de98:	68ba      	ldr	r2, [r7, #8]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	f080 80d7 	bcs.w	800e04e <put_fat+0x1d2>
		switch (fs->fs_type) {
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	2b04      	cmp	r3, #4
 800dea6:	f300 80d2 	bgt.w	800e04e <put_fat+0x1d2>
 800deaa:	2b03      	cmp	r3, #3
 800deac:	f280 8093 	bge.w	800dfd6 <put_fat+0x15a>
 800deb0:	2b01      	cmp	r3, #1
 800deb2:	d002      	beq.n	800deba <put_fat+0x3e>
 800deb4:	2b02      	cmp	r3, #2
 800deb6:	d06e      	beq.n	800df96 <put_fat+0x11a>
 800deb8:	e0c9      	b.n	800e04e <put_fat+0x1d2>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	61bb      	str	r3, [r7, #24]
 800debe:	69bb      	ldr	r3, [r7, #24]
 800dec0:	085b      	lsrs	r3, r3, #1
 800dec2:	69ba      	ldr	r2, [r7, #24]
 800dec4:	4413      	add	r3, r2
 800dec6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800decc:	69bb      	ldr	r3, [r7, #24]
 800dece:	0a5b      	lsrs	r3, r3, #9
 800ded0:	4413      	add	r3, r2
 800ded2:	4619      	mov	r1, r3
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f7ff fdfb 	bl	800dad0 <move_window>
 800deda:	4603      	mov	r3, r0
 800dedc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dede:	7ffb      	ldrb	r3, [r7, #31]
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	f040 80ad 	bne.w	800e040 <put_fat+0x1c4>
			p = fs->win + bc++ % SS(fs);
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800deec:	69bb      	ldr	r3, [r7, #24]
 800deee:	1c59      	adds	r1, r3, #1
 800def0:	61b9      	str	r1, [r7, #24]
 800def2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800def6:	4413      	add	r3, r2
 800def8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800defa:	68bb      	ldr	r3, [r7, #8]
 800defc:	f003 0301 	and.w	r3, r3, #1
 800df00:	2b00      	cmp	r3, #0
 800df02:	d00d      	beq.n	800df20 <put_fat+0xa4>
 800df04:	697b      	ldr	r3, [r7, #20]
 800df06:	781b      	ldrb	r3, [r3, #0]
 800df08:	b25b      	sxtb	r3, r3
 800df0a:	f003 030f 	and.w	r3, r3, #15
 800df0e:	b25a      	sxtb	r2, r3
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	b2db      	uxtb	r3, r3
 800df14:	011b      	lsls	r3, r3, #4
 800df16:	b25b      	sxtb	r3, r3
 800df18:	4313      	orrs	r3, r2
 800df1a:	b25b      	sxtb	r3, r3
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	e001      	b.n	800df24 <put_fat+0xa8>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	b2db      	uxtb	r3, r3
 800df24:	697a      	ldr	r2, [r7, #20]
 800df26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2201      	movs	r2, #1
 800df2c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df32:	69bb      	ldr	r3, [r7, #24]
 800df34:	0a5b      	lsrs	r3, r3, #9
 800df36:	4413      	add	r3, r2
 800df38:	4619      	mov	r1, r3
 800df3a:	68f8      	ldr	r0, [r7, #12]
 800df3c:	f7ff fdc8 	bl	800dad0 <move_window>
 800df40:	4603      	mov	r3, r0
 800df42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800df44:	7ffb      	ldrb	r3, [r7, #31]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d17c      	bne.n	800e044 <put_fat+0x1c8>
			p = fs->win + bc % SS(fs);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800df50:	69bb      	ldr	r3, [r7, #24]
 800df52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800df56:	4413      	add	r3, r2
 800df58:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800df5a:	68bb      	ldr	r3, [r7, #8]
 800df5c:	f003 0301 	and.w	r3, r3, #1
 800df60:	2b00      	cmp	r3, #0
 800df62:	d003      	beq.n	800df6c <put_fat+0xf0>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	091b      	lsrs	r3, r3, #4
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	e00e      	b.n	800df8a <put_fat+0x10e>
 800df6c:	697b      	ldr	r3, [r7, #20]
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	b25b      	sxtb	r3, r3
 800df72:	f023 030f 	bic.w	r3, r3, #15
 800df76:	b25a      	sxtb	r2, r3
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	0a1b      	lsrs	r3, r3, #8
 800df7c:	b25b      	sxtb	r3, r3
 800df7e:	f003 030f 	and.w	r3, r3, #15
 800df82:	b25b      	sxtb	r3, r3
 800df84:	4313      	orrs	r3, r2
 800df86:	b25b      	sxtb	r3, r3
 800df88:	b2db      	uxtb	r3, r3
 800df8a:	697a      	ldr	r2, [r7, #20]
 800df8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	2201      	movs	r2, #1
 800df92:	70da      	strb	r2, [r3, #3]
			break;
 800df94:	e05b      	b.n	800e04e <put_fat+0x1d2>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df9a:	68bb      	ldr	r3, [r7, #8]
 800df9c:	0a1b      	lsrs	r3, r3, #8
 800df9e:	4413      	add	r3, r2
 800dfa0:	4619      	mov	r1, r3
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f7ff fd94 	bl	800dad0 <move_window>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfac:	7ffb      	ldrb	r3, [r7, #31]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d14a      	bne.n	800e048 <put_fat+0x1cc>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800dfb8:	68bb      	ldr	r3, [r7, #8]
 800dfba:	005b      	lsls	r3, r3, #1
 800dfbc:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800dfc0:	4413      	add	r3, r2
 800dfc2:	687a      	ldr	r2, [r7, #4]
 800dfc4:	b292      	uxth	r2, r2
 800dfc6:	4611      	mov	r1, r2
 800dfc8:	4618      	mov	r0, r3
 800dfca:	f7ff fa53 	bl	800d474 <st_word>
			fs->wflag = 1;
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	70da      	strb	r2, [r3, #3]
			break;
 800dfd4:	e03b      	b.n	800e04e <put_fat+0x1d2>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	09db      	lsrs	r3, r3, #7
 800dfde:	4413      	add	r3, r2
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	68f8      	ldr	r0, [r7, #12]
 800dfe4:	f7ff fd74 	bl	800dad0 <move_window>
 800dfe8:	4603      	mov	r3, r0
 800dfea:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfec:	7ffb      	ldrb	r3, [r7, #31]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d12c      	bne.n	800e04c <put_fat+0x1d0>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	781b      	ldrb	r3, [r3, #0]
 800dff6:	2b04      	cmp	r3, #4
 800dff8:	d012      	beq.n	800e020 <put_fat+0x1a4>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	009b      	lsls	r3, r3, #2
 800e00a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e00e:	4413      	add	r3, r2
 800e010:	4618      	mov	r0, r3
 800e012:	f7ff f931 	bl	800d278 <ld_dword>
 800e016:	4603      	mov	r3, r0
 800e018:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e01c:	4323      	orrs	r3, r4
 800e01e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	009b      	lsls	r3, r3, #2
 800e02a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e02e:	4413      	add	r3, r2
 800e030:	6879      	ldr	r1, [r7, #4]
 800e032:	4618      	mov	r0, r3
 800e034:	f7ff fa39 	bl	800d4aa <st_dword>
			fs->wflag = 1;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2201      	movs	r2, #1
 800e03c:	70da      	strb	r2, [r3, #3]
			break;
 800e03e:	e006      	b.n	800e04e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800e040:	bf00      	nop
 800e042:	e004      	b.n	800e04e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800e044:	bf00      	nop
 800e046:	e002      	b.n	800e04e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800e048:	bf00      	nop
 800e04a:	e000      	b.n	800e04e <put_fat+0x1d2>
			if (res != FR_OK) break;
 800e04c:	bf00      	nop
		}
	}
	return res;
 800e04e:	7ffb      	ldrb	r3, [r7, #31]
}
 800e050:	4618      	mov	r0, r3
 800e052:	3724      	adds	r7, #36	; 0x24
 800e054:	46bd      	mov	sp, r7
 800e056:	bd90      	pop	{r4, r7, pc}

0800e058 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 800e058:	b580      	push	{r7, lr}
 800e05a:	b08a      	sub	sp, #40	; 0x28
 800e05c:	af00      	add	r7, sp, #0
 800e05e:	60f8      	str	r0, [r7, #12]
 800e060:	60b9      	str	r1, [r7, #8]
 800e062:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	3b02      	subs	r3, #2
 800e068:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	6a1b      	ldr	r3, [r3, #32]
 800e06e:	3b02      	subs	r3, #2
 800e070:	68ba      	ldr	r2, [r7, #8]
 800e072:	429a      	cmp	r2, r3
 800e074:	d301      	bcc.n	800e07a <find_bitmap+0x22>
 800e076:	2300      	movs	r3, #0
 800e078:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 800e07a:	68bb      	ldr	r3, [r7, #8]
 800e07c:	61fb      	str	r3, [r7, #28]
 800e07e:	69fb      	ldr	r3, [r7, #28]
 800e080:	61bb      	str	r3, [r7, #24]
 800e082:	2300      	movs	r3, #0
 800e084:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e08a:	69fb      	ldr	r3, [r7, #28]
 800e08c:	0b1b      	lsrs	r3, r3, #12
 800e08e:	4413      	add	r3, r2
 800e090:	4619      	mov	r1, r3
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f7ff fd1c 	bl	800dad0 <move_window>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <find_bitmap+0x4c>
 800e09e:	f04f 33ff 	mov.w	r3, #4294967295
 800e0a2:	e051      	b.n	800e148 <find_bitmap+0xf0>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	08db      	lsrs	r3, r3, #3
 800e0a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0ac:	623b      	str	r3, [r7, #32]
 800e0ae:	69fb      	ldr	r3, [r7, #28]
 800e0b0:	f003 0307 	and.w	r3, r3, #7
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800e0ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 800e0be:	68fa      	ldr	r2, [r7, #12]
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	4413      	add	r3, r2
 800e0c4:	333c      	adds	r3, #60	; 0x3c
 800e0c6:	781a      	ldrb	r2, [r3, #0]
 800e0c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0cc:	4013      	ands	r3, r2
 800e0ce:	74fb      	strb	r3, [r7, #19]
 800e0d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0d4:	005b      	lsls	r3, r3, #1
 800e0d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 800e0da:	69fb      	ldr	r3, [r7, #28]
 800e0dc:	3301      	adds	r3, #1
 800e0de:	61fb      	str	r3, [r7, #28]
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	6a1b      	ldr	r3, [r3, #32]
 800e0e4:	3b02      	subs	r3, #2
 800e0e6:	69fa      	ldr	r2, [r7, #28]
 800e0e8:	429a      	cmp	r2, r3
 800e0ea:	d307      	bcc.n	800e0fc <find_bitmap+0xa4>
					val = 0; bm = 0; i = SS(fs);
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	61fb      	str	r3, [r7, #28]
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e0f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e0fa:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 800e0fc:	7cfb      	ldrb	r3, [r7, #19]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d109      	bne.n	800e116 <find_bitmap+0xbe>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 800e102:	697b      	ldr	r3, [r7, #20]
 800e104:	3301      	adds	r3, #1
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	697a      	ldr	r2, [r7, #20]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	429a      	cmp	r2, r3
 800e10e:	d106      	bne.n	800e11e <find_bitmap+0xc6>
 800e110:	69bb      	ldr	r3, [r7, #24]
 800e112:	3302      	adds	r3, #2
 800e114:	e018      	b.n	800e148 <find_bitmap+0xf0>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 800e116:	69fb      	ldr	r3, [r7, #28]
 800e118:	61bb      	str	r3, [r7, #24]
 800e11a:	2300      	movs	r3, #0
 800e11c:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 800e11e:	69fa      	ldr	r2, [r7, #28]
 800e120:	68bb      	ldr	r3, [r7, #8]
 800e122:	429a      	cmp	r2, r3
 800e124:	d101      	bne.n	800e12a <find_bitmap+0xd2>
 800e126:	2300      	movs	r3, #0
 800e128:	e00e      	b.n	800e148 <find_bitmap+0xf0>
			} while (bm);
 800e12a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d1c5      	bne.n	800e0be <find_bitmap+0x66>
			bm = 1;
 800e132:	2301      	movs	r3, #1
 800e134:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		} while (++i < SS(fs));
 800e138:	6a3b      	ldr	r3, [r7, #32]
 800e13a:	3301      	adds	r3, #1
 800e13c:	623b      	str	r3, [r7, #32]
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e144:	d3bb      	bcc.n	800e0be <find_bitmap+0x66>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 800e146:	e79e      	b.n	800e086 <find_bitmap+0x2e>
	}
}
 800e148:	4618      	mov	r0, r3
 800e14a:	3728      	adds	r7, #40	; 0x28
 800e14c:	46bd      	mov	sp, r7
 800e14e:	bd80      	pop	{r7, pc}

0800e150 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b088      	sub	sp, #32
 800e154:	af00      	add	r7, sp, #0
 800e156:	60f8      	str	r0, [r7, #12]
 800e158:	60b9      	str	r1, [r7, #8]
 800e15a:	607a      	str	r2, [r7, #4]
 800e15c:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	3b02      	subs	r3, #2
 800e162:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 800e164:	68fb      	ldr	r3, [r7, #12]
 800e166:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e168:	68bb      	ldr	r3, [r7, #8]
 800e16a:	0b1b      	lsrs	r3, r3, #12
 800e16c:	4413      	add	r3, r2
 800e16e:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 800e170:	68bb      	ldr	r3, [r7, #8]
 800e172:	08db      	lsrs	r3, r3, #3
 800e174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e178:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 800e17a:	68bb      	ldr	r3, [r7, #8]
 800e17c:	f003 0307 	and.w	r3, r3, #7
 800e180:	2201      	movs	r2, #1
 800e182:	fa02 f303 	lsl.w	r3, r2, r3
 800e186:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	617a      	str	r2, [r7, #20]
 800e18e:	4619      	mov	r1, r3
 800e190:	68f8      	ldr	r0, [r7, #12]
 800e192:	f7ff fc9d 	bl	800dad0 <move_window>
 800e196:	4603      	mov	r3, r0
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d001      	beq.n	800e1a0 <change_bitmap+0x50>
 800e19c:	2301      	movs	r3, #1
 800e19e:	e03d      	b.n	800e21c <change_bitmap+0xcc>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 800e1a0:	68fa      	ldr	r2, [r7, #12]
 800e1a2:	69bb      	ldr	r3, [r7, #24]
 800e1a4:	4413      	add	r3, r2
 800e1a6:	333c      	adds	r3, #60	; 0x3c
 800e1a8:	781a      	ldrb	r2, [r3, #0]
 800e1aa:	7ffb      	ldrb	r3, [r7, #31]
 800e1ac:	4013      	ands	r3, r2
 800e1ae:	b2db      	uxtb	r3, r3
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	bf14      	ite	ne
 800e1b4:	2301      	movne	r3, #1
 800e1b6:	2300      	moveq	r3, #0
 800e1b8:	b2db      	uxtb	r3, r3
 800e1ba:	461a      	mov	r2, r3
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	4293      	cmp	r3, r2
 800e1c0:	d101      	bne.n	800e1c6 <change_bitmap+0x76>
 800e1c2:	2302      	movs	r3, #2
 800e1c4:	e02a      	b.n	800e21c <change_bitmap+0xcc>
				fs->win[i] ^= bm;	/* Flip the bit */
 800e1c6:	68fa      	ldr	r2, [r7, #12]
 800e1c8:	69bb      	ldr	r3, [r7, #24]
 800e1ca:	4413      	add	r3, r2
 800e1cc:	333c      	adds	r3, #60	; 0x3c
 800e1ce:	781a      	ldrb	r2, [r3, #0]
 800e1d0:	7ffb      	ldrb	r3, [r7, #31]
 800e1d2:	4053      	eors	r3, r2
 800e1d4:	b2d9      	uxtb	r1, r3
 800e1d6:	68fa      	ldr	r2, [r7, #12]
 800e1d8:	69bb      	ldr	r3, [r7, #24]
 800e1da:	4413      	add	r3, r2
 800e1dc:	333c      	adds	r3, #60	; 0x3c
 800e1de:	460a      	mov	r2, r1
 800e1e0:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2201      	movs	r2, #1
 800e1e6:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	3b01      	subs	r3, #1
 800e1ec:	607b      	str	r3, [r7, #4]
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d101      	bne.n	800e1f8 <change_bitmap+0xa8>
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	e011      	b.n	800e21c <change_bitmap+0xcc>
			} while (bm <<= 1);		/* Next bit */
 800e1f8:	7ffb      	ldrb	r3, [r7, #31]
 800e1fa:	005b      	lsls	r3, r3, #1
 800e1fc:	77fb      	strb	r3, [r7, #31]
 800e1fe:	7ffb      	ldrb	r3, [r7, #31]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d1cd      	bne.n	800e1a0 <change_bitmap+0x50>
			bm = 1;
 800e204:	2301      	movs	r3, #1
 800e206:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 800e208:	69bb      	ldr	r3, [r7, #24]
 800e20a:	3301      	adds	r3, #1
 800e20c:	61bb      	str	r3, [r7, #24]
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e214:	d3c4      	bcc.n	800e1a0 <change_bitmap+0x50>
		i = 0;
 800e216:	2300      	movs	r3, #0
 800e218:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 800e21a:	e7b5      	b.n	800e188 <change_bitmap+0x38>
	}
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3720      	adds	r7, #32
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b086      	sub	sp, #24
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	79db      	ldrb	r3, [r3, #7]
 800e230:	2b03      	cmp	r3, #3
 800e232:	d121      	bne.n	800e278 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	617b      	str	r3, [r7, #20]
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	613b      	str	r3, [r7, #16]
 800e240:	e014      	b.n	800e26c <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6818      	ldr	r0, [r3, #0]
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	3301      	adds	r3, #1
 800e24a:	461a      	mov	r2, r3
 800e24c:	6979      	ldr	r1, [r7, #20]
 800e24e:	f7ff fe15 	bl	800de7c <put_fat>
 800e252:	4603      	mov	r3, r0
 800e254:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 800e256:	7bfb      	ldrb	r3, [r7, #15]
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d001      	beq.n	800e260 <fill_first_frag+0x3c>
 800e25c:	7bfb      	ldrb	r3, [r7, #15]
 800e25e:	e00c      	b.n	800e27a <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	3301      	adds	r3, #1
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	693b      	ldr	r3, [r7, #16]
 800e268:	3b01      	subs	r3, #1
 800e26a:	613b      	str	r3, [r7, #16]
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d1e7      	bne.n	800e242 <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	2200      	movs	r2, #0
 800e276:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3718      	adds	r7, #24
 800e27e:	46bd      	mov	sp, r7
 800e280:	bd80      	pop	{r7, pc}

0800e282 <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 800e282:	b580      	push	{r7, lr}
 800e284:	b086      	sub	sp, #24
 800e286:	af00      	add	r7, sp, #0
 800e288:	60f8      	str	r0, [r7, #12]
 800e28a:	60b9      	str	r1, [r7, #8]
 800e28c:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e28e:	e020      	b.n	800e2d2 <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	6818      	ldr	r0, [r3, #0]
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	69db      	ldr	r3, [r3, #28]
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	1ad3      	subs	r3, r2, r3
 800e29c:	1c59      	adds	r1, r3, #1
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	69db      	ldr	r3, [r3, #28]
 800e2a2:	2b01      	cmp	r3, #1
 800e2a4:	d905      	bls.n	800e2b2 <fill_last_frag+0x30>
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	69db      	ldr	r3, [r3, #28]
 800e2aa:	68ba      	ldr	r2, [r7, #8]
 800e2ac:	1ad3      	subs	r3, r2, r3
 800e2ae:	3302      	adds	r3, #2
 800e2b0:	e000      	b.n	800e2b4 <fill_last_frag+0x32>
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	461a      	mov	r2, r3
 800e2b6:	f7ff fde1 	bl	800de7c <put_fat>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 800e2be:	7dfb      	ldrb	r3, [r7, #23]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d001      	beq.n	800e2c8 <fill_last_frag+0x46>
 800e2c4:	7dfb      	ldrb	r3, [r7, #23]
 800e2c6:	e009      	b.n	800e2dc <fill_last_frag+0x5a>
		obj->n_frag--;
 800e2c8:	68fb      	ldr	r3, [r7, #12]
 800e2ca:	69db      	ldr	r3, [r3, #28]
 800e2cc:	1e5a      	subs	r2, r3, #1
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	69db      	ldr	r3, [r3, #28]
 800e2d6:	2b00      	cmp	r3, #0
 800e2d8:	d1da      	bne.n	800e290 <fill_last_frag+0xe>
	}
	return FR_OK;
 800e2da:	2300      	movs	r3, #0
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3718      	adds	r7, #24
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}

0800e2e4 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08a      	sub	sp, #40	; 0x28
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 800e2fa:	68bb      	ldr	r3, [r7, #8]
 800e2fc:	627b      	str	r3, [r7, #36]	; 0x24
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	2b01      	cmp	r3, #1
 800e306:	d904      	bls.n	800e312 <remove_chain+0x2e>
 800e308:	69bb      	ldr	r3, [r7, #24]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	68ba      	ldr	r2, [r7, #8]
 800e30e:	429a      	cmp	r2, r3
 800e310:	d301      	bcc.n	800e316 <remove_chain+0x32>
 800e312:	2302      	movs	r3, #2
 800e314:	e096      	b.n	800e444 <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d014      	beq.n	800e346 <remove_chain+0x62>
 800e31c:	69bb      	ldr	r3, [r7, #24]
 800e31e:	781b      	ldrb	r3, [r3, #0]
 800e320:	2b04      	cmp	r3, #4
 800e322:	d103      	bne.n	800e32c <remove_chain+0x48>
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	79db      	ldrb	r3, [r3, #7]
 800e328:	2b02      	cmp	r3, #2
 800e32a:	d00c      	beq.n	800e346 <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e32c:	f04f 32ff 	mov.w	r2, #4294967295
 800e330:	6879      	ldr	r1, [r7, #4]
 800e332:	69b8      	ldr	r0, [r7, #24]
 800e334:	f7ff fda2 	bl	800de7c <put_fat>
 800e338:	4603      	mov	r3, r0
 800e33a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e33c:	7ffb      	ldrb	r3, [r7, #31]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d001      	beq.n	800e346 <remove_chain+0x62>
 800e342:	7ffb      	ldrb	r3, [r7, #31]
 800e344:	e07e      	b.n	800e444 <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e346:	68b9      	ldr	r1, [r7, #8]
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f7ff fc7d 	bl	800dc48 <get_fat>
 800e34e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d055      	beq.n	800e402 <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e356:	697b      	ldr	r3, [r7, #20]
 800e358:	2b01      	cmp	r3, #1
 800e35a:	d101      	bne.n	800e360 <remove_chain+0x7c>
 800e35c:	2302      	movs	r3, #2
 800e35e:	e071      	b.n	800e444 <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e366:	d101      	bne.n	800e36c <remove_chain+0x88>
 800e368:	2301      	movs	r3, #1
 800e36a:	e06b      	b.n	800e444 <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 800e36c:	69bb      	ldr	r3, [r7, #24]
 800e36e:	781b      	ldrb	r3, [r3, #0]
 800e370:	2b04      	cmp	r3, #4
 800e372:	d00b      	beq.n	800e38c <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e374:	2200      	movs	r2, #0
 800e376:	68b9      	ldr	r1, [r7, #8]
 800e378:	69b8      	ldr	r0, [r7, #24]
 800e37a:	f7ff fd7f 	bl	800de7c <put_fat>
 800e37e:	4603      	mov	r3, r0
 800e380:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e382:	7ffb      	ldrb	r3, [r7, #31]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d001      	beq.n	800e38c <remove_chain+0xa8>
 800e388:	7ffb      	ldrb	r3, [r7, #31]
 800e38a:	e05b      	b.n	800e444 <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e38c:	69bb      	ldr	r3, [r7, #24]
 800e38e:	69da      	ldr	r2, [r3, #28]
 800e390:	69bb      	ldr	r3, [r7, #24]
 800e392:	6a1b      	ldr	r3, [r3, #32]
 800e394:	3b02      	subs	r3, #2
 800e396:	429a      	cmp	r2, r3
 800e398:	d20b      	bcs.n	800e3b2 <remove_chain+0xce>
			fs->free_clst++;
 800e39a:	69bb      	ldr	r3, [r7, #24]
 800e39c:	69db      	ldr	r3, [r3, #28]
 800e39e:	1c5a      	adds	r2, r3, #1
 800e3a0:	69bb      	ldr	r3, [r7, #24]
 800e3a2:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800e3a4:	69bb      	ldr	r3, [r7, #24]
 800e3a6:	791b      	ldrb	r3, [r3, #4]
 800e3a8:	f043 0301 	orr.w	r3, r3, #1
 800e3ac:	b2da      	uxtb	r2, r3
 800e3ae:	69bb      	ldr	r3, [r7, #24]
 800e3b0:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	3301      	adds	r3, #1
 800e3b6:	697a      	ldr	r2, [r7, #20]
 800e3b8:	429a      	cmp	r2, r3
 800e3ba:	d102      	bne.n	800e3c2 <remove_chain+0xde>
			ecl = nxt;
 800e3bc:	697b      	ldr	r3, [r7, #20]
 800e3be:	623b      	str	r3, [r7, #32]
 800e3c0:	e017      	b.n	800e3f2 <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800e3c2:	69bb      	ldr	r3, [r7, #24]
 800e3c4:	781b      	ldrb	r3, [r3, #0]
 800e3c6:	2b04      	cmp	r3, #4
 800e3c8:	d10f      	bne.n	800e3ea <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 800e3ca:	6a3a      	ldr	r2, [r7, #32]
 800e3cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ce:	1ad3      	subs	r3, r2, r3
 800e3d0:	1c5a      	adds	r2, r3, #1
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e3d6:	69b8      	ldr	r0, [r7, #24]
 800e3d8:	f7ff feba 	bl	800e150 <change_bitmap>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 800e3e0:	7ffb      	ldrb	r3, [r7, #31]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d001      	beq.n	800e3ea <remove_chain+0x106>
 800e3e6:	7ffb      	ldrb	r3, [r7, #31]
 800e3e8:	e02c      	b.n	800e444 <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 800e3ea:	697b      	ldr	r3, [r7, #20]
 800e3ec:	623b      	str	r3, [r7, #32]
 800e3ee:	6a3b      	ldr	r3, [r7, #32]
 800e3f0:	627b      	str	r3, [r7, #36]	; 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800e3f2:	697b      	ldr	r3, [r7, #20]
 800e3f4:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e3f6:	69bb      	ldr	r3, [r7, #24]
 800e3f8:	6a1b      	ldr	r3, [r3, #32]
 800e3fa:	68ba      	ldr	r2, [r7, #8]
 800e3fc:	429a      	cmp	r2, r3
 800e3fe:	d3a2      	bcc.n	800e346 <remove_chain+0x62>
 800e400:	e000      	b.n	800e404 <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800e402:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 800e404:	69bb      	ldr	r3, [r7, #24]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	2b04      	cmp	r3, #4
 800e40a:	d11a      	bne.n	800e442 <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d103      	bne.n	800e41a <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	2200      	movs	r2, #0
 800e416:	71da      	strb	r2, [r3, #7]
 800e418:	e013      	b.n	800e442 <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	79db      	ldrb	r3, [r3, #7]
 800e41e:	2b03      	cmp	r3, #3
 800e420:	d10f      	bne.n	800e442 <remove_chain+0x15e>
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	689b      	ldr	r3, [r3, #8]
 800e426:	687a      	ldr	r2, [r7, #4]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d30a      	bcc.n	800e442 <remove_chain+0x15e>
 800e42c:	68fb      	ldr	r3, [r7, #12]
 800e42e:	689a      	ldr	r2, [r3, #8]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	699b      	ldr	r3, [r3, #24]
 800e434:	4413      	add	r3, r2
 800e436:	687a      	ldr	r2, [r7, #4]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d802      	bhi.n	800e442 <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	2202      	movs	r2, #2
 800e440:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3728      	adds	r7, #40	; 0x28
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10d      	bne.n	800e47e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	699b      	ldr	r3, [r3, #24]
 800e466:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <create_chain+0x2c>
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	6a1b      	ldr	r3, [r3, #32]
 800e472:	69ba      	ldr	r2, [r7, #24]
 800e474:	429a      	cmp	r2, r3
 800e476:	d31b      	bcc.n	800e4b0 <create_chain+0x64>
 800e478:	2301      	movs	r3, #1
 800e47a:	61bb      	str	r3, [r7, #24]
 800e47c:	e018      	b.n	800e4b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7ff fbe1 	bl	800dc48 <get_fat>
 800e486:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d801      	bhi.n	800e492 <create_chain+0x46>
 800e48e:	2301      	movs	r3, #1
 800e490:	e0d9      	b.n	800e646 <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e498:	d101      	bne.n	800e49e <create_chain+0x52>
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	e0d3      	b.n	800e646 <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d201      	bcs.n	800e4ac <create_chain+0x60>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	e0cc      	b.n	800e646 <create_chain+0x1fa>
		scl = clst;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800e4b0:	693b      	ldr	r3, [r7, #16]
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b04      	cmp	r3, #4
 800e4b6:	d164      	bne.n	800e582 <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 800e4b8:	2201      	movs	r2, #1
 800e4ba:	69b9      	ldr	r1, [r7, #24]
 800e4bc:	6938      	ldr	r0, [r7, #16]
 800e4be:	f7ff fdcb 	bl	800e058 <find_bitmap>
 800e4c2:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d003      	beq.n	800e4d2 <create_chain+0x86>
 800e4ca:	69fb      	ldr	r3, [r7, #28]
 800e4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4d0:	d101      	bne.n	800e4d6 <create_chain+0x8a>
 800e4d2:	69fb      	ldr	r3, [r7, #28]
 800e4d4:	e0b7      	b.n	800e646 <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800e4d6:	2301      	movs	r3, #1
 800e4d8:	2201      	movs	r2, #1
 800e4da:	69f9      	ldr	r1, [r7, #28]
 800e4dc:	6938      	ldr	r0, [r7, #16]
 800e4de:	f7ff fe37 	bl	800e150 <change_bitmap>
 800e4e2:	4603      	mov	r3, r0
 800e4e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 800e4e6:	7dfb      	ldrb	r3, [r7, #23]
 800e4e8:	2b02      	cmp	r3, #2
 800e4ea:	d101      	bne.n	800e4f0 <create_chain+0xa4>
 800e4ec:	2301      	movs	r3, #1
 800e4ee:	e0aa      	b.n	800e646 <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 800e4f0:	7dfb      	ldrb	r3, [r7, #23]
 800e4f2:	2b01      	cmp	r3, #1
 800e4f4:	d102      	bne.n	800e4fc <create_chain+0xb0>
 800e4f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4fa:	e0a4      	b.n	800e646 <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 800e4fc:	683b      	ldr	r3, [r7, #0]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d103      	bne.n	800e50a <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	2202      	movs	r2, #2
 800e506:	71da      	strb	r2, [r3, #7]
 800e508:	e011      	b.n	800e52e <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	79db      	ldrb	r3, [r3, #7]
 800e50e:	2b02      	cmp	r3, #2
 800e510:	d10d      	bne.n	800e52e <create_chain+0xe2>
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	3301      	adds	r3, #1
 800e516:	69fa      	ldr	r2, [r7, #28]
 800e518:	429a      	cmp	r2, r3
 800e51a:	d008      	beq.n	800e52e <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	689b      	ldr	r3, [r3, #8]
 800e520:	69ba      	ldr	r2, [r7, #24]
 800e522:	1ad2      	subs	r2, r2, r3
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2203      	movs	r2, #3
 800e52c:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	79db      	ldrb	r3, [r3, #7]
 800e532:	2b02      	cmp	r3, #2
 800e534:	d064      	beq.n	800e600 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 800e536:	683b      	ldr	r3, [r7, #0]
 800e538:	3301      	adds	r3, #1
 800e53a:	69fa      	ldr	r2, [r7, #28]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d10b      	bne.n	800e558 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	69db      	ldr	r3, [r3, #28]
 800e544:	2b00      	cmp	r3, #0
 800e546:	d003      	beq.n	800e550 <create_chain+0x104>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	69db      	ldr	r3, [r3, #28]
 800e54c:	3301      	adds	r3, #1
 800e54e:	e000      	b.n	800e552 <create_chain+0x106>
 800e550:	2302      	movs	r3, #2
 800e552:	687a      	ldr	r2, [r7, #4]
 800e554:	61d3      	str	r3, [r2, #28]
 800e556:	e053      	b.n	800e600 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	69db      	ldr	r3, [r3, #28]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d102      	bne.n	800e566 <create_chain+0x11a>
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2201      	movs	r2, #1
 800e564:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800e566:	69fa      	ldr	r2, [r7, #28]
 800e568:	6839      	ldr	r1, [r7, #0]
 800e56a:	6878      	ldr	r0, [r7, #4]
 800e56c:	f7ff fe89 	bl	800e282 <fill_last_frag>
 800e570:	4603      	mov	r3, r0
 800e572:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800e574:	7dfb      	ldrb	r3, [r7, #23]
 800e576:	2b00      	cmp	r3, #0
 800e578:	d142      	bne.n	800e600 <create_chain+0x1b4>
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	2201      	movs	r2, #1
 800e57e:	61da      	str	r2, [r3, #28]
 800e580:	e03e      	b.n	800e600 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e582:	69bb      	ldr	r3, [r7, #24]
 800e584:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	3301      	adds	r3, #1
 800e58a:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e58c:	693b      	ldr	r3, [r7, #16]
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	69fa      	ldr	r2, [r7, #28]
 800e592:	429a      	cmp	r2, r3
 800e594:	d307      	bcc.n	800e5a6 <create_chain+0x15a>
				ncl = 2;
 800e596:	2302      	movs	r3, #2
 800e598:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e59a:	69fa      	ldr	r2, [r7, #28]
 800e59c:	69bb      	ldr	r3, [r7, #24]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d901      	bls.n	800e5a6 <create_chain+0x15a>
 800e5a2:	2300      	movs	r3, #0
 800e5a4:	e04f      	b.n	800e646 <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e5a6:	69f9      	ldr	r1, [r7, #28]
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff fb4d 	bl	800dc48 <get_fat>
 800e5ae:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d00e      	beq.n	800e5d4 <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	2b01      	cmp	r3, #1
 800e5ba:	d003      	beq.n	800e5c4 <create_chain+0x178>
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5c2:	d101      	bne.n	800e5c8 <create_chain+0x17c>
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	e03e      	b.n	800e646 <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 800e5c8:	69fa      	ldr	r2, [r7, #28]
 800e5ca:	69bb      	ldr	r3, [r7, #24]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d1da      	bne.n	800e586 <create_chain+0x13a>
 800e5d0:	2300      	movs	r3, #0
 800e5d2:	e038      	b.n	800e646 <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800e5d4:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e5d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e5da:	69f9      	ldr	r1, [r7, #28]
 800e5dc:	6938      	ldr	r0, [r7, #16]
 800e5de:	f7ff fc4d 	bl	800de7c <put_fat>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d109      	bne.n	800e600 <create_chain+0x1b4>
 800e5ec:	683b      	ldr	r3, [r7, #0]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d006      	beq.n	800e600 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e5f2:	69fa      	ldr	r2, [r7, #28]
 800e5f4:	6839      	ldr	r1, [r7, #0]
 800e5f6:	6938      	ldr	r0, [r7, #16]
 800e5f8:	f7ff fc40 	bl	800de7c <put_fat>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e600:	7dfb      	ldrb	r3, [r7, #23]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d116      	bne.n	800e634 <create_chain+0x1e8>
		fs->last_clst = ncl;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	69fa      	ldr	r2, [r7, #28]
 800e60a:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	69da      	ldr	r2, [r3, #28]
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6a1b      	ldr	r3, [r3, #32]
 800e614:	3b02      	subs	r3, #2
 800e616:	429a      	cmp	r2, r3
 800e618:	d804      	bhi.n	800e624 <create_chain+0x1d8>
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	69db      	ldr	r3, [r3, #28]
 800e61e:	1e5a      	subs	r2, r3, #1
 800e620:	693b      	ldr	r3, [r7, #16]
 800e622:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	791b      	ldrb	r3, [r3, #4]
 800e628:	f043 0301 	orr.w	r3, r3, #1
 800e62c:	b2da      	uxtb	r2, r3
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	711a      	strb	r2, [r3, #4]
 800e632:	e007      	b.n	800e644 <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e634:	7dfb      	ldrb	r3, [r7, #23]
 800e636:	2b01      	cmp	r3, #1
 800e638:	d102      	bne.n	800e640 <create_chain+0x1f4>
 800e63a:	f04f 33ff 	mov.w	r3, #4294967295
 800e63e:	e000      	b.n	800e642 <create_chain+0x1f6>
 800e640:	2301      	movs	r3, #1
 800e642:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e644:	69fb      	ldr	r3, [r7, #28]
}
 800e646:	4618      	mov	r0, r3
 800e648:	3720      	adds	r7, #32
 800e64a:	46bd      	mov	sp, r7
 800e64c:	bd80      	pop	{r7, pc}

0800e64e <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e64e:	b5b0      	push	{r4, r5, r7, lr}
 800e650:	b088      	sub	sp, #32
 800e652:	af00      	add	r7, sp, #0
 800e654:	60f8      	str	r0, [r7, #12]
 800e656:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e664:	3304      	adds	r3, #4
 800e666:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e66c:	f04f 0000 	mov.w	r0, #0
 800e670:	f04f 0100 	mov.w	r1, #0
 800e674:	0a50      	lsrs	r0, r2, #9
 800e676:	ea40 50c3 	orr.w	r0, r0, r3, lsl #23
 800e67a:	0a59      	lsrs	r1, r3, #9
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	895b      	ldrh	r3, [r3, #10]
 800e680:	b29b      	uxth	r3, r3
 800e682:	2200      	movs	r2, #0
 800e684:	461c      	mov	r4, r3
 800e686:	4615      	mov	r5, r2
 800e688:	4622      	mov	r2, r4
 800e68a:	462b      	mov	r3, r5
 800e68c:	f7f1 fde0 	bl	8000250 <__aeabi_uldivmod>
 800e690:	4602      	mov	r2, r0
 800e692:	460b      	mov	r3, r1
 800e694:	4613      	mov	r3, r2
 800e696:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	1d1a      	adds	r2, r3, #4
 800e69c:	61ba      	str	r2, [r7, #24]
 800e69e:	681b      	ldr	r3, [r3, #0]
 800e6a0:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e6a2:	693b      	ldr	r3, [r7, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d101      	bne.n	800e6ac <clmt_clust+0x5e>
 800e6a8:	2300      	movs	r3, #0
 800e6aa:	e010      	b.n	800e6ce <clmt_clust+0x80>
		if (cl < ncl) break;	/* In this fragment? */
 800e6ac:	69fa      	ldr	r2, [r7, #28]
 800e6ae:	693b      	ldr	r3, [r7, #16]
 800e6b0:	429a      	cmp	r2, r3
 800e6b2:	d307      	bcc.n	800e6c4 <clmt_clust+0x76>
		cl -= ncl; tbl++;		/* Next fragment */
 800e6b4:	69fa      	ldr	r2, [r7, #28]
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	61fb      	str	r3, [r7, #28]
 800e6bc:	69bb      	ldr	r3, [r7, #24]
 800e6be:	3304      	adds	r3, #4
 800e6c0:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e6c2:	e7e9      	b.n	800e698 <clmt_clust+0x4a>
		if (cl < ncl) break;	/* In this fragment? */
 800e6c4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e6c6:	69bb      	ldr	r3, [r7, #24]
 800e6c8:	681a      	ldr	r2, [r3, #0]
 800e6ca:	69fb      	ldr	r3, [r7, #28]
 800e6cc:	4413      	add	r3, r2
}
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	3720      	adds	r7, #32
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	bdb0      	pop	{r4, r5, r7, pc}

0800e6d6 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e6d6:	b580      	push	{r7, lr}
 800e6d8:	b086      	sub	sp, #24
 800e6da:	af00      	add	r7, sp, #0
 800e6dc:	6078      	str	r0, [r7, #4]
 800e6de:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	781b      	ldrb	r3, [r3, #0]
 800e6ea:	2b04      	cmp	r3, #4
 800e6ec:	d102      	bne.n	800e6f4 <dir_sdi+0x1e>
 800e6ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6f2:	e001      	b.n	800e6f8 <dir_sdi+0x22>
 800e6f4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e6f8:	683b      	ldr	r3, [r7, #0]
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d904      	bls.n	800e708 <dir_sdi+0x32>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	f003 031f 	and.w	r3, r3, #31
 800e704:	2b00      	cmp	r3, #0
 800e706:	d001      	beq.n	800e70c <dir_sdi+0x36>
		return FR_INT_ERR;
 800e708:	2302      	movs	r3, #2
 800e70a:	e066      	b.n	800e7da <dir_sdi+0x104>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	631a      	str	r2, [r3, #48]	; 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d109      	bne.n	800e732 <dir_sdi+0x5c>
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	781b      	ldrb	r3, [r3, #0]
 800e722:	2b02      	cmp	r3, #2
 800e724:	d905      	bls.n	800e732 <dir_sdi+0x5c>
		clst = fs->dirbase;
 800e726:	693b      	ldr	r3, [r7, #16]
 800e728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e72a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	2200      	movs	r2, #0
 800e730:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e732:	697b      	ldr	r3, [r7, #20]
 800e734:	2b00      	cmp	r3, #0
 800e736:	d10c      	bne.n	800e752 <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	095b      	lsrs	r3, r3, #5
 800e73c:	693a      	ldr	r2, [r7, #16]
 800e73e:	8912      	ldrh	r2, [r2, #8]
 800e740:	4293      	cmp	r3, r2
 800e742:	d301      	bcc.n	800e748 <dir_sdi+0x72>
 800e744:	2302      	movs	r3, #2
 800e746:	e048      	b.n	800e7da <dir_sdi+0x104>
		dp->sect = fs->dirbase;
 800e748:	693b      	ldr	r3, [r7, #16]
 800e74a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	639a      	str	r2, [r3, #56]	; 0x38
 800e750:	e029      	b.n	800e7a6 <dir_sdi+0xd0>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	895b      	ldrh	r3, [r3, #10]
 800e756:	025b      	lsls	r3, r3, #9
 800e758:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e75a:	e019      	b.n	800e790 <dir_sdi+0xba>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6979      	ldr	r1, [r7, #20]
 800e760:	4618      	mov	r0, r3
 800e762:	f7ff fa71 	bl	800dc48 <get_fat>
 800e766:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76e:	d101      	bne.n	800e774 <dir_sdi+0x9e>
 800e770:	2301      	movs	r3, #1
 800e772:	e032      	b.n	800e7da <dir_sdi+0x104>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e774:	697b      	ldr	r3, [r7, #20]
 800e776:	2b01      	cmp	r3, #1
 800e778:	d904      	bls.n	800e784 <dir_sdi+0xae>
 800e77a:	693b      	ldr	r3, [r7, #16]
 800e77c:	6a1b      	ldr	r3, [r3, #32]
 800e77e:	697a      	ldr	r2, [r7, #20]
 800e780:	429a      	cmp	r2, r3
 800e782:	d301      	bcc.n	800e788 <dir_sdi+0xb2>
 800e784:	2302      	movs	r3, #2
 800e786:	e028      	b.n	800e7da <dir_sdi+0x104>
			ofs -= csz;
 800e788:	683a      	ldr	r2, [r7, #0]
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	1ad3      	subs	r3, r2, r3
 800e78e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e790:	683a      	ldr	r2, [r7, #0]
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	429a      	cmp	r2, r3
 800e796:	d2e1      	bcs.n	800e75c <dir_sdi+0x86>
		}
		dp->sect = clust2sect(fs, clst);
 800e798:	6979      	ldr	r1, [r7, #20]
 800e79a:	6938      	ldr	r0, [r7, #16]
 800e79c:	f7ff fa34 	bl	800dc08 <clust2sect>
 800e7a0:	4602      	mov	r2, r0
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	639a      	str	r2, [r3, #56]	; 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	697a      	ldr	r2, [r7, #20]
 800e7aa:	635a      	str	r2, [r3, #52]	; 0x34
	if (!dp->sect) return FR_INT_ERR;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	d101      	bne.n	800e7b8 <dir_sdi+0xe2>
 800e7b4:	2302      	movs	r3, #2
 800e7b6:	e010      	b.n	800e7da <dir_sdi+0x104>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	0a5b      	lsrs	r3, r3, #9
 800e7c0:	441a      	add	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	639a      	str	r2, [r3, #56]	; 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e7c6:	693b      	ldr	r3, [r7, #16]
 800e7c8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7d2:	441a      	add	r2, r3
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e7d8:	2300      	movs	r3, #0
}
 800e7da:	4618      	mov	r0, r3
 800e7dc:	3718      	adds	r7, #24
 800e7de:	46bd      	mov	sp, r7
 800e7e0:	bd80      	pop	{r7, pc}

0800e7e2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e7e2:	b580      	push	{r7, lr}
 800e7e4:	b086      	sub	sp, #24
 800e7e6:	af00      	add	r7, sp, #0
 800e7e8:	6078      	str	r0, [r7, #4]
 800e7ea:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7f6:	3320      	adds	r3, #32
 800e7f8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00b      	beq.n	800e81a <dir_next+0x38>
 800e802:	68fb      	ldr	r3, [r7, #12]
 800e804:	781b      	ldrb	r3, [r3, #0]
 800e806:	2b04      	cmp	r3, #4
 800e808:	d102      	bne.n	800e810 <dir_next+0x2e>
 800e80a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e80e:	e001      	b.n	800e814 <dir_next+0x32>
 800e810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e814:	68bb      	ldr	r3, [r7, #8]
 800e816:	429a      	cmp	r2, r3
 800e818:	d801      	bhi.n	800e81e <dir_next+0x3c>
 800e81a:	2304      	movs	r3, #4
 800e81c:	e0b2      	b.n	800e984 <dir_next+0x1a2>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e81e:	68bb      	ldr	r3, [r7, #8]
 800e820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e824:	2b00      	cmp	r3, #0
 800e826:	f040 80a0 	bne.w	800e96a <dir_next+0x188>
		dp->sect++;				/* Next sector */
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e82e:	1c5a      	adds	r2, r3, #1
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	639a      	str	r2, [r3, #56]	; 0x38

		if (!dp->clust) {		/* Static table */
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10b      	bne.n	800e854 <dir_next+0x72>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	095b      	lsrs	r3, r3, #5
 800e840:	68fa      	ldr	r2, [r7, #12]
 800e842:	8912      	ldrh	r2, [r2, #8]
 800e844:	4293      	cmp	r3, r2
 800e846:	f0c0 8090 	bcc.w	800e96a <dir_next+0x188>
				dp->sect = 0; return FR_NO_FILE;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	639a      	str	r2, [r3, #56]	; 0x38
 800e850:	2304      	movs	r3, #4
 800e852:	e097      	b.n	800e984 <dir_next+0x1a2>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e854:	68bb      	ldr	r3, [r7, #8]
 800e856:	0a5b      	lsrs	r3, r3, #9
 800e858:	68fa      	ldr	r2, [r7, #12]
 800e85a:	8952      	ldrh	r2, [r2, #10]
 800e85c:	3a01      	subs	r2, #1
 800e85e:	4013      	ands	r3, r2
 800e860:	2b00      	cmp	r3, #0
 800e862:	f040 8082 	bne.w	800e96a <dir_next+0x188>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e86c:	4619      	mov	r1, r3
 800e86e:	4610      	mov	r0, r2
 800e870:	f7ff f9ea 	bl	800dc48 <get_fat>
 800e874:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e876:	697b      	ldr	r3, [r7, #20]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d801      	bhi.n	800e880 <dir_next+0x9e>
 800e87c:	2302      	movs	r3, #2
 800e87e:	e081      	b.n	800e984 <dir_next+0x1a2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e880:	697b      	ldr	r3, [r7, #20]
 800e882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e886:	d101      	bne.n	800e88c <dir_next+0xaa>
 800e888:	2301      	movs	r3, #1
 800e88a:	e07b      	b.n	800e984 <dir_next+0x1a2>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	6a1b      	ldr	r3, [r3, #32]
 800e890:	697a      	ldr	r2, [r7, #20]
 800e892:	429a      	cmp	r2, r3
 800e894:	d35f      	bcc.n	800e956 <dir_next+0x174>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e896:	683b      	ldr	r3, [r7, #0]
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d104      	bne.n	800e8a6 <dir_next+0xc4>
						dp->sect = 0; return FR_NO_FILE;
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2200      	movs	r2, #0
 800e8a0:	639a      	str	r2, [r3, #56]	; 0x38
 800e8a2:	2304      	movs	r3, #4
 800e8a4:	e06e      	b.n	800e984 <dir_next+0x1a2>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e8a6:	687a      	ldr	r2, [r7, #4]
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e8ac:	4619      	mov	r1, r3
 800e8ae:	4610      	mov	r0, r2
 800e8b0:	f7ff fdcc 	bl	800e44c <create_chain>
 800e8b4:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e8b6:	697b      	ldr	r3, [r7, #20]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d101      	bne.n	800e8c0 <dir_next+0xde>
 800e8bc:	2307      	movs	r3, #7
 800e8be:	e061      	b.n	800e984 <dir_next+0x1a2>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2b01      	cmp	r3, #1
 800e8c4:	d101      	bne.n	800e8ca <dir_next+0xe8>
 800e8c6:	2302      	movs	r3, #2
 800e8c8:	e05c      	b.n	800e984 <dir_next+0x1a2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8ca:	697b      	ldr	r3, [r7, #20]
 800e8cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8d0:	d101      	bne.n	800e8d6 <dir_next+0xf4>
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	e056      	b.n	800e984 <dir_next+0x1a2>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	79db      	ldrb	r3, [r3, #7]
 800e8da:	f043 0304 	orr.w	r3, r3, #4
 800e8de:	b2da      	uxtb	r2, r3
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e8e4:	68f8      	ldr	r0, [r7, #12]
 800e8e6:	f7ff f8af 	bl	800da48 <sync_window>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <dir_next+0x112>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	e047      	b.n	800e984 <dir_next+0x1a2>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	333c      	adds	r3, #60	; 0x3c
 800e8f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8fc:	2100      	movs	r1, #0
 800e8fe:	4618      	mov	r0, r3
 800e900:	f7fe fea8 	bl	800d654 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e904:	2300      	movs	r3, #0
 800e906:	613b      	str	r3, [r7, #16]
 800e908:	6979      	ldr	r1, [r7, #20]
 800e90a:	68f8      	ldr	r0, [r7, #12]
 800e90c:	f7ff f97c 	bl	800dc08 <clust2sect>
 800e910:	4602      	mov	r2, r0
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	639a      	str	r2, [r3, #56]	; 0x38
 800e916:	e012      	b.n	800e93e <dir_next+0x15c>
						fs->wflag = 1;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	2201      	movs	r2, #1
 800e91c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e91e:	68f8      	ldr	r0, [r7, #12]
 800e920:	f7ff f892 	bl	800da48 <sync_window>
 800e924:	4603      	mov	r3, r0
 800e926:	2b00      	cmp	r3, #0
 800e928:	d001      	beq.n	800e92e <dir_next+0x14c>
 800e92a:	2301      	movs	r3, #1
 800e92c:	e02a      	b.n	800e984 <dir_next+0x1a2>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	3301      	adds	r3, #1
 800e932:	613b      	str	r3, [r7, #16]
 800e934:	68fb      	ldr	r3, [r7, #12]
 800e936:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e938:	1c5a      	adds	r2, r3, #1
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	639a      	str	r2, [r3, #56]	; 0x38
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	895b      	ldrh	r3, [r3, #10]
 800e942:	461a      	mov	r2, r3
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	4293      	cmp	r3, r2
 800e948:	d3e6      	bcc.n	800e918 <dir_next+0x136>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e94a:	68fb      	ldr	r3, [r7, #12]
 800e94c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	1ad2      	subs	r2, r2, r3
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	697a      	ldr	r2, [r7, #20]
 800e95a:	635a      	str	r2, [r3, #52]	; 0x34
				dp->sect = clust2sect(fs, clst);
 800e95c:	6979      	ldr	r1, [r7, #20]
 800e95e:	68f8      	ldr	r0, [r7, #12]
 800e960:	f7ff f952 	bl	800dc08 <clust2sect>
 800e964:	4602      	mov	r2, r0
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	639a      	str	r2, [r3, #56]	; 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68ba      	ldr	r2, [r7, #8]
 800e96e:	631a      	str	r2, [r3, #48]	; 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e97c:	441a      	add	r2, r3
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	63da      	str	r2, [r3, #60]	; 0x3c

	return FR_OK;
 800e982:	2300      	movs	r3, #0
}
 800e984:	4618      	mov	r0, r3
 800e986:	3718      	adds	r7, #24
 800e988:	46bd      	mov	sp, r7
 800e98a:	bd80      	pop	{r7, pc}

0800e98c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b086      	sub	sp, #24
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e99c:	2100      	movs	r1, #0
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	f7ff fe99 	bl	800e6d6 <dir_sdi>
 800e9a4:	4603      	mov	r3, r0
 800e9a6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e9a8:	7dfb      	ldrb	r3, [r7, #23]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d140      	bne.n	800ea30 <dir_alloc+0xa4>
		n = 0;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e9b6:	4619      	mov	r1, r3
 800e9b8:	68f8      	ldr	r0, [r7, #12]
 800e9ba:	f7ff f889 	bl	800dad0 <move_window>
 800e9be:	4603      	mov	r3, r0
 800e9c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e9c2:	7dfb      	ldrb	r3, [r7, #23]
 800e9c4:	2b00      	cmp	r3, #0
 800e9c6:	d132      	bne.n	800ea2e <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	781b      	ldrb	r3, [r3, #0]
 800e9cc:	2b04      	cmp	r3, #4
 800e9ce:	d108      	bne.n	800e9e2 <dir_alloc+0x56>
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	b25b      	sxtb	r3, r3
 800e9d8:	43db      	mvns	r3, r3
 800e9da:	b2db      	uxtb	r3, r3
 800e9dc:	09db      	lsrs	r3, r3, #7
 800e9de:	b2db      	uxtb	r3, r3
 800e9e0:	e00f      	b.n	800ea02 <dir_alloc+0x76>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	2be5      	cmp	r3, #229	; 0xe5
 800e9ea:	d004      	beq.n	800e9f6 <dir_alloc+0x6a>
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d101      	bne.n	800e9fa <dir_alloc+0x6e>
 800e9f6:	2301      	movs	r3, #1
 800e9f8:	e000      	b.n	800e9fc <dir_alloc+0x70>
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	f003 0301 	and.w	r3, r3, #1
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d007      	beq.n	800ea16 <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	3301      	adds	r3, #1
 800ea0a:	613b      	str	r3, [r7, #16]
 800ea0c:	693a      	ldr	r2, [r7, #16]
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	429a      	cmp	r2, r3
 800ea12:	d102      	bne.n	800ea1a <dir_alloc+0x8e>
 800ea14:	e00c      	b.n	800ea30 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ea16:	2300      	movs	r3, #0
 800ea18:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f7ff fee0 	bl	800e7e2 <dir_next>
 800ea22:	4603      	mov	r3, r0
 800ea24:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ea26:	7dfb      	ldrb	r3, [r7, #23]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d0c2      	beq.n	800e9b2 <dir_alloc+0x26>
 800ea2c:	e000      	b.n	800ea30 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 800ea2e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ea30:	7dfb      	ldrb	r3, [r7, #23]
 800ea32:	2b04      	cmp	r3, #4
 800ea34:	d101      	bne.n	800ea3a <dir_alloc+0xae>
 800ea36:	2307      	movs	r3, #7
 800ea38:	75fb      	strb	r3, [r7, #23]
	return res;
 800ea3a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	3718      	adds	r7, #24
 800ea40:	46bd      	mov	sp, r7
 800ea42:	bd80      	pop	{r7, pc}

0800ea44 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800ea44:	b580      	push	{r7, lr}
 800ea46:	b084      	sub	sp, #16
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800ea4e:	683b      	ldr	r3, [r7, #0]
 800ea50:	331a      	adds	r3, #26
 800ea52:	4618      	mov	r0, r3
 800ea54:	f7fe fbf8 	bl	800d248 <ld_word>
 800ea58:	4603      	mov	r3, r0
 800ea5a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	781b      	ldrb	r3, [r3, #0]
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	d109      	bne.n	800ea78 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ea64:	683b      	ldr	r3, [r7, #0]
 800ea66:	3314      	adds	r3, #20
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f7fe fbed 	bl	800d248 <ld_word>
 800ea6e:	4603      	mov	r3, r0
 800ea70:	041b      	lsls	r3, r3, #16
 800ea72:	68fa      	ldr	r2, [r7, #12]
 800ea74:	4313      	orrs	r3, r2
 800ea76:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ea78:	68fb      	ldr	r3, [r7, #12]
}
 800ea7a:	4618      	mov	r0, r3
 800ea7c:	3710      	adds	r7, #16
 800ea7e:	46bd      	mov	sp, r7
 800ea80:	bd80      	pop	{r7, pc}

0800ea82 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ea82:	b580      	push	{r7, lr}
 800ea84:	b084      	sub	sp, #16
 800ea86:	af00      	add	r7, sp, #0
 800ea88:	60f8      	str	r0, [r7, #12]
 800ea8a:	60b9      	str	r1, [r7, #8]
 800ea8c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	331a      	adds	r3, #26
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	b292      	uxth	r2, r2
 800ea96:	4611      	mov	r1, r2
 800ea98:	4618      	mov	r0, r3
 800ea9a:	f7fe fceb 	bl	800d474 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ea9e:	68fb      	ldr	r3, [r7, #12]
 800eaa0:	781b      	ldrb	r3, [r3, #0]
 800eaa2:	2b03      	cmp	r3, #3
 800eaa4:	d109      	bne.n	800eaba <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800eaa6:	68bb      	ldr	r3, [r7, #8]
 800eaa8:	f103 0214 	add.w	r2, r3, #20
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	0c1b      	lsrs	r3, r3, #16
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	4619      	mov	r1, r3
 800eab4:	4610      	mov	r0, r2
 800eab6:	f7fe fcdd 	bl	800d474 <st_word>
	}
}
 800eaba:	bf00      	nop
 800eabc:	3710      	adds	r7, #16
 800eabe:	46bd      	mov	sp, r7
 800eac0:	bd80      	pop	{r7, pc}
	...

0800eac4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800eac4:	b590      	push	{r4, r7, lr}
 800eac6:	b087      	sub	sp, #28
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	6078      	str	r0, [r7, #4]
 800eacc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800eace:	683b      	ldr	r3, [r7, #0]
 800ead0:	331a      	adds	r3, #26
 800ead2:	4618      	mov	r0, r3
 800ead4:	f7fe fbb8 	bl	800d248 <ld_word>
 800ead8:	4603      	mov	r3, r0
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d001      	beq.n	800eae2 <cmp_lfn+0x1e>
 800eade:	2300      	movs	r3, #0
 800eae0:	e059      	b.n	800eb96 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800eae2:	683b      	ldr	r3, [r7, #0]
 800eae4:	781b      	ldrb	r3, [r3, #0]
 800eae6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eaea:	1e5a      	subs	r2, r3, #1
 800eaec:	4613      	mov	r3, r2
 800eaee:	005b      	lsls	r3, r3, #1
 800eaf0:	4413      	add	r3, r2
 800eaf2:	009b      	lsls	r3, r3, #2
 800eaf4:	4413      	add	r3, r2
 800eaf6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eaf8:	2301      	movs	r3, #1
 800eafa:	81fb      	strh	r3, [r7, #14]
 800eafc:	2300      	movs	r3, #0
 800eafe:	613b      	str	r3, [r7, #16]
 800eb00:	e033      	b.n	800eb6a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800eb02:	4a27      	ldr	r2, [pc, #156]	; (800eba0 <cmp_lfn+0xdc>)
 800eb04:	693b      	ldr	r3, [r7, #16]
 800eb06:	4413      	add	r3, r2
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	461a      	mov	r2, r3
 800eb0c:	683b      	ldr	r3, [r7, #0]
 800eb0e:	4413      	add	r3, r2
 800eb10:	4618      	mov	r0, r3
 800eb12:	f7fe fb99 	bl	800d248 <ld_word>
 800eb16:	4603      	mov	r3, r0
 800eb18:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800eb1a:	89fb      	ldrh	r3, [r7, #14]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d01a      	beq.n	800eb56 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800eb20:	697b      	ldr	r3, [r7, #20]
 800eb22:	2bfe      	cmp	r3, #254	; 0xfe
 800eb24:	d812      	bhi.n	800eb4c <cmp_lfn+0x88>
 800eb26:	89bb      	ldrh	r3, [r7, #12]
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f002 fef7 	bl	801191c <ff_wtoupper>
 800eb2e:	4603      	mov	r3, r0
 800eb30:	461c      	mov	r4, r3
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	1c5a      	adds	r2, r3, #1
 800eb36:	617a      	str	r2, [r7, #20]
 800eb38:	005b      	lsls	r3, r3, #1
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	881b      	ldrh	r3, [r3, #0]
 800eb40:	4618      	mov	r0, r3
 800eb42:	f002 feeb 	bl	801191c <ff_wtoupper>
 800eb46:	4603      	mov	r3, r0
 800eb48:	429c      	cmp	r4, r3
 800eb4a:	d001      	beq.n	800eb50 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	e022      	b.n	800eb96 <cmp_lfn+0xd2>
			}
			wc = uc;
 800eb50:	89bb      	ldrh	r3, [r7, #12]
 800eb52:	81fb      	strh	r3, [r7, #14]
 800eb54:	e006      	b.n	800eb64 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800eb56:	89bb      	ldrh	r3, [r7, #12]
 800eb58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eb5c:	4293      	cmp	r3, r2
 800eb5e:	d001      	beq.n	800eb64 <cmp_lfn+0xa0>
 800eb60:	2300      	movs	r3, #0
 800eb62:	e018      	b.n	800eb96 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800eb64:	693b      	ldr	r3, [r7, #16]
 800eb66:	3301      	adds	r3, #1
 800eb68:	613b      	str	r3, [r7, #16]
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2b0c      	cmp	r3, #12
 800eb6e:	d9c8      	bls.n	800eb02 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	781b      	ldrb	r3, [r3, #0]
 800eb74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d00b      	beq.n	800eb94 <cmp_lfn+0xd0>
 800eb7c:	89fb      	ldrh	r3, [r7, #14]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d008      	beq.n	800eb94 <cmp_lfn+0xd0>
 800eb82:	697b      	ldr	r3, [r7, #20]
 800eb84:	005b      	lsls	r3, r3, #1
 800eb86:	687a      	ldr	r2, [r7, #4]
 800eb88:	4413      	add	r3, r2
 800eb8a:	881b      	ldrh	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d001      	beq.n	800eb94 <cmp_lfn+0xd0>
 800eb90:	2300      	movs	r3, #0
 800eb92:	e000      	b.n	800eb96 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800eb94:	2301      	movs	r3, #1
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	371c      	adds	r7, #28
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd90      	pop	{r4, r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	080167c4 	.word	0x080167c4

0800eba4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
 800ebac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	331a      	adds	r3, #26
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fe fb48 	bl	800d248 <ld_word>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d001      	beq.n	800ebc2 <pick_lfn+0x1e>
 800ebbe:	2300      	movs	r3, #0
 800ebc0:	e04d      	b.n	800ec5e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	781b      	ldrb	r3, [r3, #0]
 800ebc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebca:	1e5a      	subs	r2, r3, #1
 800ebcc:	4613      	mov	r3, r2
 800ebce:	005b      	lsls	r3, r3, #1
 800ebd0:	4413      	add	r3, r2
 800ebd2:	009b      	lsls	r3, r3, #2
 800ebd4:	4413      	add	r3, r2
 800ebd6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ebd8:	2301      	movs	r3, #1
 800ebda:	81fb      	strh	r3, [r7, #14]
 800ebdc:	2300      	movs	r3, #0
 800ebde:	613b      	str	r3, [r7, #16]
 800ebe0:	e028      	b.n	800ec34 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800ebe2:	4a21      	ldr	r2, [pc, #132]	; (800ec68 <pick_lfn+0xc4>)
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	4413      	add	r3, r2
 800ebe8:	781b      	ldrb	r3, [r3, #0]
 800ebea:	461a      	mov	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	4413      	add	r3, r2
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	f7fe fb29 	bl	800d248 <ld_word>
 800ebf6:	4603      	mov	r3, r0
 800ebf8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800ebfa:	89fb      	ldrh	r3, [r7, #14]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d00f      	beq.n	800ec20 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	2bfe      	cmp	r3, #254	; 0xfe
 800ec04:	d901      	bls.n	800ec0a <pick_lfn+0x66>
 800ec06:	2300      	movs	r3, #0
 800ec08:	e029      	b.n	800ec5e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800ec0a:	89bb      	ldrh	r3, [r7, #12]
 800ec0c:	81fb      	strh	r3, [r7, #14]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	1c5a      	adds	r2, r3, #1
 800ec12:	617a      	str	r2, [r7, #20]
 800ec14:	005b      	lsls	r3, r3, #1
 800ec16:	687a      	ldr	r2, [r7, #4]
 800ec18:	4413      	add	r3, r2
 800ec1a:	89fa      	ldrh	r2, [r7, #14]
 800ec1c:	801a      	strh	r2, [r3, #0]
 800ec1e:	e006      	b.n	800ec2e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800ec20:	89bb      	ldrh	r3, [r7, #12]
 800ec22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec26:	4293      	cmp	r3, r2
 800ec28:	d001      	beq.n	800ec2e <pick_lfn+0x8a>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	e017      	b.n	800ec5e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	3301      	adds	r3, #1
 800ec32:	613b      	str	r3, [r7, #16]
 800ec34:	693b      	ldr	r3, [r7, #16]
 800ec36:	2b0c      	cmp	r3, #12
 800ec38:	d9d3      	bls.n	800ebe2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	781b      	ldrb	r3, [r3, #0]
 800ec3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00a      	beq.n	800ec5c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800ec46:	697b      	ldr	r3, [r7, #20]
 800ec48:	2bfe      	cmp	r3, #254	; 0xfe
 800ec4a:	d901      	bls.n	800ec50 <pick_lfn+0xac>
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	e006      	b.n	800ec5e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	005b      	lsls	r3, r3, #1
 800ec54:	687a      	ldr	r2, [r7, #4]
 800ec56:	4413      	add	r3, r2
 800ec58:	2200      	movs	r2, #0
 800ec5a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800ec5c:	2301      	movs	r3, #1
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
 800ec66:	bf00      	nop
 800ec68:	080167c4 	.word	0x080167c4

0800ec6c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800ec6c:	b580      	push	{r7, lr}
 800ec6e:	b088      	sub	sp, #32
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	60f8      	str	r0, [r7, #12]
 800ec74:	60b9      	str	r1, [r7, #8]
 800ec76:	4611      	mov	r1, r2
 800ec78:	461a      	mov	r2, r3
 800ec7a:	460b      	mov	r3, r1
 800ec7c:	71fb      	strb	r3, [r7, #7]
 800ec7e:	4613      	mov	r3, r2
 800ec80:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	330d      	adds	r3, #13
 800ec86:	79ba      	ldrb	r2, [r7, #6]
 800ec88:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	330b      	adds	r3, #11
 800ec8e:	220f      	movs	r2, #15
 800ec90:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	330c      	adds	r3, #12
 800ec96:	2200      	movs	r2, #0
 800ec98:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	331a      	adds	r3, #26
 800ec9e:	2100      	movs	r1, #0
 800eca0:	4618      	mov	r0, r3
 800eca2:	f7fe fbe7 	bl	800d474 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800eca6:	79fb      	ldrb	r3, [r7, #7]
 800eca8:	1e5a      	subs	r2, r3, #1
 800ecaa:	4613      	mov	r3, r2
 800ecac:	005b      	lsls	r3, r3, #1
 800ecae:	4413      	add	r3, r2
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800ecb6:	2300      	movs	r3, #0
 800ecb8:	82fb      	strh	r3, [r7, #22]
 800ecba:	2300      	movs	r3, #0
 800ecbc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ecbe:	8afb      	ldrh	r3, [r7, #22]
 800ecc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecc4:	4293      	cmp	r3, r2
 800ecc6:	d007      	beq.n	800ecd8 <put_lfn+0x6c>
 800ecc8:	69fb      	ldr	r3, [r7, #28]
 800ecca:	1c5a      	adds	r2, r3, #1
 800eccc:	61fa      	str	r2, [r7, #28]
 800ecce:	005b      	lsls	r3, r3, #1
 800ecd0:	68fa      	ldr	r2, [r7, #12]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800ecd8:	4a17      	ldr	r2, [pc, #92]	; (800ed38 <put_lfn+0xcc>)
 800ecda:	69bb      	ldr	r3, [r7, #24]
 800ecdc:	4413      	add	r3, r2
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	461a      	mov	r2, r3
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	4413      	add	r3, r2
 800ece6:	8afa      	ldrh	r2, [r7, #22]
 800ece8:	4611      	mov	r1, r2
 800ecea:	4618      	mov	r0, r3
 800ecec:	f7fe fbc2 	bl	800d474 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800ecf0:	8afb      	ldrh	r3, [r7, #22]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d102      	bne.n	800ecfc <put_lfn+0x90>
 800ecf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ecfa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800ecfc:	69bb      	ldr	r3, [r7, #24]
 800ecfe:	3301      	adds	r3, #1
 800ed00:	61bb      	str	r3, [r7, #24]
 800ed02:	69bb      	ldr	r3, [r7, #24]
 800ed04:	2b0c      	cmp	r3, #12
 800ed06:	d9da      	bls.n	800ecbe <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800ed08:	8afb      	ldrh	r3, [r7, #22]
 800ed0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed0e:	4293      	cmp	r3, r2
 800ed10:	d006      	beq.n	800ed20 <put_lfn+0xb4>
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	005b      	lsls	r3, r3, #1
 800ed16:	68fa      	ldr	r2, [r7, #12]
 800ed18:	4413      	add	r3, r2
 800ed1a:	881b      	ldrh	r3, [r3, #0]
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d103      	bne.n	800ed28 <put_lfn+0xbc>
 800ed20:	79fb      	ldrb	r3, [r7, #7]
 800ed22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed26:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800ed28:	68bb      	ldr	r3, [r7, #8]
 800ed2a:	79fa      	ldrb	r2, [r7, #7]
 800ed2c:	701a      	strb	r2, [r3, #0]
}
 800ed2e:	bf00      	nop
 800ed30:	3720      	adds	r7, #32
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	080167c4 	.word	0x080167c4

0800ed3c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b08c      	sub	sp, #48	; 0x30
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800ed4a:	220b      	movs	r2, #11
 800ed4c:	68b9      	ldr	r1, [r7, #8]
 800ed4e:	68f8      	ldr	r0, [r7, #12]
 800ed50:	f7fe fc5f 	bl	800d612 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800ed54:	683b      	ldr	r3, [r7, #0]
 800ed56:	2b05      	cmp	r3, #5
 800ed58:	d92b      	bls.n	800edb2 <gen_numname+0x76>
		sr = seq;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800ed5e:	e022      	b.n	800eda6 <gen_numname+0x6a>
			wc = *lfn++;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	1c9a      	adds	r2, r3, #2
 800ed64:	607a      	str	r2, [r7, #4]
 800ed66:	881b      	ldrh	r3, [r3, #0]
 800ed68:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed6e:	e017      	b.n	800eda0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800ed70:	69fb      	ldr	r3, [r7, #28]
 800ed72:	005a      	lsls	r2, r3, #1
 800ed74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed76:	f003 0301 	and.w	r3, r3, #1
 800ed7a:	4413      	add	r3, r2
 800ed7c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800ed7e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ed80:	085b      	lsrs	r3, r3, #1
 800ed82:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d005      	beq.n	800ed9a <gen_numname+0x5e>
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800ed94:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800ed98:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800ed9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed9c:	3301      	adds	r3, #1
 800ed9e:	62bb      	str	r3, [r7, #40]	; 0x28
 800eda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eda2:	2b0f      	cmp	r3, #15
 800eda4:	d9e4      	bls.n	800ed70 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	881b      	ldrh	r3, [r3, #0]
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d1d8      	bne.n	800ed60 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800edb2:	2307      	movs	r3, #7
 800edb4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	f003 030f 	and.w	r3, r3, #15
 800edbe:	b2db      	uxtb	r3, r3
 800edc0:	3330      	adds	r3, #48	; 0x30
 800edc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800edc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edca:	2b39      	cmp	r3, #57	; 0x39
 800edcc:	d904      	bls.n	800edd8 <gen_numname+0x9c>
 800edce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edd2:	3307      	adds	r3, #7
 800edd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800edd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edda:	1e5a      	subs	r2, r3, #1
 800eddc:	62ba      	str	r2, [r7, #40]	; 0x28
 800edde:	3330      	adds	r3, #48	; 0x30
 800ede0:	443b      	add	r3, r7
 800ede2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ede6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800edea:	683b      	ldr	r3, [r7, #0]
 800edec:	091b      	lsrs	r3, r3, #4
 800edee:	603b      	str	r3, [r7, #0]
	} while (seq);
 800edf0:	683b      	ldr	r3, [r7, #0]
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d1df      	bne.n	800edb6 <gen_numname+0x7a>
	ns[i] = '~';
 800edf6:	f107 0214 	add.w	r2, r7, #20
 800edfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edfc:	4413      	add	r3, r2
 800edfe:	227e      	movs	r2, #126	; 0x7e
 800ee00:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ee02:	2300      	movs	r3, #0
 800ee04:	627b      	str	r3, [r7, #36]	; 0x24
 800ee06:	e002      	b.n	800ee0e <gen_numname+0xd2>
 800ee08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	627b      	str	r3, [r7, #36]	; 0x24
 800ee0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d205      	bcs.n	800ee22 <gen_numname+0xe6>
 800ee16:	68fa      	ldr	r2, [r7, #12]
 800ee18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee1a:	4413      	add	r3, r2
 800ee1c:	781b      	ldrb	r3, [r3, #0]
 800ee1e:	2b20      	cmp	r3, #32
 800ee20:	d1f2      	bne.n	800ee08 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee24:	2b07      	cmp	r3, #7
 800ee26:	d807      	bhi.n	800ee38 <gen_numname+0xfc>
 800ee28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee2a:	1c5a      	adds	r2, r3, #1
 800ee2c:	62ba      	str	r2, [r7, #40]	; 0x28
 800ee2e:	3330      	adds	r3, #48	; 0x30
 800ee30:	443b      	add	r3, r7
 800ee32:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ee36:	e000      	b.n	800ee3a <gen_numname+0xfe>
 800ee38:	2120      	movs	r1, #32
 800ee3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3c:	1c5a      	adds	r2, r3, #1
 800ee3e:	627a      	str	r2, [r7, #36]	; 0x24
 800ee40:	68fa      	ldr	r2, [r7, #12]
 800ee42:	4413      	add	r3, r2
 800ee44:	460a      	mov	r2, r1
 800ee46:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ee48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee4a:	2b07      	cmp	r3, #7
 800ee4c:	d9e9      	bls.n	800ee22 <gen_numname+0xe6>
}
 800ee4e:	bf00      	nop
 800ee50:	bf00      	nop
 800ee52:	3730      	adds	r7, #48	; 0x30
 800ee54:	46bd      	mov	sp, r7
 800ee56:	bd80      	pop	{r7, pc}

0800ee58 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800ee58:	b480      	push	{r7}
 800ee5a:	b085      	sub	sp, #20
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800ee60:	2300      	movs	r3, #0
 800ee62:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800ee64:	230b      	movs	r3, #11
 800ee66:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ee68:	7bfb      	ldrb	r3, [r7, #15]
 800ee6a:	b2da      	uxtb	r2, r3
 800ee6c:	0852      	lsrs	r2, r2, #1
 800ee6e:	01db      	lsls	r3, r3, #7
 800ee70:	4313      	orrs	r3, r2
 800ee72:	b2da      	uxtb	r2, r3
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	1c59      	adds	r1, r3, #1
 800ee78:	6079      	str	r1, [r7, #4]
 800ee7a:	781b      	ldrb	r3, [r3, #0]
 800ee7c:	4413      	add	r3, r2
 800ee7e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	3b01      	subs	r3, #1
 800ee84:	60bb      	str	r3, [r7, #8]
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d1ed      	bne.n	800ee68 <sum_sfn+0x10>
	return sum;
 800ee8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee8e:	4618      	mov	r0, r3
 800ee90:	3714      	adds	r7, #20
 800ee92:	46bd      	mov	sp, r7
 800ee94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee98:	4770      	bx	lr

0800ee9a <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 800ee9a:	b480      	push	{r7}
 800ee9c:	b087      	sub	sp, #28
 800ee9e:	af00      	add	r7, sp, #0
 800eea0:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	3301      	adds	r3, #1
 800eea6:	781b      	ldrb	r3, [r3, #0]
 800eea8:	3301      	adds	r3, #1
 800eeaa:	015b      	lsls	r3, r3, #5
 800eeac:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 800eeae:	2300      	movs	r3, #0
 800eeb0:	827b      	strh	r3, [r7, #18]
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	617b      	str	r3, [r7, #20]
 800eeb6:	e018      	b.n	800eeea <xdir_sum+0x50>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 800eeb8:	697b      	ldr	r3, [r7, #20]
 800eeba:	2b02      	cmp	r3, #2
 800eebc:	d103      	bne.n	800eec6 <xdir_sum+0x2c>
			i++;
 800eebe:	697b      	ldr	r3, [r7, #20]
 800eec0:	3301      	adds	r3, #1
 800eec2:	617b      	str	r3, [r7, #20]
 800eec4:	e00e      	b.n	800eee4 <xdir_sum+0x4a>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 800eec6:	8a7b      	ldrh	r3, [r7, #18]
 800eec8:	03db      	lsls	r3, r3, #15
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	8a7b      	ldrh	r3, [r7, #18]
 800eece:	085b      	lsrs	r3, r3, #1
 800eed0:	b29b      	uxth	r3, r3
 800eed2:	4413      	add	r3, r2
 800eed4:	b29a      	uxth	r2, r3
 800eed6:	6879      	ldr	r1, [r7, #4]
 800eed8:	697b      	ldr	r3, [r7, #20]
 800eeda:	440b      	add	r3, r1
 800eedc:	781b      	ldrb	r3, [r3, #0]
 800eede:	b29b      	uxth	r3, r3
 800eee0:	4413      	add	r3, r2
 800eee2:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 800eee4:	697b      	ldr	r3, [r7, #20]
 800eee6:	3301      	adds	r3, #1
 800eee8:	617b      	str	r3, [r7, #20]
 800eeea:	697a      	ldr	r2, [r7, #20]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	429a      	cmp	r2, r3
 800eef0:	d3e2      	bcc.n	800eeb8 <xdir_sum+0x1e>
		}
	}
	return sum;
 800eef2:	8a7b      	ldrh	r3, [r7, #18]
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	371c      	adds	r7, #28
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr

0800ef00 <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b084      	sub	sp, #16
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 800ef08:	2300      	movs	r3, #0
 800ef0a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 800ef0c:	e01f      	b.n	800ef4e <xname_sum+0x4e>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 800ef0e:	89bb      	ldrh	r3, [r7, #12]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f002 fd03 	bl	801191c <ff_wtoupper>
 800ef16:	4603      	mov	r3, r0
 800ef18:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 800ef1a:	89fb      	ldrh	r3, [r7, #14]
 800ef1c:	03db      	lsls	r3, r3, #15
 800ef1e:	b29a      	uxth	r2, r3
 800ef20:	89fb      	ldrh	r3, [r7, #14]
 800ef22:	085b      	lsrs	r3, r3, #1
 800ef24:	b29b      	uxth	r3, r3
 800ef26:	4413      	add	r3, r2
 800ef28:	b29a      	uxth	r2, r3
 800ef2a:	89bb      	ldrh	r3, [r7, #12]
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	b29b      	uxth	r3, r3
 800ef30:	4413      	add	r3, r2
 800ef32:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 800ef34:	89fb      	ldrh	r3, [r7, #14]
 800ef36:	03db      	lsls	r3, r3, #15
 800ef38:	b29a      	uxth	r2, r3
 800ef3a:	89fb      	ldrh	r3, [r7, #14]
 800ef3c:	085b      	lsrs	r3, r3, #1
 800ef3e:	b29b      	uxth	r3, r3
 800ef40:	4413      	add	r3, r2
 800ef42:	b29a      	uxth	r2, r3
 800ef44:	89bb      	ldrh	r3, [r7, #12]
 800ef46:	0a1b      	lsrs	r3, r3, #8
 800ef48:	b29b      	uxth	r3, r3
 800ef4a:	4413      	add	r3, r2
 800ef4c:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	1c9a      	adds	r2, r3, #2
 800ef52:	607a      	str	r2, [r7, #4]
 800ef54:	881b      	ldrh	r3, [r3, #0]
 800ef56:	81bb      	strh	r3, [r7, #12]
 800ef58:	89bb      	ldrh	r3, [r7, #12]
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d1d7      	bne.n	800ef0e <xname_sum+0xe>
	}
	return sum;
 800ef5e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef60:	4618      	mov	r0, r3
 800ef62:	3710      	adds	r7, #16
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}

0800ef68 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 800ef68:	b590      	push	{r4, r7, lr}
 800ef6a:	b087      	sub	sp, #28
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	681b      	ldr	r3, [r3, #0]
 800ef74:	691b      	ldr	r3, [r3, #16]
 800ef76:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681a      	ldr	r2, [r3, #0]
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef80:	4619      	mov	r1, r3
 800ef82:	4610      	mov	r0, r2
 800ef84:	f7fe fda4 	bl	800dad0 <move_window>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800ef8c:	7bfb      	ldrb	r3, [r7, #15]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d001      	beq.n	800ef96 <load_xdir+0x2e>
 800ef92:	7bfb      	ldrb	r3, [r7, #15]
 800ef94:	e09f      	b.n	800f0d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b85      	cmp	r3, #133	; 0x85
 800ef9e:	d001      	beq.n	800efa4 <load_xdir+0x3c>
 800efa0:	2302      	movs	r3, #2
 800efa2:	e098      	b.n	800f0d6 <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800efa8:	2220      	movs	r2, #32
 800efaa:	4619      	mov	r1, r3
 800efac:	6938      	ldr	r0, [r7, #16]
 800efae:	f7fe fb30 	bl	800d612 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 800efb2:	693b      	ldr	r3, [r7, #16]
 800efb4:	3301      	adds	r3, #1
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	3301      	adds	r3, #1
 800efba:	015b      	lsls	r3, r3, #5
 800efbc:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 800efbe:	68bb      	ldr	r3, [r7, #8]
 800efc0:	2b5f      	cmp	r3, #95	; 0x5f
 800efc2:	d903      	bls.n	800efcc <load_xdir+0x64>
 800efc4:	68bb      	ldr	r3, [r7, #8]
 800efc6:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800efca:	d901      	bls.n	800efd0 <load_xdir+0x68>
 800efcc:	2302      	movs	r3, #2
 800efce:	e082      	b.n	800f0d6 <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 800efd0:	2100      	movs	r1, #0
 800efd2:	6878      	ldr	r0, [r7, #4]
 800efd4:	f7ff fc05 	bl	800e7e2 <dir_next>
 800efd8:	4603      	mov	r3, r0
 800efda:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800efdc:	7bfb      	ldrb	r3, [r7, #15]
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d001      	beq.n	800efe6 <load_xdir+0x7e>
 800efe2:	7bfb      	ldrb	r3, [r7, #15]
 800efe4:	e077      	b.n	800f0d6 <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681a      	ldr	r2, [r3, #0]
 800efea:	687b      	ldr	r3, [r7, #4]
 800efec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efee:	4619      	mov	r1, r3
 800eff0:	4610      	mov	r0, r2
 800eff2:	f7fe fd6d 	bl	800dad0 <move_window>
 800eff6:	4603      	mov	r3, r0
 800eff8:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 800effa:	7bfb      	ldrb	r3, [r7, #15]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <load_xdir+0x9c>
 800f000:	7bfb      	ldrb	r3, [r7, #15]
 800f002:	e068      	b.n	800f0d6 <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f008:	781b      	ldrb	r3, [r3, #0]
 800f00a:	2bc0      	cmp	r3, #192	; 0xc0
 800f00c:	d001      	beq.n	800f012 <load_xdir+0xaa>
 800f00e:	2302      	movs	r3, #2
 800f010:	e061      	b.n	800f0d6 <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 800f012:	693b      	ldr	r3, [r7, #16]
 800f014:	f103 0020 	add.w	r0, r3, #32
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f01c:	2220      	movs	r2, #32
 800f01e:	4619      	mov	r1, r3
 800f020:	f7fe faf7 	bl	800d612 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 800f024:	693b      	ldr	r3, [r7, #16]
 800f026:	3323      	adds	r3, #35	; 0x23
 800f028:	781b      	ldrb	r3, [r3, #0]
 800f02a:	332c      	adds	r3, #44	; 0x2c
 800f02c:	4a2c      	ldr	r2, [pc, #176]	; (800f0e0 <load_xdir+0x178>)
 800f02e:	fba2 2303 	umull	r2, r3, r2, r3
 800f032:	08db      	lsrs	r3, r3, #3
 800f034:	015b      	lsls	r3, r3, #5
 800f036:	68ba      	ldr	r2, [r7, #8]
 800f038:	429a      	cmp	r2, r3
 800f03a:	d201      	bcs.n	800f040 <load_xdir+0xd8>
 800f03c:	2302      	movs	r3, #2
 800f03e:	e04a      	b.n	800f0d6 <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 800f040:	2340      	movs	r3, #64	; 0x40
 800f042:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 800f044:	2100      	movs	r1, #0
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff fbcb 	bl	800e7e2 <dir_next>
 800f04c:	4603      	mov	r3, r0
 800f04e:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f050:	7bfb      	ldrb	r3, [r7, #15]
 800f052:	2b00      	cmp	r3, #0
 800f054:	d001      	beq.n	800f05a <load_xdir+0xf2>
 800f056:	7bfb      	ldrb	r3, [r7, #15]
 800f058:	e03d      	b.n	800f0d6 <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	681a      	ldr	r2, [r3, #0]
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f062:	4619      	mov	r1, r3
 800f064:	4610      	mov	r0, r2
 800f066:	f7fe fd33 	bl	800dad0 <move_window>
 800f06a:	4603      	mov	r3, r0
 800f06c:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 800f06e:	7bfb      	ldrb	r3, [r7, #15]
 800f070:	2b00      	cmp	r3, #0
 800f072:	d001      	beq.n	800f078 <load_xdir+0x110>
 800f074:	7bfb      	ldrb	r3, [r7, #15]
 800f076:	e02e      	b.n	800f0d6 <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2bc1      	cmp	r3, #193	; 0xc1
 800f080:	d001      	beq.n	800f086 <load_xdir+0x11e>
 800f082:	2302      	movs	r3, #2
 800f084:	e027      	b.n	800f0d6 <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 800f086:	697b      	ldr	r3, [r7, #20]
 800f088:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f08c:	d208      	bcs.n	800f0a0 <load_xdir+0x138>
 800f08e:	693a      	ldr	r2, [r7, #16]
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	18d0      	adds	r0, r2, r3
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f098:	2220      	movs	r2, #32
 800f09a:	4619      	mov	r1, r3
 800f09c:	f7fe fab9 	bl	800d612 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	3320      	adds	r3, #32
 800f0a4:	617b      	str	r3, [r7, #20]
 800f0a6:	697a      	ldr	r2, [r7, #20]
 800f0a8:	68bb      	ldr	r3, [r7, #8]
 800f0aa:	429a      	cmp	r2, r3
 800f0ac:	d3ca      	bcc.n	800f044 <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 800f0ae:	697b      	ldr	r3, [r7, #20]
 800f0b0:	f5b3 7f18 	cmp.w	r3, #608	; 0x260
 800f0b4:	d80e      	bhi.n	800f0d4 <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 800f0b6:	6938      	ldr	r0, [r7, #16]
 800f0b8:	f7ff feef 	bl	800ee9a <xdir_sum>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	461c      	mov	r4, r3
 800f0c0:	693b      	ldr	r3, [r7, #16]
 800f0c2:	3302      	adds	r3, #2
 800f0c4:	4618      	mov	r0, r3
 800f0c6:	f7fe f8bf 	bl	800d248 <ld_word>
 800f0ca:	4603      	mov	r3, r0
 800f0cc:	429c      	cmp	r4, r3
 800f0ce:	d001      	beq.n	800f0d4 <load_xdir+0x16c>
 800f0d0:	2302      	movs	r3, #2
 800f0d2:	e000      	b.n	800f0d6 <load_xdir+0x16e>
	}
	return FR_OK;
 800f0d4:	2300      	movs	r3, #0
}
 800f0d6:	4618      	mov	r0, r3
 800f0d8:	371c      	adds	r7, #28
 800f0da:	46bd      	mov	sp, r7
 800f0dc:	bd90      	pop	{r4, r7, pc}
 800f0de:	bf00      	nop
 800f0e0:	88888889 	.word	0x88888889

0800f0e4 <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 800f0e4:	b5b0      	push	{r4, r5, r7, lr}
 800f0e6:	b084      	sub	sp, #16
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 800f0ee:	6839      	ldr	r1, [r7, #0]
 800f0f0:	6808      	ldr	r0, [r1, #0]
 800f0f2:	6879      	ldr	r1, [r7, #4]
 800f0f4:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 800f0f6:	6839      	ldr	r1, [r7, #0]
 800f0f8:	6a08      	ldr	r0, [r1, #32]
 800f0fa:	6879      	ldr	r1, [r7, #4]
 800f0fc:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 800f0fe:	6839      	ldr	r1, [r7, #0]
 800f100:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800f102:	b2c8      	uxtb	r0, r1
 800f104:	6879      	ldr	r1, [r7, #4]
 800f106:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 800f108:	6839      	ldr	r1, [r7, #0]
 800f10a:	6a49      	ldr	r1, [r1, #36]	; 0x24
 800f10c:	2000      	movs	r0, #0
 800f10e:	460c      	mov	r4, r1
 800f110:	4605      	mov	r5, r0
 800f112:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800f116:	2300      	movs	r3, #0
 800f118:	6879      	ldr	r1, [r7, #4]
 800f11a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	64da      	str	r2, [r3, #76]	; 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f12a:	4619      	mov	r1, r3
 800f12c:	6878      	ldr	r0, [r7, #4]
 800f12e:	f7ff fad2 	bl	800e6d6 <dir_sdi>
 800f132:	4603      	mov	r3, r0
 800f134:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f136:	7bfb      	ldrb	r3, [r7, #15]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d104      	bne.n	800f146 <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	f7ff ff13 	bl	800ef68 <load_xdir>
 800f142:	4603      	mov	r3, r0
 800f144:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 800f146:	7bfb      	ldrb	r3, [r7, #15]
}
 800f148:	4618      	mov	r0, r3
 800f14a:	3710      	adds	r7, #16
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bdb0      	pop	{r4, r5, r7, pc}

0800f150 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 800f150:	b590      	push	{r4, r7, lr}
 800f152:	b087      	sub	sp, #28
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	681b      	ldr	r3, [r3, #0]
 800f15c:	691b      	ldr	r3, [r3, #16]
 800f15e:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	1c9c      	adds	r4, r3, #2
 800f164:	68f8      	ldr	r0, [r7, #12]
 800f166:	f7ff fe98 	bl	800ee9a <xdir_sum>
 800f16a:	4603      	mov	r3, r0
 800f16c:	4619      	mov	r1, r3
 800f16e:	4620      	mov	r0, r4
 800f170:	f7fe f980 	bl	800d474 <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	3301      	adds	r3, #1
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	3301      	adds	r3, #1
 800f17c:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f182:	4619      	mov	r1, r3
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f7ff faa6 	bl	800e6d6 <dir_sdi>
 800f18a:	4603      	mov	r3, r0
 800f18c:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f18e:	e026      	b.n	800f1de <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	681a      	ldr	r2, [r3, #0]
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f198:	4619      	mov	r1, r3
 800f19a:	4610      	mov	r0, r2
 800f19c:	f7fe fc98 	bl	800dad0 <move_window>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f1a4:	7dfb      	ldrb	r3, [r7, #23]
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d11d      	bne.n	800f1e6 <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f1ae:	2220      	movs	r2, #32
 800f1b0:	68f9      	ldr	r1, [r7, #12]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7fe fa2d 	bl	800d612 <mem_cpy>
		dp->obj.fs->wflag = 1;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	2201      	movs	r2, #1
 800f1be:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 800f1c0:	693b      	ldr	r3, [r7, #16]
 800f1c2:	3b01      	subs	r3, #1
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d00e      	beq.n	800f1ea <store_xdir+0x9a>
		dirb += SZDIRE;
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	3320      	adds	r3, #32
 800f1d0:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 800f1d2:	2100      	movs	r1, #0
 800f1d4:	6878      	ldr	r0, [r7, #4]
 800f1d6:	f7ff fb04 	bl	800e7e2 <dir_next>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 800f1de:	7dfb      	ldrb	r3, [r7, #23]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d0d5      	beq.n	800f190 <store_xdir+0x40>
 800f1e4:	e002      	b.n	800f1ec <store_xdir+0x9c>
		if (res != FR_OK) break;
 800f1e6:	bf00      	nop
 800f1e8:	e000      	b.n	800f1ec <store_xdir+0x9c>
		if (--nent == 0) break;
 800f1ea:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 800f1ec:	7dfb      	ldrb	r3, [r7, #23]
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d002      	beq.n	800f1f8 <store_xdir+0xa8>
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	2b01      	cmp	r3, #1
 800f1f6:	d101      	bne.n	800f1fc <store_xdir+0xac>
 800f1f8:	7dfb      	ldrb	r3, [r7, #23]
 800f1fa:	e000      	b.n	800f1fe <store_xdir+0xae>
 800f1fc:	2302      	movs	r3, #2
}
 800f1fe:	4618      	mov	r0, r3
 800f200:	371c      	adds	r7, #28
 800f202:	46bd      	mov	sp, r7
 800f204:	bd90      	pop	{r4, r7, pc}

0800f206 <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 800f206:	b590      	push	{r4, r7, lr}
 800f208:	b085      	sub	sp, #20
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
 800f20e:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 800f210:	2240      	movs	r2, #64	; 0x40
 800f212:	2100      	movs	r1, #0
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7fe fa1d 	bl	800d654 <mem_set>
	dirb[XDIR_Type] = 0x85;
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2285      	movs	r2, #133	; 0x85
 800f21e:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	3320      	adds	r3, #32
 800f224:	22c0      	movs	r2, #192	; 0xc0
 800f226:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 800f228:	2300      	movs	r3, #0
 800f22a:	72bb      	strb	r3, [r7, #10]
 800f22c:	2301      	movs	r3, #1
 800f22e:	72fb      	strb	r3, [r7, #11]
 800f230:	2301      	movs	r3, #1
 800f232:	813b      	strh	r3, [r7, #8]
 800f234:	2340      	movs	r3, #64	; 0x40
 800f236:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	1c5a      	adds	r2, r3, #1
 800f23c:	60fa      	str	r2, [r7, #12]
 800f23e:	687a      	ldr	r2, [r7, #4]
 800f240:	4413      	add	r3, r2
 800f242:	22c1      	movs	r2, #193	; 0xc1
 800f244:	701a      	strb	r2, [r3, #0]
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	1c5a      	adds	r2, r3, #1
 800f24a:	60fa      	str	r2, [r7, #12]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	4413      	add	r3, r2
 800f250:	2200      	movs	r2, #0
 800f252:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 800f254:	893b      	ldrh	r3, [r7, #8]
 800f256:	2b00      	cmp	r3, #0
 800f258:	d00b      	beq.n	800f272 <create_xdir+0x6c>
 800f25a:	7abb      	ldrb	r3, [r7, #10]
 800f25c:	005b      	lsls	r3, r3, #1
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	4413      	add	r3, r2
 800f262:	881b      	ldrh	r3, [r3, #0]
 800f264:	813b      	strh	r3, [r7, #8]
 800f266:	893b      	ldrh	r3, [r7, #8]
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d002      	beq.n	800f272 <create_xdir+0x6c>
 800f26c:	7abb      	ldrb	r3, [r7, #10]
 800f26e:	3301      	adds	r3, #1
 800f270:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	4413      	add	r3, r2
 800f278:	893a      	ldrh	r2, [r7, #8]
 800f27a:	4611      	mov	r1, r2
 800f27c:	4618      	mov	r0, r3
 800f27e:	f7fe f8f9 	bl	800d474 <st_word>
		} while ((i += 2) % SZDIRE != 0);
 800f282:	68fb      	ldr	r3, [r7, #12]
 800f284:	3302      	adds	r3, #2
 800f286:	60fb      	str	r3, [r7, #12]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	f003 031f 	and.w	r3, r3, #31
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d1e0      	bne.n	800f254 <create_xdir+0x4e>
		nb++;
 800f292:	7afb      	ldrb	r3, [r7, #11]
 800f294:	3301      	adds	r3, #1
 800f296:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 800f298:	7abb      	ldrb	r3, [r7, #10]
 800f29a:	005b      	lsls	r3, r3, #1
 800f29c:	683a      	ldr	r2, [r7, #0]
 800f29e:	4413      	add	r3, r2
 800f2a0:	881b      	ldrh	r3, [r3, #0]
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	d1c8      	bne.n	800f238 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3323      	adds	r3, #35	; 0x23
 800f2aa:	7aba      	ldrb	r2, [r7, #10]
 800f2ac:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	7afa      	ldrb	r2, [r7, #11]
 800f2b4:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	f103 0424 	add.w	r4, r3, #36	; 0x24
 800f2bc:	6838      	ldr	r0, [r7, #0]
 800f2be:	f7ff fe1f 	bl	800ef00 <xname_sum>
 800f2c2:	4603      	mov	r3, r0
 800f2c4:	4619      	mov	r1, r3
 800f2c6:	4620      	mov	r0, r4
 800f2c8:	f7fe f8d4 	bl	800d474 <st_word>
}
 800f2cc:	bf00      	nop
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd90      	pop	{r4, r7, pc}

0800f2d4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b086      	sub	sp, #24
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f2de:	2304      	movs	r3, #4
 800f2e0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f2e8:	23ff      	movs	r3, #255	; 0xff
 800f2ea:	757b      	strb	r3, [r7, #21]
 800f2ec:	23ff      	movs	r3, #255	; 0xff
 800f2ee:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f2f0:	e09f      	b.n	800f432 <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6938      	ldr	r0, [r7, #16]
 800f2fa:	f7fe fbe9 	bl	800dad0 <move_window>
 800f2fe:	4603      	mov	r3, r0
 800f300:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f302:	7dfb      	ldrb	r3, [r7, #23]
 800f304:	2b00      	cmp	r3, #0
 800f306:	f040 809a 	bne.w	800f43e <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f30e:	781b      	ldrb	r3, [r3, #0]
 800f310:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f312:	7dbb      	ldrb	r3, [r7, #22]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d102      	bne.n	800f31e <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f318:	2304      	movs	r3, #4
 800f31a:	75fb      	strb	r3, [r7, #23]
 800f31c:	e096      	b.n	800f44c <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f31e:	693b      	ldr	r3, [r7, #16]
 800f320:	781b      	ldrb	r3, [r3, #0]
 800f322:	2b04      	cmp	r3, #4
 800f324:	d118      	bne.n	800f358 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800f326:	7dbb      	ldrb	r3, [r7, #22]
 800f328:	2b85      	cmp	r3, #133	; 0x85
 800f32a:	d179      	bne.n	800f420 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	64da      	str	r2, [r3, #76]	; 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800f334:	6878      	ldr	r0, [r7, #4]
 800f336:	f7ff fe17 	bl	800ef68 <load_xdir>
 800f33a:	4603      	mov	r3, r0
 800f33c:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 800f33e:	7dfb      	ldrb	r3, [r7, #23]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d17e      	bne.n	800f442 <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	691b      	ldr	r3, [r3, #16]
 800f348:	3304      	adds	r3, #4
 800f34a:	781b      	ldrb	r3, [r3, #0]
 800f34c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f350:	b2da      	uxtb	r2, r3
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	719a      	strb	r2, [r3, #6]
					}
					break;
 800f356:	e074      	b.n	800f442 <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f35c:	330b      	adds	r3, #11
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f364:	73fb      	strb	r3, [r7, #15]
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	7bfa      	ldrb	r2, [r7, #15]
 800f36a:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f36c:	7dbb      	ldrb	r3, [r7, #22]
 800f36e:	2be5      	cmp	r3, #229	; 0xe5
 800f370:	d00e      	beq.n	800f390 <dir_read+0xbc>
 800f372:	7dbb      	ldrb	r3, [r7, #22]
 800f374:	2b2e      	cmp	r3, #46	; 0x2e
 800f376:	d00b      	beq.n	800f390 <dir_read+0xbc>
 800f378:	7bfb      	ldrb	r3, [r7, #15]
 800f37a:	f023 0320 	bic.w	r3, r3, #32
 800f37e:	2b08      	cmp	r3, #8
 800f380:	bf0c      	ite	eq
 800f382:	2301      	moveq	r3, #1
 800f384:	2300      	movne	r3, #0
 800f386:	b2db      	uxtb	r3, r3
 800f388:	461a      	mov	r2, r3
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	4293      	cmp	r3, r2
 800f38e:	d002      	beq.n	800f396 <dir_read+0xc2>
				ord = 0xFF;
 800f390:	23ff      	movs	r3, #255	; 0xff
 800f392:	757b      	strb	r3, [r7, #21]
 800f394:	e044      	b.n	800f420 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f396:	7bfb      	ldrb	r3, [r7, #15]
 800f398:	2b0f      	cmp	r3, #15
 800f39a:	d12f      	bne.n	800f3fc <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f39c:	7dbb      	ldrb	r3, [r7, #22]
 800f39e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f3a2:	2b00      	cmp	r3, #0
 800f3a4:	d00d      	beq.n	800f3c2 <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3aa:	7b5b      	ldrb	r3, [r3, #13]
 800f3ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f3ae:	7dbb      	ldrb	r3, [r7, #22]
 800f3b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3b4:	75bb      	strb	r3, [r7, #22]
 800f3b6:	7dbb      	ldrb	r3, [r7, #22]
 800f3b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f3c2:	7dba      	ldrb	r2, [r7, #22]
 800f3c4:	7d7b      	ldrb	r3, [r7, #21]
 800f3c6:	429a      	cmp	r2, r3
 800f3c8:	d115      	bne.n	800f3f6 <dir_read+0x122>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3ce:	330d      	adds	r3, #13
 800f3d0:	781b      	ldrb	r3, [r3, #0]
 800f3d2:	7d3a      	ldrb	r2, [r7, #20]
 800f3d4:	429a      	cmp	r2, r3
 800f3d6:	d10e      	bne.n	800f3f6 <dir_read+0x122>
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	68da      	ldr	r2, [r3, #12]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e0:	4619      	mov	r1, r3
 800f3e2:	4610      	mov	r0, r2
 800f3e4:	f7ff fbde 	bl	800eba4 <pick_lfn>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d003      	beq.n	800f3f6 <dir_read+0x122>
 800f3ee:	7d7b      	ldrb	r3, [r7, #21]
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	e000      	b.n	800f3f8 <dir_read+0x124>
 800f3f6:	23ff      	movs	r3, #255	; 0xff
 800f3f8:	757b      	strb	r3, [r7, #21]
 800f3fa:	e011      	b.n	800f420 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f3fc:	7d7b      	ldrb	r3, [r7, #21]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d109      	bne.n	800f416 <dir_read+0x142>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f406:	4618      	mov	r0, r3
 800f408:	f7ff fd26 	bl	800ee58 <sum_sfn>
 800f40c:	4603      	mov	r3, r0
 800f40e:	461a      	mov	r2, r3
 800f410:	7d3b      	ldrb	r3, [r7, #20]
 800f412:	4293      	cmp	r3, r2
 800f414:	d017      	beq.n	800f446 <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	f04f 32ff 	mov.w	r2, #4294967295
 800f41c:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					break;
 800f41e:	e012      	b.n	800f446 <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f420:	2100      	movs	r1, #0
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f7ff f9dd 	bl	800e7e2 <dir_next>
 800f428:	4603      	mov	r3, r0
 800f42a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f42c:	7dfb      	ldrb	r3, [r7, #23]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10b      	bne.n	800f44a <dir_read+0x176>
	while (dp->sect) {
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f436:	2b00      	cmp	r3, #0
 800f438:	f47f af5b 	bne.w	800f2f2 <dir_read+0x1e>
 800f43c:	e006      	b.n	800f44c <dir_read+0x178>
		if (res != FR_OK) break;
 800f43e:	bf00      	nop
 800f440:	e004      	b.n	800f44c <dir_read+0x178>
					break;
 800f442:	bf00      	nop
 800f444:	e002      	b.n	800f44c <dir_read+0x178>
					break;
 800f446:	bf00      	nop
 800f448:	e000      	b.n	800f44c <dir_read+0x178>
		if (res != FR_OK) break;
 800f44a:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f44c:	7dfb      	ldrb	r3, [r7, #23]
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d002      	beq.n	800f458 <dir_read+0x184>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	639a      	str	r2, [r3, #56]	; 0x38
	return res;
 800f458:	7dfb      	ldrb	r3, [r7, #23]
}
 800f45a:	4618      	mov	r0, r3
 800f45c:	3718      	adds	r7, #24
 800f45e:	46bd      	mov	sp, r7
 800f460:	bd80      	pop	{r7, pc}

0800f462 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f462:	b590      	push	{r4, r7, lr}
 800f464:	b089      	sub	sp, #36	; 0x24
 800f466:	af00      	add	r7, sp, #0
 800f468:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f470:	2100      	movs	r1, #0
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7ff f92f 	bl	800e6d6 <dir_sdi>
 800f478:	4603      	mov	r3, r0
 800f47a:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 800f47c:	7ffb      	ldrb	r3, [r7, #31]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d001      	beq.n	800f486 <dir_find+0x24>
 800f482:	7ffb      	ldrb	r3, [r7, #31]
 800f484:	e112      	b.n	800f6ac <dir_find+0x24a>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	781b      	ldrb	r3, [r3, #0]
 800f48a:	2b04      	cmp	r3, #4
 800f48c:	d164      	bne.n	800f558 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	68db      	ldr	r3, [r3, #12]
 800f492:	4618      	mov	r0, r3
 800f494:	f7ff fd34 	bl	800ef00 <xname_sum>
 800f498:	4603      	mov	r3, r0
 800f49a:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f49c:	e04f      	b.n	800f53e <dir_find+0xdc>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 800f49e:	68fb      	ldr	r3, [r7, #12]
 800f4a0:	691b      	ldr	r3, [r3, #16]
 800f4a2:	3324      	adds	r3, #36	; 0x24
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f7fd fecf 	bl	800d248 <ld_word>
 800f4aa:	4603      	mov	r3, r0
 800f4ac:	461a      	mov	r2, r3
 800f4ae:	893b      	ldrh	r3, [r7, #8]
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d000      	beq.n	800f4b6 <dir_find+0x54>
 800f4b4:	e043      	b.n	800f53e <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f4b6:	68fb      	ldr	r3, [r7, #12]
 800f4b8:	691b      	ldr	r3, [r3, #16]
 800f4ba:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800f4be:	76fb      	strb	r3, [r7, #27]
 800f4c0:	2340      	movs	r3, #64	; 0x40
 800f4c2:	617b      	str	r3, [r7, #20]
 800f4c4:	2300      	movs	r3, #0
 800f4c6:	613b      	str	r3, [r7, #16]
 800f4c8:	e029      	b.n	800f51e <dir_find+0xbc>
				if ((di % SZDIRE) == 0) di += 2;
 800f4ca:	697b      	ldr	r3, [r7, #20]
 800f4cc:	f003 031f 	and.w	r3, r3, #31
 800f4d0:	2b00      	cmp	r3, #0
 800f4d2:	d102      	bne.n	800f4da <dir_find+0x78>
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	3302      	adds	r3, #2
 800f4d8:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f4da:	68fb      	ldr	r3, [r7, #12]
 800f4dc:	691a      	ldr	r2, [r3, #16]
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	4413      	add	r3, r2
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7fd feb0 	bl	800d248 <ld_word>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	4618      	mov	r0, r3
 800f4ec:	f002 fa16 	bl	801191c <ff_wtoupper>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	461c      	mov	r4, r3
 800f4f4:	68fb      	ldr	r3, [r7, #12]
 800f4f6:	68da      	ldr	r2, [r3, #12]
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	005b      	lsls	r3, r3, #1
 800f4fc:	4413      	add	r3, r2
 800f4fe:	881b      	ldrh	r3, [r3, #0]
 800f500:	4618      	mov	r0, r3
 800f502:	f002 fa0b 	bl	801191c <ff_wtoupper>
 800f506:	4603      	mov	r3, r0
 800f508:	429c      	cmp	r4, r3
 800f50a:	d10c      	bne.n	800f526 <dir_find+0xc4>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800f50c:	7efb      	ldrb	r3, [r7, #27]
 800f50e:	3b01      	subs	r3, #1
 800f510:	76fb      	strb	r3, [r7, #27]
 800f512:	697b      	ldr	r3, [r7, #20]
 800f514:	3302      	adds	r3, #2
 800f516:	617b      	str	r3, [r7, #20]
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	3301      	adds	r3, #1
 800f51c:	613b      	str	r3, [r7, #16]
 800f51e:	7efb      	ldrb	r3, [r7, #27]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d1d2      	bne.n	800f4ca <dir_find+0x68>
 800f524:	e000      	b.n	800f528 <dir_find+0xc6>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800f526:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f528:	7efb      	ldrb	r3, [r7, #27]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d107      	bne.n	800f53e <dir_find+0xdc>
 800f52e:	68fb      	ldr	r3, [r7, #12]
 800f530:	68da      	ldr	r2, [r3, #12]
 800f532:	693b      	ldr	r3, [r7, #16]
 800f534:	005b      	lsls	r3, r3, #1
 800f536:	4413      	add	r3, r2
 800f538:	881b      	ldrh	r3, [r3, #0]
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d009      	beq.n	800f552 <dir_find+0xf0>
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 800f53e:	2100      	movs	r1, #0
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f7ff fec7 	bl	800f2d4 <dir_read>
 800f546:	4603      	mov	r3, r0
 800f548:	77fb      	strb	r3, [r7, #31]
 800f54a:	7ffb      	ldrb	r3, [r7, #31]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d0a6      	beq.n	800f49e <dir_find+0x3c>
 800f550:	e000      	b.n	800f554 <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800f552:	bf00      	nop
		}
		return res;
 800f554:	7ffb      	ldrb	r3, [r7, #31]
 800f556:	e0a9      	b.n	800f6ac <dir_find+0x24a>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f558:	23ff      	movs	r3, #255	; 0xff
 800f55a:	773b      	strb	r3, [r7, #28]
 800f55c:	7f3b      	ldrb	r3, [r7, #28]
 800f55e:	777b      	strb	r3, [r7, #29]
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	f04f 32ff 	mov.w	r2, #4294967295
 800f566:	64da      	str	r2, [r3, #76]	; 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f56c:	4619      	mov	r1, r3
 800f56e:	68f8      	ldr	r0, [r7, #12]
 800f570:	f7fe faae 	bl	800dad0 <move_window>
 800f574:	4603      	mov	r3, r0
 800f576:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 800f578:	7ffb      	ldrb	r3, [r7, #31]
 800f57a:	2b00      	cmp	r3, #0
 800f57c:	f040 8090 	bne.w	800f6a0 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f584:	781b      	ldrb	r3, [r3, #0]
 800f586:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f588:	7fbb      	ldrb	r3, [r7, #30]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d102      	bne.n	800f594 <dir_find+0x132>
 800f58e:	2304      	movs	r3, #4
 800f590:	77fb      	strb	r3, [r7, #31]
 800f592:	e08a      	b.n	800f6aa <dir_find+0x248>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f598:	330b      	adds	r3, #11
 800f59a:	781b      	ldrb	r3, [r3, #0]
 800f59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5a0:	72fb      	strb	r3, [r7, #11]
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	7afa      	ldrb	r2, [r7, #11]
 800f5a6:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f5a8:	7fbb      	ldrb	r3, [r7, #30]
 800f5aa:	2be5      	cmp	r3, #229	; 0xe5
 800f5ac:	d007      	beq.n	800f5be <dir_find+0x15c>
 800f5ae:	7afb      	ldrb	r3, [r7, #11]
 800f5b0:	f003 0308 	and.w	r3, r3, #8
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d009      	beq.n	800f5cc <dir_find+0x16a>
 800f5b8:	7afb      	ldrb	r3, [r7, #11]
 800f5ba:	2b0f      	cmp	r3, #15
 800f5bc:	d006      	beq.n	800f5cc <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f5be:	23ff      	movs	r3, #255	; 0xff
 800f5c0:	777b      	strb	r3, [r7, #29]
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f04f 32ff 	mov.w	r2, #4294967295
 800f5c8:	64da      	str	r2, [r3, #76]	; 0x4c
 800f5ca:	e05e      	b.n	800f68a <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f5cc:	7afb      	ldrb	r3, [r7, #11]
 800f5ce:	2b0f      	cmp	r3, #15
 800f5d0:	d136      	bne.n	800f640 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f5d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d154      	bne.n	800f68a <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f5e0:	7fbb      	ldrb	r3, [r7, #30]
 800f5e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d00d      	beq.n	800f606 <dir_find+0x1a4>
						sum = dp->dir[LDIR_Chksum];
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ee:	7b5b      	ldrb	r3, [r3, #13]
 800f5f0:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f5f2:	7fbb      	ldrb	r3, [r7, #30]
 800f5f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f5f8:	77bb      	strb	r3, [r7, #30]
 800f5fa:	7fbb      	ldrb	r3, [r7, #30]
 800f5fc:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	64da      	str	r2, [r3, #76]	; 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f606:	7fba      	ldrb	r2, [r7, #30]
 800f608:	7f7b      	ldrb	r3, [r7, #29]
 800f60a:	429a      	cmp	r2, r3
 800f60c:	d115      	bne.n	800f63a <dir_find+0x1d8>
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f612:	330d      	adds	r3, #13
 800f614:	781b      	ldrb	r3, [r3, #0]
 800f616:	7f3a      	ldrb	r2, [r7, #28]
 800f618:	429a      	cmp	r2, r3
 800f61a:	d10e      	bne.n	800f63a <dir_find+0x1d8>
 800f61c:	68fb      	ldr	r3, [r7, #12]
 800f61e:	68da      	ldr	r2, [r3, #12]
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f624:	4619      	mov	r1, r3
 800f626:	4610      	mov	r0, r2
 800f628:	f7ff fa4c 	bl	800eac4 <cmp_lfn>
 800f62c:	4603      	mov	r3, r0
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d003      	beq.n	800f63a <dir_find+0x1d8>
 800f632:	7f7b      	ldrb	r3, [r7, #29]
 800f634:	3b01      	subs	r3, #1
 800f636:	b2db      	uxtb	r3, r3
 800f638:	e000      	b.n	800f63c <dir_find+0x1da>
 800f63a:	23ff      	movs	r3, #255	; 0xff
 800f63c:	777b      	strb	r3, [r7, #29]
 800f63e:	e024      	b.n	800f68a <dir_find+0x228>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f640:	7f7b      	ldrb	r3, [r7, #29]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d109      	bne.n	800f65a <dir_find+0x1f8>
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f64a:	4618      	mov	r0, r3
 800f64c:	f7ff fc04 	bl	800ee58 <sum_sfn>
 800f650:	4603      	mov	r3, r0
 800f652:	461a      	mov	r2, r3
 800f654:	7f3b      	ldrb	r3, [r7, #28]
 800f656:	4293      	cmp	r3, r2
 800f658:	d024      	beq.n	800f6a4 <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f660:	f003 0301 	and.w	r3, r3, #1
 800f664:	2b00      	cmp	r3, #0
 800f666:	d10a      	bne.n	800f67e <dir_find+0x21c>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3340      	adds	r3, #64	; 0x40
 800f670:	220b      	movs	r2, #11
 800f672:	4619      	mov	r1, r3
 800f674:	f7fe f809 	bl	800d68a <mem_cmp>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d014      	beq.n	800f6a8 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f67e:	23ff      	movs	r3, #255	; 0xff
 800f680:	777b      	strb	r3, [r7, #29]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f04f 32ff 	mov.w	r2, #4294967295
 800f688:	64da      	str	r2, [r3, #76]	; 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f68a:	2100      	movs	r1, #0
 800f68c:	6878      	ldr	r0, [r7, #4]
 800f68e:	f7ff f8a8 	bl	800e7e2 <dir_next>
 800f692:	4603      	mov	r3, r0
 800f694:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800f696:	7ffb      	ldrb	r3, [r7, #31]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	f43f af65 	beq.w	800f568 <dir_find+0x106>
 800f69e:	e004      	b.n	800f6aa <dir_find+0x248>
		if (res != FR_OK) break;
 800f6a0:	bf00      	nop
 800f6a2:	e002      	b.n	800f6aa <dir_find+0x248>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f6a4:	bf00      	nop
 800f6a6:	e000      	b.n	800f6aa <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f6a8:	bf00      	nop

	return res;
 800f6aa:	7ffb      	ldrb	r3, [r7, #31]
}
 800f6ac:	4618      	mov	r0, r3
 800f6ae:	3724      	adds	r7, #36	; 0x24
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd90      	pop	{r4, r7, pc}

0800f6b4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f6b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800f6b8:	b0a0      	sub	sp, #128	; 0x80
 800f6ba:	af00      	add	r7, sp, #0
 800f6bc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	66fb      	str	r3, [r7, #108]	; 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800f6ca:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <dir_register+0x22>
 800f6d2:	2306      	movs	r3, #6
 800f6d4:	e18e      	b.n	800f9f4 <dir_register+0x340>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	677b      	str	r3, [r7, #116]	; 0x74
 800f6da:	e002      	b.n	800f6e2 <dir_register+0x2e>
 800f6dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f6de:	3301      	adds	r3, #1
 800f6e0:	677b      	str	r3, [r7, #116]	; 0x74
 800f6e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6e4:	68da      	ldr	r2, [r3, #12]
 800f6e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f6e8:	005b      	lsls	r3, r3, #1
 800f6ea:	4413      	add	r3, r2
 800f6ec:	881b      	ldrh	r3, [r3, #0]
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1f4      	bne.n	800f6dc <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800f6f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f6f4:	781b      	ldrb	r3, [r3, #0]
 800f6f6:	2b04      	cmp	r3, #4
 800f6f8:	f040 809f 	bne.w	800f83a <dir_register+0x186>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 800f6fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f6fe:	330e      	adds	r3, #14
 800f700:	4aa2      	ldr	r2, [pc, #648]	; (800f98c <dir_register+0x2d8>)
 800f702:	fba2 2303 	umull	r2, r3, r2, r3
 800f706:	08db      	lsrs	r3, r3, #3
 800f708:	3302      	adds	r3, #2
 800f70a:	673b      	str	r3, [r7, #112]	; 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 800f70c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f70e:	6878      	ldr	r0, [r7, #4]
 800f710:	f7ff f93c 	bl	800e98c <dir_alloc>
 800f714:	4603      	mov	r3, r0
 800f716:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res != FR_OK) return res;
 800f71a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d002      	beq.n	800f728 <dir_register+0x74>
 800f722:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f726:	e165      	b.n	800f9f4 <dir_register+0x340>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f72c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f72e:	3b01      	subs	r3, #1
 800f730:	015b      	lsls	r3, r3, #5
 800f732:	1ad2      	subs	r2, r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	64da      	str	r2, [r3, #76]	; 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	689b      	ldr	r3, [r3, #8]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d072      	beq.n	800f826 <dir_register+0x172>
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	79db      	ldrb	r3, [r3, #7]
 800f744:	f003 0304 	and.w	r3, r3, #4
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d06c      	beq.n	800f826 <dir_register+0x172>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f752:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800f754:	8949      	ldrh	r1, [r1, #10]
 800f756:	0249      	lsls	r1, r1, #9
 800f758:	2000      	movs	r0, #0
 800f75a:	460c      	mov	r4, r1
 800f75c:	4605      	mov	r5, r0
 800f75e:	eb12 0804 	adds.w	r8, r2, r4
 800f762:	eb43 0905 	adc.w	r9, r3, r5
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7fe fd58 	bl	800e224 <fill_first_frag>
 800f774:	4603      	mov	r3, r0
 800f776:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f77a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f77e:	2b00      	cmp	r3, #0
 800f780:	d002      	beq.n	800f788 <dir_register+0xd4>
 800f782:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f786:	e135      	b.n	800f9f4 <dir_register+0x340>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f78e:	f04f 32ff 	mov.w	r2, #4294967295
 800f792:	4619      	mov	r1, r3
 800f794:	f7fe fd75 	bl	800e282 <fill_last_frag>
 800f798:	4603      	mov	r3, r0
 800f79a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f79e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <dir_register+0xf8>
 800f7a6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7aa:	e123      	b.n	800f9f4 <dir_register+0x340>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 800f7ac:	687a      	ldr	r2, [r7, #4]
 800f7ae:	f107 0308 	add.w	r3, r7, #8
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7ff fc95 	bl	800f0e4 <load_obj_dir>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f7c0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d002      	beq.n	800f7ce <dir_register+0x11a>
 800f7c8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f7cc:	e112      	b.n	800f9f4 <dir_register+0x340>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 800f7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7d0:	691b      	ldr	r3, [r3, #16]
 800f7d2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f7dc:	4608      	mov	r0, r1
 800f7de:	f7fd fe90 	bl	800d502 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 800f7e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7e4:	691b      	ldr	r3, [r3, #16]
 800f7e6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800f7f0:	4608      	mov	r0, r1
 800f7f2:	f7fd fe86 	bl	800d502 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	79da      	ldrb	r2, [r3, #7]
 800f7fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f7fc:	691b      	ldr	r3, [r3, #16]
 800f7fe:	3321      	adds	r3, #33	; 0x21
 800f800:	f042 0201 	orr.w	r2, r2, #1
 800f804:	b2d2      	uxtb	r2, r2
 800f806:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800f808:	f107 0308 	add.w	r3, r7, #8
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7ff fc9f 	bl	800f150 <store_xdir>
 800f812:	4603      	mov	r3, r0
 800f814:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) return res;
 800f818:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d002      	beq.n	800f826 <dir_register+0x172>
 800f820:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f824:	e0e6      	b.n	800f9f4 <dir_register+0x340>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800f826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f828:	691a      	ldr	r2, [r3, #16]
 800f82a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	4619      	mov	r1, r3
 800f830:	4610      	mov	r0, r2
 800f832:	f7ff fce8 	bl	800f206 <create_xdir>
		return FR_OK;
 800f836:	2300      	movs	r3, #0
 800f838:	e0dc      	b.n	800f9f4 <dir_register+0x340>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 800f840:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800f844:	220c      	movs	r2, #12
 800f846:	4618      	mov	r0, r3
 800f848:	f7fd fee3 	bl	800d612 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f84c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f850:	f003 0301 	and.w	r3, r3, #1
 800f854:	2b00      	cmp	r3, #0
 800f856:	d033      	beq.n	800f8c0 <dir_register+0x20c>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2240      	movs	r2, #64	; 0x40
 800f85c:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		for (n = 1; n < 100; n++) {
 800f860:	2301      	movs	r3, #1
 800f862:	67bb      	str	r3, [r7, #120]	; 0x78
 800f864:	e016      	b.n	800f894 <dir_register+0x1e0>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f86c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f86e:	68da      	ldr	r2, [r3, #12]
 800f870:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 800f874:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f876:	f7ff fa61 	bl	800ed3c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f87a:	6878      	ldr	r0, [r7, #4]
 800f87c:	f7ff fdf1 	bl	800f462 <dir_find>
 800f880:	4603      	mov	r3, r0
 800f882:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			if (res != FR_OK) break;
 800f886:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d106      	bne.n	800f89c <dir_register+0x1e8>
		for (n = 1; n < 100; n++) {
 800f88e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f890:	3301      	adds	r3, #1
 800f892:	67bb      	str	r3, [r7, #120]	; 0x78
 800f894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f896:	2b63      	cmp	r3, #99	; 0x63
 800f898:	d9e5      	bls.n	800f866 <dir_register+0x1b2>
 800f89a:	e000      	b.n	800f89e <dir_register+0x1ea>
			if (res != FR_OK) break;
 800f89c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f89e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8a0:	2b64      	cmp	r3, #100	; 0x64
 800f8a2:	d101      	bne.n	800f8a8 <dir_register+0x1f4>
 800f8a4:	2307      	movs	r3, #7
 800f8a6:	e0a5      	b.n	800f9f4 <dir_register+0x340>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f8a8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8ac:	2b04      	cmp	r3, #4
 800f8ae:	d002      	beq.n	800f8b6 <dir_register+0x202>
 800f8b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8b4:	e09e      	b.n	800f9f4 <dir_register+0x340>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f8b6:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f8c0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800f8c4:	f003 0302 	and.w	r3, r3, #2
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d007      	beq.n	800f8dc <dir_register+0x228>
 800f8cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ce:	330c      	adds	r3, #12
 800f8d0:	4a2f      	ldr	r2, [pc, #188]	; (800f990 <dir_register+0x2dc>)
 800f8d2:	fba2 2303 	umull	r2, r3, r2, r3
 800f8d6:	089b      	lsrs	r3, r3, #2
 800f8d8:	3301      	adds	r3, #1
 800f8da:	e000      	b.n	800f8de <dir_register+0x22a>
 800f8dc:	2301      	movs	r3, #1
 800f8de:	673b      	str	r3, [r7, #112]	; 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f8e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff f852 	bl	800e98c <dir_alloc>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f8ee:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d14f      	bne.n	800f996 <dir_register+0x2e2>
 800f8f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8f8:	3b01      	subs	r3, #1
 800f8fa:	673b      	str	r3, [r7, #112]	; 0x70
 800f8fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d049      	beq.n	800f996 <dir_register+0x2e2>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f906:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f908:	015b      	lsls	r3, r3, #5
 800f90a:	1ad3      	subs	r3, r2, r3
 800f90c:	4619      	mov	r1, r3
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	f7fe fee1 	bl	800e6d6 <dir_sdi>
 800f914:	4603      	mov	r3, r0
 800f916:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f91a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d139      	bne.n	800f996 <dir_register+0x2e2>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	3340      	adds	r3, #64	; 0x40
 800f926:	4618      	mov	r0, r3
 800f928:	f7ff fa96 	bl	800ee58 <sum_sfn>
 800f92c:	4603      	mov	r3, r0
 800f92e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f936:	4619      	mov	r1, r3
 800f938:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f93a:	f7fe f8c9 	bl	800dad0 <move_window>
 800f93e:	4603      	mov	r3, r0
 800f940:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
				if (res != FR_OK) break;
 800f944:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f948:	2b00      	cmp	r3, #0
 800f94a:	d123      	bne.n	800f994 <dir_register+0x2e0>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f94c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f94e:	68d8      	ldr	r0, [r3, #12]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800f954:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f956:	b2da      	uxtb	r2, r3
 800f958:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 800f95c:	f7ff f986 	bl	800ec6c <put_lfn>
				fs->wflag = 1;
 800f960:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f962:	2201      	movs	r2, #1
 800f964:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f966:	2100      	movs	r1, #0
 800f968:	6878      	ldr	r0, [r7, #4]
 800f96a:	f7fe ff3a 	bl	800e7e2 <dir_next>
 800f96e:	4603      	mov	r3, r0
 800f970:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
			} while (res == FR_OK && --nent);
 800f974:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d10c      	bne.n	800f996 <dir_register+0x2e2>
 800f97c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f97e:	3b01      	subs	r3, #1
 800f980:	673b      	str	r3, [r7, #112]	; 0x70
 800f982:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f984:	2b00      	cmp	r3, #0
 800f986:	d1d4      	bne.n	800f932 <dir_register+0x27e>
 800f988:	e005      	b.n	800f996 <dir_register+0x2e2>
 800f98a:	bf00      	nop
 800f98c:	88888889 	.word	0x88888889
 800f990:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 800f994:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f996:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d128      	bne.n	800f9f0 <dir_register+0x33c>
		res = move_window(fs, dp->sect);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800f9a6:	f7fe f893 	bl	800dad0 <move_window>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if (res == FR_OK) {
 800f9b0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d11b      	bne.n	800f9f0 <dir_register+0x33c>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9bc:	2220      	movs	r2, #32
 800f9be:	2100      	movs	r1, #0
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	f7fd fe47 	bl	800d654 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	3340      	adds	r3, #64	; 0x40
 800f9ce:	220b      	movs	r2, #11
 800f9d0:	4619      	mov	r1, r3
 800f9d2:	f7fd fe1e 	bl	800d612 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f9e0:	330c      	adds	r3, #12
 800f9e2:	f002 0218 	and.w	r2, r2, #24
 800f9e6:	b2d2      	uxtb	r2, r2
 800f9e8:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f9ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9f0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3780      	adds	r7, #128	; 0x80
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800f9fe:	bf00      	nop

0800fa00 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b08a      	sub	sp, #40	; 0x28
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
 800fa08:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	681b      	ldr	r3, [r3, #0]
 800fa0e:	613b      	str	r3, [r7, #16]
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	68db      	ldr	r3, [r3, #12]
 800fa16:	60fb      	str	r3, [r7, #12]
 800fa18:	2300      	movs	r3, #0
 800fa1a:	617b      	str	r3, [r7, #20]
 800fa1c:	697b      	ldr	r3, [r7, #20]
 800fa1e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fa20:	69bb      	ldr	r3, [r7, #24]
 800fa22:	1c5a      	adds	r2, r3, #1
 800fa24:	61ba      	str	r2, [r7, #24]
 800fa26:	693a      	ldr	r2, [r7, #16]
 800fa28:	4413      	add	r3, r2
 800fa2a:	781b      	ldrb	r3, [r3, #0]
 800fa2c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fa2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa30:	2b1f      	cmp	r3, #31
 800fa32:	d940      	bls.n	800fab6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fa34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa36:	2b2f      	cmp	r3, #47	; 0x2f
 800fa38:	d006      	beq.n	800fa48 <create_name+0x48>
 800fa3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa3c:	2b5c      	cmp	r3, #92	; 0x5c
 800fa3e:	d110      	bne.n	800fa62 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fa40:	e002      	b.n	800fa48 <create_name+0x48>
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	3301      	adds	r3, #1
 800fa46:	61bb      	str	r3, [r7, #24]
 800fa48:	693a      	ldr	r2, [r7, #16]
 800fa4a:	69bb      	ldr	r3, [r7, #24]
 800fa4c:	4413      	add	r3, r2
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b2f      	cmp	r3, #47	; 0x2f
 800fa52:	d0f6      	beq.n	800fa42 <create_name+0x42>
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	69bb      	ldr	r3, [r7, #24]
 800fa58:	4413      	add	r3, r2
 800fa5a:	781b      	ldrb	r3, [r3, #0]
 800fa5c:	2b5c      	cmp	r3, #92	; 0x5c
 800fa5e:	d0f0      	beq.n	800fa42 <create_name+0x42>
			break;
 800fa60:	e02a      	b.n	800fab8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fa62:	697b      	ldr	r3, [r7, #20]
 800fa64:	2bfe      	cmp	r3, #254	; 0xfe
 800fa66:	d901      	bls.n	800fa6c <create_name+0x6c>
 800fa68:	2306      	movs	r3, #6
 800fa6a:	e17d      	b.n	800fd68 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fa6c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa6e:	b2db      	uxtb	r3, r3
 800fa70:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fa72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa74:	2101      	movs	r1, #1
 800fa76:	4618      	mov	r0, r3
 800fa78:	f001 ff14 	bl	80118a4 <ff_convert>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fa80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d101      	bne.n	800fa8a <create_name+0x8a>
 800fa86:	2306      	movs	r3, #6
 800fa88:	e16e      	b.n	800fd68 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fa8a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa8c:	2b7f      	cmp	r3, #127	; 0x7f
 800fa8e:	d809      	bhi.n	800faa4 <create_name+0xa4>
 800fa90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fa92:	4619      	mov	r1, r3
 800fa94:	488d      	ldr	r0, [pc, #564]	; (800fccc <create_name+0x2cc>)
 800fa96:	f7fd fe1f 	bl	800d6d8 <chk_chr>
 800fa9a:	4603      	mov	r3, r0
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d001      	beq.n	800faa4 <create_name+0xa4>
 800faa0:	2306      	movs	r3, #6
 800faa2:	e161      	b.n	800fd68 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800faa4:	697b      	ldr	r3, [r7, #20]
 800faa6:	1c5a      	adds	r2, r3, #1
 800faa8:	617a      	str	r2, [r7, #20]
 800faaa:	005b      	lsls	r3, r3, #1
 800faac:	68fa      	ldr	r2, [r7, #12]
 800faae:	4413      	add	r3, r2
 800fab0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fab2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fab4:	e7b4      	b.n	800fa20 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fab6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fab8:	693a      	ldr	r2, [r7, #16]
 800faba:	69bb      	ldr	r3, [r7, #24]
 800fabc:	441a      	add	r2, r3
 800fabe:	683b      	ldr	r3, [r7, #0]
 800fac0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fac4:	2b1f      	cmp	r3, #31
 800fac6:	d801      	bhi.n	800facc <create_name+0xcc>
 800fac8:	2304      	movs	r3, #4
 800faca:	e000      	b.n	800face <create_name+0xce>
 800facc:	2300      	movs	r3, #0
 800face:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fad2:	e011      	b.n	800faf8 <create_name+0xf8>
		w = lfn[di - 1];
 800fad4:	697b      	ldr	r3, [r7, #20]
 800fad6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fada:	3b01      	subs	r3, #1
 800fadc:	005b      	lsls	r3, r3, #1
 800fade:	68fa      	ldr	r2, [r7, #12]
 800fae0:	4413      	add	r3, r2
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fae8:	2b20      	cmp	r3, #32
 800faea:	d002      	beq.n	800faf2 <create_name+0xf2>
 800faec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faee:	2b2e      	cmp	r3, #46	; 0x2e
 800faf0:	d106      	bne.n	800fb00 <create_name+0x100>
		di--;
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	3b01      	subs	r3, #1
 800faf6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d1ea      	bne.n	800fad4 <create_name+0xd4>
 800fafe:	e000      	b.n	800fb02 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fb00:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	005b      	lsls	r3, r3, #1
 800fb06:	68fa      	ldr	r2, [r7, #12]
 800fb08:	4413      	add	r3, r2
 800fb0a:	2200      	movs	r2, #0
 800fb0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fb0e:	697b      	ldr	r3, [r7, #20]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d101      	bne.n	800fb18 <create_name+0x118>
 800fb14:	2306      	movs	r3, #6
 800fb16:	e127      	b.n	800fd68 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	3340      	adds	r3, #64	; 0x40
 800fb1c:	220b      	movs	r2, #11
 800fb1e:	2120      	movs	r1, #32
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fd fd97 	bl	800d654 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fb26:	2300      	movs	r3, #0
 800fb28:	61bb      	str	r3, [r7, #24]
 800fb2a:	e002      	b.n	800fb32 <create_name+0x132>
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	61bb      	str	r3, [r7, #24]
 800fb32:	69bb      	ldr	r3, [r7, #24]
 800fb34:	005b      	lsls	r3, r3, #1
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	4413      	add	r3, r2
 800fb3a:	881b      	ldrh	r3, [r3, #0]
 800fb3c:	2b20      	cmp	r3, #32
 800fb3e:	d0f5      	beq.n	800fb2c <create_name+0x12c>
 800fb40:	69bb      	ldr	r3, [r7, #24]
 800fb42:	005b      	lsls	r3, r3, #1
 800fb44:	68fa      	ldr	r2, [r7, #12]
 800fb46:	4413      	add	r3, r2
 800fb48:	881b      	ldrh	r3, [r3, #0]
 800fb4a:	2b2e      	cmp	r3, #46	; 0x2e
 800fb4c:	d0ee      	beq.n	800fb2c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d009      	beq.n	800fb68 <create_name+0x168>
 800fb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fb58:	f043 0303 	orr.w	r3, r3, #3
 800fb5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fb60:	e002      	b.n	800fb68 <create_name+0x168>
 800fb62:	697b      	ldr	r3, [r7, #20]
 800fb64:	3b01      	subs	r3, #1
 800fb66:	617b      	str	r3, [r7, #20]
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d009      	beq.n	800fb82 <create_name+0x182>
 800fb6e:	697b      	ldr	r3, [r7, #20]
 800fb70:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb74:	3b01      	subs	r3, #1
 800fb76:	005b      	lsls	r3, r3, #1
 800fb78:	68fa      	ldr	r2, [r7, #12]
 800fb7a:	4413      	add	r3, r2
 800fb7c:	881b      	ldrh	r3, [r3, #0]
 800fb7e:	2b2e      	cmp	r3, #46	; 0x2e
 800fb80:	d1ef      	bne.n	800fb62 <create_name+0x162>

	i = b = 0; ni = 8;
 800fb82:	2300      	movs	r3, #0
 800fb84:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fb88:	2300      	movs	r3, #0
 800fb8a:	623b      	str	r3, [r7, #32]
 800fb8c:	2308      	movs	r3, #8
 800fb8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fb90:	69bb      	ldr	r3, [r7, #24]
 800fb92:	1c5a      	adds	r2, r3, #1
 800fb94:	61ba      	str	r2, [r7, #24]
 800fb96:	005b      	lsls	r3, r3, #1
 800fb98:	68fa      	ldr	r2, [r7, #12]
 800fb9a:	4413      	add	r3, r2
 800fb9c:	881b      	ldrh	r3, [r3, #0]
 800fb9e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fba0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	f000 8090 	beq.w	800fcc8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbaa:	2b20      	cmp	r3, #32
 800fbac:	d006      	beq.n	800fbbc <create_name+0x1bc>
 800fbae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fbb0:	2b2e      	cmp	r3, #46	; 0x2e
 800fbb2:	d10a      	bne.n	800fbca <create_name+0x1ca>
 800fbb4:	69ba      	ldr	r2, [r7, #24]
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	429a      	cmp	r2, r3
 800fbba:	d006      	beq.n	800fbca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fbbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbc0:	f043 0303 	orr.w	r3, r3, #3
 800fbc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbc8:	e07d      	b.n	800fcc6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fbca:	6a3a      	ldr	r2, [r7, #32]
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	429a      	cmp	r2, r3
 800fbd0:	d203      	bcs.n	800fbda <create_name+0x1da>
 800fbd2:	69ba      	ldr	r2, [r7, #24]
 800fbd4:	697b      	ldr	r3, [r7, #20]
 800fbd6:	429a      	cmp	r2, r3
 800fbd8:	d123      	bne.n	800fc22 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fbda:	69fb      	ldr	r3, [r7, #28]
 800fbdc:	2b0b      	cmp	r3, #11
 800fbde:	d106      	bne.n	800fbee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fbe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbe4:	f043 0303 	orr.w	r3, r3, #3
 800fbe8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fbec:	e075      	b.n	800fcda <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fbee:	69ba      	ldr	r2, [r7, #24]
 800fbf0:	697b      	ldr	r3, [r7, #20]
 800fbf2:	429a      	cmp	r2, r3
 800fbf4:	d005      	beq.n	800fc02 <create_name+0x202>
 800fbf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbfa:	f043 0303 	orr.w	r3, r3, #3
 800fbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fc02:	69ba      	ldr	r2, [r7, #24]
 800fc04:	697b      	ldr	r3, [r7, #20]
 800fc06:	429a      	cmp	r2, r3
 800fc08:	d866      	bhi.n	800fcd8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fc0a:	697b      	ldr	r3, [r7, #20]
 800fc0c:	61bb      	str	r3, [r7, #24]
 800fc0e:	2308      	movs	r3, #8
 800fc10:	623b      	str	r3, [r7, #32]
 800fc12:	230b      	movs	r3, #11
 800fc14:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fc16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc20:	e051      	b.n	800fcc6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fc22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc24:	2b7f      	cmp	r3, #127	; 0x7f
 800fc26:	d914      	bls.n	800fc52 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fc28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc2a:	2100      	movs	r1, #0
 800fc2c:	4618      	mov	r0, r3
 800fc2e:	f001 fe39 	bl	80118a4 <ff_convert>
 800fc32:	4603      	mov	r3, r0
 800fc34:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fc36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d004      	beq.n	800fc46 <create_name+0x246>
 800fc3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc3e:	3b80      	subs	r3, #128	; 0x80
 800fc40:	4a23      	ldr	r2, [pc, #140]	; (800fcd0 <create_name+0x2d0>)
 800fc42:	5cd3      	ldrb	r3, [r2, r3]
 800fc44:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fc46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc4a:	f043 0302 	orr.w	r3, r3, #2
 800fc4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fc52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d007      	beq.n	800fc68 <create_name+0x268>
 800fc58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	481d      	ldr	r0, [pc, #116]	; (800fcd4 <create_name+0x2d4>)
 800fc5e:	f7fd fd3b 	bl	800d6d8 <chk_chr>
 800fc62:	4603      	mov	r3, r0
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d008      	beq.n	800fc7a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fc68:	235f      	movs	r3, #95	; 0x5f
 800fc6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc70:	f043 0303 	orr.w	r3, r3, #3
 800fc74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc78:	e01b      	b.n	800fcb2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fc7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc7c:	2b40      	cmp	r3, #64	; 0x40
 800fc7e:	d909      	bls.n	800fc94 <create_name+0x294>
 800fc80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc82:	2b5a      	cmp	r3, #90	; 0x5a
 800fc84:	d806      	bhi.n	800fc94 <create_name+0x294>
					b |= 2;
 800fc86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fc8a:	f043 0302 	orr.w	r3, r3, #2
 800fc8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc92:	e00e      	b.n	800fcb2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fc94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc96:	2b60      	cmp	r3, #96	; 0x60
 800fc98:	d90b      	bls.n	800fcb2 <create_name+0x2b2>
 800fc9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc9c:	2b7a      	cmp	r3, #122	; 0x7a
 800fc9e:	d808      	bhi.n	800fcb2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fca0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fca4:	f043 0301 	orr.w	r3, r3, #1
 800fca8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcae:	3b20      	subs	r3, #32
 800fcb0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fcb2:	6a3b      	ldr	r3, [r7, #32]
 800fcb4:	1c5a      	adds	r2, r3, #1
 800fcb6:	623a      	str	r2, [r7, #32]
 800fcb8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fcba:	b2d1      	uxtb	r1, r2
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	4413      	add	r3, r2
 800fcc0:	460a      	mov	r2, r1
 800fcc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		w = lfn[si++];					/* Get an LFN character */
 800fcc6:	e763      	b.n	800fb90 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fcc8:	bf00      	nop
 800fcca:	e006      	b.n	800fcda <create_name+0x2da>
 800fccc:	080165ec 	.word	0x080165ec
 800fcd0:	08016744 	.word	0x08016744
 800fcd4:	080165f8 	.word	0x080165f8
			if (si > di) break;			/* No extension */
 800fcd8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800fce0:	2be5      	cmp	r3, #229	; 0xe5
 800fce2:	d103      	bne.n	800fcec <create_name+0x2ec>
 800fce4:	687b      	ldr	r3, [r7, #4]
 800fce6:	2205      	movs	r2, #5
 800fce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	if (ni == 8) b <<= 2;
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	2b08      	cmp	r3, #8
 800fcf0:	d104      	bne.n	800fcfc <create_name+0x2fc>
 800fcf2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fcfc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd00:	f003 030c 	and.w	r3, r3, #12
 800fd04:	2b0c      	cmp	r3, #12
 800fd06:	d005      	beq.n	800fd14 <create_name+0x314>
 800fd08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd0c:	f003 0303 	and.w	r3, r3, #3
 800fd10:	2b03      	cmp	r3, #3
 800fd12:	d105      	bne.n	800fd20 <create_name+0x320>
 800fd14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd18:	f043 0302 	orr.w	r3, r3, #2
 800fd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd24:	f003 0302 	and.w	r3, r3, #2
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d117      	bne.n	800fd5c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fd2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd30:	f003 0303 	and.w	r3, r3, #3
 800fd34:	2b01      	cmp	r3, #1
 800fd36:	d105      	bne.n	800fd44 <create_name+0x344>
 800fd38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd3c:	f043 0310 	orr.w	r3, r3, #16
 800fd40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fd44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd48:	f003 030c 	and.w	r3, r3, #12
 800fd4c:	2b04      	cmp	r3, #4
 800fd4e:	d105      	bne.n	800fd5c <create_name+0x35c>
 800fd50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd54:	f043 0308 	orr.w	r3, r3, #8
 800fd58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fd62:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b

	return FR_OK;
 800fd66:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fd68:	4618      	mov	r0, r3
 800fd6a:	3728      	adds	r7, #40	; 0x28
 800fd6c:	46bd      	mov	sp, r7
 800fd6e:	bd80      	pop	{r7, pc}

0800fd70 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fd70:	b580      	push	{r7, lr}
 800fd72:	b086      	sub	sp, #24
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
 800fd78:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fd7e:	693b      	ldr	r3, [r7, #16]
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fd84:	e002      	b.n	800fd8c <follow_path+0x1c>
 800fd86:	683b      	ldr	r3, [r7, #0]
 800fd88:	3301      	adds	r3, #1
 800fd8a:	603b      	str	r3, [r7, #0]
 800fd8c:	683b      	ldr	r3, [r7, #0]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b2f      	cmp	r3, #47	; 0x2f
 800fd92:	d0f8      	beq.n	800fd86 <follow_path+0x16>
 800fd94:	683b      	ldr	r3, [r7, #0]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	2b5c      	cmp	r3, #92	; 0x5c
 800fd9a:	d0f4      	beq.n	800fd86 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	2200      	movs	r2, #0
 800fda6:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fda8:	683b      	ldr	r3, [r7, #0]
 800fdaa:	781b      	ldrb	r3, [r3, #0]
 800fdac:	2b1f      	cmp	r3, #31
 800fdae:	d80a      	bhi.n	800fdc6 <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	2280      	movs	r2, #128	; 0x80
 800fdb4:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		res = dir_sdi(dp, 0);
 800fdb8:	2100      	movs	r1, #0
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f7fe fc8b 	bl	800e6d6 <dir_sdi>
 800fdc0:	4603      	mov	r3, r0
 800fdc2:	75fb      	strb	r3, [r7, #23]
 800fdc4:	e078      	b.n	800feb8 <follow_path+0x148>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fdc6:	463b      	mov	r3, r7
 800fdc8:	4619      	mov	r1, r3
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	f7ff fe18 	bl	800fa00 <create_name>
 800fdd0:	4603      	mov	r3, r0
 800fdd2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fdd4:	7dfb      	ldrb	r3, [r7, #23]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d169      	bne.n	800feae <follow_path+0x13e>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f7ff fb41 	bl	800f462 <dir_find>
 800fde0:	4603      	mov	r3, r0
 800fde2:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800fdea:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fdec:	7dfb      	ldrb	r3, [r7, #23]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00a      	beq.n	800fe08 <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	2b04      	cmp	r3, #4
 800fdf6:	d15c      	bne.n	800feb2 <follow_path+0x142>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fdf8:	7afb      	ldrb	r3, [r7, #11]
 800fdfa:	f003 0304 	and.w	r3, r3, #4
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d157      	bne.n	800feb2 <follow_path+0x142>
 800fe02:	2305      	movs	r3, #5
 800fe04:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fe06:	e054      	b.n	800feb2 <follow_path+0x142>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe08:	7afb      	ldrb	r3, [r7, #11]
 800fe0a:	f003 0304 	and.w	r3, r3, #4
 800fe0e:	2b00      	cmp	r3, #0
 800fe10:	d151      	bne.n	800feb6 <follow_path+0x146>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	799b      	ldrb	r3, [r3, #6]
 800fe16:	f003 0310 	and.w	r3, r3, #16
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d102      	bne.n	800fe24 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 800fe1e:	2305      	movs	r3, #5
 800fe20:	75fb      	strb	r3, [r7, #23]
 800fe22:	e049      	b.n	800feb8 <follow_path+0x148>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	781b      	ldrb	r3, [r3, #0]
 800fe28:	2b04      	cmp	r3, #4
 800fe2a:	d130      	bne.n	800fe8e <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	689a      	ldr	r2, [r3, #8]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800fe40:	693a      	ldr	r2, [r7, #16]
 800fe42:	79d2      	ldrb	r2, [r2, #7]
 800fe44:	431a      	orrs	r2, r3
 800fe46:	693b      	ldr	r3, [r7, #16]
 800fe48:	625a      	str	r2, [r3, #36]	; 0x24
				obj->c_ofs = dp->blk_ofs;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fe4e:	693b      	ldr	r3, [r7, #16]
 800fe50:	629a      	str	r2, [r3, #40]	; 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	691b      	ldr	r3, [r3, #16]
 800fe56:	3334      	adds	r3, #52	; 0x34
 800fe58:	4618      	mov	r0, r3
 800fe5a:	f7fd fa0d 	bl	800d278 <ld_dword>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	691b      	ldr	r3, [r3, #16]
 800fe68:	3321      	adds	r3, #33	; 0x21
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	f003 0302 	and.w	r3, r3, #2
 800fe70:	b2da      	uxtb	r2, r3
 800fe72:	693b      	ldr	r3, [r7, #16]
 800fe74:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	691b      	ldr	r3, [r3, #16]
 800fe7a:	3338      	adds	r3, #56	; 0x38
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	f7fd fa1e 	bl	800d2be <ld_qword>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	6939      	ldr	r1, [r7, #16]
 800fe88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800fe8c:	e79b      	b.n	800fdc6 <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe9c:	4413      	add	r3, r2
 800fe9e:	4619      	mov	r1, r3
 800fea0:	68f8      	ldr	r0, [r7, #12]
 800fea2:	f7fe fdcf 	bl	800ea44 <ld_clust>
 800fea6:	4602      	mov	r2, r0
 800fea8:	693b      	ldr	r3, [r7, #16]
 800feaa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800feac:	e78b      	b.n	800fdc6 <follow_path+0x56>
			if (res != FR_OK) break;
 800feae:	bf00      	nop
 800feb0:	e002      	b.n	800feb8 <follow_path+0x148>
				break;
 800feb2:	bf00      	nop
 800feb4:	e000      	b.n	800feb8 <follow_path+0x148>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800feb6:	bf00      	nop
			}
		}
	}

	return res;
 800feb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800feba:	4618      	mov	r0, r3
 800febc:	3718      	adds	r7, #24
 800febe:	46bd      	mov	sp, r7
 800fec0:	bd80      	pop	{r7, pc}

0800fec2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fec2:	b480      	push	{r7}
 800fec4:	b087      	sub	sp, #28
 800fec6:	af00      	add	r7, sp, #0
 800fec8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800feca:	f04f 33ff 	mov.w	r3, #4294967295
 800fece:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	d031      	beq.n	800ff3c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	617b      	str	r3, [r7, #20]
 800fede:	e002      	b.n	800fee6 <get_ldnumber+0x24>
 800fee0:	697b      	ldr	r3, [r7, #20]
 800fee2:	3301      	adds	r3, #1
 800fee4:	617b      	str	r3, [r7, #20]
 800fee6:	697b      	ldr	r3, [r7, #20]
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	2b1f      	cmp	r3, #31
 800feec:	d903      	bls.n	800fef6 <get_ldnumber+0x34>
 800feee:	697b      	ldr	r3, [r7, #20]
 800fef0:	781b      	ldrb	r3, [r3, #0]
 800fef2:	2b3a      	cmp	r3, #58	; 0x3a
 800fef4:	d1f4      	bne.n	800fee0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fef6:	697b      	ldr	r3, [r7, #20]
 800fef8:	781b      	ldrb	r3, [r3, #0]
 800fefa:	2b3a      	cmp	r3, #58	; 0x3a
 800fefc:	d11c      	bne.n	800ff38 <get_ldnumber+0x76>
			tp = *path;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	1c5a      	adds	r2, r3, #1
 800ff08:	60fa      	str	r2, [r7, #12]
 800ff0a:	781b      	ldrb	r3, [r3, #0]
 800ff0c:	3b30      	subs	r3, #48	; 0x30
 800ff0e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff10:	68bb      	ldr	r3, [r7, #8]
 800ff12:	2b09      	cmp	r3, #9
 800ff14:	d80e      	bhi.n	800ff34 <get_ldnumber+0x72>
 800ff16:	68fa      	ldr	r2, [r7, #12]
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	429a      	cmp	r2, r3
 800ff1c:	d10a      	bne.n	800ff34 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ff1e:	68bb      	ldr	r3, [r7, #8]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d107      	bne.n	800ff34 <get_ldnumber+0x72>
					vol = (int)i;
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff28:	697b      	ldr	r3, [r7, #20]
 800ff2a:	3301      	adds	r3, #1
 800ff2c:	617b      	str	r3, [r7, #20]
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	697a      	ldr	r2, [r7, #20]
 800ff32:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ff34:	693b      	ldr	r3, [r7, #16]
 800ff36:	e002      	b.n	800ff3e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ff38:	2300      	movs	r3, #0
 800ff3a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ff3c:	693b      	ldr	r3, [r7, #16]
}
 800ff3e:	4618      	mov	r0, r3
 800ff40:	371c      	adds	r7, #28
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr
	...

0800ff4c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
 800ff54:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	70da      	strb	r2, [r3, #3]
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff62:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff64:	6839      	ldr	r1, [r7, #0]
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7fd fdb2 	bl	800dad0 <move_window>
 800ff6c:	4603      	mov	r3, r0
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d001      	beq.n	800ff76 <check_fs+0x2a>
 800ff72:	2304      	movs	r3, #4
 800ff74:	e044      	b.n	8010000 <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	333c      	adds	r3, #60	; 0x3c
 800ff7a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff7e:	4618      	mov	r0, r3
 800ff80:	f7fd f962 	bl	800d248 <ld_word>
 800ff84:	4603      	mov	r3, r0
 800ff86:	461a      	mov	r2, r3
 800ff88:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d001      	beq.n	800ff94 <check_fs+0x48>
 800ff90:	2303      	movs	r3, #3
 800ff92:	e035      	b.n	8010000 <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ff9a:	2be9      	cmp	r3, #233	; 0xe9
 800ff9c:	d009      	beq.n	800ffb2 <check_fs+0x66>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffa4:	2beb      	cmp	r3, #235	; 0xeb
 800ffa6:	d11e      	bne.n	800ffe6 <check_fs+0x9a>
 800ffa8:	687b      	ldr	r3, [r7, #4]
 800ffaa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ffae:	2b90      	cmp	r3, #144	; 0x90
 800ffb0:	d119      	bne.n	800ffe6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ffb2:	687b      	ldr	r3, [r7, #4]
 800ffb4:	333c      	adds	r3, #60	; 0x3c
 800ffb6:	3336      	adds	r3, #54	; 0x36
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fd f95d 	bl	800d278 <ld_dword>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ffc4:	4a10      	ldr	r2, [pc, #64]	; (8010008 <check_fs+0xbc>)
 800ffc6:	4293      	cmp	r3, r2
 800ffc8:	d101      	bne.n	800ffce <check_fs+0x82>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	e018      	b.n	8010000 <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	333c      	adds	r3, #60	; 0x3c
 800ffd2:	3352      	adds	r3, #82	; 0x52
 800ffd4:	4618      	mov	r0, r3
 800ffd6:	f7fd f94f 	bl	800d278 <ld_dword>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	4a0b      	ldr	r2, [pc, #44]	; (801000c <check_fs+0xc0>)
 800ffde:	4293      	cmp	r3, r2
 800ffe0:	d101      	bne.n	800ffe6 <check_fs+0x9a>
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	e00c      	b.n	8010000 <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	333c      	adds	r3, #60	; 0x3c
 800ffea:	220b      	movs	r2, #11
 800ffec:	4908      	ldr	r1, [pc, #32]	; (8010010 <check_fs+0xc4>)
 800ffee:	4618      	mov	r0, r3
 800fff0:	f7fd fb4b 	bl	800d68a <mem_cmp>
 800fff4:	4603      	mov	r3, r0
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d101      	bne.n	800fffe <check_fs+0xb2>
 800fffa:	2301      	movs	r3, #1
 800fffc:	e000      	b.n	8010000 <check_fs+0xb4>
#endif
	return 2;
 800fffe:	2302      	movs	r3, #2
}
 8010000:	4618      	mov	r0, r3
 8010002:	3708      	adds	r7, #8
 8010004:	46bd      	mov	sp, r7
 8010006:	bd80      	pop	{r7, pc}
 8010008:	00544146 	.word	0x00544146
 801000c:	33544146 	.word	0x33544146
 8010010:	08016600 	.word	0x08016600

08010014 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010014:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010018:	b09c      	sub	sp, #112	; 0x70
 801001a:	af00      	add	r7, sp, #0
 801001c:	61f8      	str	r0, [r7, #28]
 801001e:	61b9      	str	r1, [r7, #24]
 8010020:	4613      	mov	r3, r2
 8010022:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	2200      	movs	r2, #0
 8010028:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801002a:	69f8      	ldr	r0, [r7, #28]
 801002c:	f7ff ff49 	bl	800fec2 <get_ldnumber>
 8010030:	6578      	str	r0, [r7, #84]	; 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8010032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010034:	2b00      	cmp	r3, #0
 8010036:	da01      	bge.n	801003c <find_volume+0x28>
 8010038:	230b      	movs	r3, #11
 801003a:	e339      	b.n	80106b0 <find_volume+0x69c>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801003c:	4a9d      	ldr	r2, [pc, #628]	; (80102b4 <find_volume+0x2a0>)
 801003e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010040:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010044:	653b      	str	r3, [r7, #80]	; 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010048:	2b00      	cmp	r3, #0
 801004a:	d101      	bne.n	8010050 <find_volume+0x3c>
 801004c:	230c      	movs	r3, #12
 801004e:	e32f      	b.n	80106b0 <find_volume+0x69c>

	ENTER_FF(fs);						/* Lock the volume */
 8010050:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010052:	f7fd fb5c 	bl	800d70e <lock_fs>
 8010056:	4603      	mov	r3, r0
 8010058:	2b00      	cmp	r3, #0
 801005a:	d101      	bne.n	8010060 <find_volume+0x4c>
 801005c:	230f      	movs	r3, #15
 801005e:	e327      	b.n	80106b0 <find_volume+0x69c>
	*rfs = fs;							/* Return pointer to the file system object */
 8010060:	69bb      	ldr	r3, [r7, #24]
 8010062:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010064:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010066:	7dfb      	ldrb	r3, [r7, #23]
 8010068:	f023 0301 	bic.w	r3, r3, #1
 801006c:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801006e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d01a      	beq.n	80100ac <find_volume+0x98>
		stat = disk_status(fs->drv);
 8010076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010078:	785b      	ldrb	r3, [r3, #1]
 801007a:	4618      	mov	r0, r3
 801007c:	f7fd f846 	bl	800d10c <disk_status>
 8010080:	4603      	mov	r3, r0
 8010082:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010086:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801008a:	f003 0301 	and.w	r3, r3, #1
 801008e:	2b00      	cmp	r3, #0
 8010090:	d10c      	bne.n	80100ac <find_volume+0x98>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010092:	7dfb      	ldrb	r3, [r7, #23]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d007      	beq.n	80100a8 <find_volume+0x94>
 8010098:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801009c:	f003 0304 	and.w	r3, r3, #4
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d001      	beq.n	80100a8 <find_volume+0x94>
				return FR_WRITE_PROTECTED;
 80100a4:	230a      	movs	r3, #10
 80100a6:	e303      	b.n	80106b0 <find_volume+0x69c>
			}
			return FR_OK;				/* The file system object is valid */
 80100a8:	2300      	movs	r3, #0
 80100aa:	e301      	b.n	80106b0 <find_volume+0x69c>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80100ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100ae:	2200      	movs	r2, #0
 80100b0:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80100b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80100b4:	b2da      	uxtb	r2, r3
 80100b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b8:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80100ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100bc:	785b      	ldrb	r3, [r3, #1]
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd f83e 	bl	800d140 <disk_initialize>
 80100c4:	4603      	mov	r3, r0
 80100c6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80100ca:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d001      	beq.n	80100da <find_volume+0xc6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80100d6:	2303      	movs	r3, #3
 80100d8:	e2ea      	b.n	80106b0 <find_volume+0x69c>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80100da:	7dfb      	ldrb	r3, [r7, #23]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d007      	beq.n	80100f0 <find_volume+0xdc>
 80100e0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100e4:	f003 0304 	and.w	r3, r3, #4
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d001      	beq.n	80100f0 <find_volume+0xdc>
		return FR_WRITE_PROTECTED;
 80100ec:	230a      	movs	r3, #10
 80100ee:	e2df      	b.n	80106b0 <find_volume+0x69c>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80100f0:	2300      	movs	r3, #0
 80100f2:	66bb      	str	r3, [r7, #104]	; 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80100f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80100f6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80100f8:	f7ff ff28 	bl	800ff4c <check_fs>
 80100fc:	4603      	mov	r3, r0
 80100fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010102:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010106:	2b02      	cmp	r3, #2
 8010108:	d14d      	bne.n	80101a6 <find_volume+0x192>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801010a:	2300      	movs	r3, #0
 801010c:	65bb      	str	r3, [r7, #88]	; 0x58
 801010e:	e020      	b.n	8010152 <find_volume+0x13e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010112:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8010116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010118:	011b      	lsls	r3, r3, #4
 801011a:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801011e:	4413      	add	r3, r2
 8010120:	64bb      	str	r3, [r7, #72]	; 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010122:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010124:	3304      	adds	r3, #4
 8010126:	781b      	ldrb	r3, [r3, #0]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d006      	beq.n	801013a <find_volume+0x126>
 801012c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801012e:	3308      	adds	r3, #8
 8010130:	4618      	mov	r0, r3
 8010132:	f7fd f8a1 	bl	800d278 <ld_dword>
 8010136:	4602      	mov	r2, r0
 8010138:	e000      	b.n	801013c <find_volume+0x128>
 801013a:	2200      	movs	r2, #0
 801013c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801013e:	009b      	lsls	r3, r3, #2
 8010140:	3360      	adds	r3, #96	; 0x60
 8010142:	f107 0110 	add.w	r1, r7, #16
 8010146:	440b      	add	r3, r1
 8010148:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801014c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801014e:	3301      	adds	r3, #1
 8010150:	65bb      	str	r3, [r7, #88]	; 0x58
 8010152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010154:	2b03      	cmp	r3, #3
 8010156:	d9db      	bls.n	8010110 <find_volume+0xfc>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010158:	2300      	movs	r3, #0
 801015a:	65bb      	str	r3, [r7, #88]	; 0x58
		if (i) i--;
 801015c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <find_volume+0x154>
 8010162:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010164:	3b01      	subs	r3, #1
 8010166:	65bb      	str	r3, [r7, #88]	; 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010168:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801016a:	009b      	lsls	r3, r3, #2
 801016c:	3360      	adds	r3, #96	; 0x60
 801016e:	f107 0210 	add.w	r2, r7, #16
 8010172:	4413      	add	r3, r2
 8010174:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8010178:	66bb      	str	r3, [r7, #104]	; 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801017a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801017c:	2b00      	cmp	r3, #0
 801017e:	d005      	beq.n	801018c <find_volume+0x178>
 8010180:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010182:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010184:	f7ff fee2 	bl	800ff4c <check_fs>
 8010188:	4603      	mov	r3, r0
 801018a:	e000      	b.n	801018e <find_volume+0x17a>
 801018c:	2303      	movs	r3, #3
 801018e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010192:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010196:	2b01      	cmp	r3, #1
 8010198:	d905      	bls.n	80101a6 <find_volume+0x192>
 801019a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801019c:	3301      	adds	r3, #1
 801019e:	65bb      	str	r3, [r7, #88]	; 0x58
 80101a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101a2:	2b03      	cmp	r3, #3
 80101a4:	d9e0      	bls.n	8010168 <find_volume+0x154>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80101a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80101aa:	2b04      	cmp	r3, #4
 80101ac:	d101      	bne.n	80101b2 <find_volume+0x19e>
 80101ae:	2301      	movs	r3, #1
 80101b0:	e27e      	b.n	80106b0 <find_volume+0x69c>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80101b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80101b6:	2b01      	cmp	r3, #1
 80101b8:	d901      	bls.n	80101be <find_volume+0x1aa>
 80101ba:	230d      	movs	r3, #13
 80101bc:	e278      	b.n	80106b0 <find_volume+0x69c>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 80101be:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80101c2:	2b01      	cmp	r3, #1
 80101c4:	f040 80fa 	bne.w	80103bc <find_volume+0x3a8>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 80101c8:	230b      	movs	r3, #11
 80101ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80101cc:	e002      	b.n	80101d4 <find_volume+0x1c0>
 80101ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101d0:	3301      	adds	r3, #1
 80101d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80101d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101d6:	2b3f      	cmp	r3, #63	; 0x3f
 80101d8:	d806      	bhi.n	80101e8 <find_volume+0x1d4>
 80101da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80101dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101de:	4413      	add	r3, r2
 80101e0:	333c      	adds	r3, #60	; 0x3c
 80101e2:	781b      	ldrb	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d0f2      	beq.n	80101ce <find_volume+0x1ba>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80101e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80101ea:	2b3f      	cmp	r3, #63	; 0x3f
 80101ec:	d801      	bhi.n	80101f2 <find_volume+0x1de>
 80101ee:	230d      	movs	r3, #13
 80101f0:	e25e      	b.n	80106b0 <find_volume+0x69c>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 80101f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f4:	333c      	adds	r3, #60	; 0x3c
 80101f6:	3368      	adds	r3, #104	; 0x68
 80101f8:	4618      	mov	r0, r3
 80101fa:	f7fd f825 	bl	800d248 <ld_word>
 80101fe:	4603      	mov	r3, r0
 8010200:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010204:	d001      	beq.n	801020a <find_volume+0x1f6>
 8010206:	230d      	movs	r3, #13
 8010208:	e252      	b.n	80106b0 <find_volume+0x69c>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 801020a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801020c:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
 8010210:	2b09      	cmp	r3, #9
 8010212:	d001      	beq.n	8010218 <find_volume+0x204>
			return FR_NO_FILESYSTEM;
 8010214:	230d      	movs	r3, #13
 8010216:	e24b      	b.n	80106b0 <find_volume+0x69c>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8010218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801021a:	333c      	adds	r3, #60	; 0x3c
 801021c:	3348      	adds	r3, #72	; 0x48
 801021e:	4618      	mov	r0, r3
 8010220:	f7fd f84d 	bl	800d2be <ld_qword>
 8010224:	4602      	mov	r2, r0
 8010226:	460b      	mov	r3, r1
 8010228:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801022a:	2000      	movs	r0, #0
 801022c:	60b9      	str	r1, [r7, #8]
 801022e:	60f8      	str	r0, [r7, #12]
 8010230:	68b9      	ldr	r1, [r7, #8]
 8010232:	1851      	adds	r1, r2, r1
 8010234:	6039      	str	r1, [r7, #0]
 8010236:	68f9      	ldr	r1, [r7, #12]
 8010238:	eb43 0101 	adc.w	r1, r3, r1
 801023c:	6079      	str	r1, [r7, #4]
 801023e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010242:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8010246:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801024a:	2b01      	cmp	r3, #1
 801024c:	d301      	bcc.n	8010252 <find_volume+0x23e>
 801024e:	230d      	movs	r3, #13
 8010250:	e22e      	b.n	80106b0 <find_volume+0x69c>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8010252:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010254:	333c      	adds	r3, #60	; 0x3c
 8010256:	3354      	adds	r3, #84	; 0x54
 8010258:	4618      	mov	r0, r3
 801025a:	f7fd f80d 	bl	800d278 <ld_dword>
 801025e:	4602      	mov	r2, r0
 8010260:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010262:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8010264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010266:	f893 20aa 	ldrb.w	r2, [r3, #170]	; 0xaa
 801026a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801026c:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 801026e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010270:	789b      	ldrb	r3, [r3, #2]
 8010272:	2b01      	cmp	r3, #1
 8010274:	d001      	beq.n	801027a <find_volume+0x266>
 8010276:	230d      	movs	r3, #13
 8010278:	e21a      	b.n	80106b0 <find_volume+0x69c>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 801027a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801027c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8010280:	461a      	mov	r2, r3
 8010282:	2301      	movs	r3, #1
 8010284:	4093      	lsls	r3, r2
 8010286:	b29a      	uxth	r2, r3
 8010288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028a:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 801028c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801028e:	895b      	ldrh	r3, [r3, #10]
 8010290:	2b00      	cmp	r3, #0
 8010292:	d101      	bne.n	8010298 <find_volume+0x284>
 8010294:	230d      	movs	r3, #13
 8010296:	e20b      	b.n	80106b0 <find_volume+0x69c>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8010298:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801029a:	333c      	adds	r3, #60	; 0x3c
 801029c:	335c      	adds	r3, #92	; 0x5c
 801029e:	4618      	mov	r0, r3
 80102a0:	f7fc ffea 	bl	800d278 <ld_dword>
 80102a4:	63f8      	str	r0, [r7, #60]	; 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 80102a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102a8:	4a03      	ldr	r2, [pc, #12]	; (80102b8 <find_volume+0x2a4>)
 80102aa:	4293      	cmp	r3, r2
 80102ac:	d906      	bls.n	80102bc <find_volume+0x2a8>
 80102ae:	230d      	movs	r3, #13
 80102b0:	e1fe      	b.n	80106b0 <find_volume+0x69c>
 80102b2:	bf00      	nop
 80102b4:	20021088 	.word	0x20021088
 80102b8:	7ffffffd 	.word	0x7ffffffd
		fs->n_fatent = nclst + 2;
 80102bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102be:	1c9a      	adds	r2, r3, #2
 80102c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c2:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 80102c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102c8:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 80102ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102cc:	333c      	adds	r3, #60	; 0x3c
 80102ce:	3358      	adds	r3, #88	; 0x58
 80102d0:	4618      	mov	r0, r3
 80102d2:	f7fc ffd1 	bl	800d278 <ld_dword>
 80102d6:	4602      	mov	r2, r0
 80102d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102da:	441a      	add	r2, r3
 80102dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102de:	635a      	str	r2, [r3, #52]	; 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80102e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e2:	333c      	adds	r3, #60	; 0x3c
 80102e4:	3350      	adds	r3, #80	; 0x50
 80102e6:	4618      	mov	r0, r3
 80102e8:	f7fc ffc6 	bl	800d278 <ld_dword>
 80102ec:	4602      	mov	r2, r0
 80102ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80102f0:	441a      	add	r2, r3
 80102f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f4:	62da      	str	r2, [r3, #44]	; 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 80102f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80102fa:	2200      	movs	r2, #0
 80102fc:	469a      	mov	sl, r3
 80102fe:	4693      	mov	fp, r2
 8010300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010302:	895b      	ldrh	r3, [r3, #10]
 8010304:	461a      	mov	r2, r3
 8010306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010308:	fb02 f303 	mul.w	r3, r2, r3
 801030c:	2200      	movs	r2, #0
 801030e:	4698      	mov	r8, r3
 8010310:	4691      	mov	r9, r2
 8010312:	eb1a 0408 	adds.w	r4, sl, r8
 8010316:	eb4b 0509 	adc.w	r5, fp, r9
 801031a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 801031e:	42a2      	cmp	r2, r4
 8010320:	41ab      	sbcs	r3, r5
 8010322:	d201      	bcs.n	8010328 <find_volume+0x314>
 8010324:	230d      	movs	r3, #13
 8010326:	e1c3      	b.n	80106b0 <find_volume+0x69c>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8010328:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801032a:	333c      	adds	r3, #60	; 0x3c
 801032c:	3360      	adds	r3, #96	; 0x60
 801032e:	4618      	mov	r0, r3
 8010330:	f7fc ffa2 	bl	800d278 <ld_dword>
 8010334:	4602      	mov	r2, r0
 8010336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010338:	631a      	str	r2, [r3, #48]	; 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 801033a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801033e:	4619      	mov	r1, r3
 8010340:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010342:	f7fd fc61 	bl	800dc08 <clust2sect>
 8010346:	4603      	mov	r3, r0
 8010348:	4619      	mov	r1, r3
 801034a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 801034c:	f7fd fbc0 	bl	800dad0 <move_window>
 8010350:	4603      	mov	r3, r0
 8010352:	2b00      	cmp	r3, #0
 8010354:	d001      	beq.n	801035a <find_volume+0x346>
 8010356:	2301      	movs	r3, #1
 8010358:	e1aa      	b.n	80106b0 <find_volume+0x69c>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 801035a:	2300      	movs	r3, #0
 801035c:	65bb      	str	r3, [r7, #88]	; 0x58
 801035e:	e015      	b.n	801038c <find_volume+0x378>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010362:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010364:	4413      	add	r3, r2
 8010366:	333c      	adds	r3, #60	; 0x3c
 8010368:	781b      	ldrb	r3, [r3, #0]
 801036a:	2b81      	cmp	r3, #129	; 0x81
 801036c:	d10b      	bne.n	8010386 <find_volume+0x372>
 801036e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010370:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8010374:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010376:	3314      	adds	r3, #20
 8010378:	4413      	add	r3, r2
 801037a:	4618      	mov	r0, r3
 801037c:	f7fc ff7c 	bl	800d278 <ld_dword>
 8010380:	4603      	mov	r3, r0
 8010382:	2b02      	cmp	r3, #2
 8010384:	d007      	beq.n	8010396 <find_volume+0x382>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 8010386:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010388:	3320      	adds	r3, #32
 801038a:	65bb      	str	r3, [r7, #88]	; 0x58
 801038c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801038e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010392:	d3e5      	bcc.n	8010360 <find_volume+0x34c>
 8010394:	e000      	b.n	8010398 <find_volume+0x384>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 8010396:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 8010398:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801039a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801039e:	d101      	bne.n	80103a4 <find_volume+0x390>
 80103a0:	230d      	movs	r3, #13
 80103a2:	e185      	b.n	80106b0 <find_volume+0x69c>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80103a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103a6:	f04f 32ff 	mov.w	r2, #4294967295
 80103aa:	61da      	str	r2, [r3, #28]
 80103ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ae:	69da      	ldr	r2, [r3, #28]
 80103b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103b2:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 80103b4:	2304      	movs	r3, #4
 80103b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80103ba:	e167      	b.n	801068c <find_volume+0x678>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80103bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103be:	333c      	adds	r3, #60	; 0x3c
 80103c0:	330b      	adds	r3, #11
 80103c2:	4618      	mov	r0, r3
 80103c4:	f7fc ff40 	bl	800d248 <ld_word>
 80103c8:	4603      	mov	r3, r0
 80103ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80103ce:	d001      	beq.n	80103d4 <find_volume+0x3c0>
 80103d0:	230d      	movs	r3, #13
 80103d2:	e16d      	b.n	80106b0 <find_volume+0x69c>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80103d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103d6:	333c      	adds	r3, #60	; 0x3c
 80103d8:	3316      	adds	r3, #22
 80103da:	4618      	mov	r0, r3
 80103dc:	f7fc ff34 	bl	800d248 <ld_word>
 80103e0:	4603      	mov	r3, r0
 80103e2:	667b      	str	r3, [r7, #100]	; 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80103e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d106      	bne.n	80103f8 <find_volume+0x3e4>
 80103ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103ec:	333c      	adds	r3, #60	; 0x3c
 80103ee:	3324      	adds	r3, #36	; 0x24
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fc ff41 	bl	800d278 <ld_dword>
 80103f6:	6678      	str	r0, [r7, #100]	; 0x64
		fs->fsize = fasize;
 80103f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103fc:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80103fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010400:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8010404:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010406:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801040a:	789b      	ldrb	r3, [r3, #2]
 801040c:	2b01      	cmp	r3, #1
 801040e:	d005      	beq.n	801041c <find_volume+0x408>
 8010410:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010412:	789b      	ldrb	r3, [r3, #2]
 8010414:	2b02      	cmp	r3, #2
 8010416:	d001      	beq.n	801041c <find_volume+0x408>
 8010418:	230d      	movs	r3, #13
 801041a:	e149      	b.n	80106b0 <find_volume+0x69c>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 801041c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801041e:	789b      	ldrb	r3, [r3, #2]
 8010420:	461a      	mov	r2, r3
 8010422:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010424:	fb02 f303 	mul.w	r3, r2, r3
 8010428:	667b      	str	r3, [r7, #100]	; 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801042a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801042c:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8010430:	b29a      	uxth	r2, r3
 8010432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010434:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010438:	895b      	ldrh	r3, [r3, #10]
 801043a:	2b00      	cmp	r3, #0
 801043c:	d008      	beq.n	8010450 <find_volume+0x43c>
 801043e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010440:	895b      	ldrh	r3, [r3, #10]
 8010442:	461a      	mov	r2, r3
 8010444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010446:	895b      	ldrh	r3, [r3, #10]
 8010448:	3b01      	subs	r3, #1
 801044a:	4013      	ands	r3, r2
 801044c:	2b00      	cmp	r3, #0
 801044e:	d001      	beq.n	8010454 <find_volume+0x440>
 8010450:	230d      	movs	r3, #13
 8010452:	e12d      	b.n	80106b0 <find_volume+0x69c>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010454:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010456:	333c      	adds	r3, #60	; 0x3c
 8010458:	3311      	adds	r3, #17
 801045a:	4618      	mov	r0, r3
 801045c:	f7fc fef4 	bl	800d248 <ld_word>
 8010460:	4603      	mov	r3, r0
 8010462:	461a      	mov	r2, r3
 8010464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010466:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010468:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801046a:	891b      	ldrh	r3, [r3, #8]
 801046c:	f003 030f 	and.w	r3, r3, #15
 8010470:	b29b      	uxth	r3, r3
 8010472:	2b00      	cmp	r3, #0
 8010474:	d001      	beq.n	801047a <find_volume+0x466>
 8010476:	230d      	movs	r3, #13
 8010478:	e11a      	b.n	80106b0 <find_volume+0x69c>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 801047a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801047c:	333c      	adds	r3, #60	; 0x3c
 801047e:	3313      	adds	r3, #19
 8010480:	4618      	mov	r0, r3
 8010482:	f7fc fee1 	bl	800d248 <ld_word>
 8010486:	4603      	mov	r3, r0
 8010488:	663b      	str	r3, [r7, #96]	; 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 801048a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801048c:	2b00      	cmp	r3, #0
 801048e:	d106      	bne.n	801049e <find_volume+0x48a>
 8010490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010492:	333c      	adds	r3, #60	; 0x3c
 8010494:	3320      	adds	r3, #32
 8010496:	4618      	mov	r0, r3
 8010498:	f7fc feee 	bl	800d278 <ld_dword>
 801049c:	6638      	str	r0, [r7, #96]	; 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801049e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a0:	333c      	adds	r3, #60	; 0x3c
 80104a2:	330e      	adds	r3, #14
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7fc fecf 	bl	800d248 <ld_word>
 80104aa:	4603      	mov	r3, r0
 80104ac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80104b0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d101      	bne.n	80104bc <find_volume+0x4a8>
 80104b8:	230d      	movs	r3, #13
 80104ba:	e0f9      	b.n	80106b0 <find_volume+0x69c>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80104bc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80104c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80104c2:	4413      	add	r3, r2
 80104c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104c6:	8912      	ldrh	r2, [r2, #8]
 80104c8:	0912      	lsrs	r2, r2, #4
 80104ca:	b292      	uxth	r2, r2
 80104cc:	4413      	add	r3, r2
 80104ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80104d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104d4:	429a      	cmp	r2, r3
 80104d6:	d201      	bcs.n	80104dc <find_volume+0x4c8>
 80104d8:	230d      	movs	r3, #13
 80104da:	e0e9      	b.n	80106b0 <find_volume+0x69c>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80104dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80104de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80104e0:	1ad3      	subs	r3, r2, r3
 80104e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80104e4:	8952      	ldrh	r2, [r2, #10]
 80104e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80104ea:	63fb      	str	r3, [r7, #60]	; 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80104ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d101      	bne.n	80104f6 <find_volume+0x4e2>
 80104f2:	230d      	movs	r3, #13
 80104f4:	e0dc      	b.n	80106b0 <find_volume+0x69c>
		fmt = FS_FAT32;
 80104f6:	2303      	movs	r3, #3
 80104f8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80104fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104fe:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010502:	4293      	cmp	r3, r2
 8010504:	d802      	bhi.n	801050c <find_volume+0x4f8>
 8010506:	2302      	movs	r3, #2
 8010508:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801050c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801050e:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010512:	4293      	cmp	r3, r2
 8010514:	d802      	bhi.n	801051c <find_volume+0x508>
 8010516:	2301      	movs	r3, #1
 8010518:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801051c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801051e:	1c9a      	adds	r2, r3, #2
 8010520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010522:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8010524:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010526:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010528:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801052a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801052e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010530:	441a      	add	r2, r3
 8010532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010534:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8010536:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8010538:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801053a:	441a      	add	r2, r3
 801053c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801053e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8010540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8010544:	2b03      	cmp	r3, #3
 8010546:	d11e      	bne.n	8010586 <find_volume+0x572>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010548:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801054a:	333c      	adds	r3, #60	; 0x3c
 801054c:	332a      	adds	r3, #42	; 0x2a
 801054e:	4618      	mov	r0, r3
 8010550:	f7fc fe7a 	bl	800d248 <ld_word>
 8010554:	4603      	mov	r3, r0
 8010556:	2b00      	cmp	r3, #0
 8010558:	d001      	beq.n	801055e <find_volume+0x54a>
 801055a:	230d      	movs	r3, #13
 801055c:	e0a8      	b.n	80106b0 <find_volume+0x69c>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801055e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010560:	891b      	ldrh	r3, [r3, #8]
 8010562:	2b00      	cmp	r3, #0
 8010564:	d001      	beq.n	801056a <find_volume+0x556>
 8010566:	230d      	movs	r3, #13
 8010568:	e0a2      	b.n	80106b0 <find_volume+0x69c>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 801056a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801056c:	333c      	adds	r3, #60	; 0x3c
 801056e:	332c      	adds	r3, #44	; 0x2c
 8010570:	4618      	mov	r0, r3
 8010572:	f7fc fe81 	bl	800d278 <ld_dword>
 8010576:	4602      	mov	r2, r0
 8010578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801057c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057e:	6a1b      	ldr	r3, [r3, #32]
 8010580:	009b      	lsls	r3, r3, #2
 8010582:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010584:	e01f      	b.n	80105c6 <find_volume+0x5b2>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010588:	891b      	ldrh	r3, [r3, #8]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d101      	bne.n	8010592 <find_volume+0x57e>
 801058e:	230d      	movs	r3, #13
 8010590:	e08e      	b.n	80106b0 <find_volume+0x69c>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8010592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010596:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010598:	441a      	add	r2, r3
 801059a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801059c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801059e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80105a2:	2b02      	cmp	r3, #2
 80105a4:	d103      	bne.n	80105ae <find_volume+0x59a>
 80105a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105a8:	6a1b      	ldr	r3, [r3, #32]
 80105aa:	005b      	lsls	r3, r3, #1
 80105ac:	e00a      	b.n	80105c4 <find_volume+0x5b0>
 80105ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105b0:	6a1a      	ldr	r2, [r3, #32]
 80105b2:	4613      	mov	r3, r2
 80105b4:	005b      	lsls	r3, r3, #1
 80105b6:	4413      	add	r3, r2
 80105b8:	085a      	lsrs	r2, r3, #1
 80105ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105bc:	6a1b      	ldr	r3, [r3, #32]
 80105be:	f003 0301 	and.w	r3, r3, #1
 80105c2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80105c4:	65fb      	str	r3, [r7, #92]	; 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80105c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80105cc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80105d0:	0a5b      	lsrs	r3, r3, #9
 80105d2:	429a      	cmp	r2, r3
 80105d4:	d201      	bcs.n	80105da <find_volume+0x5c6>
 80105d6:	230d      	movs	r3, #13
 80105d8:	e06a      	b.n	80106b0 <find_volume+0x69c>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80105da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105dc:	f04f 32ff 	mov.w	r2, #4294967295
 80105e0:	61da      	str	r2, [r3, #28]
 80105e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e4:	69da      	ldr	r2, [r3, #28]
 80105e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105e8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80105ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105ec:	2280      	movs	r2, #128	; 0x80
 80105ee:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80105f0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80105f4:	2b03      	cmp	r3, #3
 80105f6:	d149      	bne.n	801068c <find_volume+0x678>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80105f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105fa:	333c      	adds	r3, #60	; 0x3c
 80105fc:	3330      	adds	r3, #48	; 0x30
 80105fe:	4618      	mov	r0, r3
 8010600:	f7fc fe22 	bl	800d248 <ld_word>
 8010604:	4603      	mov	r3, r0
 8010606:	2b01      	cmp	r3, #1
 8010608:	d140      	bne.n	801068c <find_volume+0x678>
			&& move_window(fs, bsect + 1) == FR_OK)
 801060a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801060c:	3301      	adds	r3, #1
 801060e:	4619      	mov	r1, r3
 8010610:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8010612:	f7fd fa5d 	bl	800dad0 <move_window>
 8010616:	4603      	mov	r3, r0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d137      	bne.n	801068c <find_volume+0x678>
		{
			fs->fsi_flag = 0;
 801061c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801061e:	2200      	movs	r2, #0
 8010620:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010624:	333c      	adds	r3, #60	; 0x3c
 8010626:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801062a:	4618      	mov	r0, r3
 801062c:	f7fc fe0c 	bl	800d248 <ld_word>
 8010630:	4603      	mov	r3, r0
 8010632:	461a      	mov	r2, r3
 8010634:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010638:	429a      	cmp	r2, r3
 801063a:	d127      	bne.n	801068c <find_volume+0x678>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801063c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801063e:	333c      	adds	r3, #60	; 0x3c
 8010640:	4618      	mov	r0, r3
 8010642:	f7fc fe19 	bl	800d278 <ld_dword>
 8010646:	4603      	mov	r3, r0
 8010648:	4a1c      	ldr	r2, [pc, #112]	; (80106bc <find_volume+0x6a8>)
 801064a:	4293      	cmp	r3, r2
 801064c:	d11e      	bne.n	801068c <find_volume+0x678>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801064e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010650:	333c      	adds	r3, #60	; 0x3c
 8010652:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010656:	4618      	mov	r0, r3
 8010658:	f7fc fe0e 	bl	800d278 <ld_dword>
 801065c:	4603      	mov	r3, r0
 801065e:	4a18      	ldr	r2, [pc, #96]	; (80106c0 <find_volume+0x6ac>)
 8010660:	4293      	cmp	r3, r2
 8010662:	d113      	bne.n	801068c <find_volume+0x678>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8010664:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010666:	333c      	adds	r3, #60	; 0x3c
 8010668:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801066c:	4618      	mov	r0, r3
 801066e:	f7fc fe03 	bl	800d278 <ld_dword>
 8010672:	4602      	mov	r2, r0
 8010674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010676:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010678:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801067a:	333c      	adds	r3, #60	; 0x3c
 801067c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010680:	4618      	mov	r0, r3
 8010682:	f7fc fdf9 	bl	800d278 <ld_dword>
 8010686:	4602      	mov	r2, r0
 8010688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801068a:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801068c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801068e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8010692:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8010694:	4b0b      	ldr	r3, [pc, #44]	; (80106c4 <find_volume+0x6b0>)
 8010696:	881b      	ldrh	r3, [r3, #0]
 8010698:	3301      	adds	r3, #1
 801069a:	b29a      	uxth	r2, r3
 801069c:	4b09      	ldr	r3, [pc, #36]	; (80106c4 <find_volume+0x6b0>)
 801069e:	801a      	strh	r2, [r3, #0]
 80106a0:	4b08      	ldr	r3, [pc, #32]	; (80106c4 <find_volume+0x6b0>)
 80106a2:	881a      	ldrh	r2, [r3, #0]
 80106a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106a6:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80106a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80106aa:	f7fd f9a9 	bl	800da00 <clear_lock>
#endif
	return FR_OK;
 80106ae:	2300      	movs	r3, #0
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3770      	adds	r7, #112	; 0x70
 80106b4:	46bd      	mov	sp, r7
 80106b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80106ba:	bf00      	nop
 80106bc:	41615252 	.word	0x41615252
 80106c0:	61417272 	.word	0x61417272
 80106c4:	2002108c 	.word	0x2002108c

080106c8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80106c8:	b580      	push	{r7, lr}
 80106ca:	b084      	sub	sp, #16
 80106cc:	af00      	add	r7, sp, #0
 80106ce:	6078      	str	r0, [r7, #4]
 80106d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80106d2:	2309      	movs	r3, #9
 80106d4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	2b00      	cmp	r3, #0
 80106da:	d02e      	beq.n	801073a <validate+0x72>
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	681b      	ldr	r3, [r3, #0]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d02a      	beq.n	801073a <validate+0x72>
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	681b      	ldr	r3, [r3, #0]
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d025      	beq.n	801073a <validate+0x72>
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	889a      	ldrh	r2, [r3, #4]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	88db      	ldrh	r3, [r3, #6]
 80106f8:	429a      	cmp	r2, r3
 80106fa:	d11e      	bne.n	801073a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	4618      	mov	r0, r3
 8010702:	f7fd f804 	bl	800d70e <lock_fs>
 8010706:	4603      	mov	r3, r0
 8010708:	2b00      	cmp	r3, #0
 801070a:	d014      	beq.n	8010736 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	785b      	ldrb	r3, [r3, #1]
 8010712:	4618      	mov	r0, r3
 8010714:	f7fc fcfa 	bl	800d10c <disk_status>
 8010718:	4603      	mov	r3, r0
 801071a:	f003 0301 	and.w	r3, r3, #1
 801071e:	2b00      	cmp	r3, #0
 8010720:	d102      	bne.n	8010728 <validate+0x60>
				res = FR_OK;
 8010722:	2300      	movs	r3, #0
 8010724:	73fb      	strb	r3, [r7, #15]
 8010726:	e008      	b.n	801073a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	2100      	movs	r1, #0
 801072e:	4618      	mov	r0, r3
 8010730:	f7fd f803 	bl	800d73a <unlock_fs>
 8010734:	e001      	b.n	801073a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010736:	230f      	movs	r3, #15
 8010738:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801073a:	7bfb      	ldrb	r3, [r7, #15]
 801073c:	2b00      	cmp	r3, #0
 801073e:	d102      	bne.n	8010746 <validate+0x7e>
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	681b      	ldr	r3, [r3, #0]
 8010744:	e000      	b.n	8010748 <validate+0x80>
 8010746:	2300      	movs	r3, #0
 8010748:	683a      	ldr	r2, [r7, #0]
 801074a:	6013      	str	r3, [r2, #0]
	return res;
 801074c:	7bfb      	ldrb	r3, [r7, #15]
}
 801074e:	4618      	mov	r0, r3
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
	...

08010758 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b088      	sub	sp, #32
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	4613      	mov	r3, r2
 8010764:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801076a:	f107 0310 	add.w	r3, r7, #16
 801076e:	4618      	mov	r0, r3
 8010770:	f7ff fba7 	bl	800fec2 <get_ldnumber>
 8010774:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010776:	69fb      	ldr	r3, [r7, #28]
 8010778:	2b00      	cmp	r3, #0
 801077a:	da01      	bge.n	8010780 <f_mount+0x28>
 801077c:	230b      	movs	r3, #11
 801077e:	e048      	b.n	8010812 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010780:	4a26      	ldr	r2, [pc, #152]	; (801081c <f_mount+0xc4>)
 8010782:	69fb      	ldr	r3, [r7, #28]
 8010784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010788:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801078a:	69bb      	ldr	r3, [r7, #24]
 801078c:	2b00      	cmp	r3, #0
 801078e:	d00f      	beq.n	80107b0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010790:	69b8      	ldr	r0, [r7, #24]
 8010792:	f7fd f935 	bl	800da00 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010796:	69bb      	ldr	r3, [r7, #24]
 8010798:	695b      	ldr	r3, [r3, #20]
 801079a:	4618      	mov	r0, r3
 801079c:	f001 f963 	bl	8011a66 <ff_del_syncobj>
 80107a0:	4603      	mov	r3, r0
 80107a2:	2b00      	cmp	r3, #0
 80107a4:	d101      	bne.n	80107aa <f_mount+0x52>
 80107a6:	2302      	movs	r3, #2
 80107a8:	e033      	b.n	8010812 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80107aa:	69bb      	ldr	r3, [r7, #24]
 80107ac:	2200      	movs	r2, #0
 80107ae:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d00f      	beq.n	80107d6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 80107b6:	68fb      	ldr	r3, [r7, #12]
 80107b8:	2200      	movs	r2, #0
 80107ba:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 80107bc:	69fb      	ldr	r3, [r7, #28]
 80107be:	b2da      	uxtb	r2, r3
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	3314      	adds	r3, #20
 80107c4:	4619      	mov	r1, r3
 80107c6:	4610      	mov	r0, r2
 80107c8:	f001 f932 	bl	8011a30 <ff_cre_syncobj>
 80107cc:	4603      	mov	r3, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d101      	bne.n	80107d6 <f_mount+0x7e>
 80107d2:	2302      	movs	r3, #2
 80107d4:	e01d      	b.n	8010812 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80107d6:	68fa      	ldr	r2, [r7, #12]
 80107d8:	4910      	ldr	r1, [pc, #64]	; (801081c <f_mount+0xc4>)
 80107da:	69fb      	ldr	r3, [r7, #28]
 80107dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	d002      	beq.n	80107ec <f_mount+0x94>
 80107e6:	79fb      	ldrb	r3, [r7, #7]
 80107e8:	2b01      	cmp	r3, #1
 80107ea:	d001      	beq.n	80107f0 <f_mount+0x98>
 80107ec:	2300      	movs	r3, #0
 80107ee:	e010      	b.n	8010812 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80107f0:	f107 010c 	add.w	r1, r7, #12
 80107f4:	f107 0308 	add.w	r3, r7, #8
 80107f8:	2200      	movs	r2, #0
 80107fa:	4618      	mov	r0, r3
 80107fc:	f7ff fc0a 	bl	8010014 <find_volume>
 8010800:	4603      	mov	r3, r0
 8010802:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	7dfa      	ldrb	r2, [r7, #23]
 8010808:	4611      	mov	r1, r2
 801080a:	4618      	mov	r0, r3
 801080c:	f7fc ff95 	bl	800d73a <unlock_fs>
 8010810:	7dfb      	ldrb	r3, [r7, #23]
}
 8010812:	4618      	mov	r0, r3
 8010814:	3720      	adds	r7, #32
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}
 801081a:	bf00      	nop
 801081c:	20021088 	.word	0x20021088

08010820 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010820:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010824:	b0a8      	sub	sp, #160	; 0xa0
 8010826:	af00      	add	r7, sp, #0
 8010828:	61f8      	str	r0, [r7, #28]
 801082a:	61b9      	str	r1, [r7, #24]
 801082c:	4613      	mov	r3, r2
 801082e:	75fb      	strb	r3, [r7, #23]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010830:	69fb      	ldr	r3, [r7, #28]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d101      	bne.n	801083a <f_open+0x1a>
 8010836:	2309      	movs	r3, #9
 8010838:	e2d7      	b.n	8010dea <f_open+0x5ca>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801083a:	7dfb      	ldrb	r3, [r7, #23]
 801083c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010840:	75fb      	strb	r3, [r7, #23]
	res = find_volume(&path, &fs, mode);
 8010842:	7dfa      	ldrb	r2, [r7, #23]
 8010844:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8010848:	f107 0318 	add.w	r3, r7, #24
 801084c:	4618      	mov	r0, r3
 801084e:	f7ff fbe1 	bl	8010014 <find_volume>
 8010852:	4603      	mov	r3, r0
 8010854:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	if (res == FR_OK) {
 8010858:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801085c:	2b00      	cmp	r3, #0
 801085e:	f040 82b4 	bne.w	8010dca <f_open+0x5aa>
		dj.obj.fs = fs;
 8010862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010864:	62bb      	str	r3, [r7, #40]	; 0x28
		INIT_NAMBUF(fs);
 8010866:	f44f 608c 	mov.w	r0, #1120	; 0x460
 801086a:	f001 f928 	bl	8011abe <ff_memalloc>
 801086e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8010872:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d106      	bne.n	8010888 <f_open+0x68>
 801087a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801087c:	2111      	movs	r1, #17
 801087e:	4618      	mov	r0, r3
 8010880:	f7fc ff5b 	bl	800d73a <unlock_fs>
 8010884:	2311      	movs	r3, #17
 8010886:	e2b0      	b.n	8010dea <f_open+0x5ca>
 8010888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801088a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801088e:	60da      	str	r2, [r3, #12]
 8010890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010892:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010896:	f502 7200 	add.w	r2, r2, #512	; 0x200
 801089a:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801089c:	69ba      	ldr	r2, [r7, #24]
 801089e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108a2:	4611      	mov	r1, r2
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7ff fa63 	bl	800fd70 <follow_path>
 80108aa:	4603      	mov	r3, r0
 80108ac:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80108b0:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d11a      	bne.n	80108ee <f_open+0xce>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80108b8:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 80108bc:	b25b      	sxtb	r3, r3
 80108be:	2b00      	cmp	r3, #0
 80108c0:	da03      	bge.n	80108ca <f_open+0xaa>
				res = FR_INVALID_NAME;
 80108c2:	2306      	movs	r3, #6
 80108c4:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 80108c8:	e011      	b.n	80108ee <f_open+0xce>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80108ca:	7dfb      	ldrb	r3, [r7, #23]
 80108cc:	f023 0301 	bic.w	r3, r3, #1
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	bf14      	ite	ne
 80108d4:	2301      	movne	r3, #1
 80108d6:	2300      	moveq	r3, #0
 80108d8:	b2db      	uxtb	r3, r3
 80108da:	461a      	mov	r2, r3
 80108dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80108e0:	4611      	mov	r1, r2
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fc ff44 	bl	800d770 <chk_lock>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80108ee:	7dfb      	ldrb	r3, [r7, #23]
 80108f0:	f003 031c 	and.w	r3, r3, #28
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	f000 8115 	beq.w	8010b24 <f_open+0x304>
			if (res != FR_OK) {					/* No file, create new */
 80108fa:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80108fe:	2b00      	cmp	r3, #0
 8010900:	d017      	beq.n	8010932 <f_open+0x112>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010902:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010906:	2b04      	cmp	r3, #4
 8010908:	d10e      	bne.n	8010928 <f_open+0x108>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801090a:	f7fc ff8d 	bl	800d828 <enq_lock>
 801090e:	4603      	mov	r3, r0
 8010910:	2b00      	cmp	r3, #0
 8010912:	d006      	beq.n	8010922 <f_open+0x102>
 8010914:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010918:	4618      	mov	r0, r3
 801091a:	f7fe fecb 	bl	800f6b4 <dir_register>
 801091e:	4603      	mov	r3, r0
 8010920:	e000      	b.n	8010924 <f_open+0x104>
 8010922:	2312      	movs	r3, #18
 8010924:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010928:	7dfb      	ldrb	r3, [r7, #23]
 801092a:	f043 0308 	orr.w	r3, r3, #8
 801092e:	75fb      	strb	r3, [r7, #23]
 8010930:	e011      	b.n	8010956 <f_open+0x136>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010932:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010936:	f003 0311 	and.w	r3, r3, #17
 801093a:	2b00      	cmp	r3, #0
 801093c:	d003      	beq.n	8010946 <f_open+0x126>
					res = FR_DENIED;
 801093e:	2307      	movs	r3, #7
 8010940:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8010944:	e007      	b.n	8010956 <f_open+0x136>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010946:	7dfb      	ldrb	r3, [r7, #23]
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	d002      	beq.n	8010956 <f_open+0x136>
 8010950:	2308      	movs	r3, #8
 8010952:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010956:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 801095a:	2b00      	cmp	r3, #0
 801095c:	f040 80fe 	bne.w	8010b5c <f_open+0x33c>
 8010960:	7dfb      	ldrb	r3, [r7, #23]
 8010962:	f003 0308 	and.w	r3, r3, #8
 8010966:	2b00      	cmp	r3, #0
 8010968:	f000 80f8 	beq.w	8010b5c <f_open+0x33c>
				dw = GET_FATTIME();
 801096c:	f7fc fa6a 	bl	800ce44 <get_fattime>
 8010970:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8010974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010976:	781b      	ldrb	r3, [r3, #0]
 8010978:	2b04      	cmp	r3, #4
 801097a:	f040 8084 	bne.w	8010a86 <f_open+0x266>
					/* Get current allocation info */
					fp->obj.fs = fs;
 801097e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010980:	69fb      	ldr	r3, [r7, #28]
 8010982:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	691b      	ldr	r3, [r3, #16]
 8010988:	3334      	adds	r3, #52	; 0x34
 801098a:	4618      	mov	r0, r3
 801098c:	f7fc fc74 	bl	800d278 <ld_dword>
 8010990:	4602      	mov	r2, r0
 8010992:	69fb      	ldr	r3, [r7, #28]
 8010994:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	691b      	ldr	r3, [r3, #16]
 801099a:	3338      	adds	r3, #56	; 0x38
 801099c:	4618      	mov	r0, r3
 801099e:	f7fc fc8e 	bl	800d2be <ld_qword>
 80109a2:	4602      	mov	r2, r0
 80109a4:	460b      	mov	r3, r1
 80109a6:	69f9      	ldr	r1, [r7, #28]
 80109a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	691b      	ldr	r3, [r3, #16]
 80109b0:	3321      	adds	r3, #33	; 0x21
 80109b2:	781b      	ldrb	r3, [r3, #0]
 80109b4:	f003 0302 	and.w	r3, r3, #2
 80109b8:	b2da      	uxtb	r2, r3
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	71da      	strb	r2, [r3, #7]
					fp->obj.n_frag = 0;
 80109be:	69fb      	ldr	r3, [r7, #28]
 80109c0:	2200      	movs	r2, #0
 80109c2:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80109c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c6:	691b      	ldr	r3, [r3, #16]
 80109c8:	3308      	adds	r3, #8
 80109ca:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fc fd6b 	bl	800d4aa <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80109d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109d6:	691b      	ldr	r3, [r3, #16]
 80109d8:	3314      	adds	r3, #20
 80109da:	2200      	movs	r2, #0
 80109dc:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80109de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e0:	691b      	ldr	r3, [r3, #16]
 80109e2:	330c      	adds	r3, #12
 80109e4:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 80109e8:	4618      	mov	r0, r3
 80109ea:	f7fc fd5e 	bl	800d4aa <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80109ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f0:	691b      	ldr	r3, [r3, #16]
 80109f2:	3315      	adds	r3, #21
 80109f4:	2200      	movs	r2, #0
 80109f6:	701a      	strb	r2, [r3, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	691b      	ldr	r3, [r3, #16]
 80109fc:	3304      	adds	r3, #4
 80109fe:	2220      	movs	r2, #32
 8010a00:	701a      	strb	r2, [r3, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8010a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a04:	691b      	ldr	r3, [r3, #16]
 8010a06:	3334      	adds	r3, #52	; 0x34
 8010a08:	2100      	movs	r1, #0
 8010a0a:	4618      	mov	r0, r3
 8010a0c:	f7fc fd4d 	bl	800d4aa <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8010a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a12:	691b      	ldr	r3, [r3, #16]
 8010a14:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010a18:	f04f 0200 	mov.w	r2, #0
 8010a1c:	f04f 0300 	mov.w	r3, #0
 8010a20:	4608      	mov	r0, r1
 8010a22:	f7fc fd6e 	bl	800d502 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8010a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8010a2e:	f04f 0200 	mov.w	r2, #0
 8010a32:	f04f 0300 	mov.w	r3, #0
 8010a36:	4608      	mov	r0, r1
 8010a38:	f7fc fd63 	bl	800d502 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8010a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a3e:	691b      	ldr	r3, [r3, #16]
 8010a40:	3321      	adds	r3, #33	; 0x21
 8010a42:	2201      	movs	r2, #1
 8010a44:	701a      	strb	r2, [r3, #0]
					res = store_xdir(&dj);
 8010a46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	f7fe fb80 	bl	800f150 <store_xdir>
 8010a50:	4603      	mov	r3, r0
 8010a52:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 8010a56:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d17e      	bne.n	8010b5c <f_open+0x33c>
 8010a5e:	69fb      	ldr	r3, [r7, #28]
 8010a60:	689b      	ldr	r3, [r3, #8]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d07a      	beq.n	8010b5c <f_open+0x33c>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8010a66:	69f8      	ldr	r0, [r7, #28]
 8010a68:	69fb      	ldr	r3, [r7, #28]
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	4619      	mov	r1, r3
 8010a70:	f7fd fc38 	bl	800e2e4 <remove_chain>
 8010a74:	4603      	mov	r3, r0
 8010a76:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8010a7a:	69fb      	ldr	r3, [r7, #28]
 8010a7c:	689a      	ldr	r2, [r3, #8]
 8010a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a80:	3a01      	subs	r2, #1
 8010a82:	619a      	str	r2, [r3, #24]
 8010a84:	e06a      	b.n	8010b5c <f_open+0x33c>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010a86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a88:	330e      	adds	r3, #14
 8010a8a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7fc fd0b 	bl	800d4aa <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010a94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010a96:	3316      	adds	r3, #22
 8010a98:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010a9c:	4618      	mov	r0, r3
 8010a9e:	f7fc fd04 	bl	800d4aa <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010aa4:	330b      	adds	r3, #11
 8010aa6:	2220      	movs	r2, #32
 8010aa8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010aae:	4611      	mov	r1, r2
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fd ffc7 	bl	800ea44 <ld_clust>
 8010ab6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010abc:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8010abe:	2200      	movs	r2, #0
 8010ac0:	4618      	mov	r0, r3
 8010ac2:	f7fd ffde 	bl	800ea82 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010ac8:	331c      	adds	r3, #28
 8010aca:	2100      	movs	r1, #0
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fc fcec 	bl	800d4aa <st_dword>
					fs->wflag = 1;
 8010ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ad4:	2201      	movs	r2, #1
 8010ad6:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010ad8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d03d      	beq.n	8010b5c <f_open+0x33c>
						dw = fs->winsect;
 8010ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010ae4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
						res = remove_chain(&dj.obj, cl, 0);
 8010ae8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010aec:	2200      	movs	r2, #0
 8010aee:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fd fbf6 	bl	800e2e4 <remove_chain>
 8010af8:	4603      	mov	r3, r0
 8010afa:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
						if (res == FR_OK) {
 8010afe:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010b02:	2b00      	cmp	r3, #0
 8010b04:	d12a      	bne.n	8010b5c <f_open+0x33c>
							res = move_window(fs, dw);
 8010b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b08:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	f7fc ffdf 	bl	800dad0 <move_window>
 8010b12:	4603      	mov	r3, r0
 8010b14:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b1a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8010b1e:	3a01      	subs	r2, #1
 8010b20:	619a      	str	r2, [r3, #24]
 8010b22:	e01b      	b.n	8010b5c <f_open+0x33c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010b24:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d117      	bne.n	8010b5c <f_open+0x33c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010b2c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010b30:	f003 0310 	and.w	r3, r3, #16
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d003      	beq.n	8010b40 <f_open+0x320>
					res = FR_NO_FILE;
 8010b38:	2304      	movs	r3, #4
 8010b3a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8010b3e:	e00d      	b.n	8010b5c <f_open+0x33c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	f003 0302 	and.w	r3, r3, #2
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d008      	beq.n	8010b5c <f_open+0x33c>
 8010b4a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8010b4e:	f003 0301 	and.w	r3, r3, #1
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d002      	beq.n	8010b5c <f_open+0x33c>
						res = FR_DENIED;
 8010b56:	2307      	movs	r3, #7
 8010b58:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010b5c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d128      	bne.n	8010bb6 <f_open+0x396>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010b64:	7dfb      	ldrb	r3, [r7, #23]
 8010b66:	f003 0308 	and.w	r3, r3, #8
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d003      	beq.n	8010b76 <f_open+0x356>
				mode |= FA_MODIFIED;
 8010b6e:	7dfb      	ldrb	r3, [r7, #23]
 8010b70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010b74:	75fb      	strb	r3, [r7, #23]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010b7a:	69fb      	ldr	r3, [r7, #28]
 8010b7c:	649a      	str	r2, [r3, #72]	; 0x48
			fp->dir_ptr = dj.dir;
 8010b7e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010b80:	69fb      	ldr	r3, [r7, #28]
 8010b82:	64da      	str	r2, [r3, #76]	; 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b84:	7dfb      	ldrb	r3, [r7, #23]
 8010b86:	f023 0301 	bic.w	r3, r3, #1
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	bf14      	ite	ne
 8010b8e:	2301      	movne	r3, #1
 8010b90:	2300      	moveq	r3, #0
 8010b92:	b2db      	uxtb	r3, r3
 8010b94:	461a      	mov	r2, r3
 8010b96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010b9a:	4611      	mov	r1, r2
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fc fe65 	bl	800d86c <inc_lock>
 8010ba2:	4602      	mov	r2, r0
 8010ba4:	69fb      	ldr	r3, [r7, #28]
 8010ba6:	62da      	str	r2, [r3, #44]	; 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010ba8:	69fb      	ldr	r3, [r7, #28]
 8010baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d102      	bne.n	8010bb6 <f_open+0x396>
 8010bb0:	2302      	movs	r3, #2
 8010bb2:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010bb6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f040 8101 	bne.w	8010dc2 <f_open+0x5a2>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8010bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bc2:	781b      	ldrb	r3, [r3, #0]
 8010bc4:	2b04      	cmp	r3, #4
 8010bc6:	d12d      	bne.n	8010c24 <f_open+0x404>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8010bc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010bca:	69fb      	ldr	r3, [r7, #28]
 8010bcc:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8010bce:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8010bd2:	4613      	mov	r3, r2
 8010bd4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8010bd8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010bdc:	431a      	orrs	r2, r3
 8010bde:	69fb      	ldr	r3, [r7, #28]
 8010be0:	625a      	str	r2, [r3, #36]	; 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8010be2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8010be4:	69fb      	ldr	r3, [r7, #28]
 8010be6:	629a      	str	r2, [r3, #40]	; 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 8010be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	3334      	adds	r3, #52	; 0x34
 8010bee:	4618      	mov	r0, r3
 8010bf0:	f7fc fb42 	bl	800d278 <ld_dword>
 8010bf4:	4602      	mov	r2, r0
 8010bf6:	69fb      	ldr	r3, [r7, #28]
 8010bf8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8010bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfc:	691b      	ldr	r3, [r3, #16]
 8010bfe:	3338      	adds	r3, #56	; 0x38
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fc fb5c 	bl	800d2be <ld_qword>
 8010c06:	4602      	mov	r2, r0
 8010c08:	460b      	mov	r3, r1
 8010c0a:	69f9      	ldr	r1, [r7, #28]
 8010c0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8010c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c12:	691b      	ldr	r3, [r3, #16]
 8010c14:	3321      	adds	r3, #33	; 0x21
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	f003 0302 	and.w	r3, r3, #2
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	69fb      	ldr	r3, [r7, #28]
 8010c20:	71da      	strb	r2, [r3, #7]
 8010c22:	e016      	b.n	8010c52 <f_open+0x432>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c26:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010c28:	4611      	mov	r1, r2
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fd ff0a 	bl	800ea44 <ld_clust>
 8010c30:	4602      	mov	r2, r0
 8010c32:	69fb      	ldr	r3, [r7, #28]
 8010c34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010c36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010c38:	331c      	adds	r3, #28
 8010c3a:	4618      	mov	r0, r3
 8010c3c:	f7fc fb1c 	bl	800d278 <ld_dword>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2200      	movs	r2, #0
 8010c44:	60bb      	str	r3, [r7, #8]
 8010c46:	60fa      	str	r2, [r7, #12]
 8010c48:	69fb      	ldr	r3, [r7, #28]
 8010c4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8010c4e:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010c52:	69fb      	ldr	r3, [r7, #28]
 8010c54:	2200      	movs	r2, #0
 8010c56:	651a      	str	r2, [r3, #80]	; 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c5a:	69fb      	ldr	r3, [r7, #28]
 8010c5c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c60:	88da      	ldrh	r2, [r3, #6]
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010c66:	69fb      	ldr	r3, [r7, #28]
 8010c68:	7dfa      	ldrb	r2, [r7, #23]
 8010c6a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			fp->err = 0;			/* Clear error flag */
 8010c6e:	69fb      	ldr	r3, [r7, #28]
 8010c70:	2200      	movs	r2, #0
 8010c72:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8010c76:	69fb      	ldr	r3, [r7, #28]
 8010c78:	2200      	movs	r2, #0
 8010c7a:	645a      	str	r2, [r3, #68]	; 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010c7c:	69f9      	ldr	r1, [r7, #28]
 8010c7e:	f04f 0200 	mov.w	r2, #0
 8010c82:	f04f 0300 	mov.w	r3, #0
 8010c86:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	3354      	adds	r3, #84	; 0x54
 8010c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010c92:	2100      	movs	r1, #0
 8010c94:	4618      	mov	r0, r3
 8010c96:	f7fc fcdd 	bl	800d654 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010c9a:	7dfb      	ldrb	r3, [r7, #23]
 8010c9c:	f003 0320 	and.w	r3, r3, #32
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	f000 808e 	beq.w	8010dc2 <f_open+0x5a2>
 8010ca6:	69fb      	ldr	r3, [r7, #28]
 8010ca8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010cac:	4313      	orrs	r3, r2
 8010cae:	f000 8088 	beq.w	8010dc2 <f_open+0x5a2>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010cb2:	69fb      	ldr	r3, [r7, #28]
 8010cb4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010cb8:	69f9      	ldr	r1, [r7, #28]
 8010cba:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cc0:	895b      	ldrh	r3, [r3, #10]
 8010cc2:	025b      	lsls	r3, r3, #9
 8010cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010cc8:	69fb      	ldr	r3, [r7, #28]
 8010cca:	689b      	ldr	r3, [r3, #8]
 8010ccc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010cd0:	69fb      	ldr	r3, [r7, #28]
 8010cd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8010cd6:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8010cda:	e027      	b.n	8010d2c <f_open+0x50c>
					clst = get_fat(&fp->obj, clst);
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010ce2:	4618      	mov	r0, r3
 8010ce4:	f7fc ffb0 	bl	800dc48 <get_fat>
 8010ce8:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8010cec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010cf0:	2b01      	cmp	r3, #1
 8010cf2:	d802      	bhi.n	8010cfa <f_open+0x4da>
 8010cf4:	2302      	movs	r3, #2
 8010cf6:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010cfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010d02:	d102      	bne.n	8010d0a <f_open+0x4ea>
 8010d04:	2301      	movs	r3, #1
 8010d06:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d0e:	2200      	movs	r2, #0
 8010d10:	469a      	mov	sl, r3
 8010d12:	4693      	mov	fp, r2
 8010d14:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8010d18:	ebb2 010a 	subs.w	r1, r2, sl
 8010d1c:	6039      	str	r1, [r7, #0]
 8010d1e:	eb63 030b 	sbc.w	r3, r3, fp
 8010d22:	607b      	str	r3, [r7, #4]
 8010d24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010d28:	e9c7 2324 	strd	r2, r3, [r7, #144]	; 0x90
 8010d2c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d10a      	bne.n	8010d4a <f_open+0x52a>
 8010d34:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8010d38:	2200      	movs	r2, #0
 8010d3a:	4698      	mov	r8, r3
 8010d3c:	4691      	mov	r9, r2
 8010d3e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8010d42:	4590      	cmp	r8, r2
 8010d44:	eb79 0303 	sbcs.w	r3, r9, r3
 8010d48:	d3c8      	bcc.n	8010cdc <f_open+0x4bc>
				}
				fp->clust = clst;
 8010d4a:	69fb      	ldr	r3, [r7, #28]
 8010d4c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010d50:	641a      	str	r2, [r3, #64]	; 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010d52:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d133      	bne.n	8010dc2 <f_open+0x5a2>
 8010d5a:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8010d5e:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010d62:	2500      	movs	r5, #0
 8010d64:	ea54 0305 	orrs.w	r3, r4, r5
 8010d68:	d02b      	beq.n	8010dc2 <f_open+0x5a2>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d6c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8010d70:	4618      	mov	r0, r3
 8010d72:	f7fc ff49 	bl	800dc08 <clust2sect>
 8010d76:	67f8      	str	r0, [r7, #124]	; 0x7c
 8010d78:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d103      	bne.n	8010d86 <f_open+0x566>
						res = FR_INT_ERR;
 8010d7e:	2302      	movs	r3, #2
 8010d80:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 8010d84:	e01d      	b.n	8010dc2 <f_open+0x5a2>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010d86:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8010d8a:	f04f 0200 	mov.w	r2, #0
 8010d8e:	f04f 0300 	mov.w	r3, #0
 8010d92:	0a42      	lsrs	r2, r0, #9
 8010d94:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010d98:	0a4b      	lsrs	r3, r1, #9
 8010d9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8010d9c:	441a      	add	r2, r3
 8010d9e:	69fb      	ldr	r3, [r7, #28]
 8010da0:	645a      	str	r2, [r3, #68]	; 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da4:	7858      	ldrb	r0, [r3, #1]
 8010da6:	69fb      	ldr	r3, [r7, #28]
 8010da8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8010dac:	69fb      	ldr	r3, [r7, #28]
 8010dae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010db0:	2301      	movs	r3, #1
 8010db2:	f7fc f9eb 	bl	800d18c <disk_read>
 8010db6:	4603      	mov	r3, r0
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d002      	beq.n	8010dc2 <f_open+0x5a2>
 8010dbc:	2301      	movs	r3, #1
 8010dbe:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
				}
			}
#endif
		}

		FREE_NAMBUF();
 8010dc2:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8010dc6:	f000 fe86 	bl	8011ad6 <ff_memfree>
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010dca:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d002      	beq.n	8010dd8 <f_open+0x5b8>
 8010dd2:	69fb      	ldr	r3, [r7, #28]
 8010dd4:	2200      	movs	r2, #0
 8010dd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dda:	f897 209f 	ldrb.w	r2, [r7, #159]	; 0x9f
 8010dde:	4611      	mov	r1, r2
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7fc fcaa 	bl	800d73a <unlock_fs>
 8010de6:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	37a0      	adds	r7, #160	; 0xa0
 8010dee:	46bd      	mov	sp, r7
 8010df0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08010df4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010df8:	b095      	sub	sp, #84	; 0x54
 8010dfa:	af00      	add	r7, sp, #0
 8010dfc:	61f8      	str	r0, [r7, #28]
 8010dfe:	61b9      	str	r1, [r7, #24]
 8010e00:	617a      	str	r2, [r7, #20]
 8010e02:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010e04:	69bb      	ldr	r3, [r7, #24]
 8010e06:	63fb      	str	r3, [r7, #60]	; 0x3c


	*br = 0;	/* Clear read byte counter */
 8010e08:	693b      	ldr	r3, [r7, #16]
 8010e0a:	2200      	movs	r2, #0
 8010e0c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010e0e:	69fb      	ldr	r3, [r7, #28]
 8010e10:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010e14:	4611      	mov	r1, r2
 8010e16:	4618      	mov	r0, r3
 8010e18:	f7ff fc56 	bl	80106c8 <validate>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010e22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d108      	bne.n	8010e3c <f_read+0x48>
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8010e30:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010e34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d009      	beq.n	8010e50 <f_read+0x5c>
 8010e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e3e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8010e42:	4611      	mov	r1, r2
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7fc fc78 	bl	800d73a <unlock_fs>
 8010e4a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010e4e:	e173      	b.n	8011138 <f_read+0x344>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e56:	f003 0301 	and.w	r3, r3, #1
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <f_read+0x78>
 8010e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e60:	2107      	movs	r1, #7
 8010e62:	4618      	mov	r0, r3
 8010e64:	f7fc fc69 	bl	800d73a <unlock_fs>
 8010e68:	2307      	movs	r3, #7
 8010e6a:	e165      	b.n	8011138 <f_read+0x344>
	remain = fp->obj.objsize - fp->fptr;
 8010e6c:	69fb      	ldr	r3, [r7, #28]
 8010e6e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8010e72:	69fb      	ldr	r3, [r7, #28]
 8010e74:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010e78:	1a86      	subs	r6, r0, r2
 8010e7a:	603e      	str	r6, [r7, #0]
 8010e7c:	eb61 0303 	sbc.w	r3, r1, r3
 8010e80:	607b      	str	r3, [r7, #4]
 8010e82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	2200      	movs	r2, #0
 8010e8e:	469a      	mov	sl, r3
 8010e90:	4693      	mov	fp, r2
 8010e92:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8010e96:	4552      	cmp	r2, sl
 8010e98:	eb73 030b 	sbcs.w	r3, r3, fp
 8010e9c:	f080 8142 	bcs.w	8011124 <f_read+0x330>
 8010ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ea2:	617b      	str	r3, [r7, #20]

	for ( ;  btr;								/* Repeat until all data read */
 8010ea4:	e13e      	b.n	8011124 <f_read+0x330>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010ea6:	69fb      	ldr	r3, [r7, #28]
 8010ea8:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010eac:	f3c2 0408 	ubfx	r4, r2, #0, #9
 8010eb0:	2500      	movs	r5, #0
 8010eb2:	ea54 0305 	orrs.w	r3, r4, r5
 8010eb6:	f040 80f7 	bne.w	80110a8 <f_read+0x2b4>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8010ec0:	f04f 0200 	mov.w	r2, #0
 8010ec4:	f04f 0300 	mov.w	r3, #0
 8010ec8:	0a42      	lsrs	r2, r0, #9
 8010eca:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8010ece:	0a4b      	lsrs	r3, r1, #9
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed2:	895b      	ldrh	r3, [r3, #10]
 8010ed4:	3b01      	subs	r3, #1
 8010ed6:	4013      	ands	r3, r2
 8010ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (csect == 0) {					/* On the cluster boundary? */
 8010eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d13c      	bne.n	8010f5a <f_read+0x166>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010ee0:	69fb      	ldr	r3, [r7, #28]
 8010ee2:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010ee6:	4313      	orrs	r3, r2
 8010ee8:	d103      	bne.n	8010ef2 <f_read+0xfe>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010eea:	69fb      	ldr	r3, [r7, #28]
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	64bb      	str	r3, [r7, #72]	; 0x48
 8010ef0:	e013      	b.n	8010f1a <f_read+0x126>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010ef2:	69fb      	ldr	r3, [r7, #28]
 8010ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	d007      	beq.n	8010f0a <f_read+0x116>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010efa:	69fb      	ldr	r3, [r7, #28]
 8010efc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8010f00:	69f8      	ldr	r0, [r7, #28]
 8010f02:	f7fd fba4 	bl	800e64e <clmt_clust>
 8010f06:	64b8      	str	r0, [r7, #72]	; 0x48
 8010f08:	e007      	b.n	8010f1a <f_read+0x126>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010f0a:	69fa      	ldr	r2, [r7, #28]
 8010f0c:	69fb      	ldr	r3, [r7, #28]
 8010f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f10:	4619      	mov	r1, r3
 8010f12:	4610      	mov	r0, r2
 8010f14:	f7fc fe98 	bl	800dc48 <get_fat>
 8010f18:	64b8      	str	r0, [r7, #72]	; 0x48
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010f1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d80a      	bhi.n	8010f36 <f_read+0x142>
 8010f20:	69fb      	ldr	r3, [r7, #28]
 8010f22:	2202      	movs	r2, #2
 8010f24:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f2a:	2102      	movs	r1, #2
 8010f2c:	4618      	mov	r0, r3
 8010f2e:	f7fc fc04 	bl	800d73a <unlock_fs>
 8010f32:	2302      	movs	r3, #2
 8010f34:	e100      	b.n	8011138 <f_read+0x344>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010f36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010f3c:	d10a      	bne.n	8010f54 <f_read+0x160>
 8010f3e:	69fb      	ldr	r3, [r7, #28]
 8010f40:	2201      	movs	r2, #1
 8010f42:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f48:	2101      	movs	r1, #1
 8010f4a:	4618      	mov	r0, r3
 8010f4c:	f7fc fbf5 	bl	800d73a <unlock_fs>
 8010f50:	2301      	movs	r3, #1
 8010f52:	e0f1      	b.n	8011138 <f_read+0x344>
				fp->clust = clst;				/* Update current cluster */
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f58:	641a      	str	r2, [r3, #64]	; 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010f5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f60:	4619      	mov	r1, r3
 8010f62:	4610      	mov	r0, r2
 8010f64:	f7fc fe50 	bl	800dc08 <clust2sect>
 8010f68:	62b8      	str	r0, [r7, #40]	; 0x28
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d10a      	bne.n	8010f86 <f_read+0x192>
 8010f70:	69fb      	ldr	r3, [r7, #28]
 8010f72:	2202      	movs	r2, #2
 8010f74:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7a:	2102      	movs	r1, #2
 8010f7c:	4618      	mov	r0, r3
 8010f7e:	f7fc fbdc 	bl	800d73a <unlock_fs>
 8010f82:	2302      	movs	r3, #2
 8010f84:	e0d8      	b.n	8011138 <f_read+0x344>
			sect += csect;
 8010f86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f8a:	4413      	add	r3, r2
 8010f8c:	62bb      	str	r3, [r7, #40]	; 0x28
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010f8e:	697b      	ldr	r3, [r7, #20]
 8010f90:	0a5b      	lsrs	r3, r3, #9
 8010f92:	643b      	str	r3, [r7, #64]	; 0x40
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010f94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d040      	beq.n	801101c <f_read+0x228>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f9e:	4413      	add	r3, r2
 8010fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fa2:	8952      	ldrh	r2, [r2, #10]
 8010fa4:	4293      	cmp	r3, r2
 8010fa6:	d905      	bls.n	8010fb4 <f_read+0x1c0>
					cc = fs->csize - csect;
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010faa:	895b      	ldrh	r3, [r3, #10]
 8010fac:	461a      	mov	r2, r3
 8010fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	643b      	str	r3, [r7, #64]	; 0x40
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fb6:	7858      	ldrb	r0, [r3, #1]
 8010fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010fbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010fbe:	f7fc f8e5 	bl	800d18c <disk_read>
 8010fc2:	4603      	mov	r3, r0
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d00a      	beq.n	8010fde <f_read+0x1ea>
 8010fc8:	69fb      	ldr	r3, [r7, #28]
 8010fca:	2201      	movs	r2, #1
 8010fcc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8010fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd2:	2101      	movs	r1, #1
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f7fc fbb0 	bl	800d73a <unlock_fs>
 8010fda:	2301      	movs	r3, #1
 8010fdc:	e0ac      	b.n	8011138 <f_read+0x344>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010fde:	69fb      	ldr	r3, [r7, #28]
 8010fe0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010fe4:	b25b      	sxtb	r3, r3
 8010fe6:	2b00      	cmp	r3, #0
 8010fe8:	da14      	bge.n	8011014 <f_read+0x220>
 8010fea:	69fb      	ldr	r3, [r7, #28]
 8010fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff0:	1ad3      	subs	r3, r2, r3
 8010ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010ff4:	429a      	cmp	r2, r3
 8010ff6:	d90d      	bls.n	8011014 <f_read+0x220>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010ff8:	69fb      	ldr	r3, [r7, #28]
 8010ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ffe:	1ad3      	subs	r3, r2, r3
 8011000:	025b      	lsls	r3, r3, #9
 8011002:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011004:	18d0      	adds	r0, r2, r3
 8011006:	69fb      	ldr	r3, [r7, #28]
 8011008:	3354      	adds	r3, #84	; 0x54
 801100a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801100e:	4619      	mov	r1, r3
 8011010:	f7fc faff 	bl	800d612 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8011014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011016:	025b      	lsls	r3, r3, #9
 8011018:	647b      	str	r3, [r7, #68]	; 0x44
				continue;
 801101a:	e063      	b.n	80110e4 <f_read+0x2f0>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 801101c:	69fb      	ldr	r3, [r7, #28]
 801101e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011020:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011022:	429a      	cmp	r2, r3
 8011024:	d03d      	beq.n	80110a2 <f_read+0x2ae>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8011026:	69fb      	ldr	r3, [r7, #28]
 8011028:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801102c:	b25b      	sxtb	r3, r3
 801102e:	2b00      	cmp	r3, #0
 8011030:	da20      	bge.n	8011074 <f_read+0x280>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011034:	7858      	ldrb	r0, [r3, #1]
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011040:	2301      	movs	r3, #1
 8011042:	f7fc f8c3 	bl	800d1cc <disk_write>
 8011046:	4603      	mov	r3, r0
 8011048:	2b00      	cmp	r3, #0
 801104a:	d00a      	beq.n	8011062 <f_read+0x26e>
 801104c:	69fb      	ldr	r3, [r7, #28]
 801104e:	2201      	movs	r2, #1
 8011050:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011056:	2101      	movs	r1, #1
 8011058:	4618      	mov	r0, r3
 801105a:	f7fc fb6e 	bl	800d73a <unlock_fs>
 801105e:	2301      	movs	r3, #1
 8011060:	e06a      	b.n	8011138 <f_read+0x344>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011062:	69fb      	ldr	r3, [r7, #28]
 8011064:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801106c:	b2da      	uxtb	r2, r3
 801106e:	69fb      	ldr	r3, [r7, #28]
 8011070:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8011074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011076:	7858      	ldrb	r0, [r3, #1]
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 801107e:	2301      	movs	r3, #1
 8011080:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011082:	f7fc f883 	bl	800d18c <disk_read>
 8011086:	4603      	mov	r3, r0
 8011088:	2b00      	cmp	r3, #0
 801108a:	d00a      	beq.n	80110a2 <f_read+0x2ae>
 801108c:	69fb      	ldr	r3, [r7, #28]
 801108e:	2201      	movs	r2, #1
 8011090:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	2101      	movs	r1, #1
 8011098:	4618      	mov	r0, r3
 801109a:	f7fc fb4e 	bl	800d73a <unlock_fs>
 801109e:	2301      	movs	r3, #1
 80110a0:	e04a      	b.n	8011138 <f_read+0x344>
			}
#endif
			fp->sect = sect;
 80110a2:	69fb      	ldr	r3, [r7, #28]
 80110a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80110a6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80110a8:	69fb      	ldr	r3, [r7, #28]
 80110aa:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80110ae:	4613      	mov	r3, r2
 80110b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110b4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80110b8:	647b      	str	r3, [r7, #68]	; 0x44
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80110ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110bc:	697b      	ldr	r3, [r7, #20]
 80110be:	429a      	cmp	r2, r3
 80110c0:	d901      	bls.n	80110c6 <f_read+0x2d2>
 80110c2:	697b      	ldr	r3, [r7, #20]
 80110c4:	647b      	str	r3, [r7, #68]	; 0x44
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80110c6:	69fb      	ldr	r3, [r7, #28]
 80110c8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80110cc:	69fb      	ldr	r3, [r7, #28]
 80110ce:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80110d2:	4613      	mov	r3, r2
 80110d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d8:	440b      	add	r3, r1
 80110da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80110dc:	4619      	mov	r1, r3
 80110de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80110e0:	f7fc fa97 	bl	800d612 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80110e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80110e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110e8:	4413      	add	r3, r2
 80110ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80110ec:	69fb      	ldr	r3, [r7, #28]
 80110ee:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80110f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80110f4:	2000      	movs	r0, #0
 80110f6:	4688      	mov	r8, r1
 80110f8:	4681      	mov	r9, r0
 80110fa:	eb12 0108 	adds.w	r1, r2, r8
 80110fe:	60b9      	str	r1, [r7, #8]
 8011100:	eb43 0309 	adc.w	r3, r3, r9
 8011104:	60fb      	str	r3, [r7, #12]
 8011106:	69fb      	ldr	r3, [r7, #28]
 8011108:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801110c:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
 8011110:	693b      	ldr	r3, [r7, #16]
 8011112:	681a      	ldr	r2, [r3, #0]
 8011114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011116:	441a      	add	r2, r3
 8011118:	693b      	ldr	r3, [r7, #16]
 801111a:	601a      	str	r2, [r3, #0]
 801111c:	697a      	ldr	r2, [r7, #20]
 801111e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011120:	1ad3      	subs	r3, r2, r3
 8011122:	617b      	str	r3, [r7, #20]
	for ( ;  btr;								/* Repeat until all data read */
 8011124:	697b      	ldr	r3, [r7, #20]
 8011126:	2b00      	cmp	r3, #0
 8011128:	f47f aebd 	bne.w	8010ea6 <f_read+0xb2>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801112c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801112e:	2100      	movs	r1, #0
 8011130:	4618      	mov	r0, r3
 8011132:	f7fc fb02 	bl	800d73a <unlock_fs>
 8011136:	2300      	movs	r3, #0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3754      	adds	r7, #84	; 0x54
 801113c:	46bd      	mov	sp, r7
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011142 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8011142:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011146:	b08d      	sub	sp, #52	; 0x34
 8011148:	af00      	add	r7, sp, #0
 801114a:	60f8      	str	r0, [r7, #12]
 801114c:	60b9      	str	r1, [r7, #8]
 801114e:	607a      	str	r2, [r7, #4]
 8011150:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8011152:	68bb      	ldr	r3, [r7, #8]
 8011154:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011156:	683b      	ldr	r3, [r7, #0]
 8011158:	2200      	movs	r2, #0
 801115a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f107 0210 	add.w	r2, r7, #16
 8011162:	4611      	mov	r1, r2
 8011164:	4618      	mov	r0, r3
 8011166:	f7ff faaf 	bl	80106c8 <validate>
 801116a:	4603      	mov	r3, r0
 801116c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8011170:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011174:	2b00      	cmp	r3, #0
 8011176:	d108      	bne.n	801118a <f_write+0x48>
 8011178:	68fb      	ldr	r3, [r7, #12]
 801117a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801117e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011186:	2b00      	cmp	r3, #0
 8011188:	d009      	beq.n	801119e <f_write+0x5c>
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011190:	4611      	mov	r1, r2
 8011192:	4618      	mov	r0, r3
 8011194:	f7fc fad1 	bl	800d73a <unlock_fs>
 8011198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801119c:	e1af      	b.n	80114fe <f_write+0x3bc>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801119e:	68fb      	ldr	r3, [r7, #12]
 80111a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80111a4:	f003 0302 	and.w	r3, r3, #2
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d106      	bne.n	80111ba <f_write+0x78>
 80111ac:	693b      	ldr	r3, [r7, #16]
 80111ae:	2107      	movs	r1, #7
 80111b0:	4618      	mov	r0, r3
 80111b2:	f7fc fac2 	bl	800d73a <unlock_fs>
 80111b6:	2307      	movs	r3, #7
 80111b8:	e1a1      	b.n	80114fe <f_write+0x3bc>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80111ba:	693b      	ldr	r3, [r7, #16]
 80111bc:	781b      	ldrb	r3, [r3, #0]
 80111be:	2b04      	cmp	r3, #4
 80111c0:	f000 8188 	beq.w	80114d4 <f_write+0x392>
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	18d1      	adds	r1, r2, r3
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111d4:	4613      	mov	r3, r2
 80111d6:	4299      	cmp	r1, r3
 80111d8:	f080 817c 	bcs.w	80114d4 <f_write+0x392>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111e2:	4613      	mov	r3, r2
 80111e4:	43db      	mvns	r3, r3
 80111e6:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80111e8:	e174      	b.n	80114d4 <f_write+0x392>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80111f0:	f3c2 0408 	ubfx	r4, r2, #0, #9
 80111f4:	2500      	movs	r5, #0
 80111f6:	ea54 0305 	orrs.w	r3, r4, r5
 80111fa:	f040 8119 	bne.w	8011430 <f_write+0x2ee>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80111fe:	68fb      	ldr	r3, [r7, #12]
 8011200:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8011204:	f04f 0200 	mov.w	r2, #0
 8011208:	f04f 0300 	mov.w	r3, #0
 801120c:	0a42      	lsrs	r2, r0, #9
 801120e:	ea42 52c1 	orr.w	r2, r2, r1, lsl #23
 8011212:	0a4b      	lsrs	r3, r1, #9
 8011214:	693b      	ldr	r3, [r7, #16]
 8011216:	895b      	ldrh	r3, [r3, #10]
 8011218:	3b01      	subs	r3, #1
 801121a:	4013      	ands	r3, r2
 801121c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801121e:	69bb      	ldr	r3, [r7, #24]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d150      	bne.n	80112c6 <f_write+0x184>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801122a:	4313      	orrs	r3, r2
 801122c:	d10c      	bne.n	8011248 <f_write+0x106>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801122e:	68fb      	ldr	r3, [r7, #12]
 8011230:	689b      	ldr	r3, [r3, #8]
 8011232:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011236:	2b00      	cmp	r3, #0
 8011238:	d11a      	bne.n	8011270 <f_write+0x12e>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2100      	movs	r1, #0
 801123e:	4618      	mov	r0, r3
 8011240:	f7fd f904 	bl	800e44c <create_chain>
 8011244:	62b8      	str	r0, [r7, #40]	; 0x28
 8011246:	e013      	b.n	8011270 <f_write+0x12e>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801124c:	2b00      	cmp	r3, #0
 801124e:	d007      	beq.n	8011260 <f_write+0x11e>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011256:	68f8      	ldr	r0, [r7, #12]
 8011258:	f7fd f9f9 	bl	800e64e <clmt_clust>
 801125c:	62b8      	str	r0, [r7, #40]	; 0x28
 801125e:	e007      	b.n	8011270 <f_write+0x12e>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011260:	68fa      	ldr	r2, [r7, #12]
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011266:	4619      	mov	r1, r3
 8011268:	4610      	mov	r0, r2
 801126a:	f7fd f8ef 	bl	800e44c <create_chain>
 801126e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011272:	2b00      	cmp	r3, #0
 8011274:	f000 8133 	beq.w	80114de <f_write+0x39c>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801127a:	2b01      	cmp	r3, #1
 801127c:	d10a      	bne.n	8011294 <f_write+0x152>
 801127e:	68fb      	ldr	r3, [r7, #12]
 8011280:	2202      	movs	r2, #2
 8011282:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011286:	693b      	ldr	r3, [r7, #16]
 8011288:	2102      	movs	r1, #2
 801128a:	4618      	mov	r0, r3
 801128c:	f7fc fa55 	bl	800d73a <unlock_fs>
 8011290:	2302      	movs	r3, #2
 8011292:	e134      	b.n	80114fe <f_write+0x3bc>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011296:	f1b3 3fff 	cmp.w	r3, #4294967295
 801129a:	d10a      	bne.n	80112b2 <f_write+0x170>
 801129c:	68fb      	ldr	r3, [r7, #12]
 801129e:	2201      	movs	r2, #1
 80112a0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112a4:	693b      	ldr	r3, [r7, #16]
 80112a6:	2101      	movs	r1, #1
 80112a8:	4618      	mov	r0, r3
 80112aa:	f7fc fa46 	bl	800d73a <unlock_fs>
 80112ae:	2301      	movs	r3, #1
 80112b0:	e125      	b.n	80114fe <f_write+0x3bc>
				fp->clust = clst;			/* Update current cluster */
 80112b2:	68fb      	ldr	r3, [r7, #12]
 80112b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112b6:	641a      	str	r2, [r3, #64]	; 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	689b      	ldr	r3, [r3, #8]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d102      	bne.n	80112c6 <f_write+0x184>
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112c4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80112c6:	68fb      	ldr	r3, [r7, #12]
 80112c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80112cc:	b25b      	sxtb	r3, r3
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	da20      	bge.n	8011314 <f_write+0x1d2>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80112d2:	693b      	ldr	r3, [r7, #16]
 80112d4:	7858      	ldrb	r0, [r3, #1]
 80112d6:	68fb      	ldr	r3, [r7, #12]
 80112d8:	f103 0154 	add.w	r1, r3, #84	; 0x54
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112e0:	2301      	movs	r3, #1
 80112e2:	f7fb ff73 	bl	800d1cc <disk_write>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d00a      	beq.n	8011302 <f_write+0x1c0>
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	2201      	movs	r2, #1
 80112f0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	2101      	movs	r1, #1
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fc fa1e 	bl	800d73a <unlock_fs>
 80112fe:	2301      	movs	r3, #1
 8011300:	e0fd      	b.n	80114fe <f_write+0x3bc>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801130c:	b2da      	uxtb	r2, r3
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011314:	693a      	ldr	r2, [r7, #16]
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801131a:	4619      	mov	r1, r3
 801131c:	4610      	mov	r0, r2
 801131e:	f7fc fc73 	bl	800dc08 <clust2sect>
 8011322:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011324:	697b      	ldr	r3, [r7, #20]
 8011326:	2b00      	cmp	r3, #0
 8011328:	d10a      	bne.n	8011340 <f_write+0x1fe>
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2202      	movs	r2, #2
 801132e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 8011332:	693b      	ldr	r3, [r7, #16]
 8011334:	2102      	movs	r1, #2
 8011336:	4618      	mov	r0, r3
 8011338:	f7fc f9ff 	bl	800d73a <unlock_fs>
 801133c:	2302      	movs	r3, #2
 801133e:	e0de      	b.n	80114fe <f_write+0x3bc>
			sect += csect;
 8011340:	697a      	ldr	r2, [r7, #20]
 8011342:	69bb      	ldr	r3, [r7, #24]
 8011344:	4413      	add	r3, r2
 8011346:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	0a5b      	lsrs	r3, r3, #9
 801134c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801134e:	6a3b      	ldr	r3, [r7, #32]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d044      	beq.n	80113de <f_write+0x29c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011354:	69ba      	ldr	r2, [r7, #24]
 8011356:	6a3b      	ldr	r3, [r7, #32]
 8011358:	4413      	add	r3, r2
 801135a:	693a      	ldr	r2, [r7, #16]
 801135c:	8952      	ldrh	r2, [r2, #10]
 801135e:	4293      	cmp	r3, r2
 8011360:	d905      	bls.n	801136e <f_write+0x22c>
					cc = fs->csize - csect;
 8011362:	693b      	ldr	r3, [r7, #16]
 8011364:	895b      	ldrh	r3, [r3, #10]
 8011366:	461a      	mov	r2, r3
 8011368:	69bb      	ldr	r3, [r7, #24]
 801136a:	1ad3      	subs	r3, r2, r3
 801136c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801136e:	693b      	ldr	r3, [r7, #16]
 8011370:	7858      	ldrb	r0, [r3, #1]
 8011372:	6a3b      	ldr	r3, [r7, #32]
 8011374:	697a      	ldr	r2, [r7, #20]
 8011376:	69f9      	ldr	r1, [r7, #28]
 8011378:	f7fb ff28 	bl	800d1cc <disk_write>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d00a      	beq.n	8011398 <f_write+0x256>
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	2201      	movs	r2, #1
 8011386:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	2101      	movs	r1, #1
 801138e:	4618      	mov	r0, r3
 8011390:	f7fc f9d3 	bl	800d73a <unlock_fs>
 8011394:	2301      	movs	r3, #1
 8011396:	e0b2      	b.n	80114fe <f_write+0x3bc>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801139c:	697b      	ldr	r3, [r7, #20]
 801139e:	1ad3      	subs	r3, r2, r3
 80113a0:	6a3a      	ldr	r2, [r7, #32]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d917      	bls.n	80113d6 <f_write+0x294>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80113a6:	68fb      	ldr	r3, [r7, #12]
 80113a8:	f103 0054 	add.w	r0, r3, #84	; 0x54
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80113b0:	697b      	ldr	r3, [r7, #20]
 80113b2:	1ad3      	subs	r3, r2, r3
 80113b4:	025b      	lsls	r3, r3, #9
 80113b6:	69fa      	ldr	r2, [r7, #28]
 80113b8:	4413      	add	r3, r2
 80113ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80113be:	4619      	mov	r1, r3
 80113c0:	f7fc f927 	bl	800d612 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80113c4:	68fb      	ldr	r3, [r7, #12]
 80113c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80113ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113ce:	b2da      	uxtb	r2, r3
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80113d6:	6a3b      	ldr	r3, [r7, #32]
 80113d8:	025b      	lsls	r3, r3, #9
 80113da:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80113dc:	e04f      	b.n	801147e <f_write+0x33c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80113e2:	697a      	ldr	r2, [r7, #20]
 80113e4:	429a      	cmp	r2, r3
 80113e6:	d020      	beq.n	801142a <f_write+0x2e8>
				fp->fptr < fp->obj.objsize &&
 80113e8:	68fb      	ldr	r3, [r7, #12]
 80113ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80113f4:	4290      	cmp	r0, r2
 80113f6:	eb71 0303 	sbcs.w	r3, r1, r3
 80113fa:	d216      	bcs.n	801142a <f_write+0x2e8>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80113fc:	693b      	ldr	r3, [r7, #16]
 80113fe:	7858      	ldrb	r0, [r3, #1]
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011406:	2301      	movs	r3, #1
 8011408:	697a      	ldr	r2, [r7, #20]
 801140a:	f7fb febf 	bl	800d18c <disk_read>
 801140e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011410:	2b00      	cmp	r3, #0
 8011412:	d00a      	beq.n	801142a <f_write+0x2e8>
					ABORT(fs, FR_DISK_ERR);
 8011414:	68fb      	ldr	r3, [r7, #12]
 8011416:	2201      	movs	r2, #1
 8011418:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	2101      	movs	r1, #1
 8011420:	4618      	mov	r0, r3
 8011422:	f7fc f98a 	bl	800d73a <unlock_fs>
 8011426:	2301      	movs	r3, #1
 8011428:	e069      	b.n	80114fe <f_write+0x3bc>
			}
#endif
			fp->sect = sect;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	697a      	ldr	r2, [r7, #20]
 801142e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8011436:	4613      	mov	r3, r2
 8011438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801143c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8011440:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	429a      	cmp	r2, r3
 8011448:	d901      	bls.n	801144e <f_write+0x30c>
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801145a:	4613      	mov	r3, r2
 801145c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011460:	440b      	add	r3, r1
 8011462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011464:	69f9      	ldr	r1, [r7, #28]
 8011466:	4618      	mov	r0, r3
 8011468:	f7fc f8d3 	bl	800d612 <mem_cpy>
		fp->flag |= FA_DIRTY;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011476:	b2da      	uxtb	r2, r3
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801147e:	69fa      	ldr	r2, [r7, #28]
 8011480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011482:	4413      	add	r3, r2
 8011484:	61fb      	str	r3, [r7, #28]
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 801148c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801148e:	2000      	movs	r0, #0
 8011490:	4688      	mov	r8, r1
 8011492:	4681      	mov	r9, r0
 8011494:	eb12 0a08 	adds.w	sl, r2, r8
 8011498:	eb43 0b09 	adc.w	fp, r3, r9
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	; 0x38
 80114a2:	68fb      	ldr	r3, [r7, #12]
 80114a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80114a8:	68f9      	ldr	r1, [r7, #12]
 80114aa:	e9d1 010e 	ldrd	r0, r1, [r1, #56]	; 0x38
 80114ae:	4282      	cmp	r2, r0
 80114b0:	eb73 0601 	sbcs.w	r6, r3, r1
 80114b4:	d201      	bcs.n	80114ba <f_write+0x378>
 80114b6:	4602      	mov	r2, r0
 80114b8:	460b      	mov	r3, r1
 80114ba:	68f9      	ldr	r1, [r7, #12]
 80114bc:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80114c0:	683b      	ldr	r3, [r7, #0]
 80114c2:	681a      	ldr	r2, [r3, #0]
 80114c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114c6:	441a      	add	r2, r3
 80114c8:	683b      	ldr	r3, [r7, #0]
 80114ca:	601a      	str	r2, [r3, #0]
 80114cc:	687a      	ldr	r2, [r7, #4]
 80114ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	f47f ae87 	bne.w	80111ea <f_write+0xa8>
 80114dc:	e000      	b.n	80114e0 <f_write+0x39e>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80114de:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80114e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114ea:	b2da      	uxtb	r2, r3
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

	LEAVE_FF(fs, FR_OK);
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	2100      	movs	r1, #0
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7fc f91f 	bl	800d73a <unlock_fs>
 80114fc:	2300      	movs	r3, #0
}
 80114fe:	4618      	mov	r0, r3
 8011500:	3734      	adds	r7, #52	; 0x34
 8011502:	46bd      	mov	sp, r7
 8011504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011508 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b09c      	sub	sp, #112	; 0x70
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8011516:	4611      	mov	r1, r2
 8011518:	4618      	mov	r0, r3
 801151a:	f7ff f8d5 	bl	80106c8 <validate>
 801151e:	4603      	mov	r3, r0
 8011520:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if (res == FR_OK) {
 8011524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011528:	2b00      	cmp	r3, #0
 801152a:	f040 8123 	bne.w	8011774 <f_sync+0x26c>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011538:	2b00      	cmp	r3, #0
 801153a:	f000 811b 	beq.w	8011774 <f_sync+0x26c>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011544:	b25b      	sxtb	r3, r3
 8011546:	2b00      	cmp	r3, #0
 8011548:	da1c      	bge.n	8011584 <f_sync+0x7c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801154a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801154c:	7858      	ldrb	r0, [r3, #1]
 801154e:	687b      	ldr	r3, [r7, #4]
 8011550:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011558:	2301      	movs	r3, #1
 801155a:	f7fb fe37 	bl	800d1cc <disk_write>
 801155e:	4603      	mov	r3, r0
 8011560:	2b00      	cmp	r3, #0
 8011562:	d006      	beq.n	8011572 <f_sync+0x6a>
 8011564:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011566:	2101      	movs	r1, #1
 8011568:	4618      	mov	r0, r3
 801156a:	f7fc f8e6 	bl	800d73a <unlock_fs>
 801156e:	2301      	movs	r3, #1
 8011570:	e109      	b.n	8011786 <f_sync+0x27e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011578:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801157c:	b2da      	uxtb	r2, r3
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011584:	f7fb fc5e 	bl	800ce44 <get_fattime>
 8011588:	66b8      	str	r0, [r7, #104]	; 0x68
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 801158a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801158c:	781b      	ldrb	r3, [r3, #0]
 801158e:	2b04      	cmp	r3, #4
 8011590:	f040 80a5 	bne.w	80116de <f_sync+0x1d6>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	4618      	mov	r0, r3
 8011598:	f7fc fe44 	bl	800e224 <fill_first_frag>
 801159c:	4603      	mov	r3, r0
 801159e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80115a2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d10a      	bne.n	80115c0 <f_sync+0xb8>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 80115aa:	6878      	ldr	r0, [r7, #4]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80115b0:	f04f 32ff 	mov.w	r2, #4294967295
 80115b4:	4619      	mov	r1, r3
 80115b6:	f7fc fe64 	bl	800e282 <fill_last_frag>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				}
				if (res == FR_OK) {
 80115c0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80115c4:	2b00      	cmp	r3, #0
 80115c6:	f040 80d5 	bne.w	8011774 <f_sync+0x26c>
					INIT_NAMBUF(fs);
 80115ca:	f44f 608c 	mov.w	r0, #1120	; 0x460
 80115ce:	f000 fa76 	bl	8011abe <ff_memalloc>
 80115d2:	6638      	str	r0, [r7, #96]	; 0x60
 80115d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d106      	bne.n	80115e8 <f_sync+0xe0>
 80115da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115dc:	2111      	movs	r1, #17
 80115de:	4618      	mov	r0, r3
 80115e0:	f7fc f8ab 	bl	800d73a <unlock_fs>
 80115e4:	2311      	movs	r3, #17
 80115e6:	e0ce      	b.n	8011786 <f_sync+0x27e>
 80115e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115ea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115ec:	60da      	str	r2, [r3, #12]
 80115ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80115f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80115f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
 80115f6:	611a      	str	r2, [r3, #16]
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 80115f8:	687a      	ldr	r2, [r7, #4]
 80115fa:	f107 0308 	add.w	r3, r7, #8
 80115fe:	4611      	mov	r1, r2
 8011600:	4618      	mov	r0, r3
 8011602:	f7fd fd6f 	bl	800f0e4 <load_obj_dir>
 8011606:	4603      	mov	r3, r0
 8011608:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					if (res == FR_OK) {
 801160c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8011610:	2b00      	cmp	r3, #0
 8011612:	d160      	bne.n	80116d6 <f_sync+0x1ce>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 8011614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011616:	691b      	ldr	r3, [r3, #16]
 8011618:	3304      	adds	r3, #4
 801161a:	781a      	ldrb	r2, [r3, #0]
 801161c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801161e:	691b      	ldr	r3, [r3, #16]
 8011620:	3304      	adds	r3, #4
 8011622:	f042 0220 	orr.w	r2, r2, #32
 8011626:	b2d2      	uxtb	r2, r2
 8011628:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	79da      	ldrb	r2, [r3, #7]
 801162e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011630:	691b      	ldr	r3, [r3, #16]
 8011632:	3321      	adds	r3, #33	; 0x21
 8011634:	f042 0201 	orr.w	r2, r2, #1
 8011638:	b2d2      	uxtb	r2, r2
 801163a:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 801163c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801163e:	691b      	ldr	r3, [r3, #16]
 8011640:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	4619      	mov	r1, r3
 801164a:	4610      	mov	r0, r2
 801164c:	f7fb ff2d 	bl	800d4aa <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 8011650:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011652:	691b      	ldr	r3, [r3, #16]
 8011654:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801165e:	4608      	mov	r0, r1
 8011660:	f7fb ff4f 	bl	800d502 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 8011664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011666:	691b      	ldr	r3, [r3, #16]
 8011668:	f103 0128 	add.w	r1, r3, #40	; 0x28
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8011672:	4608      	mov	r0, r1
 8011674:	f7fb ff45 	bl	800d502 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8011678:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801167a:	691b      	ldr	r3, [r3, #16]
 801167c:	330c      	adds	r3, #12
 801167e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8011680:	4618      	mov	r0, r3
 8011682:	f7fb ff12 	bl	800d4aa <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8011686:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	3315      	adds	r3, #21
 801168c:	2200      	movs	r2, #0
 801168e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8011690:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011692:	691b      	ldr	r3, [r3, #16]
 8011694:	3310      	adds	r3, #16
 8011696:	2100      	movs	r1, #0
 8011698:	4618      	mov	r0, r3
 801169a:	f7fb ff06 	bl	800d4aa <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 801169e:	f107 0308 	add.w	r3, r7, #8
 80116a2:	4618      	mov	r0, r3
 80116a4:	f7fd fd54 	bl	800f150 <store_xdir>
 80116a8:	4603      	mov	r3, r0
 80116aa:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
						if (res == FR_OK) {
 80116ae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10f      	bne.n	80116d6 <f_sync+0x1ce>
							res = sync_fs(fs);
 80116b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80116b8:	4618      	mov	r0, r3
 80116ba:	f7fc fa37 	bl	800db2c <sync_fs>
 80116be:	4603      	mov	r3, r0
 80116c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
							fp->flag &= (BYTE)~FA_MODIFIED;
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80116ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80116ce:	b2da      	uxtb	r2, r3
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
						}
					}
					FREE_NAMBUF();
 80116d6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80116d8:	f000 f9fd 	bl	8011ad6 <ff_memfree>
 80116dc:	e04a      	b.n	8011774 <f_sync+0x26c>
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80116de:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80116e4:	4619      	mov	r1, r3
 80116e6:	4610      	mov	r0, r2
 80116e8:	f7fc f9f2 	bl	800dad0 <move_window>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
				if (res == FR_OK) {
 80116f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d13c      	bne.n	8011774 <f_sync+0x26c>
					dir = fp->dir_ptr;
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80116fe:	667b      	str	r3, [r7, #100]	; 0x64
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011702:	330b      	adds	r3, #11
 8011704:	781a      	ldrb	r2, [r3, #0]
 8011706:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011708:	330b      	adds	r3, #11
 801170a:	f042 0220 	orr.w	r2, r2, #32
 801170e:	b2d2      	uxtb	r2, r2
 8011710:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011712:	687b      	ldr	r3, [r7, #4]
 8011714:	6818      	ldr	r0, [r3, #0]
 8011716:	687b      	ldr	r3, [r7, #4]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	461a      	mov	r2, r3
 801171c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801171e:	f7fd f9b0 	bl	800ea82 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011724:	f103 001c 	add.w	r0, r3, #28
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 801172e:	4613      	mov	r3, r2
 8011730:	4619      	mov	r1, r3
 8011732:	f7fb feba 	bl	800d4aa <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011736:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011738:	3316      	adds	r3, #22
 801173a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801173c:	4618      	mov	r0, r3
 801173e:	f7fb feb4 	bl	800d4aa <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011742:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011744:	3312      	adds	r3, #18
 8011746:	2100      	movs	r1, #0
 8011748:	4618      	mov	r0, r3
 801174a:	f7fb fe93 	bl	800d474 <st_word>
					fs->wflag = 1;
 801174e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011750:	2201      	movs	r2, #1
 8011752:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011754:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011756:	4618      	mov	r0, r3
 8011758:	f7fc f9e8 	bl	800db2c <sync_fs>
 801175c:	4603      	mov	r3, r0
 801175e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801176c:	b2da      	uxtb	r2, r3
 801176e:	687b      	ldr	r3, [r7, #4]
 8011770:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011776:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 801177a:	4611      	mov	r1, r2
 801177c:	4618      	mov	r0, r3
 801177e:	f7fb ffdc 	bl	800d73a <unlock_fs>
 8011782:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8011786:	4618      	mov	r0, r3
 8011788:	3770      	adds	r7, #112	; 0x70
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}

0801178e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801178e:	b580      	push	{r7, lr}
 8011790:	b084      	sub	sp, #16
 8011792:	af00      	add	r7, sp, #0
 8011794:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011796:	6878      	ldr	r0, [r7, #4]
 8011798:	f7ff feb6 	bl	8011508 <f_sync>
 801179c:	4603      	mov	r3, r0
 801179e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80117a0:	7bfb      	ldrb	r3, [r7, #15]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d11d      	bne.n	80117e2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	f107 0208 	add.w	r2, r7, #8
 80117ac:	4611      	mov	r1, r2
 80117ae:	4618      	mov	r0, r3
 80117b0:	f7fe ff8a 	bl	80106c8 <validate>
 80117b4:	4603      	mov	r3, r0
 80117b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80117b8:	7bfb      	ldrb	r3, [r7, #15]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d111      	bne.n	80117e2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117c2:	4618      	mov	r0, r3
 80117c4:	f7fc f8e0 	bl	800d988 <dec_lock>
 80117c8:	4603      	mov	r3, r0
 80117ca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80117cc:	7bfb      	ldrb	r3, [r7, #15]
 80117ce:	2b00      	cmp	r3, #0
 80117d0:	d102      	bne.n	80117d8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80117d2:	687b      	ldr	r3, [r7, #4]
 80117d4:	2200      	movs	r2, #0
 80117d6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80117d8:	68bb      	ldr	r3, [r7, #8]
 80117da:	2100      	movs	r1, #0
 80117dc:	4618      	mov	r0, r3
 80117de:	f7fb ffac 	bl	800d73a <unlock_fs>
#endif
		}
	}
	return res;
 80117e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80117e4:	4618      	mov	r0, r3
 80117e6:	3710      	adds	r7, #16
 80117e8:	46bd      	mov	sp, r7
 80117ea:	bd80      	pop	{r7, pc}

080117ec <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b087      	sub	sp, #28
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	60f8      	str	r0, [r7, #12]
 80117f4:	60b9      	str	r1, [r7, #8]
 80117f6:	4613      	mov	r3, r2
 80117f8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80117fa:	2301      	movs	r3, #1
 80117fc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011802:	4b1f      	ldr	r3, [pc, #124]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 8011804:	7a5b      	ldrb	r3, [r3, #9]
 8011806:	b2db      	uxtb	r3, r3
 8011808:	2b00      	cmp	r3, #0
 801180a:	d131      	bne.n	8011870 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801180c:	4b1c      	ldr	r3, [pc, #112]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 801180e:	7a5b      	ldrb	r3, [r3, #9]
 8011810:	b2db      	uxtb	r3, r3
 8011812:	461a      	mov	r2, r3
 8011814:	4b1a      	ldr	r3, [pc, #104]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 8011816:	2100      	movs	r1, #0
 8011818:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801181a:	4b19      	ldr	r3, [pc, #100]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 801181c:	7a5b      	ldrb	r3, [r3, #9]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	4a17      	ldr	r2, [pc, #92]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 8011822:	009b      	lsls	r3, r3, #2
 8011824:	4413      	add	r3, r2
 8011826:	68fa      	ldr	r2, [r7, #12]
 8011828:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801182a:	4b15      	ldr	r3, [pc, #84]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 801182c:	7a5b      	ldrb	r3, [r3, #9]
 801182e:	b2db      	uxtb	r3, r3
 8011830:	461a      	mov	r2, r3
 8011832:	4b13      	ldr	r3, [pc, #76]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 8011834:	4413      	add	r3, r2
 8011836:	79fa      	ldrb	r2, [r7, #7]
 8011838:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801183a:	4b11      	ldr	r3, [pc, #68]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 801183c:	7a5b      	ldrb	r3, [r3, #9]
 801183e:	b2db      	uxtb	r3, r3
 8011840:	1c5a      	adds	r2, r3, #1
 8011842:	b2d1      	uxtb	r1, r2
 8011844:	4a0e      	ldr	r2, [pc, #56]	; (8011880 <FATFS_LinkDriverEx+0x94>)
 8011846:	7251      	strb	r1, [r2, #9]
 8011848:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801184a:	7dbb      	ldrb	r3, [r7, #22]
 801184c:	3330      	adds	r3, #48	; 0x30
 801184e:	b2da      	uxtb	r2, r3
 8011850:	68bb      	ldr	r3, [r7, #8]
 8011852:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	3301      	adds	r3, #1
 8011858:	223a      	movs	r2, #58	; 0x3a
 801185a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801185c:	68bb      	ldr	r3, [r7, #8]
 801185e:	3302      	adds	r3, #2
 8011860:	222f      	movs	r2, #47	; 0x2f
 8011862:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011864:	68bb      	ldr	r3, [r7, #8]
 8011866:	3303      	adds	r3, #3
 8011868:	2200      	movs	r2, #0
 801186a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801186c:	2300      	movs	r3, #0
 801186e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011870:	7dfb      	ldrb	r3, [r7, #23]
}
 8011872:	4618      	mov	r0, r3
 8011874:	371c      	adds	r7, #28
 8011876:	46bd      	mov	sp, r7
 8011878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187c:	4770      	bx	lr
 801187e:	bf00      	nop
 8011880:	200210b0 	.word	0x200210b0

08011884 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011884:	b580      	push	{r7, lr}
 8011886:	b082      	sub	sp, #8
 8011888:	af00      	add	r7, sp, #0
 801188a:	6078      	str	r0, [r7, #4]
 801188c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801188e:	2200      	movs	r2, #0
 8011890:	6839      	ldr	r1, [r7, #0]
 8011892:	6878      	ldr	r0, [r7, #4]
 8011894:	f7ff ffaa 	bl	80117ec <FATFS_LinkDriverEx>
 8011898:	4603      	mov	r3, r0
}
 801189a:	4618      	mov	r0, r3
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
	...

080118a4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b085      	sub	sp, #20
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	4603      	mov	r3, r0
 80118ac:	6039      	str	r1, [r7, #0]
 80118ae:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118b0:	88fb      	ldrh	r3, [r7, #6]
 80118b2:	2b7f      	cmp	r3, #127	; 0x7f
 80118b4:	d802      	bhi.n	80118bc <ff_convert+0x18>
		c = chr;
 80118b6:	88fb      	ldrh	r3, [r7, #6]
 80118b8:	81fb      	strh	r3, [r7, #14]
 80118ba:	e025      	b.n	8011908 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d00b      	beq.n	80118da <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118c2:	88fb      	ldrh	r3, [r7, #6]
 80118c4:	2bff      	cmp	r3, #255	; 0xff
 80118c6:	d805      	bhi.n	80118d4 <ff_convert+0x30>
 80118c8:	88fb      	ldrh	r3, [r7, #6]
 80118ca:	3b80      	subs	r3, #128	; 0x80
 80118cc:	4a12      	ldr	r2, [pc, #72]	; (8011918 <ff_convert+0x74>)
 80118ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118d2:	e000      	b.n	80118d6 <ff_convert+0x32>
 80118d4:	2300      	movs	r3, #0
 80118d6:	81fb      	strh	r3, [r7, #14]
 80118d8:	e016      	b.n	8011908 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118da:	2300      	movs	r3, #0
 80118dc:	81fb      	strh	r3, [r7, #14]
 80118de:	e009      	b.n	80118f4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118e0:	89fb      	ldrh	r3, [r7, #14]
 80118e2:	4a0d      	ldr	r2, [pc, #52]	; (8011918 <ff_convert+0x74>)
 80118e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118e8:	88fa      	ldrh	r2, [r7, #6]
 80118ea:	429a      	cmp	r2, r3
 80118ec:	d006      	beq.n	80118fc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80118ee:	89fb      	ldrh	r3, [r7, #14]
 80118f0:	3301      	adds	r3, #1
 80118f2:	81fb      	strh	r3, [r7, #14]
 80118f4:	89fb      	ldrh	r3, [r7, #14]
 80118f6:	2b7f      	cmp	r3, #127	; 0x7f
 80118f8:	d9f2      	bls.n	80118e0 <ff_convert+0x3c>
 80118fa:	e000      	b.n	80118fe <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80118fc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80118fe:	89fb      	ldrh	r3, [r7, #14]
 8011900:	3380      	adds	r3, #128	; 0x80
 8011902:	b29b      	uxth	r3, r3
 8011904:	b2db      	uxtb	r3, r3
 8011906:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011908:	89fb      	ldrh	r3, [r7, #14]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3714      	adds	r7, #20
 801190e:	46bd      	mov	sp, r7
 8011910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011914:	4770      	bx	lr
 8011916:	bf00      	nop
 8011918:	080167d4 	.word	0x080167d4

0801191c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 801191c:	b480      	push	{r7}
 801191e:	b087      	sub	sp, #28
 8011920:	af00      	add	r7, sp, #0
 8011922:	4603      	mov	r3, r0
 8011924:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8011926:	88fb      	ldrh	r3, [r7, #6]
 8011928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801192c:	d201      	bcs.n	8011932 <ff_wtoupper+0x16>
 801192e:	4b3e      	ldr	r3, [pc, #248]	; (8011a28 <ff_wtoupper+0x10c>)
 8011930:	e000      	b.n	8011934 <ff_wtoupper+0x18>
 8011932:	4b3e      	ldr	r3, [pc, #248]	; (8011a2c <ff_wtoupper+0x110>)
 8011934:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8011936:	697b      	ldr	r3, [r7, #20]
 8011938:	1c9a      	adds	r2, r3, #2
 801193a:	617a      	str	r2, [r7, #20]
 801193c:	881b      	ldrh	r3, [r3, #0]
 801193e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011940:	8a7b      	ldrh	r3, [r7, #18]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d068      	beq.n	8011a18 <ff_wtoupper+0xfc>
 8011946:	88fa      	ldrh	r2, [r7, #6]
 8011948:	8a7b      	ldrh	r3, [r7, #18]
 801194a:	429a      	cmp	r2, r3
 801194c:	d364      	bcc.n	8011a18 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	1c9a      	adds	r2, r3, #2
 8011952:	617a      	str	r2, [r7, #20]
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	823b      	strh	r3, [r7, #16]
 8011958:	8a3b      	ldrh	r3, [r7, #16]
 801195a:	0a1b      	lsrs	r3, r3, #8
 801195c:	81fb      	strh	r3, [r7, #14]
 801195e:	8a3b      	ldrh	r3, [r7, #16]
 8011960:	b2db      	uxtb	r3, r3
 8011962:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011964:	88fa      	ldrh	r2, [r7, #6]
 8011966:	8a79      	ldrh	r1, [r7, #18]
 8011968:	8a3b      	ldrh	r3, [r7, #16]
 801196a:	440b      	add	r3, r1
 801196c:	429a      	cmp	r2, r3
 801196e:	da49      	bge.n	8011a04 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011970:	89fb      	ldrh	r3, [r7, #14]
 8011972:	2b08      	cmp	r3, #8
 8011974:	d84f      	bhi.n	8011a16 <ff_wtoupper+0xfa>
 8011976:	a201      	add	r2, pc, #4	; (adr r2, 801197c <ff_wtoupper+0x60>)
 8011978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801197c:	080119a1 	.word	0x080119a1
 8011980:	080119b3 	.word	0x080119b3
 8011984:	080119c9 	.word	0x080119c9
 8011988:	080119d1 	.word	0x080119d1
 801198c:	080119d9 	.word	0x080119d9
 8011990:	080119e1 	.word	0x080119e1
 8011994:	080119e9 	.word	0x080119e9
 8011998:	080119f1 	.word	0x080119f1
 801199c:	080119f9 	.word	0x080119f9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119a0:	88fa      	ldrh	r2, [r7, #6]
 80119a2:	8a7b      	ldrh	r3, [r7, #18]
 80119a4:	1ad3      	subs	r3, r2, r3
 80119a6:	005b      	lsls	r3, r3, #1
 80119a8:	697a      	ldr	r2, [r7, #20]
 80119aa:	4413      	add	r3, r2
 80119ac:	881b      	ldrh	r3, [r3, #0]
 80119ae:	80fb      	strh	r3, [r7, #6]
 80119b0:	e027      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119b2:	88fa      	ldrh	r2, [r7, #6]
 80119b4:	8a7b      	ldrh	r3, [r7, #18]
 80119b6:	1ad3      	subs	r3, r2, r3
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	f003 0301 	and.w	r3, r3, #1
 80119be:	b29b      	uxth	r3, r3
 80119c0:	88fa      	ldrh	r2, [r7, #6]
 80119c2:	1ad3      	subs	r3, r2, r3
 80119c4:	80fb      	strh	r3, [r7, #6]
 80119c6:	e01c      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119c8:	88fb      	ldrh	r3, [r7, #6]
 80119ca:	3b10      	subs	r3, #16
 80119cc:	80fb      	strh	r3, [r7, #6]
 80119ce:	e018      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119d0:	88fb      	ldrh	r3, [r7, #6]
 80119d2:	3b20      	subs	r3, #32
 80119d4:	80fb      	strh	r3, [r7, #6]
 80119d6:	e014      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119d8:	88fb      	ldrh	r3, [r7, #6]
 80119da:	3b30      	subs	r3, #48	; 0x30
 80119dc:	80fb      	strh	r3, [r7, #6]
 80119de:	e010      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119e0:	88fb      	ldrh	r3, [r7, #6]
 80119e2:	3b1a      	subs	r3, #26
 80119e4:	80fb      	strh	r3, [r7, #6]
 80119e6:	e00c      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80119e8:	88fb      	ldrh	r3, [r7, #6]
 80119ea:	3308      	adds	r3, #8
 80119ec:	80fb      	strh	r3, [r7, #6]
 80119ee:	e008      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	3b50      	subs	r3, #80	; 0x50
 80119f4:	80fb      	strh	r3, [r7, #6]
 80119f6:	e004      	b.n	8011a02 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80119f8:	88fb      	ldrh	r3, [r7, #6]
 80119fa:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80119fe:	80fb      	strh	r3, [r7, #6]
 8011a00:	bf00      	nop
			}
			break;
 8011a02:	e008      	b.n	8011a16 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a04:	89fb      	ldrh	r3, [r7, #14]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d195      	bne.n	8011936 <ff_wtoupper+0x1a>
 8011a0a:	8a3b      	ldrh	r3, [r7, #16]
 8011a0c:	005b      	lsls	r3, r3, #1
 8011a0e:	697a      	ldr	r2, [r7, #20]
 8011a10:	4413      	add	r3, r2
 8011a12:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a14:	e78f      	b.n	8011936 <ff_wtoupper+0x1a>
			break;
 8011a16:	bf00      	nop
	}

	return chr;
 8011a18:	88fb      	ldrh	r3, [r7, #6]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	371c      	adds	r7, #28
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a24:	4770      	bx	lr
 8011a26:	bf00      	nop
 8011a28:	080168d4 	.word	0x080168d4
 8011a2c:	08016ac8 	.word	0x08016ac8

08011a30 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b084      	sub	sp, #16
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	4603      	mov	r3, r0
 8011a38:	6039      	str	r1, [r7, #0]
 8011a3a:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011a3c:	2200      	movs	r2, #0
 8011a3e:	2101      	movs	r1, #1
 8011a40:	2001      	movs	r0, #1
 8011a42:	f000 fa84 	bl	8011f4e <osSemaphoreNew>
 8011a46:	4602      	mov	r2, r0
 8011a48:	683b      	ldr	r3, [r7, #0]
 8011a4a:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	bf14      	ite	ne
 8011a54:	2301      	movne	r3, #1
 8011a56:	2300      	moveq	r3, #0
 8011a58:	b2db      	uxtb	r3, r3
 8011a5a:	60fb      	str	r3, [r7, #12]

    return ret;
 8011a5c:	68fb      	ldr	r3, [r7, #12]
}
 8011a5e:	4618      	mov	r0, r3
 8011a60:	3710      	adds	r7, #16
 8011a62:	46bd      	mov	sp, r7
 8011a64:	bd80      	pop	{r7, pc}

08011a66 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011a66:	b580      	push	{r7, lr}
 8011a68:	b082      	sub	sp, #8
 8011a6a:	af00      	add	r7, sp, #0
 8011a6c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011a6e:	6878      	ldr	r0, [r7, #4]
 8011a70:	f000 fb84 	bl	801217c <osSemaphoreDelete>
#endif
    return 1;
 8011a74:	2301      	movs	r3, #1
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3708      	adds	r7, #8
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b084      	sub	sp, #16
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011a86:	2300      	movs	r3, #0
 8011a88:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011a8a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f000 fae6 	bl	8012060 <osSemaphoreAcquire>
 8011a94:	4603      	mov	r3, r0
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d101      	bne.n	8011a9e <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
}
 8011aa0:	4618      	mov	r0, r3
 8011aa2:	3710      	adds	r7, #16
 8011aa4:	46bd      	mov	sp, r7
 8011aa6:	bd80      	pop	{r7, pc}

08011aa8 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b082      	sub	sp, #8
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011ab0:	6878      	ldr	r0, [r7, #4]
 8011ab2:	f000 fb23 	bl	80120fc <osSemaphoreRelease>
#endif
}
 8011ab6:	bf00      	nop
 8011ab8:	3708      	adds	r7, #8
 8011aba:	46bd      	mov	sp, r7
 8011abc:	bd80      	pop	{r7, pc}

08011abe <ff_memalloc>:
*/

void* ff_memalloc (	/* Returns pointer to the allocated memory block */
	UINT msize		/* Number of bytes to allocate */
)
{
 8011abe:	b580      	push	{r7, lr}
 8011ac0:	b082      	sub	sp, #8
 8011ac2:	af00      	add	r7, sp, #0
 8011ac4:	6078      	str	r0, [r7, #4]
	return ff_malloc(msize);	/* Allocate a new memory block with POSIX API */
 8011ac6:	6878      	ldr	r0, [r7, #4]
 8011ac8:	f003 f81e 	bl	8014b08 <pvPortMalloc>
 8011acc:	4603      	mov	r3, r0
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <ff_memfree>:
/*------------------------------------------------------------------------*/

void ff_memfree (
	void* mblock	/* Pointer to the memory block to free */
)
{
 8011ad6:	b580      	push	{r7, lr}
 8011ad8:	b082      	sub	sp, #8
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
	ff_free(mblock);	/* Discard the memory block with POSIX API */
 8011ade:	6878      	ldr	r0, [r7, #4]
 8011ae0:	f003 f8c6 	bl	8014c70 <vPortFree>
}
 8011ae4:	bf00      	nop
 8011ae6:	3708      	adds	r7, #8
 8011ae8:	46bd      	mov	sp, r7
 8011aea:	bd80      	pop	{r7, pc}

08011aec <__NVIC_SetPriority>:
{
 8011aec:	b480      	push	{r7}
 8011aee:	b083      	sub	sp, #12
 8011af0:	af00      	add	r7, sp, #0
 8011af2:	4603      	mov	r3, r0
 8011af4:	6039      	str	r1, [r7, #0]
 8011af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	db0a      	blt.n	8011b16 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	b2da      	uxtb	r2, r3
 8011b04:	490c      	ldr	r1, [pc, #48]	; (8011b38 <__NVIC_SetPriority+0x4c>)
 8011b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011b0a:	0152      	lsls	r2, r2, #5
 8011b0c:	b2d2      	uxtb	r2, r2
 8011b0e:	440b      	add	r3, r1
 8011b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011b14:	e00a      	b.n	8011b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	b2da      	uxtb	r2, r3
 8011b1a:	4908      	ldr	r1, [pc, #32]	; (8011b3c <__NVIC_SetPriority+0x50>)
 8011b1c:	79fb      	ldrb	r3, [r7, #7]
 8011b1e:	f003 030f 	and.w	r3, r3, #15
 8011b22:	3b04      	subs	r3, #4
 8011b24:	0152      	lsls	r2, r2, #5
 8011b26:	b2d2      	uxtb	r2, r2
 8011b28:	440b      	add	r3, r1
 8011b2a:	761a      	strb	r2, [r3, #24]
}
 8011b2c:	bf00      	nop
 8011b2e:	370c      	adds	r7, #12
 8011b30:	46bd      	mov	sp, r7
 8011b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b36:	4770      	bx	lr
 8011b38:	e000e100 	.word	0xe000e100
 8011b3c:	e000ed00 	.word	0xe000ed00

08011b40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011b40:	b580      	push	{r7, lr}
 8011b42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011b44:	4b05      	ldr	r3, [pc, #20]	; (8011b5c <SysTick_Handler+0x1c>)
 8011b46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011b48:	f002 f870 	bl	8013c2c <xTaskGetSchedulerState>
 8011b4c:	4603      	mov	r3, r0
 8011b4e:	2b01      	cmp	r3, #1
 8011b50:	d001      	beq.n	8011b56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011b52:	f002 fe6f 	bl	8014834 <xPortSysTickHandler>
  }
}
 8011b56:	bf00      	nop
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	e000e010 	.word	0xe000e010

08011b60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011b60:	b580      	push	{r7, lr}
 8011b62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011b64:	2100      	movs	r1, #0
 8011b66:	f06f 0004 	mvn.w	r0, #4
 8011b6a:	f7ff ffbf 	bl	8011aec <__NVIC_SetPriority>
#endif
}
 8011b6e:	bf00      	nop
 8011b70:	bd80      	pop	{r7, pc}
	...

08011b74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011b74:	b480      	push	{r7}
 8011b76:	b083      	sub	sp, #12
 8011b78:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b7a:	f3ef 8305 	mrs	r3, IPSR
 8011b7e:	603b      	str	r3, [r7, #0]
  return(result);
 8011b80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d003      	beq.n	8011b8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011b86:	f06f 0305 	mvn.w	r3, #5
 8011b8a:	607b      	str	r3, [r7, #4]
 8011b8c:	e00c      	b.n	8011ba8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011b8e:	4b0a      	ldr	r3, [pc, #40]	; (8011bb8 <osKernelInitialize+0x44>)
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d105      	bne.n	8011ba2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011b96:	4b08      	ldr	r3, [pc, #32]	; (8011bb8 <osKernelInitialize+0x44>)
 8011b98:	2201      	movs	r2, #1
 8011b9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b9c:	2300      	movs	r3, #0
 8011b9e:	607b      	str	r3, [r7, #4]
 8011ba0:	e002      	b.n	8011ba8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8011ba6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011ba8:	687b      	ldr	r3, [r7, #4]
}
 8011baa:	4618      	mov	r0, r3
 8011bac:	370c      	adds	r7, #12
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bb4:	4770      	bx	lr
 8011bb6:	bf00      	nop
 8011bb8:	200210bc 	.word	0x200210bc

08011bbc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bc2:	f3ef 8305 	mrs	r3, IPSR
 8011bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8011bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d003      	beq.n	8011bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011bce:	f06f 0305 	mvn.w	r3, #5
 8011bd2:	607b      	str	r3, [r7, #4]
 8011bd4:	e010      	b.n	8011bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011bd6:	4b0b      	ldr	r3, [pc, #44]	; (8011c04 <osKernelStart+0x48>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	2b01      	cmp	r3, #1
 8011bdc:	d109      	bne.n	8011bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011bde:	f7ff ffbf 	bl	8011b60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011be2:	4b08      	ldr	r3, [pc, #32]	; (8011c04 <osKernelStart+0x48>)
 8011be4:	2202      	movs	r2, #2
 8011be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011be8:	f001 fc2e 	bl	8013448 <vTaskStartScheduler>
      stat = osOK;
 8011bec:	2300      	movs	r3, #0
 8011bee:	607b      	str	r3, [r7, #4]
 8011bf0:	e002      	b.n	8011bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011bf8:	687b      	ldr	r3, [r7, #4]
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}
 8011c02:	bf00      	nop
 8011c04:	200210bc 	.word	0x200210bc

08011c08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011c08:	b580      	push	{r7, lr}
 8011c0a:	b08e      	sub	sp, #56	; 0x38
 8011c0c:	af04      	add	r7, sp, #16
 8011c0e:	60f8      	str	r0, [r7, #12]
 8011c10:	60b9      	str	r1, [r7, #8]
 8011c12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011c14:	2300      	movs	r3, #0
 8011c16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c18:	f3ef 8305 	mrs	r3, IPSR
 8011c1c:	617b      	str	r3, [r7, #20]
  return(result);
 8011c1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011c20:	2b00      	cmp	r3, #0
 8011c22:	d17e      	bne.n	8011d22 <osThreadNew+0x11a>
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d07b      	beq.n	8011d22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011c2a:	2380      	movs	r3, #128	; 0x80
 8011c2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011c2e:	2318      	movs	r3, #24
 8011c30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011c32:	2300      	movs	r3, #0
 8011c34:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011c36:	f04f 33ff 	mov.w	r3, #4294967295
 8011c3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d045      	beq.n	8011cce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d002      	beq.n	8011c50 <osThreadNew+0x48>
        name = attr->name;
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	699b      	ldr	r3, [r3, #24]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d002      	beq.n	8011c5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011c58:	687b      	ldr	r3, [r7, #4]
 8011c5a:	699b      	ldr	r3, [r3, #24]
 8011c5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c5e:	69fb      	ldr	r3, [r7, #28]
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d008      	beq.n	8011c76 <osThreadNew+0x6e>
 8011c64:	69fb      	ldr	r3, [r7, #28]
 8011c66:	2b38      	cmp	r3, #56	; 0x38
 8011c68:	d805      	bhi.n	8011c76 <osThreadNew+0x6e>
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	685b      	ldr	r3, [r3, #4]
 8011c6e:	f003 0301 	and.w	r3, r3, #1
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d001      	beq.n	8011c7a <osThreadNew+0x72>
        return (NULL);
 8011c76:	2300      	movs	r3, #0
 8011c78:	e054      	b.n	8011d24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011c7a:	687b      	ldr	r3, [r7, #4]
 8011c7c:	695b      	ldr	r3, [r3, #20]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d003      	beq.n	8011c8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	695b      	ldr	r3, [r3, #20]
 8011c86:	089b      	lsrs	r3, r3, #2
 8011c88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	689b      	ldr	r3, [r3, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d00e      	beq.n	8011cb0 <osThreadNew+0xa8>
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	2ba7      	cmp	r3, #167	; 0xa7
 8011c98:	d90a      	bls.n	8011cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	d006      	beq.n	8011cb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	695b      	ldr	r3, [r3, #20]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d002      	beq.n	8011cb0 <osThreadNew+0xa8>
        mem = 1;
 8011caa:	2301      	movs	r3, #1
 8011cac:	61bb      	str	r3, [r7, #24]
 8011cae:	e010      	b.n	8011cd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	689b      	ldr	r3, [r3, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d10c      	bne.n	8011cd2 <osThreadNew+0xca>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	68db      	ldr	r3, [r3, #12]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d108      	bne.n	8011cd2 <osThreadNew+0xca>
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	691b      	ldr	r3, [r3, #16]
 8011cc4:	2b00      	cmp	r3, #0
 8011cc6:	d104      	bne.n	8011cd2 <osThreadNew+0xca>
          mem = 0;
 8011cc8:	2300      	movs	r3, #0
 8011cca:	61bb      	str	r3, [r7, #24]
 8011ccc:	e001      	b.n	8011cd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011cd2:	69bb      	ldr	r3, [r7, #24]
 8011cd4:	2b01      	cmp	r3, #1
 8011cd6:	d110      	bne.n	8011cfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ce0:	9202      	str	r2, [sp, #8]
 8011ce2:	9301      	str	r3, [sp, #4]
 8011ce4:	69fb      	ldr	r3, [r7, #28]
 8011ce6:	9300      	str	r3, [sp, #0]
 8011ce8:	68bb      	ldr	r3, [r7, #8]
 8011cea:	6a3a      	ldr	r2, [r7, #32]
 8011cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cee:	68f8      	ldr	r0, [r7, #12]
 8011cf0:	f001 f9f4 	bl	80130dc <xTaskCreateStatic>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	613b      	str	r3, [r7, #16]
 8011cf8:	e013      	b.n	8011d22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011cfa:	69bb      	ldr	r3, [r7, #24]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d110      	bne.n	8011d22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011d00:	6a3b      	ldr	r3, [r7, #32]
 8011d02:	b29a      	uxth	r2, r3
 8011d04:	f107 0310 	add.w	r3, r7, #16
 8011d08:	9301      	str	r3, [sp, #4]
 8011d0a:	69fb      	ldr	r3, [r7, #28]
 8011d0c:	9300      	str	r3, [sp, #0]
 8011d0e:	68bb      	ldr	r3, [r7, #8]
 8011d10:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011d12:	68f8      	ldr	r0, [r7, #12]
 8011d14:	f001 fa27 	bl	8013166 <xTaskCreate>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b01      	cmp	r3, #1
 8011d1c:	d001      	beq.n	8011d22 <osThreadNew+0x11a>
            hTask = NULL;
 8011d1e:	2300      	movs	r3, #0
 8011d20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011d22:	693b      	ldr	r3, [r7, #16]
}
 8011d24:	4618      	mov	r0, r3
 8011d26:	3728      	adds	r7, #40	; 0x28
 8011d28:	46bd      	mov	sp, r7
 8011d2a:	bd80      	pop	{r7, pc}

08011d2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d34:	f3ef 8305 	mrs	r3, IPSR
 8011d38:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d003      	beq.n	8011d48 <osDelay+0x1c>
    stat = osErrorISR;
 8011d40:	f06f 0305 	mvn.w	r3, #5
 8011d44:	60fb      	str	r3, [r7, #12]
 8011d46:	e007      	b.n	8011d58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	2b00      	cmp	r3, #0
 8011d50:	d002      	beq.n	8011d58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011d52:	6878      	ldr	r0, [r7, #4]
 8011d54:	f001 fb54 	bl	8013400 <vTaskDelay>
    }
  }

  return (stat);
 8011d58:	68fb      	ldr	r3, [r7, #12]
}
 8011d5a:	4618      	mov	r0, r3
 8011d5c:	3710      	adds	r7, #16
 8011d5e:	46bd      	mov	sp, r7
 8011d60:	bd80      	pop	{r7, pc}

08011d62 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8011d62:	b580      	push	{r7, lr}
 8011d64:	b084      	sub	sp, #16
 8011d66:	af00      	add	r7, sp, #0
 8011d68:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8011d6a:	6878      	ldr	r0, [r7, #4]
 8011d6c:	f002 fccd 	bl	801470a <pvTimerGetTimerID>
 8011d70:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d005      	beq.n	8011d84 <TimerCallback+0x22>
    callb->func (callb->arg);
 8011d78:	68fb      	ldr	r3, [r7, #12]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	68fa      	ldr	r2, [r7, #12]
 8011d7e:	6852      	ldr	r2, [r2, #4]
 8011d80:	4610      	mov	r0, r2
 8011d82:	4798      	blx	r3
  }
}
 8011d84:	bf00      	nop
 8011d86:	3710      	adds	r7, #16
 8011d88:	46bd      	mov	sp, r7
 8011d8a:	bd80      	pop	{r7, pc}

08011d8c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b08c      	sub	sp, #48	; 0x30
 8011d90:	af02      	add	r7, sp, #8
 8011d92:	60f8      	str	r0, [r7, #12]
 8011d94:	607a      	str	r2, [r7, #4]
 8011d96:	603b      	str	r3, [r7, #0]
 8011d98:	460b      	mov	r3, r1
 8011d9a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011da0:	f3ef 8305 	mrs	r3, IPSR
 8011da4:	613b      	str	r3, [r7, #16]
  return(result);
 8011da6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8011da8:	2b00      	cmp	r3, #0
 8011daa:	d163      	bne.n	8011e74 <osTimerNew+0xe8>
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d060      	beq.n	8011e74 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8011db2:	2008      	movs	r0, #8
 8011db4:	f002 fea8 	bl	8014b08 <pvPortMalloc>
 8011db8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8011dba:	697b      	ldr	r3, [r7, #20]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d059      	beq.n	8011e74 <osTimerNew+0xe8>
      callb->func = func;
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	68fa      	ldr	r2, [r7, #12]
 8011dc4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8011dc6:	697b      	ldr	r3, [r7, #20]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8011dcc:	7afb      	ldrb	r3, [r7, #11]
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d102      	bne.n	8011dd8 <osTimerNew+0x4c>
        reload = pdFALSE;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	61fb      	str	r3, [r7, #28]
 8011dd6:	e001      	b.n	8011ddc <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8011dd8:	2301      	movs	r3, #1
 8011dda:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8011ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8011de0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d01c      	beq.n	8011e26 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8011dec:	683b      	ldr	r3, [r7, #0]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d002      	beq.n	8011dfa <osTimerNew+0x6e>
          name = attr->name;
 8011df4:	683b      	ldr	r3, [r7, #0]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8011dfa:	683b      	ldr	r3, [r7, #0]
 8011dfc:	689b      	ldr	r3, [r3, #8]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d006      	beq.n	8011e10 <osTimerNew+0x84>
 8011e02:	683b      	ldr	r3, [r7, #0]
 8011e04:	68db      	ldr	r3, [r3, #12]
 8011e06:	2b2b      	cmp	r3, #43	; 0x2b
 8011e08:	d902      	bls.n	8011e10 <osTimerNew+0x84>
          mem = 1;
 8011e0a:	2301      	movs	r3, #1
 8011e0c:	61bb      	str	r3, [r7, #24]
 8011e0e:	e00c      	b.n	8011e2a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011e10:	683b      	ldr	r3, [r7, #0]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d108      	bne.n	8011e2a <osTimerNew+0x9e>
 8011e18:	683b      	ldr	r3, [r7, #0]
 8011e1a:	68db      	ldr	r3, [r3, #12]
 8011e1c:	2b00      	cmp	r3, #0
 8011e1e:	d104      	bne.n	8011e2a <osTimerNew+0x9e>
            mem = 0;
 8011e20:	2300      	movs	r3, #0
 8011e22:	61bb      	str	r3, [r7, #24]
 8011e24:	e001      	b.n	8011e2a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8011e26:	2300      	movs	r3, #0
 8011e28:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8011e2a:	69bb      	ldr	r3, [r7, #24]
 8011e2c:	2b01      	cmp	r3, #1
 8011e2e:	d10c      	bne.n	8011e4a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8011e30:	683b      	ldr	r3, [r7, #0]
 8011e32:	689b      	ldr	r3, [r3, #8]
 8011e34:	9301      	str	r3, [sp, #4]
 8011e36:	4b12      	ldr	r3, [pc, #72]	; (8011e80 <osTimerNew+0xf4>)
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	697b      	ldr	r3, [r7, #20]
 8011e3c:	69fa      	ldr	r2, [r7, #28]
 8011e3e:	2101      	movs	r1, #1
 8011e40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e42:	f002 f912 	bl	801406a <xTimerCreateStatic>
 8011e46:	6238      	str	r0, [r7, #32]
 8011e48:	e00b      	b.n	8011e62 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8011e4a:	69bb      	ldr	r3, [r7, #24]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d108      	bne.n	8011e62 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8011e50:	4b0b      	ldr	r3, [pc, #44]	; (8011e80 <osTimerNew+0xf4>)
 8011e52:	9300      	str	r3, [sp, #0]
 8011e54:	697b      	ldr	r3, [r7, #20]
 8011e56:	69fa      	ldr	r2, [r7, #28]
 8011e58:	2101      	movs	r1, #1
 8011e5a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e5c:	f002 f8e4 	bl	8014028 <xTimerCreate>
 8011e60:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d105      	bne.n	8011e74 <osTimerNew+0xe8>
 8011e68:	697b      	ldr	r3, [r7, #20]
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	d002      	beq.n	8011e74 <osTimerNew+0xe8>
        vPortFree (callb);
 8011e6e:	6978      	ldr	r0, [r7, #20]
 8011e70:	f002 fefe 	bl	8014c70 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8011e74:	6a3b      	ldr	r3, [r7, #32]
}
 8011e76:	4618      	mov	r0, r3
 8011e78:	3728      	adds	r7, #40	; 0x28
 8011e7a:	46bd      	mov	sp, r7
 8011e7c:	bd80      	pop	{r7, pc}
 8011e7e:	bf00      	nop
 8011e80:	08011d63 	.word	0x08011d63

08011e84 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8011e84:	b580      	push	{r7, lr}
 8011e86:	b088      	sub	sp, #32
 8011e88:	af02      	add	r7, sp, #8
 8011e8a:	6078      	str	r0, [r7, #4]
 8011e8c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e92:	f3ef 8305 	mrs	r3, IPSR
 8011e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e98:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d003      	beq.n	8011ea6 <osTimerStart+0x22>
    stat = osErrorISR;
 8011e9e:	f06f 0305 	mvn.w	r3, #5
 8011ea2:	617b      	str	r3, [r7, #20]
 8011ea4:	e017      	b.n	8011ed6 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8011ea6:	693b      	ldr	r3, [r7, #16]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d103      	bne.n	8011eb4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8011eac:	f06f 0303 	mvn.w	r3, #3
 8011eb0:	617b      	str	r3, [r7, #20]
 8011eb2:	e010      	b.n	8011ed6 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	9300      	str	r3, [sp, #0]
 8011eb8:	2300      	movs	r3, #0
 8011eba:	683a      	ldr	r2, [r7, #0]
 8011ebc:	2104      	movs	r1, #4
 8011ebe:	6938      	ldr	r0, [r7, #16]
 8011ec0:	f002 f934 	bl	801412c <xTimerGenericCommand>
 8011ec4:	4603      	mov	r3, r0
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d102      	bne.n	8011ed0 <osTimerStart+0x4c>
      stat = osOK;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	617b      	str	r3, [r7, #20]
 8011ece:	e002      	b.n	8011ed6 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8011ed0:	f06f 0302 	mvn.w	r3, #2
 8011ed4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011ed6:	697b      	ldr	r3, [r7, #20]
}
 8011ed8:	4618      	mov	r0, r3
 8011eda:	3718      	adds	r7, #24
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b088      	sub	sp, #32
 8011ee4:	af02      	add	r7, sp, #8
 8011ee6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011eec:	f3ef 8305 	mrs	r3, IPSR
 8011ef0:	60fb      	str	r3, [r7, #12]
  return(result);
 8011ef2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d003      	beq.n	8011f00 <osTimerStop+0x20>
    stat = osErrorISR;
 8011ef8:	f06f 0305 	mvn.w	r3, #5
 8011efc:	617b      	str	r3, [r7, #20]
 8011efe:	e021      	b.n	8011f44 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8011f00:	693b      	ldr	r3, [r7, #16]
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d103      	bne.n	8011f0e <osTimerStop+0x2e>
    stat = osErrorParameter;
 8011f06:	f06f 0303 	mvn.w	r3, #3
 8011f0a:	617b      	str	r3, [r7, #20]
 8011f0c:	e01a      	b.n	8011f44 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8011f0e:	6938      	ldr	r0, [r7, #16]
 8011f10:	f002 fbda 	bl	80146c8 <xTimerIsTimerActive>
 8011f14:	4603      	mov	r3, r0
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d103      	bne.n	8011f22 <osTimerStop+0x42>
      stat = osErrorResource;
 8011f1a:	f06f 0302 	mvn.w	r3, #2
 8011f1e:	617b      	str	r3, [r7, #20]
 8011f20:	e010      	b.n	8011f44 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 8011f22:	2300      	movs	r3, #0
 8011f24:	9300      	str	r3, [sp, #0]
 8011f26:	2300      	movs	r3, #0
 8011f28:	2200      	movs	r2, #0
 8011f2a:	2103      	movs	r1, #3
 8011f2c:	6938      	ldr	r0, [r7, #16]
 8011f2e:	f002 f8fd 	bl	801412c <xTimerGenericCommand>
 8011f32:	4603      	mov	r3, r0
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d102      	bne.n	8011f3e <osTimerStop+0x5e>
        stat = osOK;
 8011f38:	2300      	movs	r3, #0
 8011f3a:	617b      	str	r3, [r7, #20]
 8011f3c:	e002      	b.n	8011f44 <osTimerStop+0x64>
      } else {
        stat = osError;
 8011f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8011f42:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011f44:	697b      	ldr	r3, [r7, #20]
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3718      	adds	r7, #24
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	bd80      	pop	{r7, pc}

08011f4e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011f4e:	b580      	push	{r7, lr}
 8011f50:	b08a      	sub	sp, #40	; 0x28
 8011f52:	af02      	add	r7, sp, #8
 8011f54:	60f8      	str	r0, [r7, #12]
 8011f56:	60b9      	str	r1, [r7, #8]
 8011f58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f5e:	f3ef 8305 	mrs	r3, IPSR
 8011f62:	613b      	str	r3, [r7, #16]
  return(result);
 8011f64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d175      	bne.n	8012056 <osSemaphoreNew+0x108>
 8011f6a:	68fb      	ldr	r3, [r7, #12]
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d072      	beq.n	8012056 <osSemaphoreNew+0x108>
 8011f70:	68ba      	ldr	r2, [r7, #8]
 8011f72:	68fb      	ldr	r3, [r7, #12]
 8011f74:	429a      	cmp	r2, r3
 8011f76:	d86e      	bhi.n	8012056 <osSemaphoreNew+0x108>
    mem = -1;
 8011f78:	f04f 33ff 	mov.w	r3, #4294967295
 8011f7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d015      	beq.n	8011fb0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	689b      	ldr	r3, [r3, #8]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d006      	beq.n	8011f9a <osSemaphoreNew+0x4c>
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	2b4f      	cmp	r3, #79	; 0x4f
 8011f92:	d902      	bls.n	8011f9a <osSemaphoreNew+0x4c>
        mem = 1;
 8011f94:	2301      	movs	r3, #1
 8011f96:	61bb      	str	r3, [r7, #24]
 8011f98:	e00c      	b.n	8011fb4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	689b      	ldr	r3, [r3, #8]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d108      	bne.n	8011fb4 <osSemaphoreNew+0x66>
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	68db      	ldr	r3, [r3, #12]
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d104      	bne.n	8011fb4 <osSemaphoreNew+0x66>
          mem = 0;
 8011faa:	2300      	movs	r3, #0
 8011fac:	61bb      	str	r3, [r7, #24]
 8011fae:	e001      	b.n	8011fb4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011fb0:	2300      	movs	r3, #0
 8011fb2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011fb4:	69bb      	ldr	r3, [r7, #24]
 8011fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fba:	d04c      	beq.n	8012056 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	2b01      	cmp	r3, #1
 8011fc0:	d128      	bne.n	8012014 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d10a      	bne.n	8011fde <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	689b      	ldr	r3, [r3, #8]
 8011fcc:	2203      	movs	r2, #3
 8011fce:	9200      	str	r2, [sp, #0]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	2100      	movs	r1, #0
 8011fd4:	2001      	movs	r0, #1
 8011fd6:	f000 fa35 	bl	8012444 <xQueueGenericCreateStatic>
 8011fda:	61f8      	str	r0, [r7, #28]
 8011fdc:	e005      	b.n	8011fea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011fde:	2203      	movs	r2, #3
 8011fe0:	2100      	movs	r1, #0
 8011fe2:	2001      	movs	r0, #1
 8011fe4:	f000 fa7e 	bl	80124e4 <xQueueGenericCreate>
 8011fe8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011fea:	69fb      	ldr	r3, [r7, #28]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d022      	beq.n	8012036 <osSemaphoreNew+0xe8>
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d01f      	beq.n	8012036 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011ff6:	2300      	movs	r3, #0
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2100      	movs	r1, #0
 8011ffc:	69f8      	ldr	r0, [r7, #28]
 8011ffe:	f000 fb10 	bl	8012622 <xQueueGenericSend>
 8012002:	4603      	mov	r3, r0
 8012004:	2b01      	cmp	r3, #1
 8012006:	d016      	beq.n	8012036 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8012008:	69f8      	ldr	r0, [r7, #28]
 801200a:	f000 fe9b 	bl	8012d44 <vQueueDelete>
            hSemaphore = NULL;
 801200e:	2300      	movs	r3, #0
 8012010:	61fb      	str	r3, [r7, #28]
 8012012:	e010      	b.n	8012036 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8012014:	69bb      	ldr	r3, [r7, #24]
 8012016:	2b01      	cmp	r3, #1
 8012018:	d108      	bne.n	801202c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	689b      	ldr	r3, [r3, #8]
 801201e:	461a      	mov	r2, r3
 8012020:	68b9      	ldr	r1, [r7, #8]
 8012022:	68f8      	ldr	r0, [r7, #12]
 8012024:	f000 fab3 	bl	801258e <xQueueCreateCountingSemaphoreStatic>
 8012028:	61f8      	str	r0, [r7, #28]
 801202a:	e004      	b.n	8012036 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 801202c:	68b9      	ldr	r1, [r7, #8]
 801202e:	68f8      	ldr	r0, [r7, #12]
 8012030:	f000 fad4 	bl	80125dc <xQueueCreateCountingSemaphore>
 8012034:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8012036:	69fb      	ldr	r3, [r7, #28]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d00c      	beq.n	8012056 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d003      	beq.n	801204a <osSemaphoreNew+0xfc>
          name = attr->name;
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	617b      	str	r3, [r7, #20]
 8012048:	e001      	b.n	801204e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801204a:	2300      	movs	r3, #0
 801204c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 801204e:	6979      	ldr	r1, [r7, #20]
 8012050:	69f8      	ldr	r0, [r7, #28]
 8012052:	f000 ffbb 	bl	8012fcc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8012056:	69fb      	ldr	r3, [r7, #28]
}
 8012058:	4618      	mov	r0, r3
 801205a:	3720      	adds	r7, #32
 801205c:	46bd      	mov	sp, r7
 801205e:	bd80      	pop	{r7, pc}

08012060 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012060:	b580      	push	{r7, lr}
 8012062:	b086      	sub	sp, #24
 8012064:	af00      	add	r7, sp, #0
 8012066:	6078      	str	r0, [r7, #4]
 8012068:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801206e:	2300      	movs	r3, #0
 8012070:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012072:	693b      	ldr	r3, [r7, #16]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d103      	bne.n	8012080 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8012078:	f06f 0303 	mvn.w	r3, #3
 801207c:	617b      	str	r3, [r7, #20]
 801207e:	e035      	b.n	80120ec <osSemaphoreAcquire+0x8c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012080:	f3ef 8305 	mrs	r3, IPSR
 8012084:	60fb      	str	r3, [r7, #12]
  return(result);
 8012086:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012088:	2b00      	cmp	r3, #0
 801208a:	d01e      	beq.n	80120ca <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 801208c:	683b      	ldr	r3, [r7, #0]
 801208e:	2b00      	cmp	r3, #0
 8012090:	d003      	beq.n	801209a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012092:	f06f 0303 	mvn.w	r3, #3
 8012096:	617b      	str	r3, [r7, #20]
 8012098:	e028      	b.n	80120ec <osSemaphoreAcquire+0x8c>
    }
    else {
      yield = pdFALSE;
 801209a:	2300      	movs	r3, #0
 801209c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 801209e:	f107 0308 	add.w	r3, r7, #8
 80120a2:	461a      	mov	r2, r3
 80120a4:	2100      	movs	r1, #0
 80120a6:	6938      	ldr	r0, [r7, #16]
 80120a8:	f000 fdee 	bl	8012c88 <xQueueReceiveFromISR>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b01      	cmp	r3, #1
 80120b0:	d003      	beq.n	80120ba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80120b2:	f06f 0302 	mvn.w	r3, #2
 80120b6:	617b      	str	r3, [r7, #20]
 80120b8:	e018      	b.n	80120ec <osSemaphoreAcquire+0x8c>
      } else {
        portYIELD_FROM_ISR (yield);
 80120ba:	68bb      	ldr	r3, [r7, #8]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d015      	beq.n	80120ec <osSemaphoreAcquire+0x8c>
 80120c0:	4b0d      	ldr	r3, [pc, #52]	; (80120f8 <osSemaphoreAcquire+0x98>)
 80120c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120c6:	601a      	str	r2, [r3, #0]
 80120c8:	e010      	b.n	80120ec <osSemaphoreAcquire+0x8c>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80120ca:	6839      	ldr	r1, [r7, #0]
 80120cc:	6938      	ldr	r0, [r7, #16]
 80120ce:	f000 fcfe 	bl	8012ace <xQueueSemaphoreTake>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b01      	cmp	r3, #1
 80120d6:	d009      	beq.n	80120ec <osSemaphoreAcquire+0x8c>
      if (timeout != 0U) {
 80120d8:	683b      	ldr	r3, [r7, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	d003      	beq.n	80120e6 <osSemaphoreAcquire+0x86>
        stat = osErrorTimeout;
 80120de:	f06f 0301 	mvn.w	r3, #1
 80120e2:	617b      	str	r3, [r7, #20]
 80120e4:	e002      	b.n	80120ec <osSemaphoreAcquire+0x8c>
      } else {
        stat = osErrorResource;
 80120e6:	f06f 0302 	mvn.w	r3, #2
 80120ea:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80120ec:	697b      	ldr	r3, [r7, #20]
}
 80120ee:	4618      	mov	r0, r3
 80120f0:	3718      	adds	r7, #24
 80120f2:	46bd      	mov	sp, r7
 80120f4:	bd80      	pop	{r7, pc}
 80120f6:	bf00      	nop
 80120f8:	e000ed04 	.word	0xe000ed04

080120fc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80120fc:	b580      	push	{r7, lr}
 80120fe:	b086      	sub	sp, #24
 8012100:	af00      	add	r7, sp, #0
 8012102:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012108:	2300      	movs	r3, #0
 801210a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d103      	bne.n	801211a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8012112:	f06f 0303 	mvn.w	r3, #3
 8012116:	617b      	str	r3, [r7, #20]
 8012118:	e028      	b.n	801216c <osSemaphoreRelease+0x70>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801211a:	f3ef 8305 	mrs	r3, IPSR
 801211e:	60fb      	str	r3, [r7, #12]
  return(result);
 8012120:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012122:	2b00      	cmp	r3, #0
 8012124:	d016      	beq.n	8012154 <osSemaphoreRelease+0x58>
    yield = pdFALSE;
 8012126:	2300      	movs	r3, #0
 8012128:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801212a:	f107 0308 	add.w	r3, r7, #8
 801212e:	4619      	mov	r1, r3
 8012130:	6938      	ldr	r0, [r7, #16]
 8012132:	f000 fbb0 	bl	8012896 <xQueueGiveFromISR>
 8012136:	4603      	mov	r3, r0
 8012138:	2b01      	cmp	r3, #1
 801213a:	d003      	beq.n	8012144 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 801213c:	f06f 0302 	mvn.w	r3, #2
 8012140:	617b      	str	r3, [r7, #20]
 8012142:	e013      	b.n	801216c <osSemaphoreRelease+0x70>
    } else {
      portYIELD_FROM_ISR (yield);
 8012144:	68bb      	ldr	r3, [r7, #8]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d010      	beq.n	801216c <osSemaphoreRelease+0x70>
 801214a:	4b0b      	ldr	r3, [pc, #44]	; (8012178 <osSemaphoreRelease+0x7c>)
 801214c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012150:	601a      	str	r2, [r3, #0]
 8012152:	e00b      	b.n	801216c <osSemaphoreRelease+0x70>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012154:	2300      	movs	r3, #0
 8012156:	2200      	movs	r2, #0
 8012158:	2100      	movs	r1, #0
 801215a:	6938      	ldr	r0, [r7, #16]
 801215c:	f000 fa61 	bl	8012622 <xQueueGenericSend>
 8012160:	4603      	mov	r3, r0
 8012162:	2b01      	cmp	r3, #1
 8012164:	d002      	beq.n	801216c <osSemaphoreRelease+0x70>
      stat = osErrorResource;
 8012166:	f06f 0302 	mvn.w	r3, #2
 801216a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 801216c:	697b      	ldr	r3, [r7, #20]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3718      	adds	r7, #24
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 801217c:	b580      	push	{r7, lr}
 801217e:	b086      	sub	sp, #24
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012188:	f3ef 8305 	mrs	r3, IPSR
 801218c:	60fb      	str	r3, [r7, #12]
  return(result);
 801218e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012190:	2b00      	cmp	r3, #0
 8012192:	d003      	beq.n	801219c <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012194:	f06f 0305 	mvn.w	r3, #5
 8012198:	617b      	str	r3, [r7, #20]
 801219a:	e00e      	b.n	80121ba <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 801219c:	693b      	ldr	r3, [r7, #16]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d103      	bne.n	80121aa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80121a2:	f06f 0303 	mvn.w	r3, #3
 80121a6:	617b      	str	r3, [r7, #20]
 80121a8:	e007      	b.n	80121ba <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80121aa:	6938      	ldr	r0, [r7, #16]
 80121ac:	f000 ff38 	bl	8013020 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80121b0:	2300      	movs	r3, #0
 80121b2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80121b4:	6938      	ldr	r0, [r7, #16]
 80121b6:	f000 fdc5 	bl	8012d44 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80121ba:	697b      	ldr	r3, [r7, #20]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80121c4:	b480      	push	{r7}
 80121c6:	b085      	sub	sp, #20
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	60f8      	str	r0, [r7, #12]
 80121cc:	60b9      	str	r1, [r7, #8]
 80121ce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	4a07      	ldr	r2, [pc, #28]	; (80121f0 <vApplicationGetIdleTaskMemory+0x2c>)
 80121d4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80121d6:	68bb      	ldr	r3, [r7, #8]
 80121d8:	4a06      	ldr	r2, [pc, #24]	; (80121f4 <vApplicationGetIdleTaskMemory+0x30>)
 80121da:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	2280      	movs	r2, #128	; 0x80
 80121e0:	601a      	str	r2, [r3, #0]
}
 80121e2:	bf00      	nop
 80121e4:	3714      	adds	r7, #20
 80121e6:	46bd      	mov	sp, r7
 80121e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ec:	4770      	bx	lr
 80121ee:	bf00      	nop
 80121f0:	200210c0 	.word	0x200210c0
 80121f4:	20021168 	.word	0x20021168

080121f8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80121f8:	b480      	push	{r7}
 80121fa:	b085      	sub	sp, #20
 80121fc:	af00      	add	r7, sp, #0
 80121fe:	60f8      	str	r0, [r7, #12]
 8012200:	60b9      	str	r1, [r7, #8]
 8012202:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	4a07      	ldr	r2, [pc, #28]	; (8012224 <vApplicationGetTimerTaskMemory+0x2c>)
 8012208:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	4a06      	ldr	r2, [pc, #24]	; (8012228 <vApplicationGetTimerTaskMemory+0x30>)
 801220e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012216:	601a      	str	r2, [r3, #0]
}
 8012218:	bf00      	nop
 801221a:	3714      	adds	r7, #20
 801221c:	46bd      	mov	sp, r7
 801221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012222:	4770      	bx	lr
 8012224:	20021368 	.word	0x20021368
 8012228:	20021410 	.word	0x20021410

0801222c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801222c:	b480      	push	{r7}
 801222e:	b083      	sub	sp, #12
 8012230:	af00      	add	r7, sp, #0
 8012232:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f103 0208 	add.w	r2, r3, #8
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801223e:	687b      	ldr	r3, [r7, #4]
 8012240:	f04f 32ff 	mov.w	r2, #4294967295
 8012244:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	f103 0208 	add.w	r2, r3, #8
 801224c:	687b      	ldr	r3, [r7, #4]
 801224e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	f103 0208 	add.w	r2, r3, #8
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	2200      	movs	r2, #0
 801225e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012260:	bf00      	nop
 8012262:	370c      	adds	r7, #12
 8012264:	46bd      	mov	sp, r7
 8012266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801226a:	4770      	bx	lr

0801226c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801226c:	b480      	push	{r7}
 801226e:	b083      	sub	sp, #12
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2200      	movs	r2, #0
 8012278:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801227a:	bf00      	nop
 801227c:	370c      	adds	r7, #12
 801227e:	46bd      	mov	sp, r7
 8012280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012284:	4770      	bx	lr

08012286 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012286:	b480      	push	{r7}
 8012288:	b085      	sub	sp, #20
 801228a:	af00      	add	r7, sp, #0
 801228c:	6078      	str	r0, [r7, #4]
 801228e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	685b      	ldr	r3, [r3, #4]
 8012294:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	689a      	ldr	r2, [r3, #8]
 80122a0:	683b      	ldr	r3, [r7, #0]
 80122a2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80122a4:	68fb      	ldr	r3, [r7, #12]
 80122a6:	689b      	ldr	r3, [r3, #8]
 80122a8:	683a      	ldr	r2, [r7, #0]
 80122aa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80122ac:	68fb      	ldr	r3, [r7, #12]
 80122ae:	683a      	ldr	r2, [r7, #0]
 80122b0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	687a      	ldr	r2, [r7, #4]
 80122b6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	681b      	ldr	r3, [r3, #0]
 80122bc:	1c5a      	adds	r2, r3, #1
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	601a      	str	r2, [r3, #0]
}
 80122c2:	bf00      	nop
 80122c4:	3714      	adds	r7, #20
 80122c6:	46bd      	mov	sp, r7
 80122c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122cc:	4770      	bx	lr

080122ce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122ce:	b480      	push	{r7}
 80122d0:	b085      	sub	sp, #20
 80122d2:	af00      	add	r7, sp, #0
 80122d4:	6078      	str	r0, [r7, #4]
 80122d6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80122d8:	683b      	ldr	r3, [r7, #0]
 80122da:	681b      	ldr	r3, [r3, #0]
 80122dc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80122de:	68bb      	ldr	r3, [r7, #8]
 80122e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122e4:	d103      	bne.n	80122ee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	691b      	ldr	r3, [r3, #16]
 80122ea:	60fb      	str	r3, [r7, #12]
 80122ec:	e00c      	b.n	8012308 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	3308      	adds	r3, #8
 80122f2:	60fb      	str	r3, [r7, #12]
 80122f4:	e002      	b.n	80122fc <vListInsert+0x2e>
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	685b      	ldr	r3, [r3, #4]
 80122fa:	60fb      	str	r3, [r7, #12]
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	685b      	ldr	r3, [r3, #4]
 8012300:	681b      	ldr	r3, [r3, #0]
 8012302:	68ba      	ldr	r2, [r7, #8]
 8012304:	429a      	cmp	r2, r3
 8012306:	d2f6      	bcs.n	80122f6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	683b      	ldr	r3, [r7, #0]
 801230e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	685b      	ldr	r3, [r3, #4]
 8012314:	683a      	ldr	r2, [r7, #0]
 8012316:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012318:	683b      	ldr	r3, [r7, #0]
 801231a:	68fa      	ldr	r2, [r7, #12]
 801231c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	683a      	ldr	r2, [r7, #0]
 8012322:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012324:	683b      	ldr	r3, [r7, #0]
 8012326:	687a      	ldr	r2, [r7, #4]
 8012328:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	681b      	ldr	r3, [r3, #0]
 801232e:	1c5a      	adds	r2, r3, #1
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	601a      	str	r2, [r3, #0]
}
 8012334:	bf00      	nop
 8012336:	3714      	adds	r7, #20
 8012338:	46bd      	mov	sp, r7
 801233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801233e:	4770      	bx	lr

08012340 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012340:	b480      	push	{r7}
 8012342:	b085      	sub	sp, #20
 8012344:	af00      	add	r7, sp, #0
 8012346:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	691b      	ldr	r3, [r3, #16]
 801234c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	687a      	ldr	r2, [r7, #4]
 8012354:	6892      	ldr	r2, [r2, #8]
 8012356:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012358:	687b      	ldr	r3, [r7, #4]
 801235a:	689b      	ldr	r3, [r3, #8]
 801235c:	687a      	ldr	r2, [r7, #4]
 801235e:	6852      	ldr	r2, [r2, #4]
 8012360:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012362:	68fb      	ldr	r3, [r7, #12]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	687a      	ldr	r2, [r7, #4]
 8012368:	429a      	cmp	r2, r3
 801236a:	d103      	bne.n	8012374 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	689a      	ldr	r2, [r3, #8]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2200      	movs	r2, #0
 8012378:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	1e5a      	subs	r2, r3, #1
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	681b      	ldr	r3, [r3, #0]
}
 8012388:	4618      	mov	r0, r3
 801238a:	3714      	adds	r7, #20
 801238c:	46bd      	mov	sp, r7
 801238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012392:	4770      	bx	lr

08012394 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012394:	b580      	push	{r7, lr}
 8012396:	b084      	sub	sp, #16
 8012398:	af00      	add	r7, sp, #0
 801239a:	6078      	str	r0, [r7, #4]
 801239c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80123a2:	68fb      	ldr	r3, [r7, #12]
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d102      	bne.n	80123ae <xQueueGenericReset+0x1a>
 80123a8:	f002 fb4e 	bl	8014a48 <ulSetInterruptMask>
 80123ac:	e7fe      	b.n	80123ac <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 80123ae:	f002 fa15 	bl	80147dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123b2:	68fb      	ldr	r3, [r7, #12]
 80123b4:	681a      	ldr	r2, [r3, #0]
 80123b6:	68fb      	ldr	r3, [r7, #12]
 80123b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123ba:	68f9      	ldr	r1, [r7, #12]
 80123bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80123be:	fb01 f303 	mul.w	r3, r1, r3
 80123c2:	441a      	add	r2, r3
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	2200      	movs	r2, #0
 80123cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	68fb      	ldr	r3, [r7, #12]
 80123d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	681a      	ldr	r2, [r3, #0]
 80123da:	68fb      	ldr	r3, [r7, #12]
 80123dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80123de:	3b01      	subs	r3, #1
 80123e0:	68f9      	ldr	r1, [r7, #12]
 80123e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80123e4:	fb01 f303 	mul.w	r3, r1, r3
 80123e8:	441a      	add	r2, r3
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	22ff      	movs	r2, #255	; 0xff
 80123f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	22ff      	movs	r2, #255	; 0xff
 80123fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80123fe:	683b      	ldr	r3, [r7, #0]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d10e      	bne.n	8012422 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	691b      	ldr	r3, [r3, #16]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d014      	beq.n	8012436 <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	3310      	adds	r3, #16
 8012410:	4618      	mov	r0, r3
 8012412:	f001 fa71 	bl	80138f8 <xTaskRemoveFromEventList>
 8012416:	4603      	mov	r3, r0
 8012418:	2b00      	cmp	r3, #0
 801241a:	d00c      	beq.n	8012436 <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801241c:	f002 f9cc 	bl	80147b8 <vPortYield>
 8012420:	e009      	b.n	8012436 <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	3310      	adds	r3, #16
 8012426:	4618      	mov	r0, r3
 8012428:	f7ff ff00 	bl	801222c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	3324      	adds	r3, #36	; 0x24
 8012430:	4618      	mov	r0, r3
 8012432:	f7ff fefb 	bl	801222c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012436:	f002 f9e3 	bl	8014800 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801243a:	2301      	movs	r3, #1
}
 801243c:	4618      	mov	r0, r3
 801243e:	3710      	adds	r7, #16
 8012440:	46bd      	mov	sp, r7
 8012442:	bd80      	pop	{r7, pc}

08012444 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012444:	b580      	push	{r7, lr}
 8012446:	b088      	sub	sp, #32
 8012448:	af02      	add	r7, sp, #8
 801244a:	60f8      	str	r0, [r7, #12]
 801244c:	60b9      	str	r1, [r7, #8]
 801244e:	607a      	str	r2, [r7, #4]
 8012450:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2b00      	cmp	r3, #0
 8012456:	d102      	bne.n	801245e <xQueueGenericCreateStatic+0x1a>
 8012458:	f002 faf6 	bl	8014a48 <ulSetInterruptMask>
 801245c:	e7fe      	b.n	801245c <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d102      	bne.n	801246a <xQueueGenericCreateStatic+0x26>
 8012464:	f002 faf0 	bl	8014a48 <ulSetInterruptMask>
 8012468:	e7fe      	b.n	8012468 <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	2b00      	cmp	r3, #0
 801246e:	d002      	beq.n	8012476 <xQueueGenericCreateStatic+0x32>
 8012470:	68bb      	ldr	r3, [r7, #8]
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <xQueueGenericCreateStatic+0x36>
 8012476:	2301      	movs	r3, #1
 8012478:	e000      	b.n	801247c <xQueueGenericCreateStatic+0x38>
 801247a:	2300      	movs	r3, #0
 801247c:	2b00      	cmp	r3, #0
 801247e:	d102      	bne.n	8012486 <xQueueGenericCreateStatic+0x42>
 8012480:	f002 fae2 	bl	8014a48 <ulSetInterruptMask>
 8012484:	e7fe      	b.n	8012484 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d102      	bne.n	8012492 <xQueueGenericCreateStatic+0x4e>
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d101      	bne.n	8012496 <xQueueGenericCreateStatic+0x52>
 8012492:	2301      	movs	r3, #1
 8012494:	e000      	b.n	8012498 <xQueueGenericCreateStatic+0x54>
 8012496:	2300      	movs	r3, #0
 8012498:	2b00      	cmp	r3, #0
 801249a:	d102      	bne.n	80124a2 <xQueueGenericCreateStatic+0x5e>
 801249c:	f002 fad4 	bl	8014a48 <ulSetInterruptMask>
 80124a0:	e7fe      	b.n	80124a0 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80124a2:	2350      	movs	r3, #80	; 0x50
 80124a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 80124a6:	693b      	ldr	r3, [r7, #16]
 80124a8:	2b50      	cmp	r3, #80	; 0x50
 80124aa:	d002      	beq.n	80124b2 <xQueueGenericCreateStatic+0x6e>
 80124ac:	f002 facc 	bl	8014a48 <ulSetInterruptMask>
 80124b0:	e7fe      	b.n	80124b0 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80124b2:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80124b4:	683b      	ldr	r3, [r7, #0]
 80124b6:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d00d      	beq.n	80124da <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80124be:	697b      	ldr	r3, [r7, #20]
 80124c0:	2201      	movs	r2, #1
 80124c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80124c6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	9300      	str	r3, [sp, #0]
 80124ce:	4613      	mov	r3, r2
 80124d0:	687a      	ldr	r2, [r7, #4]
 80124d2:	68b9      	ldr	r1, [r7, #8]
 80124d4:	68f8      	ldr	r0, [r7, #12]
 80124d6:	f000 f837 	bl	8012548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80124da:	697b      	ldr	r3, [r7, #20]
	}
 80124dc:	4618      	mov	r0, r3
 80124de:	3718      	adds	r7, #24
 80124e0:	46bd      	mov	sp, r7
 80124e2:	bd80      	pop	{r7, pc}

080124e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80124e4:	b580      	push	{r7, lr}
 80124e6:	b08a      	sub	sp, #40	; 0x28
 80124e8:	af02      	add	r7, sp, #8
 80124ea:	60f8      	str	r0, [r7, #12]
 80124ec:	60b9      	str	r1, [r7, #8]
 80124ee:	4613      	mov	r3, r2
 80124f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124f2:	68fb      	ldr	r3, [r7, #12]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d102      	bne.n	80124fe <xQueueGenericCreate+0x1a>
 80124f8:	f002 faa6 	bl	8014a48 <ulSetInterruptMask>
 80124fc:	e7fe      	b.n	80124fc <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	68ba      	ldr	r2, [r7, #8]
 8012502:	fb02 f303 	mul.w	r3, r2, r3
 8012506:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012508:	69fb      	ldr	r3, [r7, #28]
 801250a:	3350      	adds	r3, #80	; 0x50
 801250c:	4618      	mov	r0, r3
 801250e:	f002 fafb 	bl	8014b08 <pvPortMalloc>
 8012512:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012514:	69bb      	ldr	r3, [r7, #24]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d011      	beq.n	801253e <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801251a:	69bb      	ldr	r3, [r7, #24]
 801251c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801251e:	697b      	ldr	r3, [r7, #20]
 8012520:	3350      	adds	r3, #80	; 0x50
 8012522:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	2200      	movs	r2, #0
 8012528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801252c:	79fa      	ldrb	r2, [r7, #7]
 801252e:	69bb      	ldr	r3, [r7, #24]
 8012530:	9300      	str	r3, [sp, #0]
 8012532:	4613      	mov	r3, r2
 8012534:	697a      	ldr	r2, [r7, #20]
 8012536:	68b9      	ldr	r1, [r7, #8]
 8012538:	68f8      	ldr	r0, [r7, #12]
 801253a:	f000 f805 	bl	8012548 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801253e:	69bb      	ldr	r3, [r7, #24]
	}
 8012540:	4618      	mov	r0, r3
 8012542:	3720      	adds	r7, #32
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}

08012548 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b084      	sub	sp, #16
 801254c:	af00      	add	r7, sp, #0
 801254e:	60f8      	str	r0, [r7, #12]
 8012550:	60b9      	str	r1, [r7, #8]
 8012552:	607a      	str	r2, [r7, #4]
 8012554:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	2b00      	cmp	r3, #0
 801255a:	d103      	bne.n	8012564 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801255c:	69bb      	ldr	r3, [r7, #24]
 801255e:	69ba      	ldr	r2, [r7, #24]
 8012560:	601a      	str	r2, [r3, #0]
 8012562:	e002      	b.n	801256a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012564:	69bb      	ldr	r3, [r7, #24]
 8012566:	687a      	ldr	r2, [r7, #4]
 8012568:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	68fa      	ldr	r2, [r7, #12]
 801256e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012570:	69bb      	ldr	r3, [r7, #24]
 8012572:	68ba      	ldr	r2, [r7, #8]
 8012574:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8012576:	2101      	movs	r1, #1
 8012578:	69b8      	ldr	r0, [r7, #24]
 801257a:	f7ff ff0b 	bl	8012394 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801257e:	69bb      	ldr	r3, [r7, #24]
 8012580:	78fa      	ldrb	r2, [r7, #3]
 8012582:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8012586:	bf00      	nop
 8012588:	3710      	adds	r7, #16
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}

0801258e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801258e:	b580      	push	{r7, lr}
 8012590:	b088      	sub	sp, #32
 8012592:	af02      	add	r7, sp, #8
 8012594:	60f8      	str	r0, [r7, #12]
 8012596:	60b9      	str	r1, [r7, #8]
 8012598:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801259a:	68fb      	ldr	r3, [r7, #12]
 801259c:	2b00      	cmp	r3, #0
 801259e:	d102      	bne.n	80125a6 <xQueueCreateCountingSemaphoreStatic+0x18>
 80125a0:	f002 fa52 	bl	8014a48 <ulSetInterruptMask>
 80125a4:	e7fe      	b.n	80125a4 <xQueueCreateCountingSemaphoreStatic+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 80125a6:	68ba      	ldr	r2, [r7, #8]
 80125a8:	68fb      	ldr	r3, [r7, #12]
 80125aa:	429a      	cmp	r2, r3
 80125ac:	d902      	bls.n	80125b4 <xQueueCreateCountingSemaphoreStatic+0x26>
 80125ae:	f002 fa4b 	bl	8014a48 <ulSetInterruptMask>
 80125b2:	e7fe      	b.n	80125b2 <xQueueCreateCountingSemaphoreStatic+0x24>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80125b4:	2302      	movs	r3, #2
 80125b6:	9300      	str	r3, [sp, #0]
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2200      	movs	r2, #0
 80125bc:	2100      	movs	r1, #0
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f7ff ff40 	bl	8012444 <xQueueGenericCreateStatic>
 80125c4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	2b00      	cmp	r3, #0
 80125ca:	d002      	beq.n	80125d2 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	68ba      	ldr	r2, [r7, #8]
 80125d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80125d2:	697b      	ldr	r3, [r7, #20]
	}
 80125d4:	4618      	mov	r0, r3
 80125d6:	3718      	adds	r7, #24
 80125d8:	46bd      	mov	sp, r7
 80125da:	bd80      	pop	{r7, pc}

080125dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b084      	sub	sp, #16
 80125e0:	af00      	add	r7, sp, #0
 80125e2:	6078      	str	r0, [r7, #4]
 80125e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d102      	bne.n	80125f2 <xQueueCreateCountingSemaphore+0x16>
 80125ec:	f002 fa2c 	bl	8014a48 <ulSetInterruptMask>
 80125f0:	e7fe      	b.n	80125f0 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 80125f2:	683a      	ldr	r2, [r7, #0]
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	429a      	cmp	r2, r3
 80125f8:	d902      	bls.n	8012600 <xQueueCreateCountingSemaphore+0x24>
 80125fa:	f002 fa25 	bl	8014a48 <ulSetInterruptMask>
 80125fe:	e7fe      	b.n	80125fe <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012600:	2202      	movs	r2, #2
 8012602:	2100      	movs	r1, #0
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7ff ff6d 	bl	80124e4 <xQueueGenericCreate>
 801260a:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	2b00      	cmp	r3, #0
 8012610:	d002      	beq.n	8012618 <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012612:	68fb      	ldr	r3, [r7, #12]
 8012614:	683a      	ldr	r2, [r7, #0]
 8012616:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8012618:	68fb      	ldr	r3, [r7, #12]
	}
 801261a:	4618      	mov	r0, r3
 801261c:	3710      	adds	r7, #16
 801261e:	46bd      	mov	sp, r7
 8012620:	bd80      	pop	{r7, pc}

08012622 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012622:	b580      	push	{r7, lr}
 8012624:	b08a      	sub	sp, #40	; 0x28
 8012626:	af00      	add	r7, sp, #0
 8012628:	60f8      	str	r0, [r7, #12]
 801262a:	60b9      	str	r1, [r7, #8]
 801262c:	607a      	str	r2, [r7, #4]
 801262e:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012630:	2300      	movs	r3, #0
 8012632:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8012638:	6a3b      	ldr	r3, [r7, #32]
 801263a:	2b00      	cmp	r3, #0
 801263c:	d102      	bne.n	8012644 <xQueueGenericSend+0x22>
 801263e:	f002 fa03 	bl	8014a48 <ulSetInterruptMask>
 8012642:	e7fe      	b.n	8012642 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012644:	68bb      	ldr	r3, [r7, #8]
 8012646:	2b00      	cmp	r3, #0
 8012648:	d103      	bne.n	8012652 <xQueueGenericSend+0x30>
 801264a:	6a3b      	ldr	r3, [r7, #32]
 801264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801264e:	2b00      	cmp	r3, #0
 8012650:	d101      	bne.n	8012656 <xQueueGenericSend+0x34>
 8012652:	2301      	movs	r3, #1
 8012654:	e000      	b.n	8012658 <xQueueGenericSend+0x36>
 8012656:	2300      	movs	r3, #0
 8012658:	2b00      	cmp	r3, #0
 801265a:	d102      	bne.n	8012662 <xQueueGenericSend+0x40>
 801265c:	f002 f9f4 	bl	8014a48 <ulSetInterruptMask>
 8012660:	e7fe      	b.n	8012660 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8012662:	683b      	ldr	r3, [r7, #0]
 8012664:	2b02      	cmp	r3, #2
 8012666:	d103      	bne.n	8012670 <xQueueGenericSend+0x4e>
 8012668:	6a3b      	ldr	r3, [r7, #32]
 801266a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801266c:	2b01      	cmp	r3, #1
 801266e:	d101      	bne.n	8012674 <xQueueGenericSend+0x52>
 8012670:	2301      	movs	r3, #1
 8012672:	e000      	b.n	8012676 <xQueueGenericSend+0x54>
 8012674:	2300      	movs	r3, #0
 8012676:	2b00      	cmp	r3, #0
 8012678:	d102      	bne.n	8012680 <xQueueGenericSend+0x5e>
 801267a:	f002 f9e5 	bl	8014a48 <ulSetInterruptMask>
 801267e:	e7fe      	b.n	801267e <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012680:	f001 fad4 	bl	8013c2c <xTaskGetSchedulerState>
 8012684:	4603      	mov	r3, r0
 8012686:	2b00      	cmp	r3, #0
 8012688:	d102      	bne.n	8012690 <xQueueGenericSend+0x6e>
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d101      	bne.n	8012694 <xQueueGenericSend+0x72>
 8012690:	2301      	movs	r3, #1
 8012692:	e000      	b.n	8012696 <xQueueGenericSend+0x74>
 8012694:	2300      	movs	r3, #0
 8012696:	2b00      	cmp	r3, #0
 8012698:	d102      	bne.n	80126a0 <xQueueGenericSend+0x7e>
 801269a:	f002 f9d5 	bl	8014a48 <ulSetInterruptMask>
 801269e:	e7fe      	b.n	801269e <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80126a0:	f002 f89c 	bl	80147dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80126a4:	6a3b      	ldr	r3, [r7, #32]
 80126a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80126a8:	6a3b      	ldr	r3, [r7, #32]
 80126aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80126ac:	429a      	cmp	r2, r3
 80126ae:	d302      	bcc.n	80126b6 <xQueueGenericSend+0x94>
 80126b0:	683b      	ldr	r3, [r7, #0]
 80126b2:	2b02      	cmp	r3, #2
 80126b4:	d11d      	bne.n	80126f2 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80126b6:	683a      	ldr	r2, [r7, #0]
 80126b8:	68b9      	ldr	r1, [r7, #8]
 80126ba:	6a38      	ldr	r0, [r7, #32]
 80126bc:	f000 fb75 	bl	8012daa <prvCopyDataToQueue>
 80126c0:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80126c2:	6a3b      	ldr	r3, [r7, #32]
 80126c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126c6:	2b00      	cmp	r3, #0
 80126c8:	d00a      	beq.n	80126e0 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80126ca:	6a3b      	ldr	r3, [r7, #32]
 80126cc:	3324      	adds	r3, #36	; 0x24
 80126ce:	4618      	mov	r0, r3
 80126d0:	f001 f912 	bl	80138f8 <xTaskRemoveFromEventList>
 80126d4:	4603      	mov	r3, r0
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d007      	beq.n	80126ea <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80126da:	f002 f86d 	bl	80147b8 <vPortYield>
 80126de:	e004      	b.n	80126ea <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	2b00      	cmp	r3, #0
 80126e4:	d001      	beq.n	80126ea <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80126e6:	f002 f867 	bl	80147b8 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80126ea:	f002 f889 	bl	8014800 <vPortExitCritical>
				return pdPASS;
 80126ee:	2301      	movs	r3, #1
 80126f0:	e05c      	b.n	80127ac <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d103      	bne.n	8012700 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80126f8:	f002 f882 	bl	8014800 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80126fc:	2300      	movs	r3, #0
 80126fe:	e055      	b.n	80127ac <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012702:	2b00      	cmp	r3, #0
 8012704:	d106      	bne.n	8012714 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012706:	f107 0314 	add.w	r3, r7, #20
 801270a:	4618      	mov	r0, r3
 801270c:	f001 f950 	bl	80139b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012710:	2301      	movs	r3, #1
 8012712:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012714:	f002 f874 	bl	8014800 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012718:	f000 fef6 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801271c:	f002 f85e 	bl	80147dc <vPortEnterCritical>
 8012720:	6a3b      	ldr	r3, [r7, #32]
 8012722:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012726:	b25b      	sxtb	r3, r3
 8012728:	f1b3 3fff 	cmp.w	r3, #4294967295
 801272c:	d103      	bne.n	8012736 <xQueueGenericSend+0x114>
 801272e:	6a3b      	ldr	r3, [r7, #32]
 8012730:	2200      	movs	r2, #0
 8012732:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012736:	6a3b      	ldr	r3, [r7, #32]
 8012738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801273c:	b25b      	sxtb	r3, r3
 801273e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012742:	d103      	bne.n	801274c <xQueueGenericSend+0x12a>
 8012744:	6a3b      	ldr	r3, [r7, #32]
 8012746:	2200      	movs	r2, #0
 8012748:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801274c:	f002 f858 	bl	8014800 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012750:	1d3a      	adds	r2, r7, #4
 8012752:	f107 0314 	add.w	r3, r7, #20
 8012756:	4611      	mov	r1, r2
 8012758:	4618      	mov	r0, r3
 801275a:	f001 f93f 	bl	80139dc <xTaskCheckForTimeOut>
 801275e:	4603      	mov	r3, r0
 8012760:	2b00      	cmp	r3, #0
 8012762:	d11d      	bne.n	80127a0 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012764:	6a38      	ldr	r0, [r7, #32]
 8012766:	f000 fc18 	bl	8012f9a <prvIsQueueFull>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d011      	beq.n	8012794 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012770:	6a3b      	ldr	r3, [r7, #32]
 8012772:	3310      	adds	r3, #16
 8012774:	687a      	ldr	r2, [r7, #4]
 8012776:	4611      	mov	r1, r2
 8012778:	4618      	mov	r0, r3
 801277a:	f001 f87d 	bl	8013878 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801277e:	6a38      	ldr	r0, [r7, #32]
 8012780:	f000 fba3 	bl	8012eca <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012784:	f000 fece 	bl	8013524 <xTaskResumeAll>
 8012788:	4603      	mov	r3, r0
 801278a:	2b00      	cmp	r3, #0
 801278c:	d188      	bne.n	80126a0 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 801278e:	f002 f813 	bl	80147b8 <vPortYield>
 8012792:	e785      	b.n	80126a0 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012794:	6a38      	ldr	r0, [r7, #32]
 8012796:	f000 fb98 	bl	8012eca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801279a:	f000 fec3 	bl	8013524 <xTaskResumeAll>
 801279e:	e77f      	b.n	80126a0 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80127a0:	6a38      	ldr	r0, [r7, #32]
 80127a2:	f000 fb92 	bl	8012eca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80127a6:	f000 febd 	bl	8013524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80127aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80127ac:	4618      	mov	r0, r3
 80127ae:	3728      	adds	r7, #40	; 0x28
 80127b0:	46bd      	mov	sp, r7
 80127b2:	bd80      	pop	{r7, pc}

080127b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80127b4:	b580      	push	{r7, lr}
 80127b6:	b08a      	sub	sp, #40	; 0x28
 80127b8:	af00      	add	r7, sp, #0
 80127ba:	60f8      	str	r0, [r7, #12]
 80127bc:	60b9      	str	r1, [r7, #8]
 80127be:	607a      	str	r2, [r7, #4]
 80127c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80127c6:	6a3b      	ldr	r3, [r7, #32]
 80127c8:	2b00      	cmp	r3, #0
 80127ca:	d102      	bne.n	80127d2 <xQueueGenericSendFromISR+0x1e>
 80127cc:	f002 f93c 	bl	8014a48 <ulSetInterruptMask>
 80127d0:	e7fe      	b.n	80127d0 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127d2:	68bb      	ldr	r3, [r7, #8]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d103      	bne.n	80127e0 <xQueueGenericSendFromISR+0x2c>
 80127d8:	6a3b      	ldr	r3, [r7, #32]
 80127da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d101      	bne.n	80127e4 <xQueueGenericSendFromISR+0x30>
 80127e0:	2301      	movs	r3, #1
 80127e2:	e000      	b.n	80127e6 <xQueueGenericSendFromISR+0x32>
 80127e4:	2300      	movs	r3, #0
 80127e6:	2b00      	cmp	r3, #0
 80127e8:	d102      	bne.n	80127f0 <xQueueGenericSendFromISR+0x3c>
 80127ea:	f002 f92d 	bl	8014a48 <ulSetInterruptMask>
 80127ee:	e7fe      	b.n	80127ee <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	2b02      	cmp	r3, #2
 80127f4:	d103      	bne.n	80127fe <xQueueGenericSendFromISR+0x4a>
 80127f6:	6a3b      	ldr	r3, [r7, #32]
 80127f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127fa:	2b01      	cmp	r3, #1
 80127fc:	d101      	bne.n	8012802 <xQueueGenericSendFromISR+0x4e>
 80127fe:	2301      	movs	r3, #1
 8012800:	e000      	b.n	8012804 <xQueueGenericSendFromISR+0x50>
 8012802:	2300      	movs	r3, #0
 8012804:	2b00      	cmp	r3, #0
 8012806:	d102      	bne.n	801280e <xQueueGenericSendFromISR+0x5a>
 8012808:	f002 f91e 	bl	8014a48 <ulSetInterruptMask>
 801280c:	e7fe      	b.n	801280c <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801280e:	f002 f91b 	bl	8014a48 <ulSetInterruptMask>
 8012812:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012814:	6a3b      	ldr	r3, [r7, #32]
 8012816:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012818:	6a3b      	ldr	r3, [r7, #32]
 801281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801281c:	429a      	cmp	r2, r3
 801281e:	d302      	bcc.n	8012826 <xQueueGenericSendFromISR+0x72>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b02      	cmp	r3, #2
 8012824:	d12d      	bne.n	8012882 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012826:	6a3b      	ldr	r3, [r7, #32]
 8012828:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801282c:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 801282e:	6a3b      	ldr	r3, [r7, #32]
 8012830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012832:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012834:	683a      	ldr	r2, [r7, #0]
 8012836:	68b9      	ldr	r1, [r7, #8]
 8012838:	6a38      	ldr	r0, [r7, #32]
 801283a:	f000 fab6 	bl	8012daa <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 801283e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012846:	d112      	bne.n	801286e <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012848:	6a3b      	ldr	r3, [r7, #32]
 801284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284c:	2b00      	cmp	r3, #0
 801284e:	d015      	beq.n	801287c <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012850:	6a3b      	ldr	r3, [r7, #32]
 8012852:	3324      	adds	r3, #36	; 0x24
 8012854:	4618      	mov	r0, r3
 8012856:	f001 f84f 	bl	80138f8 <xTaskRemoveFromEventList>
 801285a:	4603      	mov	r3, r0
 801285c:	2b00      	cmp	r3, #0
 801285e:	d00d      	beq.n	801287c <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00a      	beq.n	801287c <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	2201      	movs	r2, #1
 801286a:	601a      	str	r2, [r3, #0]
 801286c:	e006      	b.n	801287c <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801286e:	7efb      	ldrb	r3, [r7, #27]
 8012870:	3301      	adds	r3, #1
 8012872:	b2db      	uxtb	r3, r3
 8012874:	b25a      	sxtb	r2, r3
 8012876:	6a3b      	ldr	r3, [r7, #32]
 8012878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801287c:	2301      	movs	r3, #1
 801287e:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8012880:	e001      	b.n	8012886 <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012882:	2300      	movs	r3, #0
 8012884:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8012886:	69f8      	ldr	r0, [r7, #28]
 8012888:	f002 f8eb 	bl	8014a62 <vClearInterruptMask>

	return xReturn;
 801288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801288e:	4618      	mov	r0, r3
 8012890:	3728      	adds	r7, #40	; 0x28
 8012892:	46bd      	mov	sp, r7
 8012894:	bd80      	pop	{r7, pc}

08012896 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012896:	b580      	push	{r7, lr}
 8012898:	b088      	sub	sp, #32
 801289a:	af00      	add	r7, sp, #0
 801289c:	6078      	str	r0, [r7, #4]
 801289e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d102      	bne.n	80128b0 <xQueueGiveFromISR+0x1a>
 80128aa:	f002 f8cd 	bl	8014a48 <ulSetInterruptMask>
 80128ae:	e7fe      	b.n	80128ae <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <xQueueGiveFromISR+0x28>
 80128b8:	f002 f8c6 	bl	8014a48 <ulSetInterruptMask>
 80128bc:	e7fe      	b.n	80128bc <xQueueGiveFromISR+0x26>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80128be:	69bb      	ldr	r3, [r7, #24]
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	2b00      	cmp	r3, #0
 80128c4:	d103      	bne.n	80128ce <xQueueGiveFromISR+0x38>
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	689b      	ldr	r3, [r3, #8]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d101      	bne.n	80128d2 <xQueueGiveFromISR+0x3c>
 80128ce:	2301      	movs	r3, #1
 80128d0:	e000      	b.n	80128d4 <xQueueGiveFromISR+0x3e>
 80128d2:	2300      	movs	r3, #0
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d102      	bne.n	80128de <xQueueGiveFromISR+0x48>
 80128d8:	f002 f8b6 	bl	8014a48 <ulSetInterruptMask>
 80128dc:	e7fe      	b.n	80128dc <xQueueGiveFromISR+0x46>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80128de:	f002 f8b3 	bl	8014a48 <ulSetInterruptMask>
 80128e2:	6178      	str	r0, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80128e4:	69bb      	ldr	r3, [r7, #24]
 80128e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80128e8:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80128ea:	69bb      	ldr	r3, [r7, #24]
 80128ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80128ee:	693a      	ldr	r2, [r7, #16]
 80128f0:	429a      	cmp	r2, r3
 80128f2:	d229      	bcs.n	8012948 <xQueueGiveFromISR+0xb2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128fa:	73fb      	strb	r3, [r7, #15]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80128fc:	693b      	ldr	r3, [r7, #16]
 80128fe:	1c5a      	adds	r2, r3, #1
 8012900:	69bb      	ldr	r3, [r7, #24]
 8012902:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012904:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012908:	f1b3 3fff 	cmp.w	r3, #4294967295
 801290c:	d112      	bne.n	8012934 <xQueueGiveFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012912:	2b00      	cmp	r3, #0
 8012914:	d015      	beq.n	8012942 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	3324      	adds	r3, #36	; 0x24
 801291a:	4618      	mov	r0, r3
 801291c:	f000 ffec 	bl	80138f8 <xTaskRemoveFromEventList>
 8012920:	4603      	mov	r3, r0
 8012922:	2b00      	cmp	r3, #0
 8012924:	d00d      	beq.n	8012942 <xQueueGiveFromISR+0xac>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	2b00      	cmp	r3, #0
 801292a:	d00a      	beq.n	8012942 <xQueueGiveFromISR+0xac>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801292c:	683b      	ldr	r3, [r7, #0]
 801292e:	2201      	movs	r2, #1
 8012930:	601a      	str	r2, [r3, #0]
 8012932:	e006      	b.n	8012942 <xQueueGiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012934:	7bfb      	ldrb	r3, [r7, #15]
 8012936:	3301      	adds	r3, #1
 8012938:	b2db      	uxtb	r3, r3
 801293a:	b25a      	sxtb	r2, r3
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012942:	2301      	movs	r3, #1
 8012944:	61fb      	str	r3, [r7, #28]
 8012946:	e001      	b.n	801294c <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012948:	2300      	movs	r3, #0
 801294a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 801294c:	6978      	ldr	r0, [r7, #20]
 801294e:	f002 f888 	bl	8014a62 <vClearInterruptMask>

	return xReturn;
 8012952:	69fb      	ldr	r3, [r7, #28]
}
 8012954:	4618      	mov	r0, r3
 8012956:	3720      	adds	r7, #32
 8012958:	46bd      	mov	sp, r7
 801295a:	bd80      	pop	{r7, pc}

0801295c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801295c:	b580      	push	{r7, lr}
 801295e:	b08a      	sub	sp, #40	; 0x28
 8012960:	af00      	add	r7, sp, #0
 8012962:	60f8      	str	r0, [r7, #12]
 8012964:	60b9      	str	r1, [r7, #8]
 8012966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012968:	2300      	movs	r3, #0
 801296a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012970:	6a3b      	ldr	r3, [r7, #32]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d102      	bne.n	801297c <xQueueReceive+0x20>
 8012976:	f002 f867 	bl	8014a48 <ulSetInterruptMask>
 801297a:	e7fe      	b.n	801297a <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801297c:	68bb      	ldr	r3, [r7, #8]
 801297e:	2b00      	cmp	r3, #0
 8012980:	d103      	bne.n	801298a <xQueueReceive+0x2e>
 8012982:	6a3b      	ldr	r3, [r7, #32]
 8012984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012986:	2b00      	cmp	r3, #0
 8012988:	d101      	bne.n	801298e <xQueueReceive+0x32>
 801298a:	2301      	movs	r3, #1
 801298c:	e000      	b.n	8012990 <xQueueReceive+0x34>
 801298e:	2300      	movs	r3, #0
 8012990:	2b00      	cmp	r3, #0
 8012992:	d102      	bne.n	801299a <xQueueReceive+0x3e>
 8012994:	f002 f858 	bl	8014a48 <ulSetInterruptMask>
 8012998:	e7fe      	b.n	8012998 <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801299a:	f001 f947 	bl	8013c2c <xTaskGetSchedulerState>
 801299e:	4603      	mov	r3, r0
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d102      	bne.n	80129aa <xQueueReceive+0x4e>
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d101      	bne.n	80129ae <xQueueReceive+0x52>
 80129aa:	2301      	movs	r3, #1
 80129ac:	e000      	b.n	80129b0 <xQueueReceive+0x54>
 80129ae:	2300      	movs	r3, #0
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d102      	bne.n	80129ba <xQueueReceive+0x5e>
 80129b4:	f002 f848 	bl	8014a48 <ulSetInterruptMask>
 80129b8:	e7fe      	b.n	80129b8 <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80129ba:	f001 ff0f 	bl	80147dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80129be:	6a3b      	ldr	r3, [r7, #32]
 80129c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80129c2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80129c4:	69fb      	ldr	r3, [r7, #28]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d019      	beq.n	80129fe <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80129ca:	68b9      	ldr	r1, [r7, #8]
 80129cc:	6a38      	ldr	r0, [r7, #32]
 80129ce:	f000 fa56 	bl	8012e7e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80129d2:	69fb      	ldr	r3, [r7, #28]
 80129d4:	1e5a      	subs	r2, r3, #1
 80129d6:	6a3b      	ldr	r3, [r7, #32]
 80129d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80129da:	6a3b      	ldr	r3, [r7, #32]
 80129dc:	691b      	ldr	r3, [r3, #16]
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d009      	beq.n	80129f6 <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80129e2:	6a3b      	ldr	r3, [r7, #32]
 80129e4:	3310      	adds	r3, #16
 80129e6:	4618      	mov	r0, r3
 80129e8:	f000 ff86 	bl	80138f8 <xTaskRemoveFromEventList>
 80129ec:	4603      	mov	r3, r0
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d001      	beq.n	80129f6 <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80129f2:	f001 fee1 	bl	80147b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80129f6:	f001 ff03 	bl	8014800 <vPortExitCritical>
				return pdPASS;
 80129fa:	2301      	movs	r3, #1
 80129fc:	e063      	b.n	8012ac6 <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80129fe:	687b      	ldr	r3, [r7, #4]
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d103      	bne.n	8012a0c <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012a04:	f001 fefc 	bl	8014800 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	e05c      	b.n	8012ac6 <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d106      	bne.n	8012a20 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012a12:	f107 0314 	add.w	r3, r7, #20
 8012a16:	4618      	mov	r0, r3
 8012a18:	f000 ffca 	bl	80139b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012a20:	f001 feee 	bl	8014800 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012a24:	f000 fd70 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012a28:	f001 fed8 	bl	80147dc <vPortEnterCritical>
 8012a2c:	6a3b      	ldr	r3, [r7, #32]
 8012a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012a32:	b25b      	sxtb	r3, r3
 8012a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a38:	d103      	bne.n	8012a42 <xQueueReceive+0xe6>
 8012a3a:	6a3b      	ldr	r3, [r7, #32]
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012a42:	6a3b      	ldr	r3, [r7, #32]
 8012a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a48:	b25b      	sxtb	r3, r3
 8012a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a4e:	d103      	bne.n	8012a58 <xQueueReceive+0xfc>
 8012a50:	6a3b      	ldr	r3, [r7, #32]
 8012a52:	2200      	movs	r2, #0
 8012a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012a58:	f001 fed2 	bl	8014800 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012a5c:	1d3a      	adds	r2, r7, #4
 8012a5e:	f107 0314 	add.w	r3, r7, #20
 8012a62:	4611      	mov	r1, r2
 8012a64:	4618      	mov	r0, r3
 8012a66:	f000 ffb9 	bl	80139dc <xTaskCheckForTimeOut>
 8012a6a:	4603      	mov	r3, r0
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d11d      	bne.n	8012aac <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012a70:	6a38      	ldr	r0, [r7, #32]
 8012a72:	f000 fa7c 	bl	8012f6e <prvIsQueueEmpty>
 8012a76:	4603      	mov	r3, r0
 8012a78:	2b00      	cmp	r3, #0
 8012a7a:	d011      	beq.n	8012aa0 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012a7c:	6a3b      	ldr	r3, [r7, #32]
 8012a7e:	3324      	adds	r3, #36	; 0x24
 8012a80:	687a      	ldr	r2, [r7, #4]
 8012a82:	4611      	mov	r1, r2
 8012a84:	4618      	mov	r0, r3
 8012a86:	f000 fef7 	bl	8013878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012a8a:	6a38      	ldr	r0, [r7, #32]
 8012a8c:	f000 fa1d 	bl	8012eca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012a90:	f000 fd48 	bl	8013524 <xTaskResumeAll>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d18f      	bne.n	80129ba <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 8012a9a:	f001 fe8d 	bl	80147b8 <vPortYield>
 8012a9e:	e78c      	b.n	80129ba <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012aa0:	6a38      	ldr	r0, [r7, #32]
 8012aa2:	f000 fa12 	bl	8012eca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012aa6:	f000 fd3d 	bl	8013524 <xTaskResumeAll>
 8012aaa:	e786      	b.n	80129ba <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012aac:	6a38      	ldr	r0, [r7, #32]
 8012aae:	f000 fa0c 	bl	8012eca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012ab2:	f000 fd37 	bl	8013524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ab6:	6a38      	ldr	r0, [r7, #32]
 8012ab8:	f000 fa59 	bl	8012f6e <prvIsQueueEmpty>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	f43f af7b 	beq.w	80129ba <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012ac4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012ac6:	4618      	mov	r0, r3
 8012ac8:	3728      	adds	r7, #40	; 0x28
 8012aca:	46bd      	mov	sp, r7
 8012acc:	bd80      	pop	{r7, pc}

08012ace <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012ace:	b580      	push	{r7, lr}
 8012ad0:	b08a      	sub	sp, #40	; 0x28
 8012ad2:	af00      	add	r7, sp, #0
 8012ad4:	6078      	str	r0, [r7, #4]
 8012ad6:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012ad8:	2300      	movs	r3, #0
 8012ada:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d102      	bne.n	8012af0 <xQueueSemaphoreTake+0x22>
 8012aea:	f001 ffad 	bl	8014a48 <ulSetInterruptMask>
 8012aee:	e7fe      	b.n	8012aee <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012af4:	2b00      	cmp	r3, #0
 8012af6:	d002      	beq.n	8012afe <xQueueSemaphoreTake+0x30>
 8012af8:	f001 ffa6 	bl	8014a48 <ulSetInterruptMask>
 8012afc:	e7fe      	b.n	8012afc <xQueueSemaphoreTake+0x2e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012afe:	f001 f895 	bl	8013c2c <xTaskGetSchedulerState>
 8012b02:	4603      	mov	r3, r0
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d102      	bne.n	8012b0e <xQueueSemaphoreTake+0x40>
 8012b08:	683b      	ldr	r3, [r7, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d101      	bne.n	8012b12 <xQueueSemaphoreTake+0x44>
 8012b0e:	2301      	movs	r3, #1
 8012b10:	e000      	b.n	8012b14 <xQueueSemaphoreTake+0x46>
 8012b12:	2300      	movs	r3, #0
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d102      	bne.n	8012b1e <xQueueSemaphoreTake+0x50>
 8012b18:	f001 ff96 	bl	8014a48 <ulSetInterruptMask>
 8012b1c:	e7fe      	b.n	8012b1c <xQueueSemaphoreTake+0x4e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012b1e:	f001 fe5d 	bl	80147dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012b22:	69fb      	ldr	r3, [r7, #28]
 8012b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b26:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012b28:	69bb      	ldr	r3, [r7, #24]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d01e      	beq.n	8012b6c <xQueueSemaphoreTake+0x9e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	1e5a      	subs	r2, r3, #1
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012b36:	69fb      	ldr	r3, [r7, #28]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d104      	bne.n	8012b48 <xQueueSemaphoreTake+0x7a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012b3e:	f001 f9cb 	bl	8013ed8 <pvTaskIncrementMutexHeldCount>
 8012b42:	4602      	mov	r2, r0
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012b48:	69fb      	ldr	r3, [r7, #28]
 8012b4a:	691b      	ldr	r3, [r3, #16]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d009      	beq.n	8012b64 <xQueueSemaphoreTake+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	3310      	adds	r3, #16
 8012b54:	4618      	mov	r0, r3
 8012b56:	f000 fecf 	bl	80138f8 <xTaskRemoveFromEventList>
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d001      	beq.n	8012b64 <xQueueSemaphoreTake+0x96>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012b60:	f001 fe2a 	bl	80147b8 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012b64:	f001 fe4c 	bl	8014800 <vPortExitCritical>
				return pdPASS;
 8012b68:	2301      	movs	r3, #1
 8012b6a:	e089      	b.n	8012c80 <xQueueSemaphoreTake+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d109      	bne.n	8012b86 <xQueueSemaphoreTake+0xb8>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012b72:	6a3b      	ldr	r3, [r7, #32]
 8012b74:	2b00      	cmp	r3, #0
 8012b76:	d002      	beq.n	8012b7e <xQueueSemaphoreTake+0xb0>
 8012b78:	f001 ff66 	bl	8014a48 <ulSetInterruptMask>
 8012b7c:	e7fe      	b.n	8012b7c <xQueueSemaphoreTake+0xae>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012b7e:	f001 fe3f 	bl	8014800 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012b82:	2300      	movs	r3, #0
 8012b84:	e07c      	b.n	8012c80 <xQueueSemaphoreTake+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d106      	bne.n	8012b9a <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012b8c:	f107 030c 	add.w	r3, r7, #12
 8012b90:	4618      	mov	r0, r3
 8012b92:	f000 ff0d 	bl	80139b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012b96:	2301      	movs	r3, #1
 8012b98:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012b9a:	f001 fe31 	bl	8014800 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012b9e:	f000 fcb3 	bl	8013508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012ba2:	f001 fe1b 	bl	80147dc <vPortEnterCritical>
 8012ba6:	69fb      	ldr	r3, [r7, #28]
 8012ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012bac:	b25b      	sxtb	r3, r3
 8012bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bb2:	d103      	bne.n	8012bbc <xQueueSemaphoreTake+0xee>
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012bbc:	69fb      	ldr	r3, [r7, #28]
 8012bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012bc2:	b25b      	sxtb	r3, r3
 8012bc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bc8:	d103      	bne.n	8012bd2 <xQueueSemaphoreTake+0x104>
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012bd2:	f001 fe15 	bl	8014800 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012bd6:	463a      	mov	r2, r7
 8012bd8:	f107 030c 	add.w	r3, r7, #12
 8012bdc:	4611      	mov	r1, r2
 8012bde:	4618      	mov	r0, r3
 8012be0:	f000 fefc 	bl	80139dc <xTaskCheckForTimeOut>
 8012be4:	4603      	mov	r3, r0
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d12c      	bne.n	8012c44 <xQueueSemaphoreTake+0x176>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012bea:	69f8      	ldr	r0, [r7, #28]
 8012bec:	f000 f9bf 	bl	8012f6e <prvIsQueueEmpty>
 8012bf0:	4603      	mov	r3, r0
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d020      	beq.n	8012c38 <xQueueSemaphoreTake+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012bf6:	69fb      	ldr	r3, [r7, #28]
 8012bf8:	681b      	ldr	r3, [r3, #0]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d109      	bne.n	8012c12 <xQueueSemaphoreTake+0x144>
					{
						taskENTER_CRITICAL();
 8012bfe:	f001 fded 	bl	80147dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012c02:	69fb      	ldr	r3, [r7, #28]
 8012c04:	689b      	ldr	r3, [r3, #8]
 8012c06:	4618      	mov	r0, r3
 8012c08:	f001 f82e 	bl	8013c68 <xTaskPriorityInherit>
 8012c0c:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8012c0e:	f001 fdf7 	bl	8014800 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	3324      	adds	r3, #36	; 0x24
 8012c16:	683a      	ldr	r2, [r7, #0]
 8012c18:	4611      	mov	r1, r2
 8012c1a:	4618      	mov	r0, r3
 8012c1c:	f000 fe2c 	bl	8013878 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012c20:	69f8      	ldr	r0, [r7, #28]
 8012c22:	f000 f952 	bl	8012eca <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012c26:	f000 fc7d 	bl	8013524 <xTaskResumeAll>
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	f47f af76 	bne.w	8012b1e <xQueueSemaphoreTake+0x50>
				{
					portYIELD_WITHIN_API();
 8012c32:	f001 fdc1 	bl	80147b8 <vPortYield>
 8012c36:	e772      	b.n	8012b1e <xQueueSemaphoreTake+0x50>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012c38:	69f8      	ldr	r0, [r7, #28]
 8012c3a:	f000 f946 	bl	8012eca <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012c3e:	f000 fc71 	bl	8013524 <xTaskResumeAll>
 8012c42:	e76c      	b.n	8012b1e <xQueueSemaphoreTake+0x50>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012c44:	69f8      	ldr	r0, [r7, #28]
 8012c46:	f000 f940 	bl	8012eca <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012c4a:	f000 fc6b 	bl	8013524 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012c4e:	69f8      	ldr	r0, [r7, #28]
 8012c50:	f000 f98d 	bl	8012f6e <prvIsQueueEmpty>
 8012c54:	4603      	mov	r3, r0
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	f43f af61 	beq.w	8012b1e <xQueueSemaphoreTake+0x50>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012c5c:	6a3b      	ldr	r3, [r7, #32]
 8012c5e:	2b00      	cmp	r3, #0
 8012c60:	d00d      	beq.n	8012c7e <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 8012c62:	f001 fdbb 	bl	80147dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012c66:	69f8      	ldr	r0, [r7, #28]
 8012c68:	f000 f887 	bl	8012d7a <prvGetDisinheritPriorityAfterTimeout>
 8012c6c:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	689b      	ldr	r3, [r3, #8]
 8012c72:	6979      	ldr	r1, [r7, #20]
 8012c74:	4618      	mov	r0, r3
 8012c76:	f001 f8bd 	bl	8013df4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012c7a:	f001 fdc1 	bl	8014800 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012c7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012c80:	4618      	mov	r0, r3
 8012c82:	3728      	adds	r7, #40	; 0x28
 8012c84:	46bd      	mov	sp, r7
 8012c86:	bd80      	pop	{r7, pc}

08012c88 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	b08a      	sub	sp, #40	; 0x28
 8012c8c:	af00      	add	r7, sp, #0
 8012c8e:	60f8      	str	r0, [r7, #12]
 8012c90:	60b9      	str	r1, [r7, #8]
 8012c92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8012c98:	6a3b      	ldr	r3, [r7, #32]
 8012c9a:	2b00      	cmp	r3, #0
 8012c9c:	d102      	bne.n	8012ca4 <xQueueReceiveFromISR+0x1c>
 8012c9e:	f001 fed3 	bl	8014a48 <ulSetInterruptMask>
 8012ca2:	e7fe      	b.n	8012ca2 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012ca4:	68bb      	ldr	r3, [r7, #8]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d103      	bne.n	8012cb2 <xQueueReceiveFromISR+0x2a>
 8012caa:	6a3b      	ldr	r3, [r7, #32]
 8012cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d101      	bne.n	8012cb6 <xQueueReceiveFromISR+0x2e>
 8012cb2:	2301      	movs	r3, #1
 8012cb4:	e000      	b.n	8012cb8 <xQueueReceiveFromISR+0x30>
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d102      	bne.n	8012cc2 <xQueueReceiveFromISR+0x3a>
 8012cbc:	f001 fec4 	bl	8014a48 <ulSetInterruptMask>
 8012cc0:	e7fe      	b.n	8012cc0 <xQueueReceiveFromISR+0x38>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012cc2:	f001 fec1 	bl	8014a48 <ulSetInterruptMask>
 8012cc6:	61f8      	str	r0, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012cc8:	6a3b      	ldr	r3, [r7, #32]
 8012cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ccc:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012cce:	69bb      	ldr	r3, [r7, #24]
 8012cd0:	2b00      	cmp	r3, #0
 8012cd2:	d02d      	beq.n	8012d30 <xQueueReceiveFromISR+0xa8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012cd4:	6a3b      	ldr	r3, [r7, #32]
 8012cd6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012cda:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012cdc:	68b9      	ldr	r1, [r7, #8]
 8012cde:	6a38      	ldr	r0, [r7, #32]
 8012ce0:	f000 f8cd 	bl	8012e7e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012ce4:	69bb      	ldr	r3, [r7, #24]
 8012ce6:	1e5a      	subs	r2, r3, #1
 8012ce8:	6a3b      	ldr	r3, [r7, #32]
 8012cea:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012cec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012cf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012cf4:	d112      	bne.n	8012d1c <xQueueReceiveFromISR+0x94>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cf6:	6a3b      	ldr	r3, [r7, #32]
 8012cf8:	691b      	ldr	r3, [r3, #16]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d015      	beq.n	8012d2a <xQueueReceiveFromISR+0xa2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cfe:	6a3b      	ldr	r3, [r7, #32]
 8012d00:	3310      	adds	r3, #16
 8012d02:	4618      	mov	r0, r3
 8012d04:	f000 fdf8 	bl	80138f8 <xTaskRemoveFromEventList>
 8012d08:	4603      	mov	r3, r0
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d00d      	beq.n	8012d2a <xQueueReceiveFromISR+0xa2>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	d00a      	beq.n	8012d2a <xQueueReceiveFromISR+0xa2>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2201      	movs	r2, #1
 8012d18:	601a      	str	r2, [r3, #0]
 8012d1a:	e006      	b.n	8012d2a <xQueueReceiveFromISR+0xa2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012d1c:	7dfb      	ldrb	r3, [r7, #23]
 8012d1e:	3301      	adds	r3, #1
 8012d20:	b2db      	uxtb	r3, r3
 8012d22:	b25a      	sxtb	r2, r3
 8012d24:	6a3b      	ldr	r3, [r7, #32]
 8012d26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012d2a:	2301      	movs	r3, #1
 8012d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8012d2e:	e001      	b.n	8012d34 <xQueueReceiveFromISR+0xac>
		}
		else
		{
			xReturn = pdFAIL;
 8012d30:	2300      	movs	r3, #0
 8012d32:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8012d34:	69f8      	ldr	r0, [r7, #28]
 8012d36:	f001 fe94 	bl	8014a62 <vClearInterruptMask>

	return xReturn;
 8012d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3728      	adds	r7, #40	; 0x28
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b084      	sub	sp, #16
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012d50:	68fb      	ldr	r3, [r7, #12]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d102      	bne.n	8012d5c <vQueueDelete+0x18>
 8012d56:	f001 fe77 	bl	8014a48 <ulSetInterruptMask>
 8012d5a:	e7fe      	b.n	8012d5a <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8012d5c:	68f8      	ldr	r0, [r7, #12]
 8012d5e:	f000 f95f 	bl	8013020 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8012d62:	68fb      	ldr	r3, [r7, #12]
 8012d64:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d102      	bne.n	8012d72 <vQueueDelete+0x2e>
		{
			vPortFree( pxQueue );
 8012d6c:	68f8      	ldr	r0, [r7, #12]
 8012d6e:	f001 ff7f 	bl	8014c70 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8012d72:	bf00      	nop
 8012d74:	3710      	adds	r7, #16
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd80      	pop	{r7, pc}

08012d7a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012d7a:	b480      	push	{r7}
 8012d7c:	b085      	sub	sp, #20
 8012d7e:	af00      	add	r7, sp, #0
 8012d80:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d006      	beq.n	8012d98 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8012d94:	60fb      	str	r3, [r7, #12]
 8012d96:	e001      	b.n	8012d9c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012d98:	2300      	movs	r3, #0
 8012d9a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
	}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3714      	adds	r7, #20
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012daa:	b580      	push	{r7, lr}
 8012dac:	b086      	sub	sp, #24
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	60f8      	str	r0, [r7, #12]
 8012db2:	60b9      	str	r1, [r7, #8]
 8012db4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012db6:	2300      	movs	r3, #0
 8012db8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dbe:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d10d      	bne.n	8012de4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dc8:	68fb      	ldr	r3, [r7, #12]
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d14d      	bne.n	8012e6c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012dd0:	68fb      	ldr	r3, [r7, #12]
 8012dd2:	689b      	ldr	r3, [r3, #8]
 8012dd4:	4618      	mov	r0, r3
 8012dd6:	f000 ffaf 	bl	8013d38 <xTaskPriorityDisinherit>
 8012dda:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	2200      	movs	r2, #0
 8012de0:	609a      	str	r2, [r3, #8]
 8012de2:	e043      	b.n	8012e6c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d119      	bne.n	8012e1e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	6858      	ldr	r0, [r3, #4]
 8012dee:	68fb      	ldr	r3, [r7, #12]
 8012df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012df2:	461a      	mov	r2, r3
 8012df4:	68b9      	ldr	r1, [r7, #8]
 8012df6:	f002 fb05 	bl	8015404 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	685a      	ldr	r2, [r3, #4]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e02:	441a      	add	r2, r3
 8012e04:	68fb      	ldr	r3, [r7, #12]
 8012e06:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e08:	68fb      	ldr	r3, [r7, #12]
 8012e0a:	685a      	ldr	r2, [r3, #4]
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	689b      	ldr	r3, [r3, #8]
 8012e10:	429a      	cmp	r2, r3
 8012e12:	d32b      	bcc.n	8012e6c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	681a      	ldr	r2, [r3, #0]
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	605a      	str	r2, [r3, #4]
 8012e1c:	e026      	b.n	8012e6c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	68d8      	ldr	r0, [r3, #12]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e26:	461a      	mov	r2, r3
 8012e28:	68b9      	ldr	r1, [r7, #8]
 8012e2a:	f002 faeb 	bl	8015404 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	68da      	ldr	r2, [r3, #12]
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e36:	425b      	negs	r3, r3
 8012e38:	441a      	add	r2, r3
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	68da      	ldr	r2, [r3, #12]
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	681b      	ldr	r3, [r3, #0]
 8012e46:	429a      	cmp	r2, r3
 8012e48:	d207      	bcs.n	8012e5a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012e4a:	68fb      	ldr	r3, [r7, #12]
 8012e4c:	689a      	ldr	r2, [r3, #8]
 8012e4e:	68fb      	ldr	r3, [r7, #12]
 8012e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e52:	425b      	negs	r3, r3
 8012e54:	441a      	add	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	2b02      	cmp	r3, #2
 8012e5e:	d105      	bne.n	8012e6c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012e60:	693b      	ldr	r3, [r7, #16]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8012e66:	693b      	ldr	r3, [r7, #16]
 8012e68:	3b01      	subs	r3, #1
 8012e6a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012e6c:	693b      	ldr	r3, [r7, #16]
 8012e6e:	1c5a      	adds	r2, r3, #1
 8012e70:	68fb      	ldr	r3, [r7, #12]
 8012e72:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8012e74:	697b      	ldr	r3, [r7, #20]
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3718      	adds	r7, #24
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d018      	beq.n	8012ec2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	68da      	ldr	r2, [r3, #12]
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e98:	441a      	add	r2, r3
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	68da      	ldr	r2, [r3, #12]
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	689b      	ldr	r3, [r3, #8]
 8012ea6:	429a      	cmp	r2, r3
 8012ea8:	d303      	bcc.n	8012eb2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681a      	ldr	r2, [r3, #0]
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	68d9      	ldr	r1, [r3, #12]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012eba:	461a      	mov	r2, r3
 8012ebc:	6838      	ldr	r0, [r7, #0]
 8012ebe:	f002 faa1 	bl	8015404 <memcpy>
	}
}
 8012ec2:	bf00      	nop
 8012ec4:	3708      	adds	r7, #8
 8012ec6:	46bd      	mov	sp, r7
 8012ec8:	bd80      	pop	{r7, pc}

08012eca <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012eca:	b580      	push	{r7, lr}
 8012ecc:	b084      	sub	sp, #16
 8012ece:	af00      	add	r7, sp, #0
 8012ed0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012ed2:	f001 fc83 	bl	80147dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012edc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012ede:	e011      	b.n	8012f04 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d012      	beq.n	8012f0e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	3324      	adds	r3, #36	; 0x24
 8012eec:	4618      	mov	r0, r3
 8012eee:	f000 fd03 	bl	80138f8 <xTaskRemoveFromEventList>
 8012ef2:	4603      	mov	r3, r0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d001      	beq.n	8012efc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012ef8:	f000 fdc2 	bl	8013a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012efc:	7bfb      	ldrb	r3, [r7, #15]
 8012efe:	3b01      	subs	r3, #1
 8012f00:	b2db      	uxtb	r3, r3
 8012f02:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012f04:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	dce9      	bgt.n	8012ee0 <prvUnlockQueue+0x16>
 8012f0c:	e000      	b.n	8012f10 <prvUnlockQueue+0x46>
					break;
 8012f0e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	22ff      	movs	r2, #255	; 0xff
 8012f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012f18:	f001 fc72 	bl	8014800 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012f1c:	f001 fc5e 	bl	80147dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f26:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f28:	e011      	b.n	8012f4e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012f2a:	687b      	ldr	r3, [r7, #4]
 8012f2c:	691b      	ldr	r3, [r3, #16]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d012      	beq.n	8012f58 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	3310      	adds	r3, #16
 8012f36:	4618      	mov	r0, r3
 8012f38:	f000 fcde 	bl	80138f8 <xTaskRemoveFromEventList>
 8012f3c:	4603      	mov	r3, r0
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d001      	beq.n	8012f46 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012f42:	f000 fd9d 	bl	8013a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8012f46:	7bbb      	ldrb	r3, [r7, #14]
 8012f48:	3b01      	subs	r3, #1
 8012f4a:	b2db      	uxtb	r3, r3
 8012f4c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012f4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012f52:	2b00      	cmp	r3, #0
 8012f54:	dce9      	bgt.n	8012f2a <prvUnlockQueue+0x60>
 8012f56:	e000      	b.n	8012f5a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012f58:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	22ff      	movs	r2, #255	; 0xff
 8012f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8012f62:	f001 fc4d 	bl	8014800 <vPortExitCritical>
}
 8012f66:	bf00      	nop
 8012f68:	3710      	adds	r7, #16
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	bd80      	pop	{r7, pc}

08012f6e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012f6e:	b580      	push	{r7, lr}
 8012f70:	b084      	sub	sp, #16
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012f76:	f001 fc31 	bl	80147dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d102      	bne.n	8012f88 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8012f82:	2301      	movs	r3, #1
 8012f84:	60fb      	str	r3, [r7, #12]
 8012f86:	e001      	b.n	8012f8c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012f88:	2300      	movs	r3, #0
 8012f8a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012f8c:	f001 fc38 	bl	8014800 <vPortExitCritical>

	return xReturn;
 8012f90:	68fb      	ldr	r3, [r7, #12]
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b084      	sub	sp, #16
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012fa2:	f001 fc1b 	bl	80147dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d102      	bne.n	8012fb8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e001      	b.n	8012fbc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012fbc:	f001 fc20 	bl	8014800 <vPortExitCritical>

	return xReturn;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
}
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	3710      	adds	r7, #16
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
	...

08012fcc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012fcc:	b480      	push	{r7}
 8012fce:	b085      	sub	sp, #20
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	6078      	str	r0, [r7, #4]
 8012fd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012fd6:	2300      	movs	r3, #0
 8012fd8:	60fb      	str	r3, [r7, #12]
 8012fda:	e014      	b.n	8013006 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012fdc:	4a0f      	ldr	r2, [pc, #60]	; (801301c <vQueueAddToRegistry+0x50>)
 8012fde:	68fb      	ldr	r3, [r7, #12]
 8012fe0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d10b      	bne.n	8013000 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8012fe8:	490c      	ldr	r1, [pc, #48]	; (801301c <vQueueAddToRegistry+0x50>)
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	683a      	ldr	r2, [r7, #0]
 8012fee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012ff2:	4a0a      	ldr	r2, [pc, #40]	; (801301c <vQueueAddToRegistry+0x50>)
 8012ff4:	68fb      	ldr	r3, [r7, #12]
 8012ff6:	00db      	lsls	r3, r3, #3
 8012ff8:	4413      	add	r3, r2
 8012ffa:	687a      	ldr	r2, [r7, #4]
 8012ffc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012ffe:	e006      	b.n	801300e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	3301      	adds	r3, #1
 8013004:	60fb      	str	r3, [r7, #12]
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2b07      	cmp	r3, #7
 801300a:	d9e7      	bls.n	8012fdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801300c:	bf00      	nop
 801300e:	bf00      	nop
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr
 801301a:	bf00      	nop
 801301c:	20021810 	.word	0x20021810

08013020 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013020:	b480      	push	{r7}
 8013022:	b085      	sub	sp, #20
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013028:	2300      	movs	r3, #0
 801302a:	60fb      	str	r3, [r7, #12]
 801302c:	e016      	b.n	801305c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801302e:	4a10      	ldr	r2, [pc, #64]	; (8013070 <vQueueUnregisterQueue+0x50>)
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	00db      	lsls	r3, r3, #3
 8013034:	4413      	add	r3, r2
 8013036:	685b      	ldr	r3, [r3, #4]
 8013038:	687a      	ldr	r2, [r7, #4]
 801303a:	429a      	cmp	r2, r3
 801303c:	d10b      	bne.n	8013056 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801303e:	4a0c      	ldr	r2, [pc, #48]	; (8013070 <vQueueUnregisterQueue+0x50>)
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2100      	movs	r1, #0
 8013044:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013048:	4a09      	ldr	r2, [pc, #36]	; (8013070 <vQueueUnregisterQueue+0x50>)
 801304a:	68fb      	ldr	r3, [r7, #12]
 801304c:	00db      	lsls	r3, r3, #3
 801304e:	4413      	add	r3, r2
 8013050:	2200      	movs	r2, #0
 8013052:	605a      	str	r2, [r3, #4]
				break;
 8013054:	e006      	b.n	8013064 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	3301      	adds	r3, #1
 801305a:	60fb      	str	r3, [r7, #12]
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2b07      	cmp	r3, #7
 8013060:	d9e5      	bls.n	801302e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013062:	bf00      	nop
 8013064:	bf00      	nop
 8013066:	3714      	adds	r7, #20
 8013068:	46bd      	mov	sp, r7
 801306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306e:	4770      	bx	lr
 8013070:	20021810 	.word	0x20021810

08013074 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013074:	b580      	push	{r7, lr}
 8013076:	b086      	sub	sp, #24
 8013078:	af00      	add	r7, sp, #0
 801307a:	60f8      	str	r0, [r7, #12]
 801307c:	60b9      	str	r1, [r7, #8]
 801307e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013080:	68fb      	ldr	r3, [r7, #12]
 8013082:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013084:	f001 fbaa 	bl	80147dc <vPortEnterCritical>
 8013088:	697b      	ldr	r3, [r7, #20]
 801308a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801308e:	b25b      	sxtb	r3, r3
 8013090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013094:	d103      	bne.n	801309e <vQueueWaitForMessageRestricted+0x2a>
 8013096:	697b      	ldr	r3, [r7, #20]
 8013098:	2200      	movs	r2, #0
 801309a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801309e:	697b      	ldr	r3, [r7, #20]
 80130a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80130a4:	b25b      	sxtb	r3, r3
 80130a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130aa:	d103      	bne.n	80130b4 <vQueueWaitForMessageRestricted+0x40>
 80130ac:	697b      	ldr	r3, [r7, #20]
 80130ae:	2200      	movs	r2, #0
 80130b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80130b4:	f001 fba4 	bl	8014800 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80130b8:	697b      	ldr	r3, [r7, #20]
 80130ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d106      	bne.n	80130ce <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80130c0:	697b      	ldr	r3, [r7, #20]
 80130c2:	3324      	adds	r3, #36	; 0x24
 80130c4:	687a      	ldr	r2, [r7, #4]
 80130c6:	68b9      	ldr	r1, [r7, #8]
 80130c8:	4618      	mov	r0, r3
 80130ca:	f000 fbf1 	bl	80138b0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80130ce:	6978      	ldr	r0, [r7, #20]
 80130d0:	f7ff fefb 	bl	8012eca <prvUnlockQueue>
	}
 80130d4:	bf00      	nop
 80130d6:	3718      	adds	r7, #24
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b08c      	sub	sp, #48	; 0x30
 80130e0:	af04      	add	r7, sp, #16
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80130ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d102      	bne.n	80130f6 <xTaskCreateStatic+0x1a>
 80130f0:	f001 fcaa 	bl	8014a48 <ulSetInterruptMask>
 80130f4:	e7fe      	b.n	80130f4 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 80130f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d102      	bne.n	8013102 <xTaskCreateStatic+0x26>
 80130fc:	f001 fca4 	bl	8014a48 <ulSetInterruptMask>
 8013100:	e7fe      	b.n	8013100 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013102:	23a8      	movs	r3, #168	; 0xa8
 8013104:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013106:	697b      	ldr	r3, [r7, #20]
 8013108:	2ba8      	cmp	r3, #168	; 0xa8
 801310a:	d002      	beq.n	8013112 <xTaskCreateStatic+0x36>
 801310c:	f001 fc9c 	bl	8014a48 <ulSetInterruptMask>
 8013110:	e7fe      	b.n	8013110 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013112:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013116:	2b00      	cmp	r3, #0
 8013118:	d01e      	beq.n	8013158 <xTaskCreateStatic+0x7c>
 801311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801311c:	2b00      	cmp	r3, #0
 801311e:	d01b      	beq.n	8013158 <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013122:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013124:	69fb      	ldr	r3, [r7, #28]
 8013126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013128:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801312a:	69fb      	ldr	r3, [r7, #28]
 801312c:	2202      	movs	r2, #2
 801312e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013132:	2300      	movs	r3, #0
 8013134:	9303      	str	r3, [sp, #12]
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	9302      	str	r3, [sp, #8]
 801313a:	f107 0318 	add.w	r3, r7, #24
 801313e:	9301      	str	r3, [sp, #4]
 8013140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013142:	9300      	str	r3, [sp, #0]
 8013144:	683b      	ldr	r3, [r7, #0]
 8013146:	687a      	ldr	r2, [r7, #4]
 8013148:	68b9      	ldr	r1, [r7, #8]
 801314a:	68f8      	ldr	r0, [r7, #12]
 801314c:	f000 f850 	bl	80131f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013150:	69f8      	ldr	r0, [r7, #28]
 8013152:	f000 f8ed 	bl	8013330 <prvAddNewTaskToReadyList>
 8013156:	e001      	b.n	801315c <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 8013158:	2300      	movs	r3, #0
 801315a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801315c:	69bb      	ldr	r3, [r7, #24]
	}
 801315e:	4618      	mov	r0, r3
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}

08013166 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013166:	b580      	push	{r7, lr}
 8013168:	b08c      	sub	sp, #48	; 0x30
 801316a:	af04      	add	r7, sp, #16
 801316c:	60f8      	str	r0, [r7, #12]
 801316e:	60b9      	str	r1, [r7, #8]
 8013170:	603b      	str	r3, [r7, #0]
 8013172:	4613      	mov	r3, r2
 8013174:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013176:	88fb      	ldrh	r3, [r7, #6]
 8013178:	009b      	lsls	r3, r3, #2
 801317a:	4618      	mov	r0, r3
 801317c:	f001 fcc4 	bl	8014b08 <pvPortMalloc>
 8013180:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013182:	697b      	ldr	r3, [r7, #20]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d00e      	beq.n	80131a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013188:	20a8      	movs	r0, #168	; 0xa8
 801318a:	f001 fcbd 	bl	8014b08 <pvPortMalloc>
 801318e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013190:	69fb      	ldr	r3, [r7, #28]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d003      	beq.n	801319e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	697a      	ldr	r2, [r7, #20]
 801319a:	631a      	str	r2, [r3, #48]	; 0x30
 801319c:	e005      	b.n	80131aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801319e:	6978      	ldr	r0, [r7, #20]
 80131a0:	f001 fd66 	bl	8014c70 <vPortFree>
 80131a4:	e001      	b.n	80131aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80131a6:	2300      	movs	r3, #0
 80131a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80131aa:	69fb      	ldr	r3, [r7, #28]
 80131ac:	2b00      	cmp	r3, #0
 80131ae:	d017      	beq.n	80131e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80131b0:	69fb      	ldr	r3, [r7, #28]
 80131b2:	2200      	movs	r2, #0
 80131b4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80131b8:	88fa      	ldrh	r2, [r7, #6]
 80131ba:	2300      	movs	r3, #0
 80131bc:	9303      	str	r3, [sp, #12]
 80131be:	69fb      	ldr	r3, [r7, #28]
 80131c0:	9302      	str	r3, [sp, #8]
 80131c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c4:	9301      	str	r3, [sp, #4]
 80131c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c8:	9300      	str	r3, [sp, #0]
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	68b9      	ldr	r1, [r7, #8]
 80131ce:	68f8      	ldr	r0, [r7, #12]
 80131d0:	f000 f80e 	bl	80131f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80131d4:	69f8      	ldr	r0, [r7, #28]
 80131d6:	f000 f8ab 	bl	8013330 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80131da:	2301      	movs	r3, #1
 80131dc:	61bb      	str	r3, [r7, #24]
 80131de:	e002      	b.n	80131e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80131e0:	f04f 33ff 	mov.w	r3, #4294967295
 80131e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80131e6:	69bb      	ldr	r3, [r7, #24]
	}
 80131e8:	4618      	mov	r0, r3
 80131ea:	3720      	adds	r7, #32
 80131ec:	46bd      	mov	sp, r7
 80131ee:	bd80      	pop	{r7, pc}

080131f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b086      	sub	sp, #24
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	60f8      	str	r0, [r7, #12]
 80131f8:	60b9      	str	r1, [r7, #8]
 80131fa:	607a      	str	r2, [r7, #4]
 80131fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80131fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013200:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	009b      	lsls	r3, r3, #2
 8013206:	461a      	mov	r2, r3
 8013208:	21a5      	movs	r1, #165	; 0xa5
 801320a:	f001 ffce 	bl	80151aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013210:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013218:	3b01      	subs	r3, #1
 801321a:	009b      	lsls	r3, r3, #2
 801321c:	4413      	add	r3, r2
 801321e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013220:	693b      	ldr	r3, [r7, #16]
 8013222:	f023 0307 	bic.w	r3, r3, #7
 8013226:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013228:	693b      	ldr	r3, [r7, #16]
 801322a:	f003 0307 	and.w	r3, r3, #7
 801322e:	2b00      	cmp	r3, #0
 8013230:	d002      	beq.n	8013238 <prvInitialiseNewTask+0x48>
 8013232:	f001 fc09 	bl	8014a48 <ulSetInterruptMask>
 8013236:	e7fe      	b.n	8013236 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d01f      	beq.n	801327e <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801323e:	2300      	movs	r3, #0
 8013240:	617b      	str	r3, [r7, #20]
 8013242:	e012      	b.n	801326a <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013244:	68ba      	ldr	r2, [r7, #8]
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	4413      	add	r3, r2
 801324a:	7819      	ldrb	r1, [r3, #0]
 801324c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	4413      	add	r3, r2
 8013252:	3334      	adds	r3, #52	; 0x34
 8013254:	460a      	mov	r2, r1
 8013256:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013258:	68ba      	ldr	r2, [r7, #8]
 801325a:	697b      	ldr	r3, [r7, #20]
 801325c:	4413      	add	r3, r2
 801325e:	781b      	ldrb	r3, [r3, #0]
 8013260:	2b00      	cmp	r3, #0
 8013262:	d006      	beq.n	8013272 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013264:	697b      	ldr	r3, [r7, #20]
 8013266:	3301      	adds	r3, #1
 8013268:	617b      	str	r3, [r7, #20]
 801326a:	697b      	ldr	r3, [r7, #20]
 801326c:	2b0f      	cmp	r3, #15
 801326e:	d9e9      	bls.n	8013244 <prvInitialiseNewTask+0x54>
 8013270:	e000      	b.n	8013274 <prvInitialiseNewTask+0x84>
			{
				break;
 8013272:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013276:	2200      	movs	r2, #0
 8013278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801327c:	e003      	b.n	8013286 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013280:	2200      	movs	r2, #0
 8013282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013286:	6a3b      	ldr	r3, [r7, #32]
 8013288:	2b37      	cmp	r3, #55	; 0x37
 801328a:	d901      	bls.n	8013290 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801328c:	2337      	movs	r3, #55	; 0x37
 801328e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013292:	6a3a      	ldr	r2, [r7, #32]
 8013294:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013298:	6a3a      	ldr	r2, [r7, #32]
 801329a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801329e:	2200      	movs	r2, #0
 80132a0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80132a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132a4:	3304      	adds	r3, #4
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fe ffe0 	bl	801226c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80132ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ae:	3318      	adds	r3, #24
 80132b0:	4618      	mov	r0, r3
 80132b2:	f7fe ffdb 	bl	801226c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80132b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80132bc:	6a3b      	ldr	r3, [r7, #32]
 80132be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80132c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80132c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80132ca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80132cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ce:	2200      	movs	r2, #0
 80132d0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80132d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132d6:	2200      	movs	r2, #0
 80132d8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80132dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132de:	3354      	adds	r3, #84	; 0x54
 80132e0:	224c      	movs	r2, #76	; 0x4c
 80132e2:	2100      	movs	r1, #0
 80132e4:	4618      	mov	r0, r3
 80132e6:	f001 ff60 	bl	80151aa <memset>
 80132ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132ec:	4a0d      	ldr	r2, [pc, #52]	; (8013324 <prvInitialiseNewTask+0x134>)
 80132ee:	659a      	str	r2, [r3, #88]	; 0x58
 80132f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f2:	4a0d      	ldr	r2, [pc, #52]	; (8013328 <prvInitialiseNewTask+0x138>)
 80132f4:	65da      	str	r2, [r3, #92]	; 0x5c
 80132f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132f8:	4a0c      	ldr	r2, [pc, #48]	; (801332c <prvInitialiseNewTask+0x13c>)
 80132fa:	661a      	str	r2, [r3, #96]	; 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 80132fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80132fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	68fa      	ldr	r2, [r7, #12]
 8013304:	6938      	ldr	r0, [r7, #16]
 8013306:	f001 fac5 	bl	8014894 <pxPortInitialiseStack>
 801330a:	4602      	mov	r2, r0
 801330c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801330e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8013310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013312:	2b00      	cmp	r3, #0
 8013314:	d002      	beq.n	801331c <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8013316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013318:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801331a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801331c:	bf00      	nop
 801331e:	3718      	adds	r7, #24
 8013320:	46bd      	mov	sp, r7
 8013322:	bd80      	pop	{r7, pc}
 8013324:	20025d1c 	.word	0x20025d1c
 8013328:	20025d84 	.word	0x20025d84
 801332c:	20025dec 	.word	0x20025dec

08013330 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b082      	sub	sp, #8
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8013338:	f001 fa50 	bl	80147dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801333c:	4b2a      	ldr	r3, [pc, #168]	; (80133e8 <prvAddNewTaskToReadyList+0xb8>)
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	3301      	adds	r3, #1
 8013342:	4a29      	ldr	r2, [pc, #164]	; (80133e8 <prvAddNewTaskToReadyList+0xb8>)
 8013344:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8013346:	4b29      	ldr	r3, [pc, #164]	; (80133ec <prvAddNewTaskToReadyList+0xbc>)
 8013348:	681b      	ldr	r3, [r3, #0]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801334e:	4a27      	ldr	r2, [pc, #156]	; (80133ec <prvAddNewTaskToReadyList+0xbc>)
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013354:	4b24      	ldr	r3, [pc, #144]	; (80133e8 <prvAddNewTaskToReadyList+0xb8>)
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	2b01      	cmp	r3, #1
 801335a:	d110      	bne.n	801337e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801335c:	f000 fbac 	bl	8013ab8 <prvInitialiseTaskLists>
 8013360:	e00d      	b.n	801337e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013362:	4b23      	ldr	r3, [pc, #140]	; (80133f0 <prvAddNewTaskToReadyList+0xc0>)
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d109      	bne.n	801337e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801336a:	4b20      	ldr	r3, [pc, #128]	; (80133ec <prvAddNewTaskToReadyList+0xbc>)
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013374:	429a      	cmp	r2, r3
 8013376:	d802      	bhi.n	801337e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013378:	4a1c      	ldr	r2, [pc, #112]	; (80133ec <prvAddNewTaskToReadyList+0xbc>)
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801337e:	4b1d      	ldr	r3, [pc, #116]	; (80133f4 <prvAddNewTaskToReadyList+0xc4>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	3301      	adds	r3, #1
 8013384:	4a1b      	ldr	r2, [pc, #108]	; (80133f4 <prvAddNewTaskToReadyList+0xc4>)
 8013386:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013388:	4b1a      	ldr	r3, [pc, #104]	; (80133f4 <prvAddNewTaskToReadyList+0xc4>)
 801338a:	681a      	ldr	r2, [r3, #0]
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013394:	4b18      	ldr	r3, [pc, #96]	; (80133f8 <prvAddNewTaskToReadyList+0xc8>)
 8013396:	681b      	ldr	r3, [r3, #0]
 8013398:	429a      	cmp	r2, r3
 801339a:	d903      	bls.n	80133a4 <prvAddNewTaskToReadyList+0x74>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133a0:	4a15      	ldr	r2, [pc, #84]	; (80133f8 <prvAddNewTaskToReadyList+0xc8>)
 80133a2:	6013      	str	r3, [r2, #0]
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a8:	4613      	mov	r3, r2
 80133aa:	009b      	lsls	r3, r3, #2
 80133ac:	4413      	add	r3, r2
 80133ae:	009b      	lsls	r3, r3, #2
 80133b0:	4a12      	ldr	r2, [pc, #72]	; (80133fc <prvAddNewTaskToReadyList+0xcc>)
 80133b2:	441a      	add	r2, r3
 80133b4:	687b      	ldr	r3, [r7, #4]
 80133b6:	3304      	adds	r3, #4
 80133b8:	4619      	mov	r1, r3
 80133ba:	4610      	mov	r0, r2
 80133bc:	f7fe ff63 	bl	8012286 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80133c0:	f001 fa1e 	bl	8014800 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80133c4:	4b0a      	ldr	r3, [pc, #40]	; (80133f0 <prvAddNewTaskToReadyList+0xc0>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d008      	beq.n	80133de <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80133cc:	4b07      	ldr	r3, [pc, #28]	; (80133ec <prvAddNewTaskToReadyList+0xbc>)
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d6:	429a      	cmp	r2, r3
 80133d8:	d201      	bcs.n	80133de <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80133da:	f001 f9ed 	bl	80147b8 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133de:	bf00      	nop
 80133e0:	3708      	adds	r7, #8
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	20021d24 	.word	0x20021d24
 80133ec:	20021850 	.word	0x20021850
 80133f0:	20021d30 	.word	0x20021d30
 80133f4:	20021d40 	.word	0x20021d40
 80133f8:	20021d2c 	.word	0x20021d2c
 80133fc:	20021854 	.word	0x20021854

08013400 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013400:	b580      	push	{r7, lr}
 8013402:	b084      	sub	sp, #16
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013408:	2300      	movs	r3, #0
 801340a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	2b00      	cmp	r3, #0
 8013410:	d00f      	beq.n	8013432 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013412:	4b0c      	ldr	r3, [pc, #48]	; (8013444 <vTaskDelay+0x44>)
 8013414:	681b      	ldr	r3, [r3, #0]
 8013416:	2b00      	cmp	r3, #0
 8013418:	d002      	beq.n	8013420 <vTaskDelay+0x20>
 801341a:	f001 fb15 	bl	8014a48 <ulSetInterruptMask>
 801341e:	e7fe      	b.n	801341e <vTaskDelay+0x1e>
			vTaskSuspendAll();
 8013420:	f000 f872 	bl	8013508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013424:	2100      	movs	r1, #0
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f000 fd6a 	bl	8013f00 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801342c:	f000 f87a 	bl	8013524 <xTaskResumeAll>
 8013430:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	2b00      	cmp	r3, #0
 8013436:	d101      	bne.n	801343c <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 8013438:	f001 f9be 	bl	80147b8 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801343c:	bf00      	nop
 801343e:	3710      	adds	r7, #16
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	20021d4c 	.word	0x20021d4c

08013448 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013448:	b580      	push	{r7, lr}
 801344a:	b088      	sub	sp, #32
 801344c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801344e:	2300      	movs	r3, #0
 8013450:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013452:	2300      	movs	r3, #0
 8013454:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013456:	463a      	mov	r2, r7
 8013458:	1d39      	adds	r1, r7, #4
 801345a:	f107 0308 	add.w	r3, r7, #8
 801345e:	4618      	mov	r0, r3
 8013460:	f7fe feb0 	bl	80121c4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013464:	6839      	ldr	r1, [r7, #0]
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	68ba      	ldr	r2, [r7, #8]
 801346a:	9202      	str	r2, [sp, #8]
 801346c:	9301      	str	r3, [sp, #4]
 801346e:	2300      	movs	r3, #0
 8013470:	9300      	str	r3, [sp, #0]
 8013472:	2300      	movs	r3, #0
 8013474:	460a      	mov	r2, r1
 8013476:	491c      	ldr	r1, [pc, #112]	; (80134e8 <vTaskStartScheduler+0xa0>)
 8013478:	481c      	ldr	r0, [pc, #112]	; (80134ec <vTaskStartScheduler+0xa4>)
 801347a:	f7ff fe2f 	bl	80130dc <xTaskCreateStatic>
 801347e:	4603      	mov	r3, r0
 8013480:	4a1b      	ldr	r2, [pc, #108]	; (80134f0 <vTaskStartScheduler+0xa8>)
 8013482:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013484:	4b1a      	ldr	r3, [pc, #104]	; (80134f0 <vTaskStartScheduler+0xa8>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d002      	beq.n	8013492 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801348c:	2301      	movs	r3, #1
 801348e:	60fb      	str	r3, [r7, #12]
 8013490:	e001      	b.n	8013496 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013492:	2300      	movs	r3, #0
 8013494:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8013496:	68fb      	ldr	r3, [r7, #12]
 8013498:	2b01      	cmp	r3, #1
 801349a:	d102      	bne.n	80134a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801349c:	f000 fd84 	bl	8013fa8 <xTimerCreateTimerTask>
 80134a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d113      	bne.n	80134d0 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80134a8:	f001 face 	bl	8014a48 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80134ac:	4b11      	ldr	r3, [pc, #68]	; (80134f4 <vTaskStartScheduler+0xac>)
 80134ae:	681b      	ldr	r3, [r3, #0]
 80134b0:	3354      	adds	r3, #84	; 0x54
 80134b2:	4a11      	ldr	r2, [pc, #68]	; (80134f8 <vTaskStartScheduler+0xb0>)
 80134b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80134b6:	4b11      	ldr	r3, [pc, #68]	; (80134fc <vTaskStartScheduler+0xb4>)
 80134b8:	f04f 32ff 	mov.w	r2, #4294967295
 80134bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80134be:	4b10      	ldr	r3, [pc, #64]	; (8013500 <vTaskStartScheduler+0xb8>)
 80134c0:	2201      	movs	r2, #1
 80134c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80134c4:	4b0f      	ldr	r3, [pc, #60]	; (8013504 <vTaskStartScheduler+0xbc>)
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80134ca:	f001 fa6d 	bl	80149a8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80134ce:	e006      	b.n	80134de <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80134d0:	68fb      	ldr	r3, [r7, #12]
 80134d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80134d6:	d102      	bne.n	80134de <vTaskStartScheduler+0x96>
 80134d8:	f001 fab6 	bl	8014a48 <ulSetInterruptMask>
 80134dc:	e7fe      	b.n	80134dc <vTaskStartScheduler+0x94>
}
 80134de:	bf00      	nop
 80134e0:	3710      	adds	r7, #16
 80134e2:	46bd      	mov	sp, r7
 80134e4:	bd80      	pop	{r7, pc}
 80134e6:	bf00      	nop
 80134e8:	08016640 	.word	0x08016640
 80134ec:	08013a99 	.word	0x08013a99
 80134f0:	20021d48 	.word	0x20021d48
 80134f4:	20021850 	.word	0x20021850
 80134f8:	2001b708 	.word	0x2001b708
 80134fc:	20021d44 	.word	0x20021d44
 8013500:	20021d30 	.word	0x20021d30
 8013504:	20021d28 	.word	0x20021d28

08013508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013508:	b480      	push	{r7}
 801350a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801350c:	4b04      	ldr	r3, [pc, #16]	; (8013520 <vTaskSuspendAll+0x18>)
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	3301      	adds	r3, #1
 8013512:	4a03      	ldr	r2, [pc, #12]	; (8013520 <vTaskSuspendAll+0x18>)
 8013514:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8013516:	bf00      	nop
 8013518:	46bd      	mov	sp, r7
 801351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351e:	4770      	bx	lr
 8013520:	20021d4c 	.word	0x20021d4c

08013524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013524:	b580      	push	{r7, lr}
 8013526:	b084      	sub	sp, #16
 8013528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801352a:	2300      	movs	r3, #0
 801352c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801352e:	2300      	movs	r3, #0
 8013530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013532:	4b3b      	ldr	r3, [pc, #236]	; (8013620 <xTaskResumeAll+0xfc>)
 8013534:	681b      	ldr	r3, [r3, #0]
 8013536:	2b00      	cmp	r3, #0
 8013538:	d102      	bne.n	8013540 <xTaskResumeAll+0x1c>
 801353a:	f001 fa85 	bl	8014a48 <ulSetInterruptMask>
 801353e:	e7fe      	b.n	801353e <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013540:	f001 f94c 	bl	80147dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013544:	4b36      	ldr	r3, [pc, #216]	; (8013620 <xTaskResumeAll+0xfc>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	3b01      	subs	r3, #1
 801354a:	4a35      	ldr	r2, [pc, #212]	; (8013620 <xTaskResumeAll+0xfc>)
 801354c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801354e:	4b34      	ldr	r3, [pc, #208]	; (8013620 <xTaskResumeAll+0xfc>)
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d15c      	bne.n	8013610 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013556:	4b33      	ldr	r3, [pc, #204]	; (8013624 <xTaskResumeAll+0x100>)
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	2b00      	cmp	r3, #0
 801355c:	d058      	beq.n	8013610 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801355e:	e02f      	b.n	80135c0 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013560:	4b31      	ldr	r3, [pc, #196]	; (8013628 <xTaskResumeAll+0x104>)
 8013562:	68db      	ldr	r3, [r3, #12]
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	3318      	adds	r3, #24
 801356c:	4618      	mov	r0, r3
 801356e:	f7fe fee7 	bl	8012340 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	3304      	adds	r3, #4
 8013576:	4618      	mov	r0, r3
 8013578:	f7fe fee2 	bl	8012340 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801357c:	68fb      	ldr	r3, [r7, #12]
 801357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013580:	4b2a      	ldr	r3, [pc, #168]	; (801362c <xTaskResumeAll+0x108>)
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	429a      	cmp	r2, r3
 8013586:	d903      	bls.n	8013590 <xTaskResumeAll+0x6c>
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801358c:	4a27      	ldr	r2, [pc, #156]	; (801362c <xTaskResumeAll+0x108>)
 801358e:	6013      	str	r3, [r2, #0]
 8013590:	68fb      	ldr	r3, [r7, #12]
 8013592:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013594:	4613      	mov	r3, r2
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	4413      	add	r3, r2
 801359a:	009b      	lsls	r3, r3, #2
 801359c:	4a24      	ldr	r2, [pc, #144]	; (8013630 <xTaskResumeAll+0x10c>)
 801359e:	441a      	add	r2, r3
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	3304      	adds	r3, #4
 80135a4:	4619      	mov	r1, r3
 80135a6:	4610      	mov	r0, r2
 80135a8:	f7fe fe6d 	bl	8012286 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80135ac:	68fb      	ldr	r3, [r7, #12]
 80135ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80135b0:	4b20      	ldr	r3, [pc, #128]	; (8013634 <xTaskResumeAll+0x110>)
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80135b6:	429a      	cmp	r2, r3
 80135b8:	d302      	bcc.n	80135c0 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 80135ba:	4b1f      	ldr	r3, [pc, #124]	; (8013638 <xTaskResumeAll+0x114>)
 80135bc:	2201      	movs	r2, #1
 80135be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80135c0:	4b19      	ldr	r3, [pc, #100]	; (8013628 <xTaskResumeAll+0x104>)
 80135c2:	681b      	ldr	r3, [r3, #0]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d1cb      	bne.n	8013560 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	2b00      	cmp	r3, #0
 80135cc:	d001      	beq.n	80135d2 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80135ce:	f000 fb0d 	bl	8013bec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80135d2:	4b1a      	ldr	r3, [pc, #104]	; (801363c <xTaskResumeAll+0x118>)
 80135d4:	681b      	ldr	r3, [r3, #0]
 80135d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	d010      	beq.n	8013600 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80135de:	f000 f83f 	bl	8013660 <xTaskIncrementTick>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d002      	beq.n	80135ee <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 80135e8:	4b13      	ldr	r3, [pc, #76]	; (8013638 <xTaskResumeAll+0x114>)
 80135ea:	2201      	movs	r2, #1
 80135ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	3b01      	subs	r3, #1
 80135f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d1f1      	bne.n	80135de <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 80135fa:	4b10      	ldr	r3, [pc, #64]	; (801363c <xTaskResumeAll+0x118>)
 80135fc:	2200      	movs	r2, #0
 80135fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013600:	4b0d      	ldr	r3, [pc, #52]	; (8013638 <xTaskResumeAll+0x114>)
 8013602:	681b      	ldr	r3, [r3, #0]
 8013604:	2b00      	cmp	r3, #0
 8013606:	d003      	beq.n	8013610 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013608:	2301      	movs	r3, #1
 801360a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801360c:	f001 f8d4 	bl	80147b8 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013610:	f001 f8f6 	bl	8014800 <vPortExitCritical>

	return xAlreadyYielded;
 8013614:	68bb      	ldr	r3, [r7, #8]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3710      	adds	r7, #16
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
 801361e:	bf00      	nop
 8013620:	20021d4c 	.word	0x20021d4c
 8013624:	20021d24 	.word	0x20021d24
 8013628:	20021ce4 	.word	0x20021ce4
 801362c:	20021d2c 	.word	0x20021d2c
 8013630:	20021854 	.word	0x20021854
 8013634:	20021850 	.word	0x20021850
 8013638:	20021d38 	.word	0x20021d38
 801363c:	20021d34 	.word	0x20021d34

08013640 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013640:	b480      	push	{r7}
 8013642:	b083      	sub	sp, #12
 8013644:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013646:	4b05      	ldr	r3, [pc, #20]	; (801365c <xTaskGetTickCount+0x1c>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801364c:	687b      	ldr	r3, [r7, #4]
}
 801364e:	4618      	mov	r0, r3
 8013650:	370c      	adds	r7, #12
 8013652:	46bd      	mov	sp, r7
 8013654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013658:	4770      	bx	lr
 801365a:	bf00      	nop
 801365c:	20021d28 	.word	0x20021d28

08013660 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b086      	sub	sp, #24
 8013664:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013666:	2300      	movs	r3, #0
 8013668:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801366a:	4b4b      	ldr	r3, [pc, #300]	; (8013798 <xTaskIncrementTick+0x138>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	2b00      	cmp	r3, #0
 8013670:	f040 8087 	bne.w	8013782 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013674:	4b49      	ldr	r3, [pc, #292]	; (801379c <xTaskIncrementTick+0x13c>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	3301      	adds	r3, #1
 801367a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801367c:	4a47      	ldr	r2, [pc, #284]	; (801379c <xTaskIncrementTick+0x13c>)
 801367e:	693b      	ldr	r3, [r7, #16]
 8013680:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013682:	693b      	ldr	r3, [r7, #16]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d118      	bne.n	80136ba <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013688:	4b45      	ldr	r3, [pc, #276]	; (80137a0 <xTaskIncrementTick+0x140>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	2b00      	cmp	r3, #0
 8013690:	d002      	beq.n	8013698 <xTaskIncrementTick+0x38>
 8013692:	f001 f9d9 	bl	8014a48 <ulSetInterruptMask>
 8013696:	e7fe      	b.n	8013696 <xTaskIncrementTick+0x36>
 8013698:	4b41      	ldr	r3, [pc, #260]	; (80137a0 <xTaskIncrementTick+0x140>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	60fb      	str	r3, [r7, #12]
 801369e:	4b41      	ldr	r3, [pc, #260]	; (80137a4 <xTaskIncrementTick+0x144>)
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	4a3f      	ldr	r2, [pc, #252]	; (80137a0 <xTaskIncrementTick+0x140>)
 80136a4:	6013      	str	r3, [r2, #0]
 80136a6:	4a3f      	ldr	r2, [pc, #252]	; (80137a4 <xTaskIncrementTick+0x144>)
 80136a8:	68fb      	ldr	r3, [r7, #12]
 80136aa:	6013      	str	r3, [r2, #0]
 80136ac:	4b3e      	ldr	r3, [pc, #248]	; (80137a8 <xTaskIncrementTick+0x148>)
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	3301      	adds	r3, #1
 80136b2:	4a3d      	ldr	r2, [pc, #244]	; (80137a8 <xTaskIncrementTick+0x148>)
 80136b4:	6013      	str	r3, [r2, #0]
 80136b6:	f000 fa99 	bl	8013bec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80136ba:	4b3c      	ldr	r3, [pc, #240]	; (80137ac <xTaskIncrementTick+0x14c>)
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	693a      	ldr	r2, [r7, #16]
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d349      	bcc.n	8013758 <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80136c4:	4b36      	ldr	r3, [pc, #216]	; (80137a0 <xTaskIncrementTick+0x140>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	681b      	ldr	r3, [r3, #0]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d104      	bne.n	80136d8 <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80136ce:	4b37      	ldr	r3, [pc, #220]	; (80137ac <xTaskIncrementTick+0x14c>)
 80136d0:	f04f 32ff 	mov.w	r2, #4294967295
 80136d4:	601a      	str	r2, [r3, #0]
					break;
 80136d6:	e03f      	b.n	8013758 <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80136d8:	4b31      	ldr	r3, [pc, #196]	; (80137a0 <xTaskIncrementTick+0x140>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	68db      	ldr	r3, [r3, #12]
 80136e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80136e2:	68bb      	ldr	r3, [r7, #8]
 80136e4:	685b      	ldr	r3, [r3, #4]
 80136e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80136e8:	693a      	ldr	r2, [r7, #16]
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d203      	bcs.n	80136f8 <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80136f0:	4a2e      	ldr	r2, [pc, #184]	; (80137ac <xTaskIncrementTick+0x14c>)
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80136f6:	e02f      	b.n	8013758 <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80136f8:	68bb      	ldr	r3, [r7, #8]
 80136fa:	3304      	adds	r3, #4
 80136fc:	4618      	mov	r0, r3
 80136fe:	f7fe fe1f 	bl	8012340 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013706:	2b00      	cmp	r3, #0
 8013708:	d004      	beq.n	8013714 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801370a:	68bb      	ldr	r3, [r7, #8]
 801370c:	3318      	adds	r3, #24
 801370e:	4618      	mov	r0, r3
 8013710:	f7fe fe16 	bl	8012340 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013714:	68bb      	ldr	r3, [r7, #8]
 8013716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013718:	4b25      	ldr	r3, [pc, #148]	; (80137b0 <xTaskIncrementTick+0x150>)
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	429a      	cmp	r2, r3
 801371e:	d903      	bls.n	8013728 <xTaskIncrementTick+0xc8>
 8013720:	68bb      	ldr	r3, [r7, #8]
 8013722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013724:	4a22      	ldr	r2, [pc, #136]	; (80137b0 <xTaskIncrementTick+0x150>)
 8013726:	6013      	str	r3, [r2, #0]
 8013728:	68bb      	ldr	r3, [r7, #8]
 801372a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801372c:	4613      	mov	r3, r2
 801372e:	009b      	lsls	r3, r3, #2
 8013730:	4413      	add	r3, r2
 8013732:	009b      	lsls	r3, r3, #2
 8013734:	4a1f      	ldr	r2, [pc, #124]	; (80137b4 <xTaskIncrementTick+0x154>)
 8013736:	441a      	add	r2, r3
 8013738:	68bb      	ldr	r3, [r7, #8]
 801373a:	3304      	adds	r3, #4
 801373c:	4619      	mov	r1, r3
 801373e:	4610      	mov	r0, r2
 8013740:	f7fe fda1 	bl	8012286 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013744:	68bb      	ldr	r3, [r7, #8]
 8013746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013748:	4b1b      	ldr	r3, [pc, #108]	; (80137b8 <xTaskIncrementTick+0x158>)
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801374e:	429a      	cmp	r2, r3
 8013750:	d3b8      	bcc.n	80136c4 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 8013752:	2301      	movs	r3, #1
 8013754:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013756:	e7b5      	b.n	80136c4 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013758:	4b17      	ldr	r3, [pc, #92]	; (80137b8 <xTaskIncrementTick+0x158>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375e:	4915      	ldr	r1, [pc, #84]	; (80137b4 <xTaskIncrementTick+0x154>)
 8013760:	4613      	mov	r3, r2
 8013762:	009b      	lsls	r3, r3, #2
 8013764:	4413      	add	r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	440b      	add	r3, r1
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	2b01      	cmp	r3, #1
 801376e:	d901      	bls.n	8013774 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 8013770:	2301      	movs	r3, #1
 8013772:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013774:	4b11      	ldr	r3, [pc, #68]	; (80137bc <xTaskIncrementTick+0x15c>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d007      	beq.n	801378c <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 801377c:	2301      	movs	r3, #1
 801377e:	617b      	str	r3, [r7, #20]
 8013780:	e004      	b.n	801378c <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013782:	4b0f      	ldr	r3, [pc, #60]	; (80137c0 <xTaskIncrementTick+0x160>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	3301      	adds	r3, #1
 8013788:	4a0d      	ldr	r2, [pc, #52]	; (80137c0 <xTaskIncrementTick+0x160>)
 801378a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801378c:	697b      	ldr	r3, [r7, #20]
}
 801378e:	4618      	mov	r0, r3
 8013790:	3718      	adds	r7, #24
 8013792:	46bd      	mov	sp, r7
 8013794:	bd80      	pop	{r7, pc}
 8013796:	bf00      	nop
 8013798:	20021d4c 	.word	0x20021d4c
 801379c:	20021d28 	.word	0x20021d28
 80137a0:	20021cdc 	.word	0x20021cdc
 80137a4:	20021ce0 	.word	0x20021ce0
 80137a8:	20021d3c 	.word	0x20021d3c
 80137ac:	20021d44 	.word	0x20021d44
 80137b0:	20021d2c 	.word	0x20021d2c
 80137b4:	20021854 	.word	0x20021854
 80137b8:	20021850 	.word	0x20021850
 80137bc:	20021d38 	.word	0x20021d38
 80137c0:	20021d34 	.word	0x20021d34

080137c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80137c4:	b580      	push	{r7, lr}
 80137c6:	b082      	sub	sp, #8
 80137c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80137ca:	4b25      	ldr	r3, [pc, #148]	; (8013860 <vTaskSwitchContext+0x9c>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d003      	beq.n	80137da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80137d2:	4b24      	ldr	r3, [pc, #144]	; (8013864 <vTaskSwitchContext+0xa0>)
 80137d4:	2201      	movs	r2, #1
 80137d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80137d8:	e03e      	b.n	8013858 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80137da:	4b22      	ldr	r3, [pc, #136]	; (8013864 <vTaskSwitchContext+0xa0>)
 80137dc:	2200      	movs	r2, #0
 80137de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80137e0:	4b21      	ldr	r3, [pc, #132]	; (8013868 <vTaskSwitchContext+0xa4>)
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	607b      	str	r3, [r7, #4]
 80137e6:	e008      	b.n	80137fa <vTaskSwitchContext+0x36>
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d102      	bne.n	80137f4 <vTaskSwitchContext+0x30>
 80137ee:	f001 f92b 	bl	8014a48 <ulSetInterruptMask>
 80137f2:	e7fe      	b.n	80137f2 <vTaskSwitchContext+0x2e>
 80137f4:	687b      	ldr	r3, [r7, #4]
 80137f6:	3b01      	subs	r3, #1
 80137f8:	607b      	str	r3, [r7, #4]
 80137fa:	491c      	ldr	r1, [pc, #112]	; (801386c <vTaskSwitchContext+0xa8>)
 80137fc:	687a      	ldr	r2, [r7, #4]
 80137fe:	4613      	mov	r3, r2
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	4413      	add	r3, r2
 8013804:	009b      	lsls	r3, r3, #2
 8013806:	440b      	add	r3, r1
 8013808:	681b      	ldr	r3, [r3, #0]
 801380a:	2b00      	cmp	r3, #0
 801380c:	d0ec      	beq.n	80137e8 <vTaskSwitchContext+0x24>
 801380e:	687a      	ldr	r2, [r7, #4]
 8013810:	4613      	mov	r3, r2
 8013812:	009b      	lsls	r3, r3, #2
 8013814:	4413      	add	r3, r2
 8013816:	009b      	lsls	r3, r3, #2
 8013818:	4a14      	ldr	r2, [pc, #80]	; (801386c <vTaskSwitchContext+0xa8>)
 801381a:	4413      	add	r3, r2
 801381c:	603b      	str	r3, [r7, #0]
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	685a      	ldr	r2, [r3, #4]
 8013824:	683b      	ldr	r3, [r7, #0]
 8013826:	605a      	str	r2, [r3, #4]
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	685a      	ldr	r2, [r3, #4]
 801382c:	683b      	ldr	r3, [r7, #0]
 801382e:	3308      	adds	r3, #8
 8013830:	429a      	cmp	r2, r3
 8013832:	d104      	bne.n	801383e <vTaskSwitchContext+0x7a>
 8013834:	683b      	ldr	r3, [r7, #0]
 8013836:	685b      	ldr	r3, [r3, #4]
 8013838:	685a      	ldr	r2, [r3, #4]
 801383a:	683b      	ldr	r3, [r7, #0]
 801383c:	605a      	str	r2, [r3, #4]
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	685b      	ldr	r3, [r3, #4]
 8013842:	68db      	ldr	r3, [r3, #12]
 8013844:	4a0a      	ldr	r2, [pc, #40]	; (8013870 <vTaskSwitchContext+0xac>)
 8013846:	6013      	str	r3, [r2, #0]
 8013848:	4a07      	ldr	r2, [pc, #28]	; (8013868 <vTaskSwitchContext+0xa4>)
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801384e:	4b08      	ldr	r3, [pc, #32]	; (8013870 <vTaskSwitchContext+0xac>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	3354      	adds	r3, #84	; 0x54
 8013854:	4a07      	ldr	r2, [pc, #28]	; (8013874 <vTaskSwitchContext+0xb0>)
 8013856:	6013      	str	r3, [r2, #0]
}
 8013858:	bf00      	nop
 801385a:	3708      	adds	r7, #8
 801385c:	46bd      	mov	sp, r7
 801385e:	bd80      	pop	{r7, pc}
 8013860:	20021d4c 	.word	0x20021d4c
 8013864:	20021d38 	.word	0x20021d38
 8013868:	20021d2c 	.word	0x20021d2c
 801386c:	20021854 	.word	0x20021854
 8013870:	20021850 	.word	0x20021850
 8013874:	2001b708 	.word	0x2001b708

08013878 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013878:	b580      	push	{r7, lr}
 801387a:	b082      	sub	sp, #8
 801387c:	af00      	add	r7, sp, #0
 801387e:	6078      	str	r0, [r7, #4]
 8013880:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d102      	bne.n	801388e <vTaskPlaceOnEventList+0x16>
 8013888:	f001 f8de 	bl	8014a48 <ulSetInterruptMask>
 801388c:	e7fe      	b.n	801388c <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801388e:	4b07      	ldr	r3, [pc, #28]	; (80138ac <vTaskPlaceOnEventList+0x34>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	3318      	adds	r3, #24
 8013894:	4619      	mov	r1, r3
 8013896:	6878      	ldr	r0, [r7, #4]
 8013898:	f7fe fd19 	bl	80122ce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801389c:	2101      	movs	r1, #1
 801389e:	6838      	ldr	r0, [r7, #0]
 80138a0:	f000 fb2e 	bl	8013f00 <prvAddCurrentTaskToDelayedList>
}
 80138a4:	bf00      	nop
 80138a6:	3708      	adds	r7, #8
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	20021850 	.word	0x20021850

080138b0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	60b9      	str	r1, [r7, #8]
 80138ba:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d102      	bne.n	80138c8 <vTaskPlaceOnEventListRestricted+0x18>
 80138c2:	f001 f8c1 	bl	8014a48 <ulSetInterruptMask>
 80138c6:	e7fe      	b.n	80138c6 <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80138c8:	4b0a      	ldr	r3, [pc, #40]	; (80138f4 <vTaskPlaceOnEventListRestricted+0x44>)
 80138ca:	681b      	ldr	r3, [r3, #0]
 80138cc:	3318      	adds	r3, #24
 80138ce:	4619      	mov	r1, r3
 80138d0:	68f8      	ldr	r0, [r7, #12]
 80138d2:	f7fe fcd8 	bl	8012286 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80138d6:	687b      	ldr	r3, [r7, #4]
 80138d8:	2b00      	cmp	r3, #0
 80138da:	d002      	beq.n	80138e2 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 80138dc:	f04f 33ff 	mov.w	r3, #4294967295
 80138e0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80138e2:	6879      	ldr	r1, [r7, #4]
 80138e4:	68b8      	ldr	r0, [r7, #8]
 80138e6:	f000 fb0b 	bl	8013f00 <prvAddCurrentTaskToDelayedList>
	}
 80138ea:	bf00      	nop
 80138ec:	3710      	adds	r7, #16
 80138ee:	46bd      	mov	sp, r7
 80138f0:	bd80      	pop	{r7, pc}
 80138f2:	bf00      	nop
 80138f4:	20021850 	.word	0x20021850

080138f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80138f8:	b580      	push	{r7, lr}
 80138fa:	b084      	sub	sp, #16
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	68db      	ldr	r3, [r3, #12]
 8013906:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8013908:	68bb      	ldr	r3, [r7, #8]
 801390a:	2b00      	cmp	r3, #0
 801390c:	d102      	bne.n	8013914 <xTaskRemoveFromEventList+0x1c>
 801390e:	f001 f89b 	bl	8014a48 <ulSetInterruptMask>
 8013912:	e7fe      	b.n	8013912 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013914:	68bb      	ldr	r3, [r7, #8]
 8013916:	3318      	adds	r3, #24
 8013918:	4618      	mov	r0, r3
 801391a:	f7fe fd11 	bl	8012340 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801391e:	4b1e      	ldr	r3, [pc, #120]	; (8013998 <xTaskRemoveFromEventList+0xa0>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	2b00      	cmp	r3, #0
 8013924:	d11d      	bne.n	8013962 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013926:	68bb      	ldr	r3, [r7, #8]
 8013928:	3304      	adds	r3, #4
 801392a:	4618      	mov	r0, r3
 801392c:	f7fe fd08 	bl	8012340 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013930:	68bb      	ldr	r3, [r7, #8]
 8013932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013934:	4b19      	ldr	r3, [pc, #100]	; (801399c <xTaskRemoveFromEventList+0xa4>)
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	429a      	cmp	r2, r3
 801393a:	d903      	bls.n	8013944 <xTaskRemoveFromEventList+0x4c>
 801393c:	68bb      	ldr	r3, [r7, #8]
 801393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013940:	4a16      	ldr	r2, [pc, #88]	; (801399c <xTaskRemoveFromEventList+0xa4>)
 8013942:	6013      	str	r3, [r2, #0]
 8013944:	68bb      	ldr	r3, [r7, #8]
 8013946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013948:	4613      	mov	r3, r2
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	4413      	add	r3, r2
 801394e:	009b      	lsls	r3, r3, #2
 8013950:	4a13      	ldr	r2, [pc, #76]	; (80139a0 <xTaskRemoveFromEventList+0xa8>)
 8013952:	441a      	add	r2, r3
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	3304      	adds	r3, #4
 8013958:	4619      	mov	r1, r3
 801395a:	4610      	mov	r0, r2
 801395c:	f7fe fc93 	bl	8012286 <vListInsertEnd>
 8013960:	e005      	b.n	801396e <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013962:	68bb      	ldr	r3, [r7, #8]
 8013964:	3318      	adds	r3, #24
 8013966:	4619      	mov	r1, r3
 8013968:	480e      	ldr	r0, [pc, #56]	; (80139a4 <xTaskRemoveFromEventList+0xac>)
 801396a:	f7fe fc8c 	bl	8012286 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801396e:	68bb      	ldr	r3, [r7, #8]
 8013970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013972:	4b0d      	ldr	r3, [pc, #52]	; (80139a8 <xTaskRemoveFromEventList+0xb0>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013978:	429a      	cmp	r2, r3
 801397a:	d905      	bls.n	8013988 <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801397c:	2301      	movs	r3, #1
 801397e:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8013980:	4b0a      	ldr	r3, [pc, #40]	; (80139ac <xTaskRemoveFromEventList+0xb4>)
 8013982:	2201      	movs	r2, #1
 8013984:	601a      	str	r2, [r3, #0]
 8013986:	e001      	b.n	801398c <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 8013988:	2300      	movs	r3, #0
 801398a:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 801398c:	68fb      	ldr	r3, [r7, #12]
}
 801398e:	4618      	mov	r0, r3
 8013990:	3710      	adds	r7, #16
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	20021d4c 	.word	0x20021d4c
 801399c:	20021d2c 	.word	0x20021d2c
 80139a0:	20021854 	.word	0x20021854
 80139a4:	20021ce4 	.word	0x20021ce4
 80139a8:	20021850 	.word	0x20021850
 80139ac:	20021d38 	.word	0x20021d38

080139b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80139b0:	b480      	push	{r7}
 80139b2:	b083      	sub	sp, #12
 80139b4:	af00      	add	r7, sp, #0
 80139b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80139b8:	4b06      	ldr	r3, [pc, #24]	; (80139d4 <vTaskInternalSetTimeOutState+0x24>)
 80139ba:	681a      	ldr	r2, [r3, #0]
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80139c0:	4b05      	ldr	r3, [pc, #20]	; (80139d8 <vTaskInternalSetTimeOutState+0x28>)
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	605a      	str	r2, [r3, #4]
}
 80139c8:	bf00      	nop
 80139ca:	370c      	adds	r7, #12
 80139cc:	46bd      	mov	sp, r7
 80139ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139d2:	4770      	bx	lr
 80139d4:	20021d3c 	.word	0x20021d3c
 80139d8:	20021d28 	.word	0x20021d28

080139dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b086      	sub	sp, #24
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	6078      	str	r0, [r7, #4]
 80139e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d102      	bne.n	80139f2 <xTaskCheckForTimeOut+0x16>
 80139ec:	f001 f82c 	bl	8014a48 <ulSetInterruptMask>
 80139f0:	e7fe      	b.n	80139f0 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 80139f2:	683b      	ldr	r3, [r7, #0]
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d102      	bne.n	80139fe <xTaskCheckForTimeOut+0x22>
 80139f8:	f001 f826 	bl	8014a48 <ulSetInterruptMask>
 80139fc:	e7fe      	b.n	80139fc <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 80139fe:	f000 feed 	bl	80147dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8013a02:	4b1d      	ldr	r3, [pc, #116]	; (8013a78 <xTaskCheckForTimeOut+0x9c>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	685b      	ldr	r3, [r3, #4]
 8013a0c:	693a      	ldr	r2, [r7, #16]
 8013a0e:	1ad3      	subs	r3, r2, r3
 8013a10:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a1a:	d102      	bne.n	8013a22 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8013a1c:	2300      	movs	r3, #0
 8013a1e:	617b      	str	r3, [r7, #20]
 8013a20:	e023      	b.n	8013a6a <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	681a      	ldr	r2, [r3, #0]
 8013a26:	4b15      	ldr	r3, [pc, #84]	; (8013a7c <xTaskCheckForTimeOut+0xa0>)
 8013a28:	681b      	ldr	r3, [r3, #0]
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d007      	beq.n	8013a3e <xTaskCheckForTimeOut+0x62>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	685b      	ldr	r3, [r3, #4]
 8013a32:	693a      	ldr	r2, [r7, #16]
 8013a34:	429a      	cmp	r2, r3
 8013a36:	d302      	bcc.n	8013a3e <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8013a38:	2301      	movs	r3, #1
 8013a3a:	617b      	str	r3, [r7, #20]
 8013a3c:	e015      	b.n	8013a6a <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8013a3e:	683b      	ldr	r3, [r7, #0]
 8013a40:	681b      	ldr	r3, [r3, #0]
 8013a42:	68fa      	ldr	r2, [r7, #12]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d20b      	bcs.n	8013a60 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013a48:	683b      	ldr	r3, [r7, #0]
 8013a4a:	681a      	ldr	r2, [r3, #0]
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	1ad2      	subs	r2, r2, r3
 8013a50:	683b      	ldr	r3, [r7, #0]
 8013a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013a54:	6878      	ldr	r0, [r7, #4]
 8013a56:	f7ff ffab 	bl	80139b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013a5a:	2300      	movs	r3, #0
 8013a5c:	617b      	str	r3, [r7, #20]
 8013a5e:	e004      	b.n	8013a6a <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 8013a60:	683b      	ldr	r3, [r7, #0]
 8013a62:	2200      	movs	r2, #0
 8013a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013a66:	2301      	movs	r3, #1
 8013a68:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8013a6a:	f000 fec9 	bl	8014800 <vPortExitCritical>

	return xReturn;
 8013a6e:	697b      	ldr	r3, [r7, #20]
}
 8013a70:	4618      	mov	r0, r3
 8013a72:	3718      	adds	r7, #24
 8013a74:	46bd      	mov	sp, r7
 8013a76:	bd80      	pop	{r7, pc}
 8013a78:	20021d28 	.word	0x20021d28
 8013a7c:	20021d3c 	.word	0x20021d3c

08013a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8013a80:	b480      	push	{r7}
 8013a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013a84:	4b03      	ldr	r3, [pc, #12]	; (8013a94 <vTaskMissedYield+0x14>)
 8013a86:	2201      	movs	r2, #1
 8013a88:	601a      	str	r2, [r3, #0]
}
 8013a8a:	bf00      	nop
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a92:	4770      	bx	lr
 8013a94:	20021d38 	.word	0x20021d38

08013a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013a98:	b580      	push	{r7, lr}
 8013a9a:	b082      	sub	sp, #8
 8013a9c:	af00      	add	r7, sp, #0
 8013a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8013aa0:	f000 f84a 	bl	8013b38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013aa4:	4b03      	ldr	r3, [pc, #12]	; (8013ab4 <prvIdleTask+0x1c>)
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b01      	cmp	r3, #1
 8013aaa:	d9f9      	bls.n	8013aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8013aac:	f000 fe84 	bl	80147b8 <vPortYield>
		prvCheckTasksWaitingTermination();
 8013ab0:	e7f6      	b.n	8013aa0 <prvIdleTask+0x8>
 8013ab2:	bf00      	nop
 8013ab4:	20021854 	.word	0x20021854

08013ab8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013ab8:	b580      	push	{r7, lr}
 8013aba:	b082      	sub	sp, #8
 8013abc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013abe:	2300      	movs	r3, #0
 8013ac0:	607b      	str	r3, [r7, #4]
 8013ac2:	e00c      	b.n	8013ade <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013ac4:	687a      	ldr	r2, [r7, #4]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	009b      	lsls	r3, r3, #2
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	4a12      	ldr	r2, [pc, #72]	; (8013b18 <prvInitialiseTaskLists+0x60>)
 8013ad0:	4413      	add	r3, r2
 8013ad2:	4618      	mov	r0, r3
 8013ad4:	f7fe fbaa 	bl	801222c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	3301      	adds	r3, #1
 8013adc:	607b      	str	r3, [r7, #4]
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	2b37      	cmp	r3, #55	; 0x37
 8013ae2:	d9ef      	bls.n	8013ac4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8013ae4:	480d      	ldr	r0, [pc, #52]	; (8013b1c <prvInitialiseTaskLists+0x64>)
 8013ae6:	f7fe fba1 	bl	801222c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8013aea:	480d      	ldr	r0, [pc, #52]	; (8013b20 <prvInitialiseTaskLists+0x68>)
 8013aec:	f7fe fb9e 	bl	801222c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8013af0:	480c      	ldr	r0, [pc, #48]	; (8013b24 <prvInitialiseTaskLists+0x6c>)
 8013af2:	f7fe fb9b 	bl	801222c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8013af6:	480c      	ldr	r0, [pc, #48]	; (8013b28 <prvInitialiseTaskLists+0x70>)
 8013af8:	f7fe fb98 	bl	801222c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8013afc:	480b      	ldr	r0, [pc, #44]	; (8013b2c <prvInitialiseTaskLists+0x74>)
 8013afe:	f7fe fb95 	bl	801222c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013b02:	4b0b      	ldr	r3, [pc, #44]	; (8013b30 <prvInitialiseTaskLists+0x78>)
 8013b04:	4a05      	ldr	r2, [pc, #20]	; (8013b1c <prvInitialiseTaskLists+0x64>)
 8013b06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013b08:	4b0a      	ldr	r3, [pc, #40]	; (8013b34 <prvInitialiseTaskLists+0x7c>)
 8013b0a:	4a05      	ldr	r2, [pc, #20]	; (8013b20 <prvInitialiseTaskLists+0x68>)
 8013b0c:	601a      	str	r2, [r3, #0]
}
 8013b0e:	bf00      	nop
 8013b10:	3708      	adds	r7, #8
 8013b12:	46bd      	mov	sp, r7
 8013b14:	bd80      	pop	{r7, pc}
 8013b16:	bf00      	nop
 8013b18:	20021854 	.word	0x20021854
 8013b1c:	20021cb4 	.word	0x20021cb4
 8013b20:	20021cc8 	.word	0x20021cc8
 8013b24:	20021ce4 	.word	0x20021ce4
 8013b28:	20021cf8 	.word	0x20021cf8
 8013b2c:	20021d10 	.word	0x20021d10
 8013b30:	20021cdc 	.word	0x20021cdc
 8013b34:	20021ce0 	.word	0x20021ce0

08013b38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013b38:	b580      	push	{r7, lr}
 8013b3a:	b082      	sub	sp, #8
 8013b3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b3e:	e019      	b.n	8013b74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013b40:	f000 fe4c 	bl	80147dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013b44:	4b10      	ldr	r3, [pc, #64]	; (8013b88 <prvCheckTasksWaitingTermination+0x50>)
 8013b46:	68db      	ldr	r3, [r3, #12]
 8013b48:	68db      	ldr	r3, [r3, #12]
 8013b4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	3304      	adds	r3, #4
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7fe fbf5 	bl	8012340 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013b56:	4b0d      	ldr	r3, [pc, #52]	; (8013b8c <prvCheckTasksWaitingTermination+0x54>)
 8013b58:	681b      	ldr	r3, [r3, #0]
 8013b5a:	3b01      	subs	r3, #1
 8013b5c:	4a0b      	ldr	r2, [pc, #44]	; (8013b8c <prvCheckTasksWaitingTermination+0x54>)
 8013b5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013b60:	4b0b      	ldr	r3, [pc, #44]	; (8013b90 <prvCheckTasksWaitingTermination+0x58>)
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	3b01      	subs	r3, #1
 8013b66:	4a0a      	ldr	r2, [pc, #40]	; (8013b90 <prvCheckTasksWaitingTermination+0x58>)
 8013b68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013b6a:	f000 fe49 	bl	8014800 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f810 	bl	8013b94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013b74:	4b06      	ldr	r3, [pc, #24]	; (8013b90 <prvCheckTasksWaitingTermination+0x58>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d1e1      	bne.n	8013b40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013b7c:	bf00      	nop
 8013b7e:	bf00      	nop
 8013b80:	3708      	adds	r7, #8
 8013b82:	46bd      	mov	sp, r7
 8013b84:	bd80      	pop	{r7, pc}
 8013b86:	bf00      	nop
 8013b88:	20021cf8 	.word	0x20021cf8
 8013b8c:	20021d24 	.word	0x20021d24
 8013b90:	20021d0c 	.word	0x20021d0c

08013b94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013b94:	b580      	push	{r7, lr}
 8013b96:	b082      	sub	sp, #8
 8013b98:	af00      	add	r7, sp, #0
 8013b9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	3354      	adds	r3, #84	; 0x54
 8013ba0:	4618      	mov	r0, r3
 8013ba2:	f001 fb77 	bl	8015294 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8013bac:	2b00      	cmp	r3, #0
 8013bae:	d108      	bne.n	8013bc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	f001 f85b 	bl	8014c70 <vPortFree>
				vPortFree( pxTCB );
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f001 f858 	bl	8014c70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013bc0:	e010      	b.n	8013be4 <prvDeleteTCB+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8013bc8:	2b01      	cmp	r3, #1
 8013bca:	d103      	bne.n	8013bd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013bcc:	6878      	ldr	r0, [r7, #4]
 8013bce:	f001 f84f 	bl	8014c70 <vPortFree>
	}
 8013bd2:	e007      	b.n	8013be4 <prvDeleteTCB+0x50>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013bd4:	687b      	ldr	r3, [r7, #4]
 8013bd6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8013bda:	2b02      	cmp	r3, #2
 8013bdc:	d002      	beq.n	8013be4 <prvDeleteTCB+0x50>
 8013bde:	f000 ff33 	bl	8014a48 <ulSetInterruptMask>
 8013be2:	e7fe      	b.n	8013be2 <prvDeleteTCB+0x4e>
	}
 8013be4:	bf00      	nop
 8013be6:	3708      	adds	r7, #8
 8013be8:	46bd      	mov	sp, r7
 8013bea:	bd80      	pop	{r7, pc}

08013bec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013bf2:	4b0c      	ldr	r3, [pc, #48]	; (8013c24 <prvResetNextTaskUnblockTime+0x38>)
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	681b      	ldr	r3, [r3, #0]
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d104      	bne.n	8013c06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013bfc:	4b0a      	ldr	r3, [pc, #40]	; (8013c28 <prvResetNextTaskUnblockTime+0x3c>)
 8013bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8013c02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013c04:	e008      	b.n	8013c18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013c06:	4b07      	ldr	r3, [pc, #28]	; (8013c24 <prvResetNextTaskUnblockTime+0x38>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	68db      	ldr	r3, [r3, #12]
 8013c0c:	68db      	ldr	r3, [r3, #12]
 8013c0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	685b      	ldr	r3, [r3, #4]
 8013c14:	4a04      	ldr	r2, [pc, #16]	; (8013c28 <prvResetNextTaskUnblockTime+0x3c>)
 8013c16:	6013      	str	r3, [r2, #0]
}
 8013c18:	bf00      	nop
 8013c1a:	370c      	adds	r7, #12
 8013c1c:	46bd      	mov	sp, r7
 8013c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c22:	4770      	bx	lr
 8013c24:	20021cdc 	.word	0x20021cdc
 8013c28:	20021d44 	.word	0x20021d44

08013c2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013c2c:	b480      	push	{r7}
 8013c2e:	b083      	sub	sp, #12
 8013c30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013c32:	4b0b      	ldr	r3, [pc, #44]	; (8013c60 <xTaskGetSchedulerState+0x34>)
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d102      	bne.n	8013c40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013c3a:	2301      	movs	r3, #1
 8013c3c:	607b      	str	r3, [r7, #4]
 8013c3e:	e008      	b.n	8013c52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c40:	4b08      	ldr	r3, [pc, #32]	; (8013c64 <xTaskGetSchedulerState+0x38>)
 8013c42:	681b      	ldr	r3, [r3, #0]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d102      	bne.n	8013c4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013c48:	2302      	movs	r3, #2
 8013c4a:	607b      	str	r3, [r7, #4]
 8013c4c:	e001      	b.n	8013c52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013c4e:	2300      	movs	r3, #0
 8013c50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013c52:	687b      	ldr	r3, [r7, #4]
	}
 8013c54:	4618      	mov	r0, r3
 8013c56:	370c      	adds	r7, #12
 8013c58:	46bd      	mov	sp, r7
 8013c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c5e:	4770      	bx	lr
 8013c60:	20021d30 	.word	0x20021d30
 8013c64:	20021d4c 	.word	0x20021d4c

08013c68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b084      	sub	sp, #16
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013c74:	2300      	movs	r3, #0
 8013c76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d051      	beq.n	8013d22 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c82:	4b2a      	ldr	r3, [pc, #168]	; (8013d2c <xTaskPriorityInherit+0xc4>)
 8013c84:	681b      	ldr	r3, [r3, #0]
 8013c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c88:	429a      	cmp	r2, r3
 8013c8a:	d241      	bcs.n	8013d10 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013c8c:	68bb      	ldr	r3, [r7, #8]
 8013c8e:	699b      	ldr	r3, [r3, #24]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	db06      	blt.n	8013ca2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013c94:	4b25      	ldr	r3, [pc, #148]	; (8013d2c <xTaskPriorityInherit+0xc4>)
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013ca2:	68bb      	ldr	r3, [r7, #8]
 8013ca4:	6959      	ldr	r1, [r3, #20]
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013caa:	4613      	mov	r3, r2
 8013cac:	009b      	lsls	r3, r3, #2
 8013cae:	4413      	add	r3, r2
 8013cb0:	009b      	lsls	r3, r3, #2
 8013cb2:	4a1f      	ldr	r2, [pc, #124]	; (8013d30 <xTaskPriorityInherit+0xc8>)
 8013cb4:	4413      	add	r3, r2
 8013cb6:	4299      	cmp	r1, r3
 8013cb8:	d122      	bne.n	8013d00 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013cba:	68bb      	ldr	r3, [r7, #8]
 8013cbc:	3304      	adds	r3, #4
 8013cbe:	4618      	mov	r0, r3
 8013cc0:	f7fe fb3e 	bl	8012340 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013cc4:	4b19      	ldr	r3, [pc, #100]	; (8013d2c <xTaskPriorityInherit+0xc4>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cca:	68bb      	ldr	r3, [r7, #8]
 8013ccc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013cce:	68bb      	ldr	r3, [r7, #8]
 8013cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013cd2:	4b18      	ldr	r3, [pc, #96]	; (8013d34 <xTaskPriorityInherit+0xcc>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	429a      	cmp	r2, r3
 8013cd8:	d903      	bls.n	8013ce2 <xTaskPriorityInherit+0x7a>
 8013cda:	68bb      	ldr	r3, [r7, #8]
 8013cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013cde:	4a15      	ldr	r2, [pc, #84]	; (8013d34 <xTaskPriorityInherit+0xcc>)
 8013ce0:	6013      	str	r3, [r2, #0]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ce6:	4613      	mov	r3, r2
 8013ce8:	009b      	lsls	r3, r3, #2
 8013cea:	4413      	add	r3, r2
 8013cec:	009b      	lsls	r3, r3, #2
 8013cee:	4a10      	ldr	r2, [pc, #64]	; (8013d30 <xTaskPriorityInherit+0xc8>)
 8013cf0:	441a      	add	r2, r3
 8013cf2:	68bb      	ldr	r3, [r7, #8]
 8013cf4:	3304      	adds	r3, #4
 8013cf6:	4619      	mov	r1, r3
 8013cf8:	4610      	mov	r0, r2
 8013cfa:	f7fe fac4 	bl	8012286 <vListInsertEnd>
 8013cfe:	e004      	b.n	8013d0a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013d00:	4b0a      	ldr	r3, [pc, #40]	; (8013d2c <xTaskPriorityInherit+0xc4>)
 8013d02:	681b      	ldr	r3, [r3, #0]
 8013d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d06:	68bb      	ldr	r3, [r7, #8]
 8013d08:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013d0a:	2301      	movs	r3, #1
 8013d0c:	60fb      	str	r3, [r7, #12]
 8013d0e:	e008      	b.n	8013d22 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013d10:	68bb      	ldr	r3, [r7, #8]
 8013d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d14:	4b05      	ldr	r3, [pc, #20]	; (8013d2c <xTaskPriorityInherit+0xc4>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d1a:	429a      	cmp	r2, r3
 8013d1c:	d201      	bcs.n	8013d22 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8013d1e:	2301      	movs	r3, #1
 8013d20:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013d22:	68fb      	ldr	r3, [r7, #12]
	}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3710      	adds	r7, #16
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	20021850 	.word	0x20021850
 8013d30:	20021854 	.word	0x20021854
 8013d34:	20021d2c 	.word	0x20021d2c

08013d38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013d38:	b580      	push	{r7, lr}
 8013d3a:	b084      	sub	sp, #16
 8013d3c:	af00      	add	r7, sp, #0
 8013d3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013d44:	2300      	movs	r3, #0
 8013d46:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2b00      	cmp	r3, #0
 8013d4c:	d046      	beq.n	8013ddc <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8013d4e:	4b26      	ldr	r3, [pc, #152]	; (8013de8 <xTaskPriorityDisinherit+0xb0>)
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	68ba      	ldr	r2, [r7, #8]
 8013d54:	429a      	cmp	r2, r3
 8013d56:	d002      	beq.n	8013d5e <xTaskPriorityDisinherit+0x26>
 8013d58:	f000 fe76 	bl	8014a48 <ulSetInterruptMask>
 8013d5c:	e7fe      	b.n	8013d5c <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d102      	bne.n	8013d6c <xTaskPriorityDisinherit+0x34>
 8013d66:	f000 fe6f 	bl	8014a48 <ulSetInterruptMask>
 8013d6a:	e7fe      	b.n	8013d6a <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 8013d6c:	68bb      	ldr	r3, [r7, #8]
 8013d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d70:	1e5a      	subs	r2, r3, #1
 8013d72:	68bb      	ldr	r3, [r7, #8]
 8013d74:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d7a:	68bb      	ldr	r3, [r7, #8]
 8013d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d02c      	beq.n	8013ddc <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013d82:	68bb      	ldr	r3, [r7, #8]
 8013d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013d86:	2b00      	cmp	r3, #0
 8013d88:	d128      	bne.n	8013ddc <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013d8a:	68bb      	ldr	r3, [r7, #8]
 8013d8c:	3304      	adds	r3, #4
 8013d8e:	4618      	mov	r0, r3
 8013d90:	f7fe fad6 	bl	8012340 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013da0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dac:	4b0f      	ldr	r3, [pc, #60]	; (8013dec <xTaskPriorityDisinherit+0xb4>)
 8013dae:	681b      	ldr	r3, [r3, #0]
 8013db0:	429a      	cmp	r2, r3
 8013db2:	d903      	bls.n	8013dbc <xTaskPriorityDisinherit+0x84>
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db8:	4a0c      	ldr	r2, [pc, #48]	; (8013dec <xTaskPriorityDisinherit+0xb4>)
 8013dba:	6013      	str	r3, [r2, #0]
 8013dbc:	68bb      	ldr	r3, [r7, #8]
 8013dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc0:	4613      	mov	r3, r2
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	4413      	add	r3, r2
 8013dc6:	009b      	lsls	r3, r3, #2
 8013dc8:	4a09      	ldr	r2, [pc, #36]	; (8013df0 <xTaskPriorityDisinherit+0xb8>)
 8013dca:	441a      	add	r2, r3
 8013dcc:	68bb      	ldr	r3, [r7, #8]
 8013dce:	3304      	adds	r3, #4
 8013dd0:	4619      	mov	r1, r3
 8013dd2:	4610      	mov	r0, r2
 8013dd4:	f7fe fa57 	bl	8012286 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013dd8:	2301      	movs	r3, #1
 8013dda:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013ddc:	68fb      	ldr	r3, [r7, #12]
	}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20021850 	.word	0x20021850
 8013dec:	20021d2c 	.word	0x20021d2c
 8013df0:	20021854 	.word	0x20021854

08013df4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b086      	sub	sp, #24
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8013e02:	2301      	movs	r3, #1
 8013e04:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d05a      	beq.n	8013ec2 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013e0c:	693b      	ldr	r3, [r7, #16]
 8013e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d102      	bne.n	8013e1a <vTaskPriorityDisinheritAfterTimeout+0x26>
 8013e14:	f000 fe18 	bl	8014a48 <ulSetInterruptMask>
 8013e18:	e7fe      	b.n	8013e18 <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013e1a:	693b      	ldr	r3, [r7, #16]
 8013e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e1e:	683a      	ldr	r2, [r7, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d902      	bls.n	8013e2a <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013e24:	683b      	ldr	r3, [r7, #0]
 8013e26:	617b      	str	r3, [r7, #20]
 8013e28:	e002      	b.n	8013e30 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8013e2a:	693b      	ldr	r3, [r7, #16]
 8013e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013e2e:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013e30:	693b      	ldr	r3, [r7, #16]
 8013e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e34:	697a      	ldr	r2, [r7, #20]
 8013e36:	429a      	cmp	r2, r3
 8013e38:	d043      	beq.n	8013ec2 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013e3e:	68fa      	ldr	r2, [r7, #12]
 8013e40:	429a      	cmp	r2, r3
 8013e42:	d13e      	bne.n	8013ec2 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013e44:	4b21      	ldr	r3, [pc, #132]	; (8013ecc <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	693a      	ldr	r2, [r7, #16]
 8013e4a:	429a      	cmp	r2, r3
 8013e4c:	d102      	bne.n	8013e54 <vTaskPriorityDisinheritAfterTimeout+0x60>
 8013e4e:	f000 fdfb 	bl	8014a48 <ulSetInterruptMask>
 8013e52:	e7fe      	b.n	8013e52 <vTaskPriorityDisinheritAfterTimeout+0x5e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013e54:	693b      	ldr	r3, [r7, #16]
 8013e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013e58:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	697a      	ldr	r2, [r7, #20]
 8013e5e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013e60:	693b      	ldr	r3, [r7, #16]
 8013e62:	699b      	ldr	r3, [r3, #24]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	db04      	blt.n	8013e72 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013e6e:	693b      	ldr	r3, [r7, #16]
 8013e70:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013e72:	693b      	ldr	r3, [r7, #16]
 8013e74:	6959      	ldr	r1, [r3, #20]
 8013e76:	68ba      	ldr	r2, [r7, #8]
 8013e78:	4613      	mov	r3, r2
 8013e7a:	009b      	lsls	r3, r3, #2
 8013e7c:	4413      	add	r3, r2
 8013e7e:	009b      	lsls	r3, r3, #2
 8013e80:	4a13      	ldr	r2, [pc, #76]	; (8013ed0 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8013e82:	4413      	add	r3, r2
 8013e84:	4299      	cmp	r1, r3
 8013e86:	d11c      	bne.n	8013ec2 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	3304      	adds	r3, #4
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fe fa57 	bl	8012340 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013e96:	4b0f      	ldr	r3, [pc, #60]	; (8013ed4 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	429a      	cmp	r2, r3
 8013e9c:	d903      	bls.n	8013ea6 <vTaskPriorityDisinheritAfterTimeout+0xb2>
 8013e9e:	693b      	ldr	r3, [r7, #16]
 8013ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ea2:	4a0c      	ldr	r2, [pc, #48]	; (8013ed4 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 8013ea4:	6013      	str	r3, [r2, #0]
 8013ea6:	693b      	ldr	r3, [r7, #16]
 8013ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013eaa:	4613      	mov	r3, r2
 8013eac:	009b      	lsls	r3, r3, #2
 8013eae:	4413      	add	r3, r2
 8013eb0:	009b      	lsls	r3, r3, #2
 8013eb2:	4a07      	ldr	r2, [pc, #28]	; (8013ed0 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8013eb4:	441a      	add	r2, r3
 8013eb6:	693b      	ldr	r3, [r7, #16]
 8013eb8:	3304      	adds	r3, #4
 8013eba:	4619      	mov	r1, r3
 8013ebc:	4610      	mov	r0, r2
 8013ebe:	f7fe f9e2 	bl	8012286 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013ec2:	bf00      	nop
 8013ec4:	3718      	adds	r7, #24
 8013ec6:	46bd      	mov	sp, r7
 8013ec8:	bd80      	pop	{r7, pc}
 8013eca:	bf00      	nop
 8013ecc:	20021850 	.word	0x20021850
 8013ed0:	20021854 	.word	0x20021854
 8013ed4:	20021d2c 	.word	0x20021d2c

08013ed8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013ed8:	b480      	push	{r7}
 8013eda:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013edc:	4b07      	ldr	r3, [pc, #28]	; (8013efc <pvTaskIncrementMutexHeldCount+0x24>)
 8013ede:	681b      	ldr	r3, [r3, #0]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d004      	beq.n	8013eee <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013ee4:	4b05      	ldr	r3, [pc, #20]	; (8013efc <pvTaskIncrementMutexHeldCount+0x24>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013eea:	3201      	adds	r2, #1
 8013eec:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013eee:	4b03      	ldr	r3, [pc, #12]	; (8013efc <pvTaskIncrementMutexHeldCount+0x24>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
	}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efa:	4770      	bx	lr
 8013efc:	20021850 	.word	0x20021850

08013f00 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013f00:	b580      	push	{r7, lr}
 8013f02:	b084      	sub	sp, #16
 8013f04:	af00      	add	r7, sp, #0
 8013f06:	6078      	str	r0, [r7, #4]
 8013f08:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013f0a:	4b21      	ldr	r3, [pc, #132]	; (8013f90 <prvAddCurrentTaskToDelayedList+0x90>)
 8013f0c:	681b      	ldr	r3, [r3, #0]
 8013f0e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013f10:	4b20      	ldr	r3, [pc, #128]	; (8013f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8013f12:	681b      	ldr	r3, [r3, #0]
 8013f14:	3304      	adds	r3, #4
 8013f16:	4618      	mov	r0, r3
 8013f18:	f7fe fa12 	bl	8012340 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013f22:	d10a      	bne.n	8013f3a <prvAddCurrentTaskToDelayedList+0x3a>
 8013f24:	683b      	ldr	r3, [r7, #0]
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d007      	beq.n	8013f3a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f2a:	4b1a      	ldr	r3, [pc, #104]	; (8013f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	3304      	adds	r3, #4
 8013f30:	4619      	mov	r1, r3
 8013f32:	4819      	ldr	r0, [pc, #100]	; (8013f98 <prvAddCurrentTaskToDelayedList+0x98>)
 8013f34:	f7fe f9a7 	bl	8012286 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013f38:	e026      	b.n	8013f88 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013f3a:	68fa      	ldr	r2, [r7, #12]
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	4413      	add	r3, r2
 8013f40:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013f42:	4b14      	ldr	r3, [pc, #80]	; (8013f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8013f44:	681b      	ldr	r3, [r3, #0]
 8013f46:	68ba      	ldr	r2, [r7, #8]
 8013f48:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013f4a:	68ba      	ldr	r2, [r7, #8]
 8013f4c:	68fb      	ldr	r3, [r7, #12]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d209      	bcs.n	8013f66 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f52:	4b12      	ldr	r3, [pc, #72]	; (8013f9c <prvAddCurrentTaskToDelayedList+0x9c>)
 8013f54:	681a      	ldr	r2, [r3, #0]
 8013f56:	4b0f      	ldr	r3, [pc, #60]	; (8013f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	3304      	adds	r3, #4
 8013f5c:	4619      	mov	r1, r3
 8013f5e:	4610      	mov	r0, r2
 8013f60:	f7fe f9b5 	bl	80122ce <vListInsert>
}
 8013f64:	e010      	b.n	8013f88 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013f66:	4b0e      	ldr	r3, [pc, #56]	; (8013fa0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013f68:	681a      	ldr	r2, [r3, #0]
 8013f6a:	4b0a      	ldr	r3, [pc, #40]	; (8013f94 <prvAddCurrentTaskToDelayedList+0x94>)
 8013f6c:	681b      	ldr	r3, [r3, #0]
 8013f6e:	3304      	adds	r3, #4
 8013f70:	4619      	mov	r1, r3
 8013f72:	4610      	mov	r0, r2
 8013f74:	f7fe f9ab 	bl	80122ce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013f78:	4b0a      	ldr	r3, [pc, #40]	; (8013fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	68ba      	ldr	r2, [r7, #8]
 8013f7e:	429a      	cmp	r2, r3
 8013f80:	d202      	bcs.n	8013f88 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013f82:	4a08      	ldr	r2, [pc, #32]	; (8013fa4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	6013      	str	r3, [r2, #0]
}
 8013f88:	bf00      	nop
 8013f8a:	3710      	adds	r7, #16
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	20021d28 	.word	0x20021d28
 8013f94:	20021850 	.word	0x20021850
 8013f98:	20021d10 	.word	0x20021d10
 8013f9c:	20021ce0 	.word	0x20021ce0
 8013fa0:	20021cdc 	.word	0x20021cdc
 8013fa4:	20021d44 	.word	0x20021d44

08013fa8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013fa8:	b580      	push	{r7, lr}
 8013faa:	b088      	sub	sp, #32
 8013fac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013fae:	2300      	movs	r3, #0
 8013fb0:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013fb2:	f000 fb49 	bl	8014648 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013fb6:	4b18      	ldr	r3, [pc, #96]	; (8014018 <xTimerCreateTimerTask+0x70>)
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d020      	beq.n	8014000 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013fbe:	2300      	movs	r3, #0
 8013fc0:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013fc6:	463a      	mov	r2, r7
 8013fc8:	1d39      	adds	r1, r7, #4
 8013fca:	f107 0308 	add.w	r3, r7, #8
 8013fce:	4618      	mov	r0, r3
 8013fd0:	f7fe f912 	bl	80121f8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013fd4:	6839      	ldr	r1, [r7, #0]
 8013fd6:	687b      	ldr	r3, [r7, #4]
 8013fd8:	68ba      	ldr	r2, [r7, #8]
 8013fda:	9202      	str	r2, [sp, #8]
 8013fdc:	9301      	str	r3, [sp, #4]
 8013fde:	2302      	movs	r3, #2
 8013fe0:	9300      	str	r3, [sp, #0]
 8013fe2:	2300      	movs	r3, #0
 8013fe4:	460a      	mov	r2, r1
 8013fe6:	490d      	ldr	r1, [pc, #52]	; (801401c <xTimerCreateTimerTask+0x74>)
 8013fe8:	480d      	ldr	r0, [pc, #52]	; (8014020 <xTimerCreateTimerTask+0x78>)
 8013fea:	f7ff f877 	bl	80130dc <xTaskCreateStatic>
 8013fee:	4603      	mov	r3, r0
 8013ff0:	4a0c      	ldr	r2, [pc, #48]	; (8014024 <xTimerCreateTimerTask+0x7c>)
 8013ff2:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013ff4:	4b0b      	ldr	r3, [pc, #44]	; (8014024 <xTimerCreateTimerTask+0x7c>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	2b00      	cmp	r3, #0
 8013ffa:	d001      	beq.n	8014000 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014000:	68fb      	ldr	r3, [r7, #12]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d102      	bne.n	801400c <xTimerCreateTimerTask+0x64>
 8014006:	f000 fd1f 	bl	8014a48 <ulSetInterruptMask>
 801400a:	e7fe      	b.n	801400a <xTimerCreateTimerTask+0x62>
	return xReturn;
 801400c:	68fb      	ldr	r3, [r7, #12]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3710      	adds	r7, #16
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	20021d80 	.word	0x20021d80
 801401c:	08016648 	.word	0x08016648
 8014020:	08014241 	.word	0x08014241
 8014024:	20021d84 	.word	0x20021d84

08014028 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8014028:	b580      	push	{r7, lr}
 801402a:	b088      	sub	sp, #32
 801402c:	af02      	add	r7, sp, #8
 801402e:	60f8      	str	r0, [r7, #12]
 8014030:	60b9      	str	r1, [r7, #8]
 8014032:	607a      	str	r2, [r7, #4]
 8014034:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8014036:	202c      	movs	r0, #44	; 0x2c
 8014038:	f000 fd66 	bl	8014b08 <pvPortMalloc>
 801403c:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 801403e:	697b      	ldr	r3, [r7, #20]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d00d      	beq.n	8014060 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8014044:	697b      	ldr	r3, [r7, #20]
 8014046:	2200      	movs	r2, #0
 8014048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 801404c:	697b      	ldr	r3, [r7, #20]
 801404e:	9301      	str	r3, [sp, #4]
 8014050:	6a3b      	ldr	r3, [r7, #32]
 8014052:	9300      	str	r3, [sp, #0]
 8014054:	683b      	ldr	r3, [r7, #0]
 8014056:	687a      	ldr	r2, [r7, #4]
 8014058:	68b9      	ldr	r1, [r7, #8]
 801405a:	68f8      	ldr	r0, [r7, #12]
 801405c:	f000 f833 	bl	80140c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8014060:	697b      	ldr	r3, [r7, #20]
	}
 8014062:	4618      	mov	r0, r3
 8014064:	3718      	adds	r7, #24
 8014066:	46bd      	mov	sp, r7
 8014068:	bd80      	pop	{r7, pc}

0801406a <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 801406a:	b580      	push	{r7, lr}
 801406c:	b088      	sub	sp, #32
 801406e:	af02      	add	r7, sp, #8
 8014070:	60f8      	str	r0, [r7, #12]
 8014072:	60b9      	str	r1, [r7, #8]
 8014074:	607a      	str	r2, [r7, #4]
 8014076:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8014078:	232c      	movs	r3, #44	; 0x2c
 801407a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 801407c:	693b      	ldr	r3, [r7, #16]
 801407e:	2b2c      	cmp	r3, #44	; 0x2c
 8014080:	d002      	beq.n	8014088 <xTimerCreateStatic+0x1e>
 8014082:	f000 fce1 	bl	8014a48 <ulSetInterruptMask>
 8014086:	e7fe      	b.n	8014086 <xTimerCreateStatic+0x1c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014088:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 801408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801408c:	2b00      	cmp	r3, #0
 801408e:	d102      	bne.n	8014096 <xTimerCreateStatic+0x2c>
 8014090:	f000 fcda 	bl	8014a48 <ulSetInterruptMask>
 8014094:	e7fe      	b.n	8014094 <xTimerCreateStatic+0x2a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8014096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014098:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 801409a:	697b      	ldr	r3, [r7, #20]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d00d      	beq.n	80140bc <xTimerCreateStatic+0x52>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 80140a0:	697b      	ldr	r3, [r7, #20]
 80140a2:	2202      	movs	r2, #2
 80140a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	9301      	str	r3, [sp, #4]
 80140ac:	6a3b      	ldr	r3, [r7, #32]
 80140ae:	9300      	str	r3, [sp, #0]
 80140b0:	683b      	ldr	r3, [r7, #0]
 80140b2:	687a      	ldr	r2, [r7, #4]
 80140b4:	68b9      	ldr	r1, [r7, #8]
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f000 f805 	bl	80140c6 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80140bc:	697b      	ldr	r3, [r7, #20]
	}
 80140be:	4618      	mov	r0, r3
 80140c0:	3718      	adds	r7, #24
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}

080140c6 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80140c6:	b580      	push	{r7, lr}
 80140c8:	b084      	sub	sp, #16
 80140ca:	af00      	add	r7, sp, #0
 80140cc:	60f8      	str	r0, [r7, #12]
 80140ce:	60b9      	str	r1, [r7, #8]
 80140d0:	607a      	str	r2, [r7, #4]
 80140d2:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80140d4:	68bb      	ldr	r3, [r7, #8]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d102      	bne.n	80140e0 <prvInitialiseNewTimer+0x1a>
 80140da:	f000 fcb5 	bl	8014a48 <ulSetInterruptMask>
 80140de:	e7fe      	b.n	80140de <prvInitialiseNewTimer+0x18>

	if( pxNewTimer != NULL )
 80140e0:	69fb      	ldr	r3, [r7, #28]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d01e      	beq.n	8014124 <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80140e6:	f000 faaf 	bl	8014648 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80140ea:	69fb      	ldr	r3, [r7, #28]
 80140ec:	68fa      	ldr	r2, [r7, #12]
 80140ee:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80140f0:	69fb      	ldr	r3, [r7, #28]
 80140f2:	68ba      	ldr	r2, [r7, #8]
 80140f4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80140f6:	69fb      	ldr	r3, [r7, #28]
 80140f8:	683a      	ldr	r2, [r7, #0]
 80140fa:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80140fc:	69fb      	ldr	r3, [r7, #28]
 80140fe:	69ba      	ldr	r2, [r7, #24]
 8014100:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	3304      	adds	r3, #4
 8014106:	4618      	mov	r0, r3
 8014108:	f7fe f8b0 	bl	801226c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d008      	beq.n	8014124 <prvInitialiseNewTimer+0x5e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8014112:	69fb      	ldr	r3, [r7, #28]
 8014114:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014118:	f043 0304 	orr.w	r3, r3, #4
 801411c:	b2da      	uxtb	r2, r3
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8014124:	bf00      	nop
 8014126:	3710      	adds	r7, #16
 8014128:	46bd      	mov	sp, r7
 801412a:	bd80      	pop	{r7, pc}

0801412c <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b08a      	sub	sp, #40	; 0x28
 8014130:	af00      	add	r7, sp, #0
 8014132:	60f8      	str	r0, [r7, #12]
 8014134:	60b9      	str	r1, [r7, #8]
 8014136:	607a      	str	r2, [r7, #4]
 8014138:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801413a:	2300      	movs	r3, #0
 801413c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801413e:	68fb      	ldr	r3, [r7, #12]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d102      	bne.n	801414a <xTimerGenericCommand+0x1e>
 8014144:	f000 fc80 	bl	8014a48 <ulSetInterruptMask>
 8014148:	e7fe      	b.n	8014148 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801414a:	4b1a      	ldr	r3, [pc, #104]	; (80141b4 <xTimerGenericCommand+0x88>)
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	2b00      	cmp	r3, #0
 8014150:	d02a      	beq.n	80141a8 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014152:	68bb      	ldr	r3, [r7, #8]
 8014154:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801415a:	68fb      	ldr	r3, [r7, #12]
 801415c:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801415e:	68bb      	ldr	r3, [r7, #8]
 8014160:	2b05      	cmp	r3, #5
 8014162:	dc18      	bgt.n	8014196 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014164:	f7ff fd62 	bl	8013c2c <xTaskGetSchedulerState>
 8014168:	4603      	mov	r3, r0
 801416a:	2b02      	cmp	r3, #2
 801416c:	d109      	bne.n	8014182 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801416e:	4b11      	ldr	r3, [pc, #68]	; (80141b4 <xTimerGenericCommand+0x88>)
 8014170:	6818      	ldr	r0, [r3, #0]
 8014172:	f107 0114 	add.w	r1, r7, #20
 8014176:	2300      	movs	r3, #0
 8014178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801417a:	f7fe fa52 	bl	8012622 <xQueueGenericSend>
 801417e:	6278      	str	r0, [r7, #36]	; 0x24
 8014180:	e012      	b.n	80141a8 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014182:	4b0c      	ldr	r3, [pc, #48]	; (80141b4 <xTimerGenericCommand+0x88>)
 8014184:	6818      	ldr	r0, [r3, #0]
 8014186:	f107 0114 	add.w	r1, r7, #20
 801418a:	2300      	movs	r3, #0
 801418c:	2200      	movs	r2, #0
 801418e:	f7fe fa48 	bl	8012622 <xQueueGenericSend>
 8014192:	6278      	str	r0, [r7, #36]	; 0x24
 8014194:	e008      	b.n	80141a8 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014196:	4b07      	ldr	r3, [pc, #28]	; (80141b4 <xTimerGenericCommand+0x88>)
 8014198:	6818      	ldr	r0, [r3, #0]
 801419a:	f107 0114 	add.w	r1, r7, #20
 801419e:	2300      	movs	r3, #0
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	f7fe fb07 	bl	80127b4 <xQueueGenericSendFromISR>
 80141a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80141a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80141aa:	4618      	mov	r0, r3
 80141ac:	3728      	adds	r7, #40	; 0x28
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
 80141b2:	bf00      	nop
 80141b4:	20021d80 	.word	0x20021d80

080141b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80141b8:	b580      	push	{r7, lr}
 80141ba:	b086      	sub	sp, #24
 80141bc:	af02      	add	r7, sp, #8
 80141be:	6078      	str	r0, [r7, #4]
 80141c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141c2:	4b1e      	ldr	r3, [pc, #120]	; (801423c <prvProcessExpiredTimer+0x84>)
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	68db      	ldr	r3, [r3, #12]
 80141c8:	68db      	ldr	r3, [r3, #12]
 80141ca:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	3304      	adds	r3, #4
 80141d0:	4618      	mov	r0, r3
 80141d2:	f7fe f8b5 	bl	8012340 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80141dc:	f003 0304 	and.w	r3, r3, #4
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d01a      	beq.n	801421a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80141e4:	68fb      	ldr	r3, [r7, #12]
 80141e6:	699a      	ldr	r2, [r3, #24]
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	18d1      	adds	r1, r2, r3
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	683a      	ldr	r2, [r7, #0]
 80141f0:	68f8      	ldr	r0, [r7, #12]
 80141f2:	f000 f8c1 	bl	8014378 <prvInsertTimerInActiveList>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d017      	beq.n	801422c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80141fc:	2300      	movs	r3, #0
 80141fe:	9300      	str	r3, [sp, #0]
 8014200:	2300      	movs	r3, #0
 8014202:	687a      	ldr	r2, [r7, #4]
 8014204:	2100      	movs	r1, #0
 8014206:	68f8      	ldr	r0, [r7, #12]
 8014208:	f7ff ff90 	bl	801412c <xTimerGenericCommand>
 801420c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10b      	bne.n	801422c <prvProcessExpiredTimer+0x74>
 8014214:	f000 fc18 	bl	8014a48 <ulSetInterruptMask>
 8014218:	e7fe      	b.n	8014218 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801421a:	68fb      	ldr	r3, [r7, #12]
 801421c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014220:	f023 0301 	bic.w	r3, r3, #1
 8014224:	b2da      	uxtb	r2, r3
 8014226:	68fb      	ldr	r3, [r7, #12]
 8014228:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	6a1b      	ldr	r3, [r3, #32]
 8014230:	68f8      	ldr	r0, [r7, #12]
 8014232:	4798      	blx	r3
}
 8014234:	bf00      	nop
 8014236:	3710      	adds	r7, #16
 8014238:	46bd      	mov	sp, r7
 801423a:	bd80      	pop	{r7, pc}
 801423c:	20021d78 	.word	0x20021d78

08014240 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014240:	b580      	push	{r7, lr}
 8014242:	b084      	sub	sp, #16
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014248:	f107 0308 	add.w	r3, r7, #8
 801424c:	4618      	mov	r0, r3
 801424e:	f000 f84f 	bl	80142f0 <prvGetNextExpireTime>
 8014252:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014254:	68bb      	ldr	r3, [r7, #8]
 8014256:	4619      	mov	r1, r3
 8014258:	68f8      	ldr	r0, [r7, #12]
 801425a:	f000 f803 	bl	8014264 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801425e:	f000 f8cd 	bl	80143fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014262:	e7f1      	b.n	8014248 <prvTimerTask+0x8>

08014264 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014264:	b580      	push	{r7, lr}
 8014266:	b084      	sub	sp, #16
 8014268:	af00      	add	r7, sp, #0
 801426a:	6078      	str	r0, [r7, #4]
 801426c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801426e:	f7ff f94b 	bl	8013508 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014272:	f107 0308 	add.w	r3, r7, #8
 8014276:	4618      	mov	r0, r3
 8014278:	f000 f85e 	bl	8014338 <prvSampleTimeNow>
 801427c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d12a      	bne.n	80142da <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	2b00      	cmp	r3, #0
 8014288:	d10a      	bne.n	80142a0 <prvProcessTimerOrBlockTask+0x3c>
 801428a:	687a      	ldr	r2, [r7, #4]
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	429a      	cmp	r2, r3
 8014290:	d806      	bhi.n	80142a0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014292:	f7ff f947 	bl	8013524 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014296:	68f9      	ldr	r1, [r7, #12]
 8014298:	6878      	ldr	r0, [r7, #4]
 801429a:	f7ff ff8d 	bl	80141b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801429e:	e01e      	b.n	80142de <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 80142a0:	683b      	ldr	r3, [r7, #0]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d008      	beq.n	80142b8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80142a6:	4b10      	ldr	r3, [pc, #64]	; (80142e8 <prvProcessTimerOrBlockTask+0x84>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	681b      	ldr	r3, [r3, #0]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d101      	bne.n	80142b4 <prvProcessTimerOrBlockTask+0x50>
 80142b0:	2301      	movs	r3, #1
 80142b2:	e000      	b.n	80142b6 <prvProcessTimerOrBlockTask+0x52>
 80142b4:	2300      	movs	r3, #0
 80142b6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80142b8:	4b0c      	ldr	r3, [pc, #48]	; (80142ec <prvProcessTimerOrBlockTask+0x88>)
 80142ba:	6818      	ldr	r0, [r3, #0]
 80142bc:	687a      	ldr	r2, [r7, #4]
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	1ad3      	subs	r3, r2, r3
 80142c2:	683a      	ldr	r2, [r7, #0]
 80142c4:	4619      	mov	r1, r3
 80142c6:	f7fe fed5 	bl	8013074 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80142ca:	f7ff f92b 	bl	8013524 <xTaskResumeAll>
 80142ce:	4603      	mov	r3, r0
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d104      	bne.n	80142de <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 80142d4:	f000 fa70 	bl	80147b8 <vPortYield>
}
 80142d8:	e001      	b.n	80142de <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 80142da:	f7ff f923 	bl	8013524 <xTaskResumeAll>
}
 80142de:	bf00      	nop
 80142e0:	3710      	adds	r7, #16
 80142e2:	46bd      	mov	sp, r7
 80142e4:	bd80      	pop	{r7, pc}
 80142e6:	bf00      	nop
 80142e8:	20021d7c 	.word	0x20021d7c
 80142ec:	20021d80 	.word	0x20021d80

080142f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80142f0:	b480      	push	{r7}
 80142f2:	b085      	sub	sp, #20
 80142f4:	af00      	add	r7, sp, #0
 80142f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80142f8:	4b0e      	ldr	r3, [pc, #56]	; (8014334 <prvGetNextExpireTime+0x44>)
 80142fa:	681b      	ldr	r3, [r3, #0]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	2b00      	cmp	r3, #0
 8014300:	d101      	bne.n	8014306 <prvGetNextExpireTime+0x16>
 8014302:	2201      	movs	r2, #1
 8014304:	e000      	b.n	8014308 <prvGetNextExpireTime+0x18>
 8014306:	2200      	movs	r2, #0
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	2b00      	cmp	r3, #0
 8014312:	d105      	bne.n	8014320 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014314:	4b07      	ldr	r3, [pc, #28]	; (8014334 <prvGetNextExpireTime+0x44>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	68db      	ldr	r3, [r3, #12]
 801431a:	681b      	ldr	r3, [r3, #0]
 801431c:	60fb      	str	r3, [r7, #12]
 801431e:	e001      	b.n	8014324 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014320:	2300      	movs	r3, #0
 8014322:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014324:	68fb      	ldr	r3, [r7, #12]
}
 8014326:	4618      	mov	r0, r3
 8014328:	3714      	adds	r7, #20
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr
 8014332:	bf00      	nop
 8014334:	20021d78 	.word	0x20021d78

08014338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014338:	b580      	push	{r7, lr}
 801433a:	b084      	sub	sp, #16
 801433c:	af00      	add	r7, sp, #0
 801433e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014340:	f7ff f97e 	bl	8013640 <xTaskGetTickCount>
 8014344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014346:	4b0b      	ldr	r3, [pc, #44]	; (8014374 <prvSampleTimeNow+0x3c>)
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	68fa      	ldr	r2, [r7, #12]
 801434c:	429a      	cmp	r2, r3
 801434e:	d205      	bcs.n	801435c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014350:	f000 f91e 	bl	8014590 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2201      	movs	r2, #1
 8014358:	601a      	str	r2, [r3, #0]
 801435a:	e002      	b.n	8014362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	2200      	movs	r2, #0
 8014360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014362:	4a04      	ldr	r2, [pc, #16]	; (8014374 <prvSampleTimeNow+0x3c>)
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014368:	68fb      	ldr	r3, [r7, #12]
}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	20021d88 	.word	0x20021d88

08014378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014378:	b580      	push	{r7, lr}
 801437a:	b086      	sub	sp, #24
 801437c:	af00      	add	r7, sp, #0
 801437e:	60f8      	str	r0, [r7, #12]
 8014380:	60b9      	str	r1, [r7, #8]
 8014382:	607a      	str	r2, [r7, #4]
 8014384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014386:	2300      	movs	r3, #0
 8014388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	68ba      	ldr	r2, [r7, #8]
 801438e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	68fa      	ldr	r2, [r7, #12]
 8014394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014396:	68ba      	ldr	r2, [r7, #8]
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	429a      	cmp	r2, r3
 801439c:	d812      	bhi.n	80143c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801439e:	687a      	ldr	r2, [r7, #4]
 80143a0:	683b      	ldr	r3, [r7, #0]
 80143a2:	1ad2      	subs	r2, r2, r3
 80143a4:	68fb      	ldr	r3, [r7, #12]
 80143a6:	699b      	ldr	r3, [r3, #24]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	d302      	bcc.n	80143b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80143ac:	2301      	movs	r3, #1
 80143ae:	617b      	str	r3, [r7, #20]
 80143b0:	e01b      	b.n	80143ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80143b2:	4b10      	ldr	r3, [pc, #64]	; (80143f4 <prvInsertTimerInActiveList+0x7c>)
 80143b4:	681a      	ldr	r2, [r3, #0]
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	3304      	adds	r3, #4
 80143ba:	4619      	mov	r1, r3
 80143bc:	4610      	mov	r0, r2
 80143be:	f7fd ff86 	bl	80122ce <vListInsert>
 80143c2:	e012      	b.n	80143ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80143c4:	687a      	ldr	r2, [r7, #4]
 80143c6:	683b      	ldr	r3, [r7, #0]
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d206      	bcs.n	80143da <prvInsertTimerInActiveList+0x62>
 80143cc:	68ba      	ldr	r2, [r7, #8]
 80143ce:	683b      	ldr	r3, [r7, #0]
 80143d0:	429a      	cmp	r2, r3
 80143d2:	d302      	bcc.n	80143da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80143d4:	2301      	movs	r3, #1
 80143d6:	617b      	str	r3, [r7, #20]
 80143d8:	e007      	b.n	80143ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80143da:	4b07      	ldr	r3, [pc, #28]	; (80143f8 <prvInsertTimerInActiveList+0x80>)
 80143dc:	681a      	ldr	r2, [r3, #0]
 80143de:	68fb      	ldr	r3, [r7, #12]
 80143e0:	3304      	adds	r3, #4
 80143e2:	4619      	mov	r1, r3
 80143e4:	4610      	mov	r0, r2
 80143e6:	f7fd ff72 	bl	80122ce <vListInsert>
		}
	}

	return xProcessTimerNow;
 80143ea:	697b      	ldr	r3, [r7, #20]
}
 80143ec:	4618      	mov	r0, r3
 80143ee:	3718      	adds	r7, #24
 80143f0:	46bd      	mov	sp, r7
 80143f2:	bd80      	pop	{r7, pc}
 80143f4:	20021d7c 	.word	0x20021d7c
 80143f8:	20021d78 	.word	0x20021d78

080143fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80143fc:	b580      	push	{r7, lr}
 80143fe:	b08c      	sub	sp, #48	; 0x30
 8014400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014402:	e0b2      	b.n	801456a <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014404:	68bb      	ldr	r3, [r7, #8]
 8014406:	2b00      	cmp	r3, #0
 8014408:	da11      	bge.n	801442e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801440a:	f107 0308 	add.w	r3, r7, #8
 801440e:	3304      	adds	r3, #4
 8014410:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014414:	2b00      	cmp	r3, #0
 8014416:	d102      	bne.n	801441e <prvProcessReceivedCommands+0x22>
 8014418:	f000 fb16 	bl	8014a48 <ulSetInterruptMask>
 801441c:	e7fe      	b.n	801441c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801441e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014424:	6850      	ldr	r0, [r2, #4]
 8014426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014428:	6892      	ldr	r2, [r2, #8]
 801442a:	4611      	mov	r1, r2
 801442c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801442e:	68bb      	ldr	r3, [r7, #8]
 8014430:	2b00      	cmp	r3, #0
 8014432:	f2c0 809a 	blt.w	801456a <prvProcessReceivedCommands+0x16e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801443a:	6a3b      	ldr	r3, [r7, #32]
 801443c:	695b      	ldr	r3, [r3, #20]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d004      	beq.n	801444c <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014442:	6a3b      	ldr	r3, [r7, #32]
 8014444:	3304      	adds	r3, #4
 8014446:	4618      	mov	r0, r3
 8014448:	f7fd ff7a 	bl	8012340 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801444c:	1d3b      	adds	r3, r7, #4
 801444e:	4618      	mov	r0, r3
 8014450:	f7ff ff72 	bl	8014338 <prvSampleTimeNow>
 8014454:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 8014456:	68bb      	ldr	r3, [r7, #8]
 8014458:	2b09      	cmp	r3, #9
 801445a:	f200 8085 	bhi.w	8014568 <prvProcessReceivedCommands+0x16c>
 801445e:	a201      	add	r2, pc, #4	; (adr r2, 8014464 <prvProcessReceivedCommands+0x68>)
 8014460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014464:	0801448d 	.word	0x0801448d
 8014468:	0801448d 	.word	0x0801448d
 801446c:	0801448d 	.word	0x0801448d
 8014470:	080144f1 	.word	0x080144f1
 8014474:	08014505 	.word	0x08014505
 8014478:	0801453f 	.word	0x0801453f
 801447c:	0801448d 	.word	0x0801448d
 8014480:	0801448d 	.word	0x0801448d
 8014484:	080144f1 	.word	0x080144f1
 8014488:	08014505 	.word	0x08014505
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801448c:	6a3b      	ldr	r3, [r7, #32]
 801448e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014492:	f043 0301 	orr.w	r3, r3, #1
 8014496:	b2da      	uxtb	r2, r3
 8014498:	6a3b      	ldr	r3, [r7, #32]
 801449a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801449e:	68fa      	ldr	r2, [r7, #12]
 80144a0:	6a3b      	ldr	r3, [r7, #32]
 80144a2:	699b      	ldr	r3, [r3, #24]
 80144a4:	18d1      	adds	r1, r2, r3
 80144a6:	68fb      	ldr	r3, [r7, #12]
 80144a8:	69fa      	ldr	r2, [r7, #28]
 80144aa:	6a38      	ldr	r0, [r7, #32]
 80144ac:	f7ff ff64 	bl	8014378 <prvInsertTimerInActiveList>
 80144b0:	4603      	mov	r3, r0
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d059      	beq.n	801456a <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80144b6:	6a3b      	ldr	r3, [r7, #32]
 80144b8:	6a1b      	ldr	r3, [r3, #32]
 80144ba:	6a38      	ldr	r0, [r7, #32]
 80144bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80144be:	6a3b      	ldr	r3, [r7, #32]
 80144c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144c4:	f003 0304 	and.w	r3, r3, #4
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d04e      	beq.n	801456a <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80144cc:	68fa      	ldr	r2, [r7, #12]
 80144ce:	6a3b      	ldr	r3, [r7, #32]
 80144d0:	699b      	ldr	r3, [r3, #24]
 80144d2:	441a      	add	r2, r3
 80144d4:	2300      	movs	r3, #0
 80144d6:	9300      	str	r3, [sp, #0]
 80144d8:	2300      	movs	r3, #0
 80144da:	2100      	movs	r1, #0
 80144dc:	6a38      	ldr	r0, [r7, #32]
 80144de:	f7ff fe25 	bl	801412c <xTimerGenericCommand>
 80144e2:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 80144e4:	69bb      	ldr	r3, [r7, #24]
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	d13f      	bne.n	801456a <prvProcessReceivedCommands+0x16e>
 80144ea:	f000 faad 	bl	8014a48 <ulSetInterruptMask>
 80144ee:	e7fe      	b.n	80144ee <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80144f0:	6a3b      	ldr	r3, [r7, #32]
 80144f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80144f6:	f023 0301 	bic.w	r3, r3, #1
 80144fa:	b2da      	uxtb	r2, r3
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014502:	e032      	b.n	801456a <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014504:	6a3b      	ldr	r3, [r7, #32]
 8014506:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801450a:	f043 0301 	orr.w	r3, r3, #1
 801450e:	b2da      	uxtb	r2, r3
 8014510:	6a3b      	ldr	r3, [r7, #32]
 8014512:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014516:	68fa      	ldr	r2, [r7, #12]
 8014518:	6a3b      	ldr	r3, [r7, #32]
 801451a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801451c:	6a3b      	ldr	r3, [r7, #32]
 801451e:	699b      	ldr	r3, [r3, #24]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d102      	bne.n	801452a <prvProcessReceivedCommands+0x12e>
 8014524:	f000 fa90 	bl	8014a48 <ulSetInterruptMask>
 8014528:	e7fe      	b.n	8014528 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801452a:	6a3b      	ldr	r3, [r7, #32]
 801452c:	699a      	ldr	r2, [r3, #24]
 801452e:	69fb      	ldr	r3, [r7, #28]
 8014530:	18d1      	adds	r1, r2, r3
 8014532:	69fb      	ldr	r3, [r7, #28]
 8014534:	69fa      	ldr	r2, [r7, #28]
 8014536:	6a38      	ldr	r0, [r7, #32]
 8014538:	f7ff ff1e 	bl	8014378 <prvInsertTimerInActiveList>
					break;
 801453c:	e015      	b.n	801456a <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801453e:	6a3b      	ldr	r3, [r7, #32]
 8014540:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014544:	f003 0302 	and.w	r3, r3, #2
 8014548:	2b00      	cmp	r3, #0
 801454a:	d103      	bne.n	8014554 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 801454c:	6a38      	ldr	r0, [r7, #32]
 801454e:	f000 fb8f 	bl	8014c70 <vPortFree>
 8014552:	e00a      	b.n	801456a <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014554:	6a3b      	ldr	r3, [r7, #32]
 8014556:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801455a:	f023 0301 	bic.w	r3, r3, #1
 801455e:	b2da      	uxtb	r2, r3
 8014560:	6a3b      	ldr	r3, [r7, #32]
 8014562:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014566:	e000      	b.n	801456a <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
 8014568:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801456a:	4b08      	ldr	r3, [pc, #32]	; (801458c <prvProcessReceivedCommands+0x190>)
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	f107 0108 	add.w	r1, r7, #8
 8014572:	2200      	movs	r2, #0
 8014574:	4618      	mov	r0, r3
 8014576:	f7fe f9f1 	bl	801295c <xQueueReceive>
 801457a:	4603      	mov	r3, r0
 801457c:	2b00      	cmp	r3, #0
 801457e:	f47f af41 	bne.w	8014404 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8014582:	bf00      	nop
 8014584:	bf00      	nop
 8014586:	3728      	adds	r7, #40	; 0x28
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	20021d80 	.word	0x20021d80

08014590 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014590:	b580      	push	{r7, lr}
 8014592:	b088      	sub	sp, #32
 8014594:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014596:	e040      	b.n	801461a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014598:	4b29      	ldr	r3, [pc, #164]	; (8014640 <prvSwitchTimerLists+0xb0>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	68db      	ldr	r3, [r3, #12]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80145a2:	4b27      	ldr	r3, [pc, #156]	; (8014640 <prvSwitchTimerLists+0xb0>)
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	68db      	ldr	r3, [r3, #12]
 80145a8:	68db      	ldr	r3, [r3, #12]
 80145aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80145ac:	68fb      	ldr	r3, [r7, #12]
 80145ae:	3304      	adds	r3, #4
 80145b0:	4618      	mov	r0, r3
 80145b2:	f7fd fec5 	bl	8012340 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	6a1b      	ldr	r3, [r3, #32]
 80145ba:	68f8      	ldr	r0, [r7, #12]
 80145bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80145be:	68fb      	ldr	r3, [r7, #12]
 80145c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80145c4:	f003 0304 	and.w	r3, r3, #4
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d026      	beq.n	801461a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	699b      	ldr	r3, [r3, #24]
 80145d0:	693a      	ldr	r2, [r7, #16]
 80145d2:	4413      	add	r3, r2
 80145d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80145d6:	68ba      	ldr	r2, [r7, #8]
 80145d8:	693b      	ldr	r3, [r7, #16]
 80145da:	429a      	cmp	r2, r3
 80145dc:	d90e      	bls.n	80145fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	68ba      	ldr	r2, [r7, #8]
 80145e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	68fa      	ldr	r2, [r7, #12]
 80145e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80145ea:	4b15      	ldr	r3, [pc, #84]	; (8014640 <prvSwitchTimerLists+0xb0>)
 80145ec:	681a      	ldr	r2, [r3, #0]
 80145ee:	68fb      	ldr	r3, [r7, #12]
 80145f0:	3304      	adds	r3, #4
 80145f2:	4619      	mov	r1, r3
 80145f4:	4610      	mov	r0, r2
 80145f6:	f7fd fe6a 	bl	80122ce <vListInsert>
 80145fa:	e00e      	b.n	801461a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80145fc:	2300      	movs	r3, #0
 80145fe:	9300      	str	r3, [sp, #0]
 8014600:	2300      	movs	r3, #0
 8014602:	693a      	ldr	r2, [r7, #16]
 8014604:	2100      	movs	r1, #0
 8014606:	68f8      	ldr	r0, [r7, #12]
 8014608:	f7ff fd90 	bl	801412c <xTimerGenericCommand>
 801460c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2b00      	cmp	r3, #0
 8014612:	d102      	bne.n	801461a <prvSwitchTimerLists+0x8a>
 8014614:	f000 fa18 	bl	8014a48 <ulSetInterruptMask>
 8014618:	e7fe      	b.n	8014618 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801461a:	4b09      	ldr	r3, [pc, #36]	; (8014640 <prvSwitchTimerLists+0xb0>)
 801461c:	681b      	ldr	r3, [r3, #0]
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	2b00      	cmp	r3, #0
 8014622:	d1b9      	bne.n	8014598 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8014624:	4b06      	ldr	r3, [pc, #24]	; (8014640 <prvSwitchTimerLists+0xb0>)
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801462a:	4b06      	ldr	r3, [pc, #24]	; (8014644 <prvSwitchTimerLists+0xb4>)
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a04      	ldr	r2, [pc, #16]	; (8014640 <prvSwitchTimerLists+0xb0>)
 8014630:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8014632:	4a04      	ldr	r2, [pc, #16]	; (8014644 <prvSwitchTimerLists+0xb4>)
 8014634:	697b      	ldr	r3, [r7, #20]
 8014636:	6013      	str	r3, [r2, #0]
}
 8014638:	bf00      	nop
 801463a:	3718      	adds	r7, #24
 801463c:	46bd      	mov	sp, r7
 801463e:	bd80      	pop	{r7, pc}
 8014640:	20021d78 	.word	0x20021d78
 8014644:	20021d7c 	.word	0x20021d7c

08014648 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014648:	b580      	push	{r7, lr}
 801464a:	b082      	sub	sp, #8
 801464c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801464e:	f000 f8c5 	bl	80147dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014652:	4b15      	ldr	r3, [pc, #84]	; (80146a8 <prvCheckForValidListAndQueue+0x60>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d120      	bne.n	801469c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801465a:	4814      	ldr	r0, [pc, #80]	; (80146ac <prvCheckForValidListAndQueue+0x64>)
 801465c:	f7fd fde6 	bl	801222c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014660:	4813      	ldr	r0, [pc, #76]	; (80146b0 <prvCheckForValidListAndQueue+0x68>)
 8014662:	f7fd fde3 	bl	801222c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014666:	4b13      	ldr	r3, [pc, #76]	; (80146b4 <prvCheckForValidListAndQueue+0x6c>)
 8014668:	4a10      	ldr	r2, [pc, #64]	; (80146ac <prvCheckForValidListAndQueue+0x64>)
 801466a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801466c:	4b12      	ldr	r3, [pc, #72]	; (80146b8 <prvCheckForValidListAndQueue+0x70>)
 801466e:	4a10      	ldr	r2, [pc, #64]	; (80146b0 <prvCheckForValidListAndQueue+0x68>)
 8014670:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014672:	2300      	movs	r3, #0
 8014674:	9300      	str	r3, [sp, #0]
 8014676:	4b11      	ldr	r3, [pc, #68]	; (80146bc <prvCheckForValidListAndQueue+0x74>)
 8014678:	4a11      	ldr	r2, [pc, #68]	; (80146c0 <prvCheckForValidListAndQueue+0x78>)
 801467a:	2110      	movs	r1, #16
 801467c:	200a      	movs	r0, #10
 801467e:	f7fd fee1 	bl	8012444 <xQueueGenericCreateStatic>
 8014682:	4603      	mov	r3, r0
 8014684:	4a08      	ldr	r2, [pc, #32]	; (80146a8 <prvCheckForValidListAndQueue+0x60>)
 8014686:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014688:	4b07      	ldr	r3, [pc, #28]	; (80146a8 <prvCheckForValidListAndQueue+0x60>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	2b00      	cmp	r3, #0
 801468e:	d005      	beq.n	801469c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014690:	4b05      	ldr	r3, [pc, #20]	; (80146a8 <prvCheckForValidListAndQueue+0x60>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	490b      	ldr	r1, [pc, #44]	; (80146c4 <prvCheckForValidListAndQueue+0x7c>)
 8014696:	4618      	mov	r0, r3
 8014698:	f7fe fc98 	bl	8012fcc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801469c:	f000 f8b0 	bl	8014800 <vPortExitCritical>
}
 80146a0:	bf00      	nop
 80146a2:	46bd      	mov	sp, r7
 80146a4:	bd80      	pop	{r7, pc}
 80146a6:	bf00      	nop
 80146a8:	20021d80 	.word	0x20021d80
 80146ac:	20021d50 	.word	0x20021d50
 80146b0:	20021d64 	.word	0x20021d64
 80146b4:	20021d78 	.word	0x20021d78
 80146b8:	20021d7c 	.word	0x20021d7c
 80146bc:	20021e2c 	.word	0x20021e2c
 80146c0:	20021d8c 	.word	0x20021d8c
 80146c4:	08016650 	.word	0x08016650

080146c8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80146c8:	b580      	push	{r7, lr}
 80146ca:	b084      	sub	sp, #16
 80146cc:	af00      	add	r7, sp, #0
 80146ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	60bb      	str	r3, [r7, #8]

	configASSERT( xTimer );
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d102      	bne.n	80146e0 <xTimerIsTimerActive+0x18>
 80146da:	f000 f9b5 	bl	8014a48 <ulSetInterruptMask>
 80146de:	e7fe      	b.n	80146de <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80146e0:	f000 f87c 	bl	80147dc <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80146ea:	f003 0301 	and.w	r3, r3, #1
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d102      	bne.n	80146f8 <xTimerIsTimerActive+0x30>
		{
			xReturn = pdFALSE;
 80146f2:	2300      	movs	r3, #0
 80146f4:	60fb      	str	r3, [r7, #12]
 80146f6:	e001      	b.n	80146fc <xTimerIsTimerActive+0x34>
		}
		else
		{
			xReturn = pdTRUE;
 80146f8:	2301      	movs	r3, #1
 80146fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80146fc:	f000 f880 	bl	8014800 <vPortExitCritical>

	return xReturn;
 8014700:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8014702:	4618      	mov	r0, r3
 8014704:	3710      	adds	r7, #16
 8014706:	46bd      	mov	sp, r7
 8014708:	bd80      	pop	{r7, pc}

0801470a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 801470a:	b580      	push	{r7, lr}
 801470c:	b084      	sub	sp, #16
 801470e:	af00      	add	r7, sp, #0
 8014710:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	60fb      	str	r3, [r7, #12]
void *pvReturn;

	configASSERT( xTimer );
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d102      	bne.n	8014722 <pvTimerGetTimerID+0x18>
 801471c:	f000 f994 	bl	8014a48 <ulSetInterruptMask>
 8014720:	e7fe      	b.n	8014720 <pvTimerGetTimerID+0x16>

	taskENTER_CRITICAL();
 8014722:	f000 f85b 	bl	80147dc <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8014726:	68fb      	ldr	r3, [r7, #12]
 8014728:	69db      	ldr	r3, [r3, #28]
 801472a:	60bb      	str	r3, [r7, #8]
	}
	taskEXIT_CRITICAL();
 801472c:	f000 f868 	bl	8014800 <vPortExitCritical>

	return pvReturn;
 8014730:	68bb      	ldr	r3, [r7, #8]
}
 8014732:	4618      	mov	r0, r3
 8014734:	3710      	adds	r7, #16
 8014736:	46bd      	mov	sp, r7
 8014738:	bd80      	pop	{r7, pc}
	...

0801473c <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 801473c:	b480      	push	{r7}
 801473e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014740:	4b0b      	ldr	r3, [pc, #44]	; (8014770 <vPortSetupTimerInterrupt+0x34>)
 8014742:	2200      	movs	r2, #0
 8014744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014746:	4b0b      	ldr	r3, [pc, #44]	; (8014774 <vPortSetupTimerInterrupt+0x38>)
 8014748:	2200      	movs	r2, #0
 801474a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801474c:	4b0a      	ldr	r3, [pc, #40]	; (8014778 <vPortSetupTimerInterrupt+0x3c>)
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4a0a      	ldr	r2, [pc, #40]	; (801477c <vPortSetupTimerInterrupt+0x40>)
 8014752:	fba2 2303 	umull	r2, r3, r2, r3
 8014756:	099b      	lsrs	r3, r3, #6
 8014758:	4a09      	ldr	r2, [pc, #36]	; (8014780 <vPortSetupTimerInterrupt+0x44>)
 801475a:	3b01      	subs	r3, #1
 801475c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 801475e:	4b04      	ldr	r3, [pc, #16]	; (8014770 <vPortSetupTimerInterrupt+0x34>)
 8014760:	2207      	movs	r2, #7
 8014762:	601a      	str	r2, [r3, #0]
}
 8014764:	bf00      	nop
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop
 8014770:	e000e010 	.word	0xe000e010
 8014774:	e000e018 	.word	0xe000e018
 8014778:	2001b6a0 	.word	0x2001b6a0
 801477c:	10624dd3 	.word	0x10624dd3
 8014780:	e000e014 	.word	0xe000e014

08014784 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 801478a:	2300      	movs	r3, #0
 801478c:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 801478e:	4b09      	ldr	r3, [pc, #36]	; (80147b4 <prvTaskExitError+0x30>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014796:	d002      	beq.n	801479e <prvTaskExitError+0x1a>
 8014798:	f000 f956 	bl	8014a48 <ulSetInterruptMask>
 801479c:	e7fe      	b.n	801479c <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 801479e:	f000 f953 	bl	8014a48 <ulSetInterruptMask>

	while( ulDummy == 0 )
 80147a2:	bf00      	nop
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d0fc      	beq.n	80147a4 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 80147aa:	bf00      	nop
 80147ac:	bf00      	nop
 80147ae:	3708      	adds	r7, #8
 80147b0:	46bd      	mov	sp, r7
 80147b2:	bd80      	pop	{r7, pc}
 80147b4:	2001b6ac 	.word	0x2001b6ac

080147b8 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 80147b8:	b480      	push	{r7}
 80147ba:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80147bc:	4b06      	ldr	r3, [pc, #24]	; (80147d8 <vPortYield+0x20>)
 80147be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80147c2:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80147c4:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80147c8:	f3bf 8f6f 	isb	sy
}
 80147cc:	bf00      	nop
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr
 80147d6:	bf00      	nop
 80147d8:	e000ed04 	.word	0xe000ed04

080147dc <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 80147dc:	b580      	push	{r7, lr}
 80147de:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80147e0:	f000 f932 	bl	8014a48 <ulSetInterruptMask>
	ulCriticalNesting++;
 80147e4:	4b05      	ldr	r3, [pc, #20]	; (80147fc <vPortEnterCritical+0x20>)
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	3301      	adds	r3, #1
 80147ea:	4a04      	ldr	r2, [pc, #16]	; (80147fc <vPortEnterCritical+0x20>)
 80147ec:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 80147ee:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80147f2:	f3bf 8f6f 	isb	sy
}
 80147f6:	bf00      	nop
 80147f8:	bd80      	pop	{r7, pc}
 80147fa:	bf00      	nop
 80147fc:	2001b6ac 	.word	0x2001b6ac

08014800 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 8014800:	b580      	push	{r7, lr}
 8014802:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 8014804:	4b0a      	ldr	r3, [pc, #40]	; (8014830 <vPortExitCritical+0x30>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	2b00      	cmp	r3, #0
 801480a:	d102      	bne.n	8014812 <vPortExitCritical+0x12>
 801480c:	f000 f91c 	bl	8014a48 <ulSetInterruptMask>
 8014810:	e7fe      	b.n	8014810 <vPortExitCritical+0x10>
	ulCriticalNesting--;
 8014812:	4b07      	ldr	r3, [pc, #28]	; (8014830 <vPortExitCritical+0x30>)
 8014814:	681b      	ldr	r3, [r3, #0]
 8014816:	3b01      	subs	r3, #1
 8014818:	4a05      	ldr	r2, [pc, #20]	; (8014830 <vPortExitCritical+0x30>)
 801481a:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 801481c:	4b04      	ldr	r3, [pc, #16]	; (8014830 <vPortExitCritical+0x30>)
 801481e:	681b      	ldr	r3, [r3, #0]
 8014820:	2b00      	cmp	r3, #0
 8014822:	d102      	bne.n	801482a <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 8014824:	2000      	movs	r0, #0
 8014826:	f000 f91c 	bl	8014a62 <vClearInterruptMask>
	}
}
 801482a:	bf00      	nop
 801482c:	bd80      	pop	{r7, pc}
 801482e:	bf00      	nop
 8014830:	2001b6ac 	.word	0x2001b6ac

08014834 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 801483a:	f000 f905 	bl	8014a48 <ulSetInterruptMask>
 801483e:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014840:	f7fe ff0e 	bl	8013660 <xTaskIncrementTick>
 8014844:	4603      	mov	r3, r0
 8014846:	2b00      	cmp	r3, #0
 8014848:	d003      	beq.n	8014852 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801484a:	4b05      	ldr	r3, [pc, #20]	; (8014860 <xPortSysTickHandler+0x2c>)
 801484c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014850:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f905 	bl	8014a62 <vClearInterruptMask>
}
 8014858:	bf00      	nop
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}
 8014860:	e000ed04 	.word	0xe000ed04

08014864 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 8014864:	b580      	push	{r7, lr}
 8014866:	b084      	sub	sp, #16
 8014868:	af00      	add	r7, sp, #0
 801486a:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	699b      	ldr	r3, [r3, #24]
 8014870:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	3b02      	subs	r3, #2
 8014876:	781b      	ldrb	r3, [r3, #0]
 8014878:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 801487a:	7afb      	ldrb	r3, [r7, #11]
 801487c:	2b02      	cmp	r3, #2
 801487e:	d102      	bne.n	8014886 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 8014880:	f000 f8b6 	bl	80149f0 <vRestoreContextOfFirstTask>
		}
		break;
 8014884:	e002      	b.n	801488c <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 8014886:	f000 f8df 	bl	8014a48 <ulSetInterruptMask>
 801488a:	e7fe      	b.n	801488a <vPortSVCHandler_C+0x26>
		}
	}
}
 801488c:	bf00      	nop
 801488e:	3710      	adds	r7, #16
 8014890:	46bd      	mov	sp, r7
 8014892:	bd80      	pop	{r7, pc}

08014894 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 8014894:	b480      	push	{r7}
 8014896:	b085      	sub	sp, #20
 8014898:	af00      	add	r7, sp, #0
 801489a:	60f8      	str	r0, [r7, #12]
 801489c:	60b9      	str	r1, [r7, #8]
 801489e:	607a      	str	r2, [r7, #4]
 80148a0:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	3b04      	subs	r3, #4
 80148a6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80148ae:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	3b04      	subs	r3, #4
 80148b4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	3b04      	subs	r3, #4
 80148c0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80148c2:	4a38      	ldr	r2, [pc, #224]	; (80149a4 <pxPortInitialiseStack+0x110>)
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148c8:	68fb      	ldr	r3, [r7, #12]
 80148ca:	3b04      	subs	r3, #4
 80148cc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 80148d4:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	3b04      	subs	r3, #4
 80148da:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 80148e2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	3b04      	subs	r3, #4
 80148e8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 80148f0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 80148f2:	68fb      	ldr	r3, [r7, #12]
 80148f4:	3b04      	subs	r3, #4
 80148f6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 80148fe:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	3b04      	subs	r3, #4
 8014904:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 8014906:	683a      	ldr	r2, [r7, #0]
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	3b04      	subs	r3, #4
 8014910:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 8014918:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801491a:	68fb      	ldr	r3, [r7, #12]
 801491c:	3b04      	subs	r3, #4
 801491e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 8014926:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	3b04      	subs	r3, #4
 801492c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 801492e:	68fb      	ldr	r3, [r7, #12]
 8014930:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 8014934:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	3b04      	subs	r3, #4
 801493a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 801493c:	68fb      	ldr	r3, [r7, #12]
 801493e:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 8014942:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014944:	68fb      	ldr	r3, [r7, #12]
 8014946:	3b04      	subs	r3, #4
 8014948:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 8014950:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	3b04      	subs	r3, #4
 8014956:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 801495e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	3b04      	subs	r3, #4
 8014964:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 8014966:	68fb      	ldr	r3, [r7, #12]
 8014968:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 801496c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801496e:	68fb      	ldr	r3, [r7, #12]
 8014970:	3b04      	subs	r3, #4
 8014972:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 801497a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 801497c:	68fb      	ldr	r3, [r7, #12]
 801497e:	3b04      	subs	r3, #4
 8014980:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 8014982:	68fb      	ldr	r3, [r7, #12]
 8014984:	f06f 0243 	mvn.w	r2, #67	; 0x43
 8014988:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 801498a:	68fb      	ldr	r3, [r7, #12]
 801498c:	3b04      	subs	r3, #4
 801498e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 8014990:	68ba      	ldr	r2, [r7, #8]
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 8014996:	68fb      	ldr	r3, [r7, #12]
}
 8014998:	4618      	mov	r0, r3
 801499a:	3714      	adds	r7, #20
 801499c:	46bd      	mov	sp, r7
 801499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a2:	4770      	bx	lr
 80149a4:	08014785 	.word	0x08014785

080149a8 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80149ac:	4b0c      	ldr	r3, [pc, #48]	; (80149e0 <xPortStartScheduler+0x38>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	4a0b      	ldr	r2, [pc, #44]	; (80149e0 <xPortStartScheduler+0x38>)
 80149b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80149b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80149b8:	4b09      	ldr	r3, [pc, #36]	; (80149e0 <xPortStartScheduler+0x38>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	4a08      	ldr	r2, [pc, #32]	; (80149e0 <xPortStartScheduler+0x38>)
 80149be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80149c2:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 80149c4:	f7ff feba 	bl	801473c <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 80149c8:	4b06      	ldr	r3, [pc, #24]	; (80149e4 <xPortStartScheduler+0x3c>)
 80149ca:	2200      	movs	r2, #0
 80149cc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 80149ce:	f000 f827 	bl	8014a20 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 80149d2:	f7fe fef7 	bl	80137c4 <vTaskSwitchContext>
	prvTaskExitError();
 80149d6:	f7ff fed5 	bl	8014784 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	bd80      	pop	{r7, pc}
 80149e0:	e000ed20 	.word	0xe000ed20
 80149e4:	2001b6ac 	.word	0x2001b6ac
	...

080149f0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 80149f0:	4a07      	ldr	r2, [pc, #28]	; (8014a10 <pxCurrentTCBConst2>)
 80149f2:	6811      	ldr	r1, [r2, #0]
 80149f4:	6808      	ldr	r0, [r1, #0]
 80149f6:	c806      	ldmia	r0!, {r1, r2}
 80149f8:	f381 880b 	msr	PSPLIM, r1
 80149fc:	2102      	movs	r1, #2
 80149fe:	f381 8814 	msr	CONTROL, r1
 8014a02:	3020      	adds	r0, #32
 8014a04:	f380 8809 	msr	PSP, r0
 8014a08:	f3bf 8f6f 	isb	sy
 8014a0c:	4710      	bx	r2
 8014a0e:	bf00      	nop

08014a10 <pxCurrentTCBConst2>:
 8014a10:	20021850 	.word	0x20021850
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 8014a14:	bf00      	nop
 8014a16:	bf00      	nop
	...

08014a20 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8014a20:	4807      	ldr	r0, [pc, #28]	; (8014a40 <xVTORConst>)
 8014a22:	6800      	ldr	r0, [r0, #0]
 8014a24:	6800      	ldr	r0, [r0, #0]
 8014a26:	f380 8808 	msr	MSP, r0
 8014a2a:	b662      	cpsie	i
 8014a2c:	b661      	cpsie	f
 8014a2e:	f3bf 8f4f 	dsb	sy
 8014a32:	f3bf 8f6f 	isb	sy
 8014a36:	df02      	svc	2
 8014a38:	bf00      	nop
 8014a3a:	bf00      	nop
 8014a3c:	f3af 8000 	nop.w

08014a40 <xVTORConst>:
 8014a40:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 8014a44:	bf00      	nop
 8014a46:	bf00      	nop

08014a48 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8014a48:	f3ef 8011 	mrs	r0, BASEPRI
 8014a4c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 8014a50:	f381 8811 	msr	BASEPRI, r1
 8014a54:	f3bf 8f4f 	dsb	sy
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8014a5e:	bf00      	nop
 8014a60:	4618      	mov	r0, r3

08014a62 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8014a62:	f380 8811 	msr	BASEPRI, r0
 8014a66:	f3bf 8f4f 	dsb	sy
 8014a6a:	f3bf 8f6f 	isb	sy
 8014a6e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 8014a70:	bf00      	nop
	...

08014a80 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8014a80:	f3ef 8009 	mrs	r0, PSP
 8014a84:	f3ef 820b 	mrs	r2, PSPLIM
 8014a88:	4673      	mov	r3, lr
 8014a8a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8014a8e:	4a10      	ldr	r2, [pc, #64]	; (8014ad0 <pxCurrentTCBConst>)
 8014a90:	6811      	ldr	r1, [r2, #0]
 8014a92:	6008      	str	r0, [r1, #0]
 8014a94:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 8014a98:	f380 8811 	msr	BASEPRI, r0
 8014a9c:	f3bf 8f4f 	dsb	sy
 8014aa0:	f3bf 8f6f 	isb	sy
 8014aa4:	f7fe fe8e 	bl	80137c4 <vTaskSwitchContext>
 8014aa8:	f04f 0000 	mov.w	r0, #0
 8014aac:	f380 8811 	msr	BASEPRI, r0
 8014ab0:	4a07      	ldr	r2, [pc, #28]	; (8014ad0 <pxCurrentTCBConst>)
 8014ab2:	6811      	ldr	r1, [r2, #0]
 8014ab4:	6808      	ldr	r0, [r1, #0]
 8014ab6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 8014aba:	f382 880b 	msr	PSPLIM, r2
 8014abe:	f380 8809 	msr	PSP, r0
 8014ac2:	4718      	bx	r3
 8014ac4:	f3af 8000 	nop.w
 8014ac8:	f3af 8000 	nop.w
 8014acc:	f3af 8000 	nop.w

08014ad0 <pxCurrentTCBConst>:
 8014ad0:	20021850 	.word	0x20021850
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 8014ad4:	bf00      	nop
 8014ad6:	bf00      	nop
	...

08014ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 8014ae0:	f01e 0f04 	tst.w	lr, #4
 8014ae4:	bf0c      	ite	eq
 8014ae6:	f3ef 8008 	mrseq	r0, MSP
 8014aea:	f3ef 8009 	mrsne	r0, PSP
 8014aee:	4904      	ldr	r1, [pc, #16]	; (8014b00 <svchandler_address_const>)
 8014af0:	4708      	bx	r1
 8014af2:	bf00      	nop
 8014af4:	f3af 8000 	nop.w
 8014af8:	f3af 8000 	nop.w
 8014afc:	f3af 8000 	nop.w

08014b00 <svchandler_address_const>:
 8014b00:	08014865 	.word	0x08014865
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 8014b04:	bf00      	nop
 8014b06:	bf00      	nop

08014b08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014b08:	b580      	push	{r7, lr}
 8014b0a:	b086      	sub	sp, #24
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014b10:	2300      	movs	r3, #0
 8014b12:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8014b14:	f7fe fcf8 	bl	8013508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014b18:	4b4f      	ldr	r3, [pc, #316]	; (8014c58 <pvPortMalloc+0x150>)
 8014b1a:	681b      	ldr	r3, [r3, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014b20:	f000 f8f8 	bl	8014d14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014b24:	4b4d      	ldr	r3, [pc, #308]	; (8014c5c <pvPortMalloc+0x154>)
 8014b26:	681a      	ldr	r2, [r3, #0]
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	4013      	ands	r3, r2
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	f040 8083 	bne.w	8014c38 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d015      	beq.n	8014b64 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 8014b38:	2208      	movs	r2, #8
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	4413      	add	r3, r2
 8014b3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	f003 0307 	and.w	r3, r3, #7
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	d00c      	beq.n	8014b64 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8014b4a:	687b      	ldr	r3, [r7, #4]
 8014b4c:	f023 0307 	bic.w	r3, r3, #7
 8014b50:	3308      	adds	r3, #8
 8014b52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	f003 0307 	and.w	r3, r3, #7
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d002      	beq.n	8014b64 <pvPortMalloc+0x5c>
 8014b5e:	f7ff ff73 	bl	8014a48 <ulSetInterruptMask>
 8014b62:	e7fe      	b.n	8014b62 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d066      	beq.n	8014c38 <pvPortMalloc+0x130>
 8014b6a:	4b3d      	ldr	r3, [pc, #244]	; (8014c60 <pvPortMalloc+0x158>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	687a      	ldr	r2, [r7, #4]
 8014b70:	429a      	cmp	r2, r3
 8014b72:	d861      	bhi.n	8014c38 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8014b74:	4b3b      	ldr	r3, [pc, #236]	; (8014c64 <pvPortMalloc+0x15c>)
 8014b76:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8014b78:	4b3a      	ldr	r3, [pc, #232]	; (8014c64 <pvPortMalloc+0x15c>)
 8014b7a:	681b      	ldr	r3, [r3, #0]
 8014b7c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b7e:	e004      	b.n	8014b8a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 8014b80:	697b      	ldr	r3, [r7, #20]
 8014b82:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8014b84:	697b      	ldr	r3, [r7, #20]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8014b8a:	697b      	ldr	r3, [r7, #20]
 8014b8c:	685b      	ldr	r3, [r3, #4]
 8014b8e:	687a      	ldr	r2, [r7, #4]
 8014b90:	429a      	cmp	r2, r3
 8014b92:	d903      	bls.n	8014b9c <pvPortMalloc+0x94>
 8014b94:	697b      	ldr	r3, [r7, #20]
 8014b96:	681b      	ldr	r3, [r3, #0]
 8014b98:	2b00      	cmp	r3, #0
 8014b9a:	d1f1      	bne.n	8014b80 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8014b9c:	4b2e      	ldr	r3, [pc, #184]	; (8014c58 <pvPortMalloc+0x150>)
 8014b9e:	681b      	ldr	r3, [r3, #0]
 8014ba0:	697a      	ldr	r2, [r7, #20]
 8014ba2:	429a      	cmp	r2, r3
 8014ba4:	d048      	beq.n	8014c38 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8014ba6:	693b      	ldr	r3, [r7, #16]
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	2208      	movs	r2, #8
 8014bac:	4413      	add	r3, r2
 8014bae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8014bb0:	697b      	ldr	r3, [r7, #20]
 8014bb2:	681a      	ldr	r2, [r3, #0]
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8014bb8:	697b      	ldr	r3, [r7, #20]
 8014bba:	685a      	ldr	r2, [r3, #4]
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	1ad2      	subs	r2, r2, r3
 8014bc0:	2308      	movs	r3, #8
 8014bc2:	005b      	lsls	r3, r3, #1
 8014bc4:	429a      	cmp	r2, r3
 8014bc6:	d917      	bls.n	8014bf8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8014bc8:	697a      	ldr	r2, [r7, #20]
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	4413      	add	r3, r2
 8014bce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014bd0:	68bb      	ldr	r3, [r7, #8]
 8014bd2:	f003 0307 	and.w	r3, r3, #7
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	d002      	beq.n	8014be0 <pvPortMalloc+0xd8>
 8014bda:	f7ff ff35 	bl	8014a48 <ulSetInterruptMask>
 8014bde:	e7fe      	b.n	8014bde <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014be0:	697b      	ldr	r3, [r7, #20]
 8014be2:	685a      	ldr	r2, [r3, #4]
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	1ad2      	subs	r2, r2, r3
 8014be8:	68bb      	ldr	r3, [r7, #8]
 8014bea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8014bec:	697b      	ldr	r3, [r7, #20]
 8014bee:	687a      	ldr	r2, [r7, #4]
 8014bf0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014bf2:	68b8      	ldr	r0, [r7, #8]
 8014bf4:	f000 f8f0 	bl	8014dd8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014bf8:	4b19      	ldr	r3, [pc, #100]	; (8014c60 <pvPortMalloc+0x158>)
 8014bfa:	681a      	ldr	r2, [r3, #0]
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	685b      	ldr	r3, [r3, #4]
 8014c00:	1ad3      	subs	r3, r2, r3
 8014c02:	4a17      	ldr	r2, [pc, #92]	; (8014c60 <pvPortMalloc+0x158>)
 8014c04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014c06:	4b16      	ldr	r3, [pc, #88]	; (8014c60 <pvPortMalloc+0x158>)
 8014c08:	681a      	ldr	r2, [r3, #0]
 8014c0a:	4b17      	ldr	r3, [pc, #92]	; (8014c68 <pvPortMalloc+0x160>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	429a      	cmp	r2, r3
 8014c10:	d203      	bcs.n	8014c1a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014c12:	4b13      	ldr	r3, [pc, #76]	; (8014c60 <pvPortMalloc+0x158>)
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	4a14      	ldr	r2, [pc, #80]	; (8014c68 <pvPortMalloc+0x160>)
 8014c18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	4b0f      	ldr	r3, [pc, #60]	; (8014c5c <pvPortMalloc+0x154>)
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	431a      	orrs	r2, r3
 8014c24:	697b      	ldr	r3, [r7, #20]
 8014c26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	2200      	movs	r2, #0
 8014c2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8014c2e:	4b0f      	ldr	r3, [pc, #60]	; (8014c6c <pvPortMalloc+0x164>)
 8014c30:	681b      	ldr	r3, [r3, #0]
 8014c32:	3301      	adds	r3, #1
 8014c34:	4a0d      	ldr	r2, [pc, #52]	; (8014c6c <pvPortMalloc+0x164>)
 8014c36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014c38:	f7fe fc74 	bl	8013524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8014c3c:	68fb      	ldr	r3, [r7, #12]
 8014c3e:	f003 0307 	and.w	r3, r3, #7
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d002      	beq.n	8014c4c <pvPortMalloc+0x144>
 8014c46:	f7ff feff 	bl	8014a48 <ulSetInterruptMask>
 8014c4a:	e7fe      	b.n	8014c4a <pvPortMalloc+0x142>
	return pvReturn;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
}
 8014c4e:	4618      	mov	r0, r3
 8014c50:	3718      	adds	r7, #24
 8014c52:	46bd      	mov	sp, r7
 8014c54:	bd80      	pop	{r7, pc}
 8014c56:	bf00      	nop
 8014c58:	20025d04 	.word	0x20025d04
 8014c5c:	20025d18 	.word	0x20025d18
 8014c60:	20025d08 	.word	0x20025d08
 8014c64:	20025cfc 	.word	0x20025cfc
 8014c68:	20025d0c 	.word	0x20025d0c
 8014c6c:	20025d10 	.word	0x20025d10

08014c70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8014c70:	b580      	push	{r7, lr}
 8014c72:	b084      	sub	sp, #16
 8014c74:	af00      	add	r7, sp, #0
 8014c76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8014c78:	687b      	ldr	r3, [r7, #4]
 8014c7a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d03d      	beq.n	8014cfe <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8014c82:	2308      	movs	r3, #8
 8014c84:	425b      	negs	r3, r3
 8014c86:	68fa      	ldr	r2, [r7, #12]
 8014c88:	4413      	add	r3, r2
 8014c8a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8014c90:	68bb      	ldr	r3, [r7, #8]
 8014c92:	685a      	ldr	r2, [r3, #4]
 8014c94:	4b1c      	ldr	r3, [pc, #112]	; (8014d08 <vPortFree+0x98>)
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	4013      	ands	r3, r2
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	d102      	bne.n	8014ca4 <vPortFree+0x34>
 8014c9e:	f7ff fed3 	bl	8014a48 <ulSetInterruptMask>
 8014ca2:	e7fe      	b.n	8014ca2 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d002      	beq.n	8014cb2 <vPortFree+0x42>
 8014cac:	f7ff fecc 	bl	8014a48 <ulSetInterruptMask>
 8014cb0:	e7fe      	b.n	8014cb0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014cb2:	68bb      	ldr	r3, [r7, #8]
 8014cb4:	685a      	ldr	r2, [r3, #4]
 8014cb6:	4b14      	ldr	r3, [pc, #80]	; (8014d08 <vPortFree+0x98>)
 8014cb8:	681b      	ldr	r3, [r3, #0]
 8014cba:	4013      	ands	r3, r2
 8014cbc:	2b00      	cmp	r3, #0
 8014cbe:	d01e      	beq.n	8014cfe <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014cc0:	68bb      	ldr	r3, [r7, #8]
 8014cc2:	681b      	ldr	r3, [r3, #0]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	d11a      	bne.n	8014cfe <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014cc8:	68bb      	ldr	r3, [r7, #8]
 8014cca:	685a      	ldr	r2, [r3, #4]
 8014ccc:	4b0e      	ldr	r3, [pc, #56]	; (8014d08 <vPortFree+0x98>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	43db      	mvns	r3, r3
 8014cd2:	401a      	ands	r2, r3
 8014cd4:	68bb      	ldr	r3, [r7, #8]
 8014cd6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014cd8:	f7fe fc16 	bl	8013508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	685a      	ldr	r2, [r3, #4]
 8014ce0:	4b0a      	ldr	r3, [pc, #40]	; (8014d0c <vPortFree+0x9c>)
 8014ce2:	681b      	ldr	r3, [r3, #0]
 8014ce4:	4413      	add	r3, r2
 8014ce6:	4a09      	ldr	r2, [pc, #36]	; (8014d0c <vPortFree+0x9c>)
 8014ce8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8014cea:	68b8      	ldr	r0, [r7, #8]
 8014cec:	f000 f874 	bl	8014dd8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014cf0:	4b07      	ldr	r3, [pc, #28]	; (8014d10 <vPortFree+0xa0>)
 8014cf2:	681b      	ldr	r3, [r3, #0]
 8014cf4:	3301      	adds	r3, #1
 8014cf6:	4a06      	ldr	r2, [pc, #24]	; (8014d10 <vPortFree+0xa0>)
 8014cf8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8014cfa:	f7fe fc13 	bl	8013524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8014cfe:	bf00      	nop
 8014d00:	3710      	adds	r7, #16
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	20025d18 	.word	0x20025d18
 8014d0c:	20025d08 	.word	0x20025d08
 8014d10:	20025d14 	.word	0x20025d14

08014d14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8014d14:	b480      	push	{r7}
 8014d16:	b085      	sub	sp, #20
 8014d18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8014d1a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8014d1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8014d20:	4b27      	ldr	r3, [pc, #156]	; (8014dc0 <prvHeapInit+0xac>)
 8014d22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8014d24:	68fb      	ldr	r3, [r7, #12]
 8014d26:	f003 0307 	and.w	r3, r3, #7
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00c      	beq.n	8014d48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	3307      	adds	r3, #7
 8014d32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f023 0307 	bic.w	r3, r3, #7
 8014d3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8014d3c:	68ba      	ldr	r2, [r7, #8]
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	1ad3      	subs	r3, r2, r3
 8014d42:	4a1f      	ldr	r2, [pc, #124]	; (8014dc0 <prvHeapInit+0xac>)
 8014d44:	4413      	add	r3, r2
 8014d46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8014d4c:	4a1d      	ldr	r2, [pc, #116]	; (8014dc4 <prvHeapInit+0xb0>)
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8014d52:	4b1c      	ldr	r3, [pc, #112]	; (8014dc4 <prvHeapInit+0xb0>)
 8014d54:	2200      	movs	r2, #0
 8014d56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	68ba      	ldr	r2, [r7, #8]
 8014d5c:	4413      	add	r3, r2
 8014d5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8014d60:	2208      	movs	r2, #8
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	1a9b      	subs	r3, r3, r2
 8014d66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	f023 0307 	bic.w	r3, r3, #7
 8014d6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8014d70:	68fb      	ldr	r3, [r7, #12]
 8014d72:	4a15      	ldr	r2, [pc, #84]	; (8014dc8 <prvHeapInit+0xb4>)
 8014d74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8014d76:	4b14      	ldr	r3, [pc, #80]	; (8014dc8 <prvHeapInit+0xb4>)
 8014d78:	681b      	ldr	r3, [r3, #0]
 8014d7a:	2200      	movs	r2, #0
 8014d7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014d7e:	4b12      	ldr	r3, [pc, #72]	; (8014dc8 <prvHeapInit+0xb4>)
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	2200      	movs	r2, #0
 8014d84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014d8a:	683b      	ldr	r3, [r7, #0]
 8014d8c:	68fa      	ldr	r2, [r7, #12]
 8014d8e:	1ad2      	subs	r2, r2, r3
 8014d90:	683b      	ldr	r3, [r7, #0]
 8014d92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014d94:	4b0c      	ldr	r3, [pc, #48]	; (8014dc8 <prvHeapInit+0xb4>)
 8014d96:	681a      	ldr	r2, [r3, #0]
 8014d98:	683b      	ldr	r3, [r7, #0]
 8014d9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014d9c:	683b      	ldr	r3, [r7, #0]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	4a0a      	ldr	r2, [pc, #40]	; (8014dcc <prvHeapInit+0xb8>)
 8014da2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014da4:	683b      	ldr	r3, [r7, #0]
 8014da6:	685b      	ldr	r3, [r3, #4]
 8014da8:	4a09      	ldr	r2, [pc, #36]	; (8014dd0 <prvHeapInit+0xbc>)
 8014daa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014dac:	4b09      	ldr	r3, [pc, #36]	; (8014dd4 <prvHeapInit+0xc0>)
 8014dae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014db2:	601a      	str	r2, [r3, #0]
}
 8014db4:	bf00      	nop
 8014db6:	3714      	adds	r7, #20
 8014db8:	46bd      	mov	sp, r7
 8014dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dbe:	4770      	bx	lr
 8014dc0:	20021e7c 	.word	0x20021e7c
 8014dc4:	20025cfc 	.word	0x20025cfc
 8014dc8:	20025d04 	.word	0x20025d04
 8014dcc:	20025d0c 	.word	0x20025d0c
 8014dd0:	20025d08 	.word	0x20025d08
 8014dd4:	20025d18 	.word	0x20025d18

08014dd8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014dd8:	b480      	push	{r7}
 8014dda:	b085      	sub	sp, #20
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014de0:	4b28      	ldr	r3, [pc, #160]	; (8014e84 <prvInsertBlockIntoFreeList+0xac>)
 8014de2:	60fb      	str	r3, [r7, #12]
 8014de4:	e002      	b.n	8014dec <prvInsertBlockIntoFreeList+0x14>
 8014de6:	68fb      	ldr	r3, [r7, #12]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	60fb      	str	r3, [r7, #12]
 8014dec:	68fb      	ldr	r3, [r7, #12]
 8014dee:	681b      	ldr	r3, [r3, #0]
 8014df0:	687a      	ldr	r2, [r7, #4]
 8014df2:	429a      	cmp	r2, r3
 8014df4:	d8f7      	bhi.n	8014de6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014df6:	68fb      	ldr	r3, [r7, #12]
 8014df8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014dfa:	68fb      	ldr	r3, [r7, #12]
 8014dfc:	685b      	ldr	r3, [r3, #4]
 8014dfe:	68ba      	ldr	r2, [r7, #8]
 8014e00:	4413      	add	r3, r2
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	429a      	cmp	r2, r3
 8014e06:	d108      	bne.n	8014e1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	685a      	ldr	r2, [r3, #4]
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	441a      	add	r2, r3
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014e16:	68fb      	ldr	r3, [r7, #12]
 8014e18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	685b      	ldr	r3, [r3, #4]
 8014e22:	68ba      	ldr	r2, [r7, #8]
 8014e24:	441a      	add	r2, r3
 8014e26:	68fb      	ldr	r3, [r7, #12]
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	429a      	cmp	r2, r3
 8014e2c:	d118      	bne.n	8014e60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	681a      	ldr	r2, [r3, #0]
 8014e32:	4b15      	ldr	r3, [pc, #84]	; (8014e88 <prvInsertBlockIntoFreeList+0xb0>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d00d      	beq.n	8014e56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	685a      	ldr	r2, [r3, #4]
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	681b      	ldr	r3, [r3, #0]
 8014e42:	685b      	ldr	r3, [r3, #4]
 8014e44:	441a      	add	r2, r3
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	681a      	ldr	r2, [r3, #0]
 8014e50:	687b      	ldr	r3, [r7, #4]
 8014e52:	601a      	str	r2, [r3, #0]
 8014e54:	e008      	b.n	8014e68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014e56:	4b0c      	ldr	r3, [pc, #48]	; (8014e88 <prvInsertBlockIntoFreeList+0xb0>)
 8014e58:	681a      	ldr	r2, [r3, #0]
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	601a      	str	r2, [r3, #0]
 8014e5e:	e003      	b.n	8014e68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014e60:	68fb      	ldr	r3, [r7, #12]
 8014e62:	681a      	ldr	r2, [r3, #0]
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014e68:	68fa      	ldr	r2, [r7, #12]
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	429a      	cmp	r2, r3
 8014e6e:	d002      	beq.n	8014e76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014e70:	68fb      	ldr	r3, [r7, #12]
 8014e72:	687a      	ldr	r2, [r7, #4]
 8014e74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e76:	bf00      	nop
 8014e78:	3714      	adds	r7, #20
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e80:	4770      	bx	lr
 8014e82:	bf00      	nop
 8014e84:	20025cfc 	.word	0x20025cfc
 8014e88:	20025d04 	.word	0x20025d04

08014e8c <_strtoul_l.constprop.0>:
 8014e8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014e90:	4686      	mov	lr, r0
 8014e92:	460d      	mov	r5, r1
 8014e94:	4f35      	ldr	r7, [pc, #212]	; (8014f6c <_strtoul_l.constprop.0+0xe0>)
 8014e96:	4628      	mov	r0, r5
 8014e98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014e9c:	5d3e      	ldrb	r6, [r7, r4]
 8014e9e:	f016 0608 	ands.w	r6, r6, #8
 8014ea2:	d1f8      	bne.n	8014e96 <_strtoul_l.constprop.0+0xa>
 8014ea4:	2c2d      	cmp	r4, #45	; 0x2d
 8014ea6:	d130      	bne.n	8014f0a <_strtoul_l.constprop.0+0x7e>
 8014ea8:	782c      	ldrb	r4, [r5, #0]
 8014eaa:	2601      	movs	r6, #1
 8014eac:	1c85      	adds	r5, r0, #2
 8014eae:	2b00      	cmp	r3, #0
 8014eb0:	d057      	beq.n	8014f62 <_strtoul_l.constprop.0+0xd6>
 8014eb2:	2b10      	cmp	r3, #16
 8014eb4:	d109      	bne.n	8014eca <_strtoul_l.constprop.0+0x3e>
 8014eb6:	2c30      	cmp	r4, #48	; 0x30
 8014eb8:	d107      	bne.n	8014eca <_strtoul_l.constprop.0+0x3e>
 8014eba:	7828      	ldrb	r0, [r5, #0]
 8014ebc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8014ec0:	2858      	cmp	r0, #88	; 0x58
 8014ec2:	d149      	bne.n	8014f58 <_strtoul_l.constprop.0+0xcc>
 8014ec4:	786c      	ldrb	r4, [r5, #1]
 8014ec6:	2310      	movs	r3, #16
 8014ec8:	3502      	adds	r5, #2
 8014eca:	f04f 38ff 	mov.w	r8, #4294967295
 8014ece:	2700      	movs	r7, #0
 8014ed0:	fbb8 f8f3 	udiv	r8, r8, r3
 8014ed4:	fb03 f908 	mul.w	r9, r3, r8
 8014ed8:	4638      	mov	r0, r7
 8014eda:	ea6f 0909 	mvn.w	r9, r9
 8014ede:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8014ee2:	f1bc 0f09 	cmp.w	ip, #9
 8014ee6:	d815      	bhi.n	8014f14 <_strtoul_l.constprop.0+0x88>
 8014ee8:	4664      	mov	r4, ip
 8014eea:	42a3      	cmp	r3, r4
 8014eec:	dd23      	ble.n	8014f36 <_strtoul_l.constprop.0+0xaa>
 8014eee:	f1b7 3fff 	cmp.w	r7, #4294967295
 8014ef2:	d007      	beq.n	8014f04 <_strtoul_l.constprop.0+0x78>
 8014ef4:	4580      	cmp	r8, r0
 8014ef6:	d31b      	bcc.n	8014f30 <_strtoul_l.constprop.0+0xa4>
 8014ef8:	d101      	bne.n	8014efe <_strtoul_l.constprop.0+0x72>
 8014efa:	45a1      	cmp	r9, r4
 8014efc:	db18      	blt.n	8014f30 <_strtoul_l.constprop.0+0xa4>
 8014efe:	fb00 4003 	mla	r0, r0, r3, r4
 8014f02:	2701      	movs	r7, #1
 8014f04:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014f08:	e7e9      	b.n	8014ede <_strtoul_l.constprop.0+0x52>
 8014f0a:	2c2b      	cmp	r4, #43	; 0x2b
 8014f0c:	bf04      	itt	eq
 8014f0e:	782c      	ldrbeq	r4, [r5, #0]
 8014f10:	1c85      	addeq	r5, r0, #2
 8014f12:	e7cc      	b.n	8014eae <_strtoul_l.constprop.0+0x22>
 8014f14:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014f18:	f1bc 0f19 	cmp.w	ip, #25
 8014f1c:	d801      	bhi.n	8014f22 <_strtoul_l.constprop.0+0x96>
 8014f1e:	3c37      	subs	r4, #55	; 0x37
 8014f20:	e7e3      	b.n	8014eea <_strtoul_l.constprop.0+0x5e>
 8014f22:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014f26:	f1bc 0f19 	cmp.w	ip, #25
 8014f2a:	d804      	bhi.n	8014f36 <_strtoul_l.constprop.0+0xaa>
 8014f2c:	3c57      	subs	r4, #87	; 0x57
 8014f2e:	e7dc      	b.n	8014eea <_strtoul_l.constprop.0+0x5e>
 8014f30:	f04f 37ff 	mov.w	r7, #4294967295
 8014f34:	e7e6      	b.n	8014f04 <_strtoul_l.constprop.0+0x78>
 8014f36:	1c7b      	adds	r3, r7, #1
 8014f38:	d106      	bne.n	8014f48 <_strtoul_l.constprop.0+0xbc>
 8014f3a:	2322      	movs	r3, #34	; 0x22
 8014f3c:	4638      	mov	r0, r7
 8014f3e:	f8ce 3000 	str.w	r3, [lr]
 8014f42:	b932      	cbnz	r2, 8014f52 <_strtoul_l.constprop.0+0xc6>
 8014f44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014f48:	b106      	cbz	r6, 8014f4c <_strtoul_l.constprop.0+0xc0>
 8014f4a:	4240      	negs	r0, r0
 8014f4c:	2a00      	cmp	r2, #0
 8014f4e:	d0f9      	beq.n	8014f44 <_strtoul_l.constprop.0+0xb8>
 8014f50:	b107      	cbz	r7, 8014f54 <_strtoul_l.constprop.0+0xc8>
 8014f52:	1e69      	subs	r1, r5, #1
 8014f54:	6011      	str	r1, [r2, #0]
 8014f56:	e7f5      	b.n	8014f44 <_strtoul_l.constprop.0+0xb8>
 8014f58:	2430      	movs	r4, #48	; 0x30
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d1b5      	bne.n	8014eca <_strtoul_l.constprop.0+0x3e>
 8014f5e:	2308      	movs	r3, #8
 8014f60:	e7b3      	b.n	8014eca <_strtoul_l.constprop.0+0x3e>
 8014f62:	2c30      	cmp	r4, #48	; 0x30
 8014f64:	d0a9      	beq.n	8014eba <_strtoul_l.constprop.0+0x2e>
 8014f66:	230a      	movs	r3, #10
 8014f68:	e7af      	b.n	8014eca <_strtoul_l.constprop.0+0x3e>
 8014f6a:	bf00      	nop
 8014f6c:	08016b85 	.word	0x08016b85

08014f70 <strtoul>:
 8014f70:	4613      	mov	r3, r2
 8014f72:	460a      	mov	r2, r1
 8014f74:	4601      	mov	r1, r0
 8014f76:	4802      	ldr	r0, [pc, #8]	; (8014f80 <strtoul+0x10>)
 8014f78:	6800      	ldr	r0, [r0, #0]
 8014f7a:	f7ff bf87 	b.w	8014e8c <_strtoul_l.constprop.0>
 8014f7e:	bf00      	nop
 8014f80:	2001b708 	.word	0x2001b708

08014f84 <std>:
 8014f84:	2300      	movs	r3, #0
 8014f86:	b510      	push	{r4, lr}
 8014f88:	4604      	mov	r4, r0
 8014f8a:	6083      	str	r3, [r0, #8]
 8014f8c:	8181      	strh	r1, [r0, #12]
 8014f8e:	4619      	mov	r1, r3
 8014f90:	6643      	str	r3, [r0, #100]	; 0x64
 8014f92:	81c2      	strh	r2, [r0, #14]
 8014f94:	2208      	movs	r2, #8
 8014f96:	6183      	str	r3, [r0, #24]
 8014f98:	e9c0 3300 	strd	r3, r3, [r0]
 8014f9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014fa0:	305c      	adds	r0, #92	; 0x5c
 8014fa2:	f000 f902 	bl	80151aa <memset>
 8014fa6:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <std+0x38>)
 8014fa8:	6224      	str	r4, [r4, #32]
 8014faa:	6263      	str	r3, [r4, #36]	; 0x24
 8014fac:	4b04      	ldr	r3, [pc, #16]	; (8014fc0 <std+0x3c>)
 8014fae:	62a3      	str	r3, [r4, #40]	; 0x28
 8014fb0:	4b04      	ldr	r3, [pc, #16]	; (8014fc4 <std+0x40>)
 8014fb2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014fb4:	4b04      	ldr	r3, [pc, #16]	; (8014fc8 <std+0x44>)
 8014fb6:	6323      	str	r3, [r4, #48]	; 0x30
 8014fb8:	bd10      	pop	{r4, pc}
 8014fba:	bf00      	nop
 8014fbc:	08015125 	.word	0x08015125
 8014fc0:	08015147 	.word	0x08015147
 8014fc4:	0801517f 	.word	0x0801517f
 8014fc8:	080151a3 	.word	0x080151a3

08014fcc <stdio_exit_handler>:
 8014fcc:	4a02      	ldr	r2, [pc, #8]	; (8014fd8 <stdio_exit_handler+0xc>)
 8014fce:	4903      	ldr	r1, [pc, #12]	; (8014fdc <stdio_exit_handler+0x10>)
 8014fd0:	4803      	ldr	r0, [pc, #12]	; (8014fe0 <stdio_exit_handler+0x14>)
 8014fd2:	f000 b869 	b.w	80150a8 <_fwalk_sglue>
 8014fd6:	bf00      	nop
 8014fd8:	2001b6b0 	.word	0x2001b6b0
 8014fdc:	08015d39 	.word	0x08015d39
 8014fe0:	2001b6bc 	.word	0x2001b6bc

08014fe4 <cleanup_stdio>:
 8014fe4:	6841      	ldr	r1, [r0, #4]
 8014fe6:	4b0c      	ldr	r3, [pc, #48]	; (8015018 <cleanup_stdio+0x34>)
 8014fe8:	4299      	cmp	r1, r3
 8014fea:	b510      	push	{r4, lr}
 8014fec:	4604      	mov	r4, r0
 8014fee:	d001      	beq.n	8014ff4 <cleanup_stdio+0x10>
 8014ff0:	f000 fea2 	bl	8015d38 <_fflush_r>
 8014ff4:	68a1      	ldr	r1, [r4, #8]
 8014ff6:	4b09      	ldr	r3, [pc, #36]	; (801501c <cleanup_stdio+0x38>)
 8014ff8:	4299      	cmp	r1, r3
 8014ffa:	d002      	beq.n	8015002 <cleanup_stdio+0x1e>
 8014ffc:	4620      	mov	r0, r4
 8014ffe:	f000 fe9b 	bl	8015d38 <_fflush_r>
 8015002:	68e1      	ldr	r1, [r4, #12]
 8015004:	4b06      	ldr	r3, [pc, #24]	; (8015020 <cleanup_stdio+0x3c>)
 8015006:	4299      	cmp	r1, r3
 8015008:	d004      	beq.n	8015014 <cleanup_stdio+0x30>
 801500a:	4620      	mov	r0, r4
 801500c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015010:	f000 be92 	b.w	8015d38 <_fflush_r>
 8015014:	bd10      	pop	{r4, pc}
 8015016:	bf00      	nop
 8015018:	20025d1c 	.word	0x20025d1c
 801501c:	20025d84 	.word	0x20025d84
 8015020:	20025dec 	.word	0x20025dec

08015024 <global_stdio_init.part.0>:
 8015024:	b510      	push	{r4, lr}
 8015026:	4b0b      	ldr	r3, [pc, #44]	; (8015054 <global_stdio_init.part.0+0x30>)
 8015028:	2104      	movs	r1, #4
 801502a:	4c0b      	ldr	r4, [pc, #44]	; (8015058 <global_stdio_init.part.0+0x34>)
 801502c:	4a0b      	ldr	r2, [pc, #44]	; (801505c <global_stdio_init.part.0+0x38>)
 801502e:	4620      	mov	r0, r4
 8015030:	601a      	str	r2, [r3, #0]
 8015032:	2200      	movs	r2, #0
 8015034:	f7ff ffa6 	bl	8014f84 <std>
 8015038:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801503c:	2201      	movs	r2, #1
 801503e:	2109      	movs	r1, #9
 8015040:	f7ff ffa0 	bl	8014f84 <std>
 8015044:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8015048:	2202      	movs	r2, #2
 801504a:	2112      	movs	r1, #18
 801504c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015050:	f7ff bf98 	b.w	8014f84 <std>
 8015054:	20025e54 	.word	0x20025e54
 8015058:	20025d1c 	.word	0x20025d1c
 801505c:	08014fcd 	.word	0x08014fcd

08015060 <__sfp_lock_acquire>:
 8015060:	4801      	ldr	r0, [pc, #4]	; (8015068 <__sfp_lock_acquire+0x8>)
 8015062:	f000 b9cd 	b.w	8015400 <__retarget_lock_acquire_recursive>
 8015066:	bf00      	nop
 8015068:	20025e5d 	.word	0x20025e5d

0801506c <__sfp_lock_release>:
 801506c:	4801      	ldr	r0, [pc, #4]	; (8015074 <__sfp_lock_release+0x8>)
 801506e:	f000 b9c8 	b.w	8015402 <__retarget_lock_release_recursive>
 8015072:	bf00      	nop
 8015074:	20025e5d 	.word	0x20025e5d

08015078 <__sinit>:
 8015078:	b510      	push	{r4, lr}
 801507a:	4604      	mov	r4, r0
 801507c:	f7ff fff0 	bl	8015060 <__sfp_lock_acquire>
 8015080:	6a23      	ldr	r3, [r4, #32]
 8015082:	b11b      	cbz	r3, 801508c <__sinit+0x14>
 8015084:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015088:	f7ff bff0 	b.w	801506c <__sfp_lock_release>
 801508c:	4b04      	ldr	r3, [pc, #16]	; (80150a0 <__sinit+0x28>)
 801508e:	6223      	str	r3, [r4, #32]
 8015090:	4b04      	ldr	r3, [pc, #16]	; (80150a4 <__sinit+0x2c>)
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	2b00      	cmp	r3, #0
 8015096:	d1f5      	bne.n	8015084 <__sinit+0xc>
 8015098:	f7ff ffc4 	bl	8015024 <global_stdio_init.part.0>
 801509c:	e7f2      	b.n	8015084 <__sinit+0xc>
 801509e:	bf00      	nop
 80150a0:	08014fe5 	.word	0x08014fe5
 80150a4:	20025e54 	.word	0x20025e54

080150a8 <_fwalk_sglue>:
 80150a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80150ac:	4607      	mov	r7, r0
 80150ae:	4688      	mov	r8, r1
 80150b0:	4614      	mov	r4, r2
 80150b2:	2600      	movs	r6, #0
 80150b4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80150b8:	f1b9 0901 	subs.w	r9, r9, #1
 80150bc:	d505      	bpl.n	80150ca <_fwalk_sglue+0x22>
 80150be:	6824      	ldr	r4, [r4, #0]
 80150c0:	2c00      	cmp	r4, #0
 80150c2:	d1f7      	bne.n	80150b4 <_fwalk_sglue+0xc>
 80150c4:	4630      	mov	r0, r6
 80150c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80150ca:	89ab      	ldrh	r3, [r5, #12]
 80150cc:	2b01      	cmp	r3, #1
 80150ce:	d907      	bls.n	80150e0 <_fwalk_sglue+0x38>
 80150d0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80150d4:	3301      	adds	r3, #1
 80150d6:	d003      	beq.n	80150e0 <_fwalk_sglue+0x38>
 80150d8:	4629      	mov	r1, r5
 80150da:	4638      	mov	r0, r7
 80150dc:	47c0      	blx	r8
 80150de:	4306      	orrs	r6, r0
 80150e0:	3568      	adds	r5, #104	; 0x68
 80150e2:	e7e9      	b.n	80150b8 <_fwalk_sglue+0x10>

080150e4 <siprintf>:
 80150e4:	b40e      	push	{r1, r2, r3}
 80150e6:	b500      	push	{lr}
 80150e8:	b09c      	sub	sp, #112	; 0x70
 80150ea:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80150ee:	ab1d      	add	r3, sp, #116	; 0x74
 80150f0:	9002      	str	r0, [sp, #8]
 80150f2:	9006      	str	r0, [sp, #24]
 80150f4:	9107      	str	r1, [sp, #28]
 80150f6:	9104      	str	r1, [sp, #16]
 80150f8:	4808      	ldr	r0, [pc, #32]	; (801511c <siprintf+0x38>)
 80150fa:	4909      	ldr	r1, [pc, #36]	; (8015120 <siprintf+0x3c>)
 80150fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8015100:	9105      	str	r1, [sp, #20]
 8015102:	a902      	add	r1, sp, #8
 8015104:	6800      	ldr	r0, [r0, #0]
 8015106:	9301      	str	r3, [sp, #4]
 8015108:	f000 fb02 	bl	8015710 <_svfiprintf_r>
 801510c:	9b02      	ldr	r3, [sp, #8]
 801510e:	2200      	movs	r2, #0
 8015110:	701a      	strb	r2, [r3, #0]
 8015112:	b01c      	add	sp, #112	; 0x70
 8015114:	f85d eb04 	ldr.w	lr, [sp], #4
 8015118:	b003      	add	sp, #12
 801511a:	4770      	bx	lr
 801511c:	2001b708 	.word	0x2001b708
 8015120:	ffff0208 	.word	0xffff0208

08015124 <__sread>:
 8015124:	b510      	push	{r4, lr}
 8015126:	460c      	mov	r4, r1
 8015128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801512c:	f000 f91a 	bl	8015364 <_read_r>
 8015130:	2800      	cmp	r0, #0
 8015132:	bfab      	itete	ge
 8015134:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015136:	89a3      	ldrhlt	r3, [r4, #12]
 8015138:	181b      	addge	r3, r3, r0
 801513a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801513e:	bfac      	ite	ge
 8015140:	6563      	strge	r3, [r4, #84]	; 0x54
 8015142:	81a3      	strhlt	r3, [r4, #12]
 8015144:	bd10      	pop	{r4, pc}

08015146 <__swrite>:
 8015146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801514a:	461f      	mov	r7, r3
 801514c:	898b      	ldrh	r3, [r1, #12]
 801514e:	4605      	mov	r5, r0
 8015150:	460c      	mov	r4, r1
 8015152:	05db      	lsls	r3, r3, #23
 8015154:	4616      	mov	r6, r2
 8015156:	d505      	bpl.n	8015164 <__swrite+0x1e>
 8015158:	2302      	movs	r3, #2
 801515a:	2200      	movs	r2, #0
 801515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015160:	f000 f8ee 	bl	8015340 <_lseek_r>
 8015164:	89a3      	ldrh	r3, [r4, #12]
 8015166:	4632      	mov	r2, r6
 8015168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801516c:	4628      	mov	r0, r5
 801516e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8015172:	81a3      	strh	r3, [r4, #12]
 8015174:	463b      	mov	r3, r7
 8015176:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801517a:	f000 b905 	b.w	8015388 <_write_r>

0801517e <__sseek>:
 801517e:	b510      	push	{r4, lr}
 8015180:	460c      	mov	r4, r1
 8015182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015186:	f000 f8db 	bl	8015340 <_lseek_r>
 801518a:	1c43      	adds	r3, r0, #1
 801518c:	89a3      	ldrh	r3, [r4, #12]
 801518e:	bf15      	itete	ne
 8015190:	6560      	strne	r0, [r4, #84]	; 0x54
 8015192:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8015196:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801519a:	81a3      	strheq	r3, [r4, #12]
 801519c:	bf18      	it	ne
 801519e:	81a3      	strhne	r3, [r4, #12]
 80151a0:	bd10      	pop	{r4, pc}

080151a2 <__sclose>:
 80151a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151a6:	f000 b865 	b.w	8015274 <_close_r>

080151aa <memset>:
 80151aa:	4402      	add	r2, r0
 80151ac:	4603      	mov	r3, r0
 80151ae:	4293      	cmp	r3, r2
 80151b0:	d100      	bne.n	80151b4 <memset+0xa>
 80151b2:	4770      	bx	lr
 80151b4:	f803 1b01 	strb.w	r1, [r3], #1
 80151b8:	e7f9      	b.n	80151ae <memset+0x4>
	...

080151bc <strtok>:
 80151bc:	4b16      	ldr	r3, [pc, #88]	; (8015218 <strtok+0x5c>)
 80151be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80151c0:	681e      	ldr	r6, [r3, #0]
 80151c2:	4605      	mov	r5, r0
 80151c4:	6c74      	ldr	r4, [r6, #68]	; 0x44
 80151c6:	b9fc      	cbnz	r4, 8015208 <strtok+0x4c>
 80151c8:	2050      	movs	r0, #80	; 0x50
 80151ca:	9101      	str	r1, [sp, #4]
 80151cc:	f000 f992 	bl	80154f4 <malloc>
 80151d0:	9901      	ldr	r1, [sp, #4]
 80151d2:	4602      	mov	r2, r0
 80151d4:	6470      	str	r0, [r6, #68]	; 0x44
 80151d6:	b920      	cbnz	r0, 80151e2 <strtok+0x26>
 80151d8:	4b10      	ldr	r3, [pc, #64]	; (801521c <strtok+0x60>)
 80151da:	215b      	movs	r1, #91	; 0x5b
 80151dc:	4810      	ldr	r0, [pc, #64]	; (8015220 <strtok+0x64>)
 80151de:	f000 f91f 	bl	8015420 <__assert_func>
 80151e2:	e9c0 4400 	strd	r4, r4, [r0]
 80151e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80151ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80151ee:	6184      	str	r4, [r0, #24]
 80151f0:	7704      	strb	r4, [r0, #28]
 80151f2:	6244      	str	r4, [r0, #36]	; 0x24
 80151f4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80151f8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80151fc:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8015200:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8015204:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8015208:	2301      	movs	r3, #1
 801520a:	6c72      	ldr	r2, [r6, #68]	; 0x44
 801520c:	4628      	mov	r0, r5
 801520e:	b002      	add	sp, #8
 8015210:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015214:	f000 b806 	b.w	8015224 <__strtok_r>
 8015218:	2001b708 	.word	0x2001b708
 801521c:	08016c85 	.word	0x08016c85
 8015220:	08016c9c 	.word	0x08016c9c

08015224 <__strtok_r>:
 8015224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015226:	b908      	cbnz	r0, 801522c <__strtok_r+0x8>
 8015228:	6810      	ldr	r0, [r2, #0]
 801522a:	b188      	cbz	r0, 8015250 <__strtok_r+0x2c>
 801522c:	4604      	mov	r4, r0
 801522e:	4620      	mov	r0, r4
 8015230:	460f      	mov	r7, r1
 8015232:	f814 5b01 	ldrb.w	r5, [r4], #1
 8015236:	f817 6b01 	ldrb.w	r6, [r7], #1
 801523a:	b91e      	cbnz	r6, 8015244 <__strtok_r+0x20>
 801523c:	b965      	cbnz	r5, 8015258 <__strtok_r+0x34>
 801523e:	4628      	mov	r0, r5
 8015240:	6015      	str	r5, [r2, #0]
 8015242:	e005      	b.n	8015250 <__strtok_r+0x2c>
 8015244:	42b5      	cmp	r5, r6
 8015246:	d1f6      	bne.n	8015236 <__strtok_r+0x12>
 8015248:	2b00      	cmp	r3, #0
 801524a:	d1f0      	bne.n	801522e <__strtok_r+0xa>
 801524c:	6014      	str	r4, [r2, #0]
 801524e:	7003      	strb	r3, [r0, #0]
 8015250:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015252:	461c      	mov	r4, r3
 8015254:	e00c      	b.n	8015270 <__strtok_r+0x4c>
 8015256:	b915      	cbnz	r5, 801525e <__strtok_r+0x3a>
 8015258:	f814 3b01 	ldrb.w	r3, [r4], #1
 801525c:	460e      	mov	r6, r1
 801525e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8015262:	42ab      	cmp	r3, r5
 8015264:	d1f7      	bne.n	8015256 <__strtok_r+0x32>
 8015266:	2b00      	cmp	r3, #0
 8015268:	d0f3      	beq.n	8015252 <__strtok_r+0x2e>
 801526a:	2300      	movs	r3, #0
 801526c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8015270:	6014      	str	r4, [r2, #0]
 8015272:	e7ed      	b.n	8015250 <__strtok_r+0x2c>

08015274 <_close_r>:
 8015274:	b538      	push	{r3, r4, r5, lr}
 8015276:	2300      	movs	r3, #0
 8015278:	4d05      	ldr	r5, [pc, #20]	; (8015290 <_close_r+0x1c>)
 801527a:	4604      	mov	r4, r0
 801527c:	4608      	mov	r0, r1
 801527e:	602b      	str	r3, [r5, #0]
 8015280:	f7ec fe03 	bl	8001e8a <_close>
 8015284:	1c43      	adds	r3, r0, #1
 8015286:	d102      	bne.n	801528e <_close_r+0x1a>
 8015288:	682b      	ldr	r3, [r5, #0]
 801528a:	b103      	cbz	r3, 801528e <_close_r+0x1a>
 801528c:	6023      	str	r3, [r4, #0]
 801528e:	bd38      	pop	{r3, r4, r5, pc}
 8015290:	20025e58 	.word	0x20025e58

08015294 <_reclaim_reent>:
 8015294:	4b29      	ldr	r3, [pc, #164]	; (801533c <_reclaim_reent+0xa8>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	4283      	cmp	r3, r0
 801529a:	b570      	push	{r4, r5, r6, lr}
 801529c:	4604      	mov	r4, r0
 801529e:	d04b      	beq.n	8015338 <_reclaim_reent+0xa4>
 80152a0:	69c3      	ldr	r3, [r0, #28]
 80152a2:	b143      	cbz	r3, 80152b6 <_reclaim_reent+0x22>
 80152a4:	68db      	ldr	r3, [r3, #12]
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d144      	bne.n	8015334 <_reclaim_reent+0xa0>
 80152aa:	69e3      	ldr	r3, [r4, #28]
 80152ac:	6819      	ldr	r1, [r3, #0]
 80152ae:	b111      	cbz	r1, 80152b6 <_reclaim_reent+0x22>
 80152b0:	4620      	mov	r0, r4
 80152b2:	f000 f8d3 	bl	801545c <_free_r>
 80152b6:	6961      	ldr	r1, [r4, #20]
 80152b8:	b111      	cbz	r1, 80152c0 <_reclaim_reent+0x2c>
 80152ba:	4620      	mov	r0, r4
 80152bc:	f000 f8ce 	bl	801545c <_free_r>
 80152c0:	69e1      	ldr	r1, [r4, #28]
 80152c2:	b111      	cbz	r1, 80152ca <_reclaim_reent+0x36>
 80152c4:	4620      	mov	r0, r4
 80152c6:	f000 f8c9 	bl	801545c <_free_r>
 80152ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80152cc:	b111      	cbz	r1, 80152d4 <_reclaim_reent+0x40>
 80152ce:	4620      	mov	r0, r4
 80152d0:	f000 f8c4 	bl	801545c <_free_r>
 80152d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152d6:	b111      	cbz	r1, 80152de <_reclaim_reent+0x4a>
 80152d8:	4620      	mov	r0, r4
 80152da:	f000 f8bf 	bl	801545c <_free_r>
 80152de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80152e0:	b111      	cbz	r1, 80152e8 <_reclaim_reent+0x54>
 80152e2:	4620      	mov	r0, r4
 80152e4:	f000 f8ba 	bl	801545c <_free_r>
 80152e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80152ea:	b111      	cbz	r1, 80152f2 <_reclaim_reent+0x5e>
 80152ec:	4620      	mov	r0, r4
 80152ee:	f000 f8b5 	bl	801545c <_free_r>
 80152f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80152f4:	b111      	cbz	r1, 80152fc <_reclaim_reent+0x68>
 80152f6:	4620      	mov	r0, r4
 80152f8:	f000 f8b0 	bl	801545c <_free_r>
 80152fc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80152fe:	b111      	cbz	r1, 8015306 <_reclaim_reent+0x72>
 8015300:	4620      	mov	r0, r4
 8015302:	f000 f8ab 	bl	801545c <_free_r>
 8015306:	6a23      	ldr	r3, [r4, #32]
 8015308:	b1b3      	cbz	r3, 8015338 <_reclaim_reent+0xa4>
 801530a:	4620      	mov	r0, r4
 801530c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8015310:	4718      	bx	r3
 8015312:	5949      	ldr	r1, [r1, r5]
 8015314:	b941      	cbnz	r1, 8015328 <_reclaim_reent+0x94>
 8015316:	3504      	adds	r5, #4
 8015318:	69e3      	ldr	r3, [r4, #28]
 801531a:	2d80      	cmp	r5, #128	; 0x80
 801531c:	68d9      	ldr	r1, [r3, #12]
 801531e:	d1f8      	bne.n	8015312 <_reclaim_reent+0x7e>
 8015320:	4620      	mov	r0, r4
 8015322:	f000 f89b 	bl	801545c <_free_r>
 8015326:	e7c0      	b.n	80152aa <_reclaim_reent+0x16>
 8015328:	680e      	ldr	r6, [r1, #0]
 801532a:	4620      	mov	r0, r4
 801532c:	f000 f896 	bl	801545c <_free_r>
 8015330:	4631      	mov	r1, r6
 8015332:	e7ef      	b.n	8015314 <_reclaim_reent+0x80>
 8015334:	2500      	movs	r5, #0
 8015336:	e7ef      	b.n	8015318 <_reclaim_reent+0x84>
 8015338:	bd70      	pop	{r4, r5, r6, pc}
 801533a:	bf00      	nop
 801533c:	2001b708 	.word	0x2001b708

08015340 <_lseek_r>:
 8015340:	b538      	push	{r3, r4, r5, lr}
 8015342:	4604      	mov	r4, r0
 8015344:	4d06      	ldr	r5, [pc, #24]	; (8015360 <_lseek_r+0x20>)
 8015346:	4608      	mov	r0, r1
 8015348:	4611      	mov	r1, r2
 801534a:	2200      	movs	r2, #0
 801534c:	602a      	str	r2, [r5, #0]
 801534e:	461a      	mov	r2, r3
 8015350:	f7ec fdc2 	bl	8001ed8 <_lseek>
 8015354:	1c43      	adds	r3, r0, #1
 8015356:	d102      	bne.n	801535e <_lseek_r+0x1e>
 8015358:	682b      	ldr	r3, [r5, #0]
 801535a:	b103      	cbz	r3, 801535e <_lseek_r+0x1e>
 801535c:	6023      	str	r3, [r4, #0]
 801535e:	bd38      	pop	{r3, r4, r5, pc}
 8015360:	20025e58 	.word	0x20025e58

08015364 <_read_r>:
 8015364:	b538      	push	{r3, r4, r5, lr}
 8015366:	4604      	mov	r4, r0
 8015368:	4d06      	ldr	r5, [pc, #24]	; (8015384 <_read_r+0x20>)
 801536a:	4608      	mov	r0, r1
 801536c:	4611      	mov	r1, r2
 801536e:	2200      	movs	r2, #0
 8015370:	602a      	str	r2, [r5, #0]
 8015372:	461a      	mov	r2, r3
 8015374:	f7ec fd50 	bl	8001e18 <_read>
 8015378:	1c43      	adds	r3, r0, #1
 801537a:	d102      	bne.n	8015382 <_read_r+0x1e>
 801537c:	682b      	ldr	r3, [r5, #0]
 801537e:	b103      	cbz	r3, 8015382 <_read_r+0x1e>
 8015380:	6023      	str	r3, [r4, #0]
 8015382:	bd38      	pop	{r3, r4, r5, pc}
 8015384:	20025e58 	.word	0x20025e58

08015388 <_write_r>:
 8015388:	b538      	push	{r3, r4, r5, lr}
 801538a:	4604      	mov	r4, r0
 801538c:	4d06      	ldr	r5, [pc, #24]	; (80153a8 <_write_r+0x20>)
 801538e:	4608      	mov	r0, r1
 8015390:	4611      	mov	r1, r2
 8015392:	2200      	movs	r2, #0
 8015394:	602a      	str	r2, [r5, #0]
 8015396:	461a      	mov	r2, r3
 8015398:	f7ec fd5b 	bl	8001e52 <_write>
 801539c:	1c43      	adds	r3, r0, #1
 801539e:	d102      	bne.n	80153a6 <_write_r+0x1e>
 80153a0:	682b      	ldr	r3, [r5, #0]
 80153a2:	b103      	cbz	r3, 80153a6 <_write_r+0x1e>
 80153a4:	6023      	str	r3, [r4, #0]
 80153a6:	bd38      	pop	{r3, r4, r5, pc}
 80153a8:	20025e58 	.word	0x20025e58

080153ac <__errno>:
 80153ac:	4b01      	ldr	r3, [pc, #4]	; (80153b4 <__errno+0x8>)
 80153ae:	6818      	ldr	r0, [r3, #0]
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	2001b708 	.word	0x2001b708

080153b8 <__libc_init_array>:
 80153b8:	b570      	push	{r4, r5, r6, lr}
 80153ba:	4d0d      	ldr	r5, [pc, #52]	; (80153f0 <__libc_init_array+0x38>)
 80153bc:	2600      	movs	r6, #0
 80153be:	4c0d      	ldr	r4, [pc, #52]	; (80153f4 <__libc_init_array+0x3c>)
 80153c0:	1b64      	subs	r4, r4, r5
 80153c2:	10a4      	asrs	r4, r4, #2
 80153c4:	42a6      	cmp	r6, r4
 80153c6:	d109      	bne.n	80153dc <__libc_init_array+0x24>
 80153c8:	4d0b      	ldr	r5, [pc, #44]	; (80153f8 <__libc_init_array+0x40>)
 80153ca:	2600      	movs	r6, #0
 80153cc:	4c0b      	ldr	r4, [pc, #44]	; (80153fc <__libc_init_array+0x44>)
 80153ce:	f001 f805 	bl	80163dc <_init>
 80153d2:	1b64      	subs	r4, r4, r5
 80153d4:	10a4      	asrs	r4, r4, #2
 80153d6:	42a6      	cmp	r6, r4
 80153d8:	d105      	bne.n	80153e6 <__libc_init_array+0x2e>
 80153da:	bd70      	pop	{r4, r5, r6, pc}
 80153dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80153e0:	3601      	adds	r6, #1
 80153e2:	4798      	blx	r3
 80153e4:	e7ee      	b.n	80153c4 <__libc_init_array+0xc>
 80153e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80153ea:	3601      	adds	r6, #1
 80153ec:	4798      	blx	r3
 80153ee:	e7f2      	b.n	80153d6 <__libc_init_array+0x1e>
 80153f0:	08016d70 	.word	0x08016d70
 80153f4:	08016d70 	.word	0x08016d70
 80153f8:	08016d70 	.word	0x08016d70
 80153fc:	08016d74 	.word	0x08016d74

08015400 <__retarget_lock_acquire_recursive>:
 8015400:	4770      	bx	lr

08015402 <__retarget_lock_release_recursive>:
 8015402:	4770      	bx	lr

08015404 <memcpy>:
 8015404:	440a      	add	r2, r1
 8015406:	1e43      	subs	r3, r0, #1
 8015408:	4291      	cmp	r1, r2
 801540a:	d100      	bne.n	801540e <memcpy+0xa>
 801540c:	4770      	bx	lr
 801540e:	b510      	push	{r4, lr}
 8015410:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015414:	4291      	cmp	r1, r2
 8015416:	f803 4f01 	strb.w	r4, [r3, #1]!
 801541a:	d1f9      	bne.n	8015410 <memcpy+0xc>
 801541c:	bd10      	pop	{r4, pc}
	...

08015420 <__assert_func>:
 8015420:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8015422:	4614      	mov	r4, r2
 8015424:	461a      	mov	r2, r3
 8015426:	4b09      	ldr	r3, [pc, #36]	; (801544c <__assert_func+0x2c>)
 8015428:	4605      	mov	r5, r0
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	68d8      	ldr	r0, [r3, #12]
 801542e:	b14c      	cbz	r4, 8015444 <__assert_func+0x24>
 8015430:	4b07      	ldr	r3, [pc, #28]	; (8015450 <__assert_func+0x30>)
 8015432:	9100      	str	r1, [sp, #0]
 8015434:	4907      	ldr	r1, [pc, #28]	; (8015454 <__assert_func+0x34>)
 8015436:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801543a:	462b      	mov	r3, r5
 801543c:	f000 fca4 	bl	8015d88 <fiprintf>
 8015440:	f000 fcec 	bl	8015e1c <abort>
 8015444:	4b04      	ldr	r3, [pc, #16]	; (8015458 <__assert_func+0x38>)
 8015446:	461c      	mov	r4, r3
 8015448:	e7f3      	b.n	8015432 <__assert_func+0x12>
 801544a:	bf00      	nop
 801544c:	2001b708 	.word	0x2001b708
 8015450:	08016cf6 	.word	0x08016cf6
 8015454:	08016d03 	.word	0x08016d03
 8015458:	08016d31 	.word	0x08016d31

0801545c <_free_r>:
 801545c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801545e:	2900      	cmp	r1, #0
 8015460:	d043      	beq.n	80154ea <_free_r+0x8e>
 8015462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015466:	1f0c      	subs	r4, r1, #4
 8015468:	9001      	str	r0, [sp, #4]
 801546a:	2b00      	cmp	r3, #0
 801546c:	bfb8      	it	lt
 801546e:	18e4      	addlt	r4, r4, r3
 8015470:	f000 f8e8 	bl	8015644 <__malloc_lock>
 8015474:	4a1e      	ldr	r2, [pc, #120]	; (80154f0 <_free_r+0x94>)
 8015476:	9801      	ldr	r0, [sp, #4]
 8015478:	6813      	ldr	r3, [r2, #0]
 801547a:	b933      	cbnz	r3, 801548a <_free_r+0x2e>
 801547c:	6063      	str	r3, [r4, #4]
 801547e:	6014      	str	r4, [r2, #0]
 8015480:	b003      	add	sp, #12
 8015482:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015486:	f000 b8e3 	b.w	8015650 <__malloc_unlock>
 801548a:	42a3      	cmp	r3, r4
 801548c:	d908      	bls.n	80154a0 <_free_r+0x44>
 801548e:	6825      	ldr	r5, [r4, #0]
 8015490:	1961      	adds	r1, r4, r5
 8015492:	428b      	cmp	r3, r1
 8015494:	bf01      	itttt	eq
 8015496:	6819      	ldreq	r1, [r3, #0]
 8015498:	685b      	ldreq	r3, [r3, #4]
 801549a:	1949      	addeq	r1, r1, r5
 801549c:	6021      	streq	r1, [r4, #0]
 801549e:	e7ed      	b.n	801547c <_free_r+0x20>
 80154a0:	461a      	mov	r2, r3
 80154a2:	685b      	ldr	r3, [r3, #4]
 80154a4:	b10b      	cbz	r3, 80154aa <_free_r+0x4e>
 80154a6:	42a3      	cmp	r3, r4
 80154a8:	d9fa      	bls.n	80154a0 <_free_r+0x44>
 80154aa:	6811      	ldr	r1, [r2, #0]
 80154ac:	1855      	adds	r5, r2, r1
 80154ae:	42a5      	cmp	r5, r4
 80154b0:	d10b      	bne.n	80154ca <_free_r+0x6e>
 80154b2:	6824      	ldr	r4, [r4, #0]
 80154b4:	4421      	add	r1, r4
 80154b6:	1854      	adds	r4, r2, r1
 80154b8:	6011      	str	r1, [r2, #0]
 80154ba:	42a3      	cmp	r3, r4
 80154bc:	d1e0      	bne.n	8015480 <_free_r+0x24>
 80154be:	681c      	ldr	r4, [r3, #0]
 80154c0:	685b      	ldr	r3, [r3, #4]
 80154c2:	440c      	add	r4, r1
 80154c4:	6053      	str	r3, [r2, #4]
 80154c6:	6014      	str	r4, [r2, #0]
 80154c8:	e7da      	b.n	8015480 <_free_r+0x24>
 80154ca:	d902      	bls.n	80154d2 <_free_r+0x76>
 80154cc:	230c      	movs	r3, #12
 80154ce:	6003      	str	r3, [r0, #0]
 80154d0:	e7d6      	b.n	8015480 <_free_r+0x24>
 80154d2:	6825      	ldr	r5, [r4, #0]
 80154d4:	1961      	adds	r1, r4, r5
 80154d6:	428b      	cmp	r3, r1
 80154d8:	bf02      	ittt	eq
 80154da:	6819      	ldreq	r1, [r3, #0]
 80154dc:	685b      	ldreq	r3, [r3, #4]
 80154de:	1949      	addeq	r1, r1, r5
 80154e0:	6063      	str	r3, [r4, #4]
 80154e2:	bf08      	it	eq
 80154e4:	6021      	streq	r1, [r4, #0]
 80154e6:	6054      	str	r4, [r2, #4]
 80154e8:	e7ca      	b.n	8015480 <_free_r+0x24>
 80154ea:	b003      	add	sp, #12
 80154ec:	bd30      	pop	{r4, r5, pc}
 80154ee:	bf00      	nop
 80154f0:	20025e60 	.word	0x20025e60

080154f4 <malloc>:
 80154f4:	4b02      	ldr	r3, [pc, #8]	; (8015500 <malloc+0xc>)
 80154f6:	4601      	mov	r1, r0
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	f000 b823 	b.w	8015544 <_malloc_r>
 80154fe:	bf00      	nop
 8015500:	2001b708 	.word	0x2001b708

08015504 <sbrk_aligned>:
 8015504:	b570      	push	{r4, r5, r6, lr}
 8015506:	4e0e      	ldr	r6, [pc, #56]	; (8015540 <sbrk_aligned+0x3c>)
 8015508:	460c      	mov	r4, r1
 801550a:	4605      	mov	r5, r0
 801550c:	6831      	ldr	r1, [r6, #0]
 801550e:	b911      	cbnz	r1, 8015516 <sbrk_aligned+0x12>
 8015510:	f000 fc66 	bl	8015de0 <_sbrk_r>
 8015514:	6030      	str	r0, [r6, #0]
 8015516:	4621      	mov	r1, r4
 8015518:	4628      	mov	r0, r5
 801551a:	f000 fc61 	bl	8015de0 <_sbrk_r>
 801551e:	1c43      	adds	r3, r0, #1
 8015520:	d00a      	beq.n	8015538 <sbrk_aligned+0x34>
 8015522:	1cc4      	adds	r4, r0, #3
 8015524:	f024 0403 	bic.w	r4, r4, #3
 8015528:	42a0      	cmp	r0, r4
 801552a:	d007      	beq.n	801553c <sbrk_aligned+0x38>
 801552c:	1a21      	subs	r1, r4, r0
 801552e:	4628      	mov	r0, r5
 8015530:	f000 fc56 	bl	8015de0 <_sbrk_r>
 8015534:	3001      	adds	r0, #1
 8015536:	d101      	bne.n	801553c <sbrk_aligned+0x38>
 8015538:	f04f 34ff 	mov.w	r4, #4294967295
 801553c:	4620      	mov	r0, r4
 801553e:	bd70      	pop	{r4, r5, r6, pc}
 8015540:	20025e64 	.word	0x20025e64

08015544 <_malloc_r>:
 8015544:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015548:	1ccd      	adds	r5, r1, #3
 801554a:	4607      	mov	r7, r0
 801554c:	f025 0503 	bic.w	r5, r5, #3
 8015550:	3508      	adds	r5, #8
 8015552:	2d0c      	cmp	r5, #12
 8015554:	bf38      	it	cc
 8015556:	250c      	movcc	r5, #12
 8015558:	2d00      	cmp	r5, #0
 801555a:	db01      	blt.n	8015560 <_malloc_r+0x1c>
 801555c:	42a9      	cmp	r1, r5
 801555e:	d905      	bls.n	801556c <_malloc_r+0x28>
 8015560:	230c      	movs	r3, #12
 8015562:	2600      	movs	r6, #0
 8015564:	603b      	str	r3, [r7, #0]
 8015566:	4630      	mov	r0, r6
 8015568:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801556c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8015640 <_malloc_r+0xfc>
 8015570:	f000 f868 	bl	8015644 <__malloc_lock>
 8015574:	f8d8 3000 	ldr.w	r3, [r8]
 8015578:	461c      	mov	r4, r3
 801557a:	bb5c      	cbnz	r4, 80155d4 <_malloc_r+0x90>
 801557c:	4629      	mov	r1, r5
 801557e:	4638      	mov	r0, r7
 8015580:	f7ff ffc0 	bl	8015504 <sbrk_aligned>
 8015584:	1c43      	adds	r3, r0, #1
 8015586:	4604      	mov	r4, r0
 8015588:	d155      	bne.n	8015636 <_malloc_r+0xf2>
 801558a:	f8d8 4000 	ldr.w	r4, [r8]
 801558e:	4626      	mov	r6, r4
 8015590:	2e00      	cmp	r6, #0
 8015592:	d145      	bne.n	8015620 <_malloc_r+0xdc>
 8015594:	2c00      	cmp	r4, #0
 8015596:	d048      	beq.n	801562a <_malloc_r+0xe6>
 8015598:	6823      	ldr	r3, [r4, #0]
 801559a:	4631      	mov	r1, r6
 801559c:	4638      	mov	r0, r7
 801559e:	eb04 0903 	add.w	r9, r4, r3
 80155a2:	f000 fc1d 	bl	8015de0 <_sbrk_r>
 80155a6:	4581      	cmp	r9, r0
 80155a8:	d13f      	bne.n	801562a <_malloc_r+0xe6>
 80155aa:	6821      	ldr	r1, [r4, #0]
 80155ac:	4638      	mov	r0, r7
 80155ae:	1a6d      	subs	r5, r5, r1
 80155b0:	4629      	mov	r1, r5
 80155b2:	f7ff ffa7 	bl	8015504 <sbrk_aligned>
 80155b6:	3001      	adds	r0, #1
 80155b8:	d037      	beq.n	801562a <_malloc_r+0xe6>
 80155ba:	6823      	ldr	r3, [r4, #0]
 80155bc:	442b      	add	r3, r5
 80155be:	6023      	str	r3, [r4, #0]
 80155c0:	f8d8 3000 	ldr.w	r3, [r8]
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d038      	beq.n	801563a <_malloc_r+0xf6>
 80155c8:	685a      	ldr	r2, [r3, #4]
 80155ca:	42a2      	cmp	r2, r4
 80155cc:	d12b      	bne.n	8015626 <_malloc_r+0xe2>
 80155ce:	2200      	movs	r2, #0
 80155d0:	605a      	str	r2, [r3, #4]
 80155d2:	e00f      	b.n	80155f4 <_malloc_r+0xb0>
 80155d4:	6822      	ldr	r2, [r4, #0]
 80155d6:	1b52      	subs	r2, r2, r5
 80155d8:	d41f      	bmi.n	801561a <_malloc_r+0xd6>
 80155da:	2a0b      	cmp	r2, #11
 80155dc:	d917      	bls.n	801560e <_malloc_r+0xca>
 80155de:	1961      	adds	r1, r4, r5
 80155e0:	42a3      	cmp	r3, r4
 80155e2:	6025      	str	r5, [r4, #0]
 80155e4:	bf18      	it	ne
 80155e6:	6059      	strne	r1, [r3, #4]
 80155e8:	6863      	ldr	r3, [r4, #4]
 80155ea:	bf08      	it	eq
 80155ec:	f8c8 1000 	streq.w	r1, [r8]
 80155f0:	5162      	str	r2, [r4, r5]
 80155f2:	604b      	str	r3, [r1, #4]
 80155f4:	f104 060b 	add.w	r6, r4, #11
 80155f8:	4638      	mov	r0, r7
 80155fa:	f000 f829 	bl	8015650 <__malloc_unlock>
 80155fe:	1d23      	adds	r3, r4, #4
 8015600:	f026 0607 	bic.w	r6, r6, #7
 8015604:	1af2      	subs	r2, r6, r3
 8015606:	d0ae      	beq.n	8015566 <_malloc_r+0x22>
 8015608:	1b9b      	subs	r3, r3, r6
 801560a:	50a3      	str	r3, [r4, r2]
 801560c:	e7ab      	b.n	8015566 <_malloc_r+0x22>
 801560e:	42a3      	cmp	r3, r4
 8015610:	6862      	ldr	r2, [r4, #4]
 8015612:	d1dd      	bne.n	80155d0 <_malloc_r+0x8c>
 8015614:	f8c8 2000 	str.w	r2, [r8]
 8015618:	e7ec      	b.n	80155f4 <_malloc_r+0xb0>
 801561a:	4623      	mov	r3, r4
 801561c:	6864      	ldr	r4, [r4, #4]
 801561e:	e7ac      	b.n	801557a <_malloc_r+0x36>
 8015620:	4634      	mov	r4, r6
 8015622:	6876      	ldr	r6, [r6, #4]
 8015624:	e7b4      	b.n	8015590 <_malloc_r+0x4c>
 8015626:	4613      	mov	r3, r2
 8015628:	e7cc      	b.n	80155c4 <_malloc_r+0x80>
 801562a:	230c      	movs	r3, #12
 801562c:	4638      	mov	r0, r7
 801562e:	603b      	str	r3, [r7, #0]
 8015630:	f000 f80e 	bl	8015650 <__malloc_unlock>
 8015634:	e797      	b.n	8015566 <_malloc_r+0x22>
 8015636:	6025      	str	r5, [r4, #0]
 8015638:	e7dc      	b.n	80155f4 <_malloc_r+0xb0>
 801563a:	605b      	str	r3, [r3, #4]
 801563c:	deff      	udf	#255	; 0xff
 801563e:	bf00      	nop
 8015640:	20025e60 	.word	0x20025e60

08015644 <__malloc_lock>:
 8015644:	4801      	ldr	r0, [pc, #4]	; (801564c <__malloc_lock+0x8>)
 8015646:	f7ff bedb 	b.w	8015400 <__retarget_lock_acquire_recursive>
 801564a:	bf00      	nop
 801564c:	20025e5c 	.word	0x20025e5c

08015650 <__malloc_unlock>:
 8015650:	4801      	ldr	r0, [pc, #4]	; (8015658 <__malloc_unlock+0x8>)
 8015652:	f7ff bed6 	b.w	8015402 <__retarget_lock_release_recursive>
 8015656:	bf00      	nop
 8015658:	20025e5c 	.word	0x20025e5c

0801565c <__ssputs_r>:
 801565c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015660:	461f      	mov	r7, r3
 8015662:	688e      	ldr	r6, [r1, #8]
 8015664:	4682      	mov	sl, r0
 8015666:	460c      	mov	r4, r1
 8015668:	42be      	cmp	r6, r7
 801566a:	4690      	mov	r8, r2
 801566c:	680b      	ldr	r3, [r1, #0]
 801566e:	d82c      	bhi.n	80156ca <__ssputs_r+0x6e>
 8015670:	898a      	ldrh	r2, [r1, #12]
 8015672:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8015676:	d026      	beq.n	80156c6 <__ssputs_r+0x6a>
 8015678:	6965      	ldr	r5, [r4, #20]
 801567a:	6909      	ldr	r1, [r1, #16]
 801567c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015680:	eba3 0901 	sub.w	r9, r3, r1
 8015684:	1c7b      	adds	r3, r7, #1
 8015686:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801568a:	444b      	add	r3, r9
 801568c:	106d      	asrs	r5, r5, #1
 801568e:	429d      	cmp	r5, r3
 8015690:	bf38      	it	cc
 8015692:	461d      	movcc	r5, r3
 8015694:	0553      	lsls	r3, r2, #21
 8015696:	d527      	bpl.n	80156e8 <__ssputs_r+0x8c>
 8015698:	4629      	mov	r1, r5
 801569a:	f7ff ff53 	bl	8015544 <_malloc_r>
 801569e:	4606      	mov	r6, r0
 80156a0:	b360      	cbz	r0, 80156fc <__ssputs_r+0xa0>
 80156a2:	464a      	mov	r2, r9
 80156a4:	6921      	ldr	r1, [r4, #16]
 80156a6:	f7ff fead 	bl	8015404 <memcpy>
 80156aa:	89a3      	ldrh	r3, [r4, #12]
 80156ac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80156b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80156b4:	81a3      	strh	r3, [r4, #12]
 80156b6:	6126      	str	r6, [r4, #16]
 80156b8:	444e      	add	r6, r9
 80156ba:	6165      	str	r5, [r4, #20]
 80156bc:	eba5 0509 	sub.w	r5, r5, r9
 80156c0:	6026      	str	r6, [r4, #0]
 80156c2:	463e      	mov	r6, r7
 80156c4:	60a5      	str	r5, [r4, #8]
 80156c6:	42be      	cmp	r6, r7
 80156c8:	d900      	bls.n	80156cc <__ssputs_r+0x70>
 80156ca:	463e      	mov	r6, r7
 80156cc:	4632      	mov	r2, r6
 80156ce:	4641      	mov	r1, r8
 80156d0:	6820      	ldr	r0, [r4, #0]
 80156d2:	f000 fb6b 	bl	8015dac <memmove>
 80156d6:	68a3      	ldr	r3, [r4, #8]
 80156d8:	2000      	movs	r0, #0
 80156da:	1b9b      	subs	r3, r3, r6
 80156dc:	60a3      	str	r3, [r4, #8]
 80156de:	6823      	ldr	r3, [r4, #0]
 80156e0:	4433      	add	r3, r6
 80156e2:	6023      	str	r3, [r4, #0]
 80156e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80156e8:	462a      	mov	r2, r5
 80156ea:	f000 fb9e 	bl	8015e2a <_realloc_r>
 80156ee:	4606      	mov	r6, r0
 80156f0:	2800      	cmp	r0, #0
 80156f2:	d1e0      	bne.n	80156b6 <__ssputs_r+0x5a>
 80156f4:	6921      	ldr	r1, [r4, #16]
 80156f6:	4650      	mov	r0, sl
 80156f8:	f7ff feb0 	bl	801545c <_free_r>
 80156fc:	230c      	movs	r3, #12
 80156fe:	f04f 30ff 	mov.w	r0, #4294967295
 8015702:	f8ca 3000 	str.w	r3, [sl]
 8015706:	89a3      	ldrh	r3, [r4, #12]
 8015708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801570c:	81a3      	strh	r3, [r4, #12]
 801570e:	e7e9      	b.n	80156e4 <__ssputs_r+0x88>

08015710 <_svfiprintf_r>:
 8015710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015714:	4698      	mov	r8, r3
 8015716:	898b      	ldrh	r3, [r1, #12]
 8015718:	b09d      	sub	sp, #116	; 0x74
 801571a:	4607      	mov	r7, r0
 801571c:	061b      	lsls	r3, r3, #24
 801571e:	460d      	mov	r5, r1
 8015720:	4614      	mov	r4, r2
 8015722:	d50e      	bpl.n	8015742 <_svfiprintf_r+0x32>
 8015724:	690b      	ldr	r3, [r1, #16]
 8015726:	b963      	cbnz	r3, 8015742 <_svfiprintf_r+0x32>
 8015728:	2140      	movs	r1, #64	; 0x40
 801572a:	f7ff ff0b 	bl	8015544 <_malloc_r>
 801572e:	6028      	str	r0, [r5, #0]
 8015730:	6128      	str	r0, [r5, #16]
 8015732:	b920      	cbnz	r0, 801573e <_svfiprintf_r+0x2e>
 8015734:	230c      	movs	r3, #12
 8015736:	603b      	str	r3, [r7, #0]
 8015738:	f04f 30ff 	mov.w	r0, #4294967295
 801573c:	e0d0      	b.n	80158e0 <_svfiprintf_r+0x1d0>
 801573e:	2340      	movs	r3, #64	; 0x40
 8015740:	616b      	str	r3, [r5, #20]
 8015742:	2300      	movs	r3, #0
 8015744:	f8cd 800c 	str.w	r8, [sp, #12]
 8015748:	f04f 0901 	mov.w	r9, #1
 801574c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80158f8 <_svfiprintf_r+0x1e8>
 8015750:	9309      	str	r3, [sp, #36]	; 0x24
 8015752:	2320      	movs	r3, #32
 8015754:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015758:	2330      	movs	r3, #48	; 0x30
 801575a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801575e:	4623      	mov	r3, r4
 8015760:	469a      	mov	sl, r3
 8015762:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015766:	b10a      	cbz	r2, 801576c <_svfiprintf_r+0x5c>
 8015768:	2a25      	cmp	r2, #37	; 0x25
 801576a:	d1f9      	bne.n	8015760 <_svfiprintf_r+0x50>
 801576c:	ebba 0b04 	subs.w	fp, sl, r4
 8015770:	d00b      	beq.n	801578a <_svfiprintf_r+0x7a>
 8015772:	465b      	mov	r3, fp
 8015774:	4622      	mov	r2, r4
 8015776:	4629      	mov	r1, r5
 8015778:	4638      	mov	r0, r7
 801577a:	f7ff ff6f 	bl	801565c <__ssputs_r>
 801577e:	3001      	adds	r0, #1
 8015780:	f000 80a9 	beq.w	80158d6 <_svfiprintf_r+0x1c6>
 8015784:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015786:	445a      	add	r2, fp
 8015788:	9209      	str	r2, [sp, #36]	; 0x24
 801578a:	f89a 3000 	ldrb.w	r3, [sl]
 801578e:	2b00      	cmp	r3, #0
 8015790:	f000 80a1 	beq.w	80158d6 <_svfiprintf_r+0x1c6>
 8015794:	2300      	movs	r3, #0
 8015796:	f04f 32ff 	mov.w	r2, #4294967295
 801579a:	f10a 0a01 	add.w	sl, sl, #1
 801579e:	9304      	str	r3, [sp, #16]
 80157a0:	9307      	str	r3, [sp, #28]
 80157a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80157a6:	931a      	str	r3, [sp, #104]	; 0x68
 80157a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80157ac:	4654      	mov	r4, sl
 80157ae:	2205      	movs	r2, #5
 80157b0:	4851      	ldr	r0, [pc, #324]	; (80158f8 <_svfiprintf_r+0x1e8>)
 80157b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80157b6:	f000 fb23 	bl	8015e00 <memchr>
 80157ba:	9a04      	ldr	r2, [sp, #16]
 80157bc:	b9d8      	cbnz	r0, 80157f6 <_svfiprintf_r+0xe6>
 80157be:	06d0      	lsls	r0, r2, #27
 80157c0:	bf44      	itt	mi
 80157c2:	2320      	movmi	r3, #32
 80157c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157c8:	0711      	lsls	r1, r2, #28
 80157ca:	bf44      	itt	mi
 80157cc:	232b      	movmi	r3, #43	; 0x2b
 80157ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80157d2:	f89a 3000 	ldrb.w	r3, [sl]
 80157d6:	2b2a      	cmp	r3, #42	; 0x2a
 80157d8:	d015      	beq.n	8015806 <_svfiprintf_r+0xf6>
 80157da:	9a07      	ldr	r2, [sp, #28]
 80157dc:	4654      	mov	r4, sl
 80157de:	2000      	movs	r0, #0
 80157e0:	f04f 0c0a 	mov.w	ip, #10
 80157e4:	4621      	mov	r1, r4
 80157e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80157ea:	3b30      	subs	r3, #48	; 0x30
 80157ec:	2b09      	cmp	r3, #9
 80157ee:	d94d      	bls.n	801588c <_svfiprintf_r+0x17c>
 80157f0:	b1b0      	cbz	r0, 8015820 <_svfiprintf_r+0x110>
 80157f2:	9207      	str	r2, [sp, #28]
 80157f4:	e014      	b.n	8015820 <_svfiprintf_r+0x110>
 80157f6:	eba0 0308 	sub.w	r3, r0, r8
 80157fa:	46a2      	mov	sl, r4
 80157fc:	fa09 f303 	lsl.w	r3, r9, r3
 8015800:	4313      	orrs	r3, r2
 8015802:	9304      	str	r3, [sp, #16]
 8015804:	e7d2      	b.n	80157ac <_svfiprintf_r+0x9c>
 8015806:	9b03      	ldr	r3, [sp, #12]
 8015808:	1d19      	adds	r1, r3, #4
 801580a:	681b      	ldr	r3, [r3, #0]
 801580c:	2b00      	cmp	r3, #0
 801580e:	9103      	str	r1, [sp, #12]
 8015810:	bfbb      	ittet	lt
 8015812:	425b      	neglt	r3, r3
 8015814:	f042 0202 	orrlt.w	r2, r2, #2
 8015818:	9307      	strge	r3, [sp, #28]
 801581a:	9307      	strlt	r3, [sp, #28]
 801581c:	bfb8      	it	lt
 801581e:	9204      	strlt	r2, [sp, #16]
 8015820:	7823      	ldrb	r3, [r4, #0]
 8015822:	2b2e      	cmp	r3, #46	; 0x2e
 8015824:	d10c      	bne.n	8015840 <_svfiprintf_r+0x130>
 8015826:	7863      	ldrb	r3, [r4, #1]
 8015828:	2b2a      	cmp	r3, #42	; 0x2a
 801582a:	d134      	bne.n	8015896 <_svfiprintf_r+0x186>
 801582c:	9b03      	ldr	r3, [sp, #12]
 801582e:	3402      	adds	r4, #2
 8015830:	1d1a      	adds	r2, r3, #4
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	2b00      	cmp	r3, #0
 8015836:	9203      	str	r2, [sp, #12]
 8015838:	bfb8      	it	lt
 801583a:	f04f 33ff 	movlt.w	r3, #4294967295
 801583e:	9305      	str	r3, [sp, #20]
 8015840:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8015908 <_svfiprintf_r+0x1f8>
 8015844:	2203      	movs	r2, #3
 8015846:	7821      	ldrb	r1, [r4, #0]
 8015848:	4650      	mov	r0, sl
 801584a:	f000 fad9 	bl	8015e00 <memchr>
 801584e:	b138      	cbz	r0, 8015860 <_svfiprintf_r+0x150>
 8015850:	eba0 000a 	sub.w	r0, r0, sl
 8015854:	2240      	movs	r2, #64	; 0x40
 8015856:	9b04      	ldr	r3, [sp, #16]
 8015858:	3401      	adds	r4, #1
 801585a:	4082      	lsls	r2, r0
 801585c:	4313      	orrs	r3, r2
 801585e:	9304      	str	r3, [sp, #16]
 8015860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015864:	2206      	movs	r2, #6
 8015866:	4825      	ldr	r0, [pc, #148]	; (80158fc <_svfiprintf_r+0x1ec>)
 8015868:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801586c:	f000 fac8 	bl	8015e00 <memchr>
 8015870:	2800      	cmp	r0, #0
 8015872:	d038      	beq.n	80158e6 <_svfiprintf_r+0x1d6>
 8015874:	4b22      	ldr	r3, [pc, #136]	; (8015900 <_svfiprintf_r+0x1f0>)
 8015876:	bb1b      	cbnz	r3, 80158c0 <_svfiprintf_r+0x1b0>
 8015878:	9b03      	ldr	r3, [sp, #12]
 801587a:	3307      	adds	r3, #7
 801587c:	f023 0307 	bic.w	r3, r3, #7
 8015880:	3308      	adds	r3, #8
 8015882:	9303      	str	r3, [sp, #12]
 8015884:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015886:	4433      	add	r3, r6
 8015888:	9309      	str	r3, [sp, #36]	; 0x24
 801588a:	e768      	b.n	801575e <_svfiprintf_r+0x4e>
 801588c:	fb0c 3202 	mla	r2, ip, r2, r3
 8015890:	460c      	mov	r4, r1
 8015892:	2001      	movs	r0, #1
 8015894:	e7a6      	b.n	80157e4 <_svfiprintf_r+0xd4>
 8015896:	2300      	movs	r3, #0
 8015898:	3401      	adds	r4, #1
 801589a:	f04f 0c0a 	mov.w	ip, #10
 801589e:	4619      	mov	r1, r3
 80158a0:	9305      	str	r3, [sp, #20]
 80158a2:	4620      	mov	r0, r4
 80158a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80158a8:	3a30      	subs	r2, #48	; 0x30
 80158aa:	2a09      	cmp	r2, #9
 80158ac:	d903      	bls.n	80158b6 <_svfiprintf_r+0x1a6>
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d0c6      	beq.n	8015840 <_svfiprintf_r+0x130>
 80158b2:	9105      	str	r1, [sp, #20]
 80158b4:	e7c4      	b.n	8015840 <_svfiprintf_r+0x130>
 80158b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80158ba:	4604      	mov	r4, r0
 80158bc:	2301      	movs	r3, #1
 80158be:	e7f0      	b.n	80158a2 <_svfiprintf_r+0x192>
 80158c0:	ab03      	add	r3, sp, #12
 80158c2:	462a      	mov	r2, r5
 80158c4:	a904      	add	r1, sp, #16
 80158c6:	4638      	mov	r0, r7
 80158c8:	9300      	str	r3, [sp, #0]
 80158ca:	4b0e      	ldr	r3, [pc, #56]	; (8015904 <_svfiprintf_r+0x1f4>)
 80158cc:	f3af 8000 	nop.w
 80158d0:	1c42      	adds	r2, r0, #1
 80158d2:	4606      	mov	r6, r0
 80158d4:	d1d6      	bne.n	8015884 <_svfiprintf_r+0x174>
 80158d6:	89ab      	ldrh	r3, [r5, #12]
 80158d8:	065b      	lsls	r3, r3, #25
 80158da:	f53f af2d 	bmi.w	8015738 <_svfiprintf_r+0x28>
 80158de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80158e0:	b01d      	add	sp, #116	; 0x74
 80158e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80158e6:	ab03      	add	r3, sp, #12
 80158e8:	462a      	mov	r2, r5
 80158ea:	a904      	add	r1, sp, #16
 80158ec:	4638      	mov	r0, r7
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	4b04      	ldr	r3, [pc, #16]	; (8015904 <_svfiprintf_r+0x1f4>)
 80158f2:	f000 f87d 	bl	80159f0 <_printf_i>
 80158f6:	e7eb      	b.n	80158d0 <_svfiprintf_r+0x1c0>
 80158f8:	08016d32 	.word	0x08016d32
 80158fc:	08016d3c 	.word	0x08016d3c
 8015900:	00000000 	.word	0x00000000
 8015904:	0801565d 	.word	0x0801565d
 8015908:	08016d38 	.word	0x08016d38

0801590c <_printf_common>:
 801590c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015910:	4616      	mov	r6, r2
 8015912:	4699      	mov	r9, r3
 8015914:	688a      	ldr	r2, [r1, #8]
 8015916:	4607      	mov	r7, r0
 8015918:	690b      	ldr	r3, [r1, #16]
 801591a:	460c      	mov	r4, r1
 801591c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015920:	4293      	cmp	r3, r2
 8015922:	bfb8      	it	lt
 8015924:	4613      	movlt	r3, r2
 8015926:	6033      	str	r3, [r6, #0]
 8015928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801592c:	b10a      	cbz	r2, 8015932 <_printf_common+0x26>
 801592e:	3301      	adds	r3, #1
 8015930:	6033      	str	r3, [r6, #0]
 8015932:	6823      	ldr	r3, [r4, #0]
 8015934:	0699      	lsls	r1, r3, #26
 8015936:	bf42      	ittt	mi
 8015938:	6833      	ldrmi	r3, [r6, #0]
 801593a:	3302      	addmi	r3, #2
 801593c:	6033      	strmi	r3, [r6, #0]
 801593e:	6825      	ldr	r5, [r4, #0]
 8015940:	f015 0506 	ands.w	r5, r5, #6
 8015944:	d106      	bne.n	8015954 <_printf_common+0x48>
 8015946:	f104 0a19 	add.w	sl, r4, #25
 801594a:	68e3      	ldr	r3, [r4, #12]
 801594c:	6832      	ldr	r2, [r6, #0]
 801594e:	1a9b      	subs	r3, r3, r2
 8015950:	42ab      	cmp	r3, r5
 8015952:	dc2b      	bgt.n	80159ac <_printf_common+0xa0>
 8015954:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015958:	1e13      	subs	r3, r2, #0
 801595a:	6822      	ldr	r2, [r4, #0]
 801595c:	bf18      	it	ne
 801595e:	2301      	movne	r3, #1
 8015960:	0692      	lsls	r2, r2, #26
 8015962:	d430      	bmi.n	80159c6 <_printf_common+0xba>
 8015964:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015968:	4649      	mov	r1, r9
 801596a:	4638      	mov	r0, r7
 801596c:	47c0      	blx	r8
 801596e:	3001      	adds	r0, #1
 8015970:	d023      	beq.n	80159ba <_printf_common+0xae>
 8015972:	6823      	ldr	r3, [r4, #0]
 8015974:	341a      	adds	r4, #26
 8015976:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 801597a:	f003 0306 	and.w	r3, r3, #6
 801597e:	2b04      	cmp	r3, #4
 8015980:	bf0a      	itet	eq
 8015982:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8015986:	2500      	movne	r5, #0
 8015988:	6833      	ldreq	r3, [r6, #0]
 801598a:	f04f 0600 	mov.w	r6, #0
 801598e:	bf08      	it	eq
 8015990:	1aed      	subeq	r5, r5, r3
 8015992:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8015996:	bf08      	it	eq
 8015998:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801599c:	4293      	cmp	r3, r2
 801599e:	bfc4      	itt	gt
 80159a0:	1a9b      	subgt	r3, r3, r2
 80159a2:	18ed      	addgt	r5, r5, r3
 80159a4:	42b5      	cmp	r5, r6
 80159a6:	d11a      	bne.n	80159de <_printf_common+0xd2>
 80159a8:	2000      	movs	r0, #0
 80159aa:	e008      	b.n	80159be <_printf_common+0xb2>
 80159ac:	2301      	movs	r3, #1
 80159ae:	4652      	mov	r2, sl
 80159b0:	4649      	mov	r1, r9
 80159b2:	4638      	mov	r0, r7
 80159b4:	47c0      	blx	r8
 80159b6:	3001      	adds	r0, #1
 80159b8:	d103      	bne.n	80159c2 <_printf_common+0xb6>
 80159ba:	f04f 30ff 	mov.w	r0, #4294967295
 80159be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80159c2:	3501      	adds	r5, #1
 80159c4:	e7c1      	b.n	801594a <_printf_common+0x3e>
 80159c6:	18e1      	adds	r1, r4, r3
 80159c8:	1c5a      	adds	r2, r3, #1
 80159ca:	2030      	movs	r0, #48	; 0x30
 80159cc:	3302      	adds	r3, #2
 80159ce:	4422      	add	r2, r4
 80159d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80159d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80159d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80159dc:	e7c2      	b.n	8015964 <_printf_common+0x58>
 80159de:	2301      	movs	r3, #1
 80159e0:	4622      	mov	r2, r4
 80159e2:	4649      	mov	r1, r9
 80159e4:	4638      	mov	r0, r7
 80159e6:	47c0      	blx	r8
 80159e8:	3001      	adds	r0, #1
 80159ea:	d0e6      	beq.n	80159ba <_printf_common+0xae>
 80159ec:	3601      	adds	r6, #1
 80159ee:	e7d9      	b.n	80159a4 <_printf_common+0x98>

080159f0 <_printf_i>:
 80159f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80159f4:	7e0f      	ldrb	r7, [r1, #24]
 80159f6:	4691      	mov	r9, r2
 80159f8:	4680      	mov	r8, r0
 80159fa:	460c      	mov	r4, r1
 80159fc:	2f78      	cmp	r7, #120	; 0x78
 80159fe:	469a      	mov	sl, r3
 8015a00:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015a02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015a06:	d807      	bhi.n	8015a18 <_printf_i+0x28>
 8015a08:	2f62      	cmp	r7, #98	; 0x62
 8015a0a:	d80a      	bhi.n	8015a22 <_printf_i+0x32>
 8015a0c:	2f00      	cmp	r7, #0
 8015a0e:	f000 80d3 	beq.w	8015bb8 <_printf_i+0x1c8>
 8015a12:	2f58      	cmp	r7, #88	; 0x58
 8015a14:	f000 80bf 	beq.w	8015b96 <_printf_i+0x1a6>
 8015a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015a20:	e03a      	b.n	8015a98 <_printf_i+0xa8>
 8015a22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8015a26:	2b15      	cmp	r3, #21
 8015a28:	d8f6      	bhi.n	8015a18 <_printf_i+0x28>
 8015a2a:	a101      	add	r1, pc, #4	; (adr r1, 8015a30 <_printf_i+0x40>)
 8015a2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015a30:	08015a89 	.word	0x08015a89
 8015a34:	08015a9d 	.word	0x08015a9d
 8015a38:	08015a19 	.word	0x08015a19
 8015a3c:	08015a19 	.word	0x08015a19
 8015a40:	08015a19 	.word	0x08015a19
 8015a44:	08015a19 	.word	0x08015a19
 8015a48:	08015a9d 	.word	0x08015a9d
 8015a4c:	08015a19 	.word	0x08015a19
 8015a50:	08015a19 	.word	0x08015a19
 8015a54:	08015a19 	.word	0x08015a19
 8015a58:	08015a19 	.word	0x08015a19
 8015a5c:	08015b9f 	.word	0x08015b9f
 8015a60:	08015ac9 	.word	0x08015ac9
 8015a64:	08015b5b 	.word	0x08015b5b
 8015a68:	08015a19 	.word	0x08015a19
 8015a6c:	08015a19 	.word	0x08015a19
 8015a70:	08015bc1 	.word	0x08015bc1
 8015a74:	08015a19 	.word	0x08015a19
 8015a78:	08015ac9 	.word	0x08015ac9
 8015a7c:	08015a19 	.word	0x08015a19
 8015a80:	08015a19 	.word	0x08015a19
 8015a84:	08015b63 	.word	0x08015b63
 8015a88:	682b      	ldr	r3, [r5, #0]
 8015a8a:	1d1a      	adds	r2, r3, #4
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	602a      	str	r2, [r5, #0]
 8015a90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015a94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015a98:	2301      	movs	r3, #1
 8015a9a:	e09e      	b.n	8015bda <_printf_i+0x1ea>
 8015a9c:	6820      	ldr	r0, [r4, #0]
 8015a9e:	682b      	ldr	r3, [r5, #0]
 8015aa0:	0607      	lsls	r7, r0, #24
 8015aa2:	f103 0104 	add.w	r1, r3, #4
 8015aa6:	6029      	str	r1, [r5, #0]
 8015aa8:	d501      	bpl.n	8015aae <_printf_i+0xbe>
 8015aaa:	681e      	ldr	r6, [r3, #0]
 8015aac:	e003      	b.n	8015ab6 <_printf_i+0xc6>
 8015aae:	0646      	lsls	r6, r0, #25
 8015ab0:	d5fb      	bpl.n	8015aaa <_printf_i+0xba>
 8015ab2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015ab6:	2e00      	cmp	r6, #0
 8015ab8:	da03      	bge.n	8015ac2 <_printf_i+0xd2>
 8015aba:	232d      	movs	r3, #45	; 0x2d
 8015abc:	4276      	negs	r6, r6
 8015abe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015ac2:	4859      	ldr	r0, [pc, #356]	; (8015c28 <_printf_i+0x238>)
 8015ac4:	230a      	movs	r3, #10
 8015ac6:	e012      	b.n	8015aee <_printf_i+0xfe>
 8015ac8:	682b      	ldr	r3, [r5, #0]
 8015aca:	6820      	ldr	r0, [r4, #0]
 8015acc:	1d19      	adds	r1, r3, #4
 8015ace:	6029      	str	r1, [r5, #0]
 8015ad0:	0605      	lsls	r5, r0, #24
 8015ad2:	d501      	bpl.n	8015ad8 <_printf_i+0xe8>
 8015ad4:	681e      	ldr	r6, [r3, #0]
 8015ad6:	e002      	b.n	8015ade <_printf_i+0xee>
 8015ad8:	0641      	lsls	r1, r0, #25
 8015ada:	d5fb      	bpl.n	8015ad4 <_printf_i+0xe4>
 8015adc:	881e      	ldrh	r6, [r3, #0]
 8015ade:	2f6f      	cmp	r7, #111	; 0x6f
 8015ae0:	4851      	ldr	r0, [pc, #324]	; (8015c28 <_printf_i+0x238>)
 8015ae2:	bf0c      	ite	eq
 8015ae4:	2308      	moveq	r3, #8
 8015ae6:	230a      	movne	r3, #10
 8015ae8:	2100      	movs	r1, #0
 8015aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015aee:	6865      	ldr	r5, [r4, #4]
 8015af0:	2d00      	cmp	r5, #0
 8015af2:	60a5      	str	r5, [r4, #8]
 8015af4:	bfa2      	ittt	ge
 8015af6:	6821      	ldrge	r1, [r4, #0]
 8015af8:	f021 0104 	bicge.w	r1, r1, #4
 8015afc:	6021      	strge	r1, [r4, #0]
 8015afe:	b90e      	cbnz	r6, 8015b04 <_printf_i+0x114>
 8015b00:	2d00      	cmp	r5, #0
 8015b02:	d04a      	beq.n	8015b9a <_printf_i+0x1aa>
 8015b04:	4615      	mov	r5, r2
 8015b06:	fbb6 f1f3 	udiv	r1, r6, r3
 8015b0a:	fb03 6711 	mls	r7, r3, r1, r6
 8015b0e:	5dc7      	ldrb	r7, [r0, r7]
 8015b10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015b14:	4637      	mov	r7, r6
 8015b16:	460e      	mov	r6, r1
 8015b18:	42bb      	cmp	r3, r7
 8015b1a:	d9f4      	bls.n	8015b06 <_printf_i+0x116>
 8015b1c:	2b08      	cmp	r3, #8
 8015b1e:	d10b      	bne.n	8015b38 <_printf_i+0x148>
 8015b20:	6823      	ldr	r3, [r4, #0]
 8015b22:	07de      	lsls	r6, r3, #31
 8015b24:	d508      	bpl.n	8015b38 <_printf_i+0x148>
 8015b26:	6923      	ldr	r3, [r4, #16]
 8015b28:	6861      	ldr	r1, [r4, #4]
 8015b2a:	4299      	cmp	r1, r3
 8015b2c:	bfde      	ittt	le
 8015b2e:	2330      	movle	r3, #48	; 0x30
 8015b30:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015b34:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015b38:	1b52      	subs	r2, r2, r5
 8015b3a:	6122      	str	r2, [r4, #16]
 8015b3c:	464b      	mov	r3, r9
 8015b3e:	aa03      	add	r2, sp, #12
 8015b40:	4621      	mov	r1, r4
 8015b42:	4640      	mov	r0, r8
 8015b44:	f8cd a000 	str.w	sl, [sp]
 8015b48:	f7ff fee0 	bl	801590c <_printf_common>
 8015b4c:	3001      	adds	r0, #1
 8015b4e:	d149      	bne.n	8015be4 <_printf_i+0x1f4>
 8015b50:	f04f 30ff 	mov.w	r0, #4294967295
 8015b54:	b004      	add	sp, #16
 8015b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015b5a:	6823      	ldr	r3, [r4, #0]
 8015b5c:	f043 0320 	orr.w	r3, r3, #32
 8015b60:	6023      	str	r3, [r4, #0]
 8015b62:	2778      	movs	r7, #120	; 0x78
 8015b64:	4831      	ldr	r0, [pc, #196]	; (8015c2c <_printf_i+0x23c>)
 8015b66:	6823      	ldr	r3, [r4, #0]
 8015b68:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8015b6c:	061f      	lsls	r7, r3, #24
 8015b6e:	6829      	ldr	r1, [r5, #0]
 8015b70:	f851 6b04 	ldr.w	r6, [r1], #4
 8015b74:	d402      	bmi.n	8015b7c <_printf_i+0x18c>
 8015b76:	065f      	lsls	r7, r3, #25
 8015b78:	bf48      	it	mi
 8015b7a:	b2b6      	uxthmi	r6, r6
 8015b7c:	07df      	lsls	r7, r3, #31
 8015b7e:	6029      	str	r1, [r5, #0]
 8015b80:	bf44      	itt	mi
 8015b82:	f043 0320 	orrmi.w	r3, r3, #32
 8015b86:	6023      	strmi	r3, [r4, #0]
 8015b88:	b91e      	cbnz	r6, 8015b92 <_printf_i+0x1a2>
 8015b8a:	6823      	ldr	r3, [r4, #0]
 8015b8c:	f023 0320 	bic.w	r3, r3, #32
 8015b90:	6023      	str	r3, [r4, #0]
 8015b92:	2310      	movs	r3, #16
 8015b94:	e7a8      	b.n	8015ae8 <_printf_i+0xf8>
 8015b96:	4824      	ldr	r0, [pc, #144]	; (8015c28 <_printf_i+0x238>)
 8015b98:	e7e5      	b.n	8015b66 <_printf_i+0x176>
 8015b9a:	4615      	mov	r5, r2
 8015b9c:	e7be      	b.n	8015b1c <_printf_i+0x12c>
 8015b9e:	682b      	ldr	r3, [r5, #0]
 8015ba0:	6826      	ldr	r6, [r4, #0]
 8015ba2:	1d18      	adds	r0, r3, #4
 8015ba4:	6961      	ldr	r1, [r4, #20]
 8015ba6:	6028      	str	r0, [r5, #0]
 8015ba8:	0635      	lsls	r5, r6, #24
 8015baa:	681b      	ldr	r3, [r3, #0]
 8015bac:	d501      	bpl.n	8015bb2 <_printf_i+0x1c2>
 8015bae:	6019      	str	r1, [r3, #0]
 8015bb0:	e002      	b.n	8015bb8 <_printf_i+0x1c8>
 8015bb2:	0670      	lsls	r0, r6, #25
 8015bb4:	d5fb      	bpl.n	8015bae <_printf_i+0x1be>
 8015bb6:	8019      	strh	r1, [r3, #0]
 8015bb8:	2300      	movs	r3, #0
 8015bba:	4615      	mov	r5, r2
 8015bbc:	6123      	str	r3, [r4, #16]
 8015bbe:	e7bd      	b.n	8015b3c <_printf_i+0x14c>
 8015bc0:	682b      	ldr	r3, [r5, #0]
 8015bc2:	2100      	movs	r1, #0
 8015bc4:	1d1a      	adds	r2, r3, #4
 8015bc6:	602a      	str	r2, [r5, #0]
 8015bc8:	681d      	ldr	r5, [r3, #0]
 8015bca:	6862      	ldr	r2, [r4, #4]
 8015bcc:	4628      	mov	r0, r5
 8015bce:	f000 f917 	bl	8015e00 <memchr>
 8015bd2:	b108      	cbz	r0, 8015bd8 <_printf_i+0x1e8>
 8015bd4:	1b40      	subs	r0, r0, r5
 8015bd6:	6060      	str	r0, [r4, #4]
 8015bd8:	6863      	ldr	r3, [r4, #4]
 8015bda:	6123      	str	r3, [r4, #16]
 8015bdc:	2300      	movs	r3, #0
 8015bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015be2:	e7ab      	b.n	8015b3c <_printf_i+0x14c>
 8015be4:	6923      	ldr	r3, [r4, #16]
 8015be6:	462a      	mov	r2, r5
 8015be8:	4649      	mov	r1, r9
 8015bea:	4640      	mov	r0, r8
 8015bec:	47d0      	blx	sl
 8015bee:	3001      	adds	r0, #1
 8015bf0:	d0ae      	beq.n	8015b50 <_printf_i+0x160>
 8015bf2:	6823      	ldr	r3, [r4, #0]
 8015bf4:	079b      	lsls	r3, r3, #30
 8015bf6:	d413      	bmi.n	8015c20 <_printf_i+0x230>
 8015bf8:	68e0      	ldr	r0, [r4, #12]
 8015bfa:	9b03      	ldr	r3, [sp, #12]
 8015bfc:	4298      	cmp	r0, r3
 8015bfe:	bfb8      	it	lt
 8015c00:	4618      	movlt	r0, r3
 8015c02:	e7a7      	b.n	8015b54 <_printf_i+0x164>
 8015c04:	2301      	movs	r3, #1
 8015c06:	4632      	mov	r2, r6
 8015c08:	4649      	mov	r1, r9
 8015c0a:	4640      	mov	r0, r8
 8015c0c:	47d0      	blx	sl
 8015c0e:	3001      	adds	r0, #1
 8015c10:	d09e      	beq.n	8015b50 <_printf_i+0x160>
 8015c12:	3501      	adds	r5, #1
 8015c14:	68e3      	ldr	r3, [r4, #12]
 8015c16:	9903      	ldr	r1, [sp, #12]
 8015c18:	1a5b      	subs	r3, r3, r1
 8015c1a:	42ab      	cmp	r3, r5
 8015c1c:	dcf2      	bgt.n	8015c04 <_printf_i+0x214>
 8015c1e:	e7eb      	b.n	8015bf8 <_printf_i+0x208>
 8015c20:	2500      	movs	r5, #0
 8015c22:	f104 0619 	add.w	r6, r4, #25
 8015c26:	e7f5      	b.n	8015c14 <_printf_i+0x224>
 8015c28:	08016d43 	.word	0x08016d43
 8015c2c:	08016d54 	.word	0x08016d54

08015c30 <__sflush_r>:
 8015c30:	898a      	ldrh	r2, [r1, #12]
 8015c32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015c36:	4605      	mov	r5, r0
 8015c38:	0710      	lsls	r0, r2, #28
 8015c3a:	460c      	mov	r4, r1
 8015c3c:	d458      	bmi.n	8015cf0 <__sflush_r+0xc0>
 8015c3e:	684b      	ldr	r3, [r1, #4]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	dc05      	bgt.n	8015c50 <__sflush_r+0x20>
 8015c44:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	dc02      	bgt.n	8015c50 <__sflush_r+0x20>
 8015c4a:	2000      	movs	r0, #0
 8015c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015c50:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c52:	2e00      	cmp	r6, #0
 8015c54:	d0f9      	beq.n	8015c4a <__sflush_r+0x1a>
 8015c56:	2300      	movs	r3, #0
 8015c58:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8015c5c:	682f      	ldr	r7, [r5, #0]
 8015c5e:	6a21      	ldr	r1, [r4, #32]
 8015c60:	602b      	str	r3, [r5, #0]
 8015c62:	d032      	beq.n	8015cca <__sflush_r+0x9a>
 8015c64:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8015c66:	89a3      	ldrh	r3, [r4, #12]
 8015c68:	075a      	lsls	r2, r3, #29
 8015c6a:	d505      	bpl.n	8015c78 <__sflush_r+0x48>
 8015c6c:	6863      	ldr	r3, [r4, #4]
 8015c6e:	1ac0      	subs	r0, r0, r3
 8015c70:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8015c72:	b10b      	cbz	r3, 8015c78 <__sflush_r+0x48>
 8015c74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8015c76:	1ac0      	subs	r0, r0, r3
 8015c78:	2300      	movs	r3, #0
 8015c7a:	4602      	mov	r2, r0
 8015c7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8015c7e:	4628      	mov	r0, r5
 8015c80:	6a21      	ldr	r1, [r4, #32]
 8015c82:	47b0      	blx	r6
 8015c84:	1c43      	adds	r3, r0, #1
 8015c86:	89a3      	ldrh	r3, [r4, #12]
 8015c88:	d106      	bne.n	8015c98 <__sflush_r+0x68>
 8015c8a:	6829      	ldr	r1, [r5, #0]
 8015c8c:	291d      	cmp	r1, #29
 8015c8e:	d82b      	bhi.n	8015ce8 <__sflush_r+0xb8>
 8015c90:	4a28      	ldr	r2, [pc, #160]	; (8015d34 <__sflush_r+0x104>)
 8015c92:	410a      	asrs	r2, r1
 8015c94:	07d6      	lsls	r6, r2, #31
 8015c96:	d427      	bmi.n	8015ce8 <__sflush_r+0xb8>
 8015c98:	2200      	movs	r2, #0
 8015c9a:	04d9      	lsls	r1, r3, #19
 8015c9c:	6062      	str	r2, [r4, #4]
 8015c9e:	6922      	ldr	r2, [r4, #16]
 8015ca0:	6022      	str	r2, [r4, #0]
 8015ca2:	d504      	bpl.n	8015cae <__sflush_r+0x7e>
 8015ca4:	1c42      	adds	r2, r0, #1
 8015ca6:	d101      	bne.n	8015cac <__sflush_r+0x7c>
 8015ca8:	682b      	ldr	r3, [r5, #0]
 8015caa:	b903      	cbnz	r3, 8015cae <__sflush_r+0x7e>
 8015cac:	6560      	str	r0, [r4, #84]	; 0x54
 8015cae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8015cb0:	602f      	str	r7, [r5, #0]
 8015cb2:	2900      	cmp	r1, #0
 8015cb4:	d0c9      	beq.n	8015c4a <__sflush_r+0x1a>
 8015cb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8015cba:	4299      	cmp	r1, r3
 8015cbc:	d002      	beq.n	8015cc4 <__sflush_r+0x94>
 8015cbe:	4628      	mov	r0, r5
 8015cc0:	f7ff fbcc 	bl	801545c <_free_r>
 8015cc4:	2000      	movs	r0, #0
 8015cc6:	6360      	str	r0, [r4, #52]	; 0x34
 8015cc8:	e7c0      	b.n	8015c4c <__sflush_r+0x1c>
 8015cca:	2301      	movs	r3, #1
 8015ccc:	4628      	mov	r0, r5
 8015cce:	47b0      	blx	r6
 8015cd0:	1c41      	adds	r1, r0, #1
 8015cd2:	d1c8      	bne.n	8015c66 <__sflush_r+0x36>
 8015cd4:	682b      	ldr	r3, [r5, #0]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d0c5      	beq.n	8015c66 <__sflush_r+0x36>
 8015cda:	2b1d      	cmp	r3, #29
 8015cdc:	d001      	beq.n	8015ce2 <__sflush_r+0xb2>
 8015cde:	2b16      	cmp	r3, #22
 8015ce0:	d101      	bne.n	8015ce6 <__sflush_r+0xb6>
 8015ce2:	602f      	str	r7, [r5, #0]
 8015ce4:	e7b1      	b.n	8015c4a <__sflush_r+0x1a>
 8015ce6:	89a3      	ldrh	r3, [r4, #12]
 8015ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015cec:	81a3      	strh	r3, [r4, #12]
 8015cee:	e7ad      	b.n	8015c4c <__sflush_r+0x1c>
 8015cf0:	690f      	ldr	r7, [r1, #16]
 8015cf2:	2f00      	cmp	r7, #0
 8015cf4:	d0a9      	beq.n	8015c4a <__sflush_r+0x1a>
 8015cf6:	0793      	lsls	r3, r2, #30
 8015cf8:	680e      	ldr	r6, [r1, #0]
 8015cfa:	600f      	str	r7, [r1, #0]
 8015cfc:	bf0c      	ite	eq
 8015cfe:	694b      	ldreq	r3, [r1, #20]
 8015d00:	2300      	movne	r3, #0
 8015d02:	eba6 0807 	sub.w	r8, r6, r7
 8015d06:	608b      	str	r3, [r1, #8]
 8015d08:	f1b8 0f00 	cmp.w	r8, #0
 8015d0c:	dd9d      	ble.n	8015c4a <__sflush_r+0x1a>
 8015d0e:	4643      	mov	r3, r8
 8015d10:	463a      	mov	r2, r7
 8015d12:	6a21      	ldr	r1, [r4, #32]
 8015d14:	4628      	mov	r0, r5
 8015d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015d18:	47b0      	blx	r6
 8015d1a:	2800      	cmp	r0, #0
 8015d1c:	dc06      	bgt.n	8015d2c <__sflush_r+0xfc>
 8015d1e:	89a3      	ldrh	r3, [r4, #12]
 8015d20:	f04f 30ff 	mov.w	r0, #4294967295
 8015d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015d28:	81a3      	strh	r3, [r4, #12]
 8015d2a:	e78f      	b.n	8015c4c <__sflush_r+0x1c>
 8015d2c:	4407      	add	r7, r0
 8015d2e:	eba8 0800 	sub.w	r8, r8, r0
 8015d32:	e7e9      	b.n	8015d08 <__sflush_r+0xd8>
 8015d34:	dfbffffe 	.word	0xdfbffffe

08015d38 <_fflush_r>:
 8015d38:	b538      	push	{r3, r4, r5, lr}
 8015d3a:	690b      	ldr	r3, [r1, #16]
 8015d3c:	4605      	mov	r5, r0
 8015d3e:	460c      	mov	r4, r1
 8015d40:	b913      	cbnz	r3, 8015d48 <_fflush_r+0x10>
 8015d42:	2500      	movs	r5, #0
 8015d44:	4628      	mov	r0, r5
 8015d46:	bd38      	pop	{r3, r4, r5, pc}
 8015d48:	b118      	cbz	r0, 8015d52 <_fflush_r+0x1a>
 8015d4a:	6a03      	ldr	r3, [r0, #32]
 8015d4c:	b90b      	cbnz	r3, 8015d52 <_fflush_r+0x1a>
 8015d4e:	f7ff f993 	bl	8015078 <__sinit>
 8015d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015d56:	2b00      	cmp	r3, #0
 8015d58:	d0f3      	beq.n	8015d42 <_fflush_r+0xa>
 8015d5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8015d5c:	07d0      	lsls	r0, r2, #31
 8015d5e:	d404      	bmi.n	8015d6a <_fflush_r+0x32>
 8015d60:	0599      	lsls	r1, r3, #22
 8015d62:	d402      	bmi.n	8015d6a <_fflush_r+0x32>
 8015d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d66:	f7ff fb4b 	bl	8015400 <__retarget_lock_acquire_recursive>
 8015d6a:	4628      	mov	r0, r5
 8015d6c:	4621      	mov	r1, r4
 8015d6e:	f7ff ff5f 	bl	8015c30 <__sflush_r>
 8015d72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8015d74:	4605      	mov	r5, r0
 8015d76:	07da      	lsls	r2, r3, #31
 8015d78:	d4e4      	bmi.n	8015d44 <_fflush_r+0xc>
 8015d7a:	89a3      	ldrh	r3, [r4, #12]
 8015d7c:	059b      	lsls	r3, r3, #22
 8015d7e:	d4e1      	bmi.n	8015d44 <_fflush_r+0xc>
 8015d80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8015d82:	f7ff fb3e 	bl	8015402 <__retarget_lock_release_recursive>
 8015d86:	e7dd      	b.n	8015d44 <_fflush_r+0xc>

08015d88 <fiprintf>:
 8015d88:	b40e      	push	{r1, r2, r3}
 8015d8a:	b503      	push	{r0, r1, lr}
 8015d8c:	ab03      	add	r3, sp, #12
 8015d8e:	4601      	mov	r1, r0
 8015d90:	4805      	ldr	r0, [pc, #20]	; (8015da8 <fiprintf+0x20>)
 8015d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8015d96:	6800      	ldr	r0, [r0, #0]
 8015d98:	9301      	str	r3, [sp, #4]
 8015d9a:	f000 f89f 	bl	8015edc <_vfiprintf_r>
 8015d9e:	b002      	add	sp, #8
 8015da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8015da4:	b003      	add	sp, #12
 8015da6:	4770      	bx	lr
 8015da8:	2001b708 	.word	0x2001b708

08015dac <memmove>:
 8015dac:	4288      	cmp	r0, r1
 8015dae:	b510      	push	{r4, lr}
 8015db0:	eb01 0402 	add.w	r4, r1, r2
 8015db4:	d902      	bls.n	8015dbc <memmove+0x10>
 8015db6:	4284      	cmp	r4, r0
 8015db8:	4623      	mov	r3, r4
 8015dba:	d807      	bhi.n	8015dcc <memmove+0x20>
 8015dbc:	1e43      	subs	r3, r0, #1
 8015dbe:	42a1      	cmp	r1, r4
 8015dc0:	d008      	beq.n	8015dd4 <memmove+0x28>
 8015dc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015dc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8015dca:	e7f8      	b.n	8015dbe <memmove+0x12>
 8015dcc:	4402      	add	r2, r0
 8015dce:	4601      	mov	r1, r0
 8015dd0:	428a      	cmp	r2, r1
 8015dd2:	d100      	bne.n	8015dd6 <memmove+0x2a>
 8015dd4:	bd10      	pop	{r4, pc}
 8015dd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015dda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8015dde:	e7f7      	b.n	8015dd0 <memmove+0x24>

08015de0 <_sbrk_r>:
 8015de0:	b538      	push	{r3, r4, r5, lr}
 8015de2:	2300      	movs	r3, #0
 8015de4:	4d05      	ldr	r5, [pc, #20]	; (8015dfc <_sbrk_r+0x1c>)
 8015de6:	4604      	mov	r4, r0
 8015de8:	4608      	mov	r0, r1
 8015dea:	602b      	str	r3, [r5, #0]
 8015dec:	f7ec f882 	bl	8001ef4 <_sbrk>
 8015df0:	1c43      	adds	r3, r0, #1
 8015df2:	d102      	bne.n	8015dfa <_sbrk_r+0x1a>
 8015df4:	682b      	ldr	r3, [r5, #0]
 8015df6:	b103      	cbz	r3, 8015dfa <_sbrk_r+0x1a>
 8015df8:	6023      	str	r3, [r4, #0]
 8015dfa:	bd38      	pop	{r3, r4, r5, pc}
 8015dfc:	20025e58 	.word	0x20025e58

08015e00 <memchr>:
 8015e00:	b2c9      	uxtb	r1, r1
 8015e02:	4402      	add	r2, r0
 8015e04:	b510      	push	{r4, lr}
 8015e06:	4290      	cmp	r0, r2
 8015e08:	4603      	mov	r3, r0
 8015e0a:	d101      	bne.n	8015e10 <memchr+0x10>
 8015e0c:	2300      	movs	r3, #0
 8015e0e:	e003      	b.n	8015e18 <memchr+0x18>
 8015e10:	781c      	ldrb	r4, [r3, #0]
 8015e12:	3001      	adds	r0, #1
 8015e14:	428c      	cmp	r4, r1
 8015e16:	d1f6      	bne.n	8015e06 <memchr+0x6>
 8015e18:	4618      	mov	r0, r3
 8015e1a:	bd10      	pop	{r4, pc}

08015e1c <abort>:
 8015e1c:	2006      	movs	r0, #6
 8015e1e:	b508      	push	{r3, lr}
 8015e20:	f000 fa34 	bl	801628c <raise>
 8015e24:	2001      	movs	r0, #1
 8015e26:	f7eb ffed 	bl	8001e04 <_exit>

08015e2a <_realloc_r>:
 8015e2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e2e:	4680      	mov	r8, r0
 8015e30:	4614      	mov	r4, r2
 8015e32:	460e      	mov	r6, r1
 8015e34:	b921      	cbnz	r1, 8015e40 <_realloc_r+0x16>
 8015e36:	4611      	mov	r1, r2
 8015e38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015e3c:	f7ff bb82 	b.w	8015544 <_malloc_r>
 8015e40:	b92a      	cbnz	r2, 8015e4e <_realloc_r+0x24>
 8015e42:	4625      	mov	r5, r4
 8015e44:	f7ff fb0a 	bl	801545c <_free_r>
 8015e48:	4628      	mov	r0, r5
 8015e4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e4e:	f000 fa39 	bl	80162c4 <_malloc_usable_size_r>
 8015e52:	4284      	cmp	r4, r0
 8015e54:	4607      	mov	r7, r0
 8015e56:	d802      	bhi.n	8015e5e <_realloc_r+0x34>
 8015e58:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8015e5c:	d812      	bhi.n	8015e84 <_realloc_r+0x5a>
 8015e5e:	4621      	mov	r1, r4
 8015e60:	4640      	mov	r0, r8
 8015e62:	f7ff fb6f 	bl	8015544 <_malloc_r>
 8015e66:	4605      	mov	r5, r0
 8015e68:	2800      	cmp	r0, #0
 8015e6a:	d0ed      	beq.n	8015e48 <_realloc_r+0x1e>
 8015e6c:	42bc      	cmp	r4, r7
 8015e6e:	4622      	mov	r2, r4
 8015e70:	4631      	mov	r1, r6
 8015e72:	bf28      	it	cs
 8015e74:	463a      	movcs	r2, r7
 8015e76:	f7ff fac5 	bl	8015404 <memcpy>
 8015e7a:	4631      	mov	r1, r6
 8015e7c:	4640      	mov	r0, r8
 8015e7e:	f7ff faed 	bl	801545c <_free_r>
 8015e82:	e7e1      	b.n	8015e48 <_realloc_r+0x1e>
 8015e84:	4635      	mov	r5, r6
 8015e86:	e7df      	b.n	8015e48 <_realloc_r+0x1e>

08015e88 <__sfputc_r>:
 8015e88:	6893      	ldr	r3, [r2, #8]
 8015e8a:	3b01      	subs	r3, #1
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	6093      	str	r3, [r2, #8]
 8015e90:	b410      	push	{r4}
 8015e92:	da08      	bge.n	8015ea6 <__sfputc_r+0x1e>
 8015e94:	6994      	ldr	r4, [r2, #24]
 8015e96:	42a3      	cmp	r3, r4
 8015e98:	db01      	blt.n	8015e9e <__sfputc_r+0x16>
 8015e9a:	290a      	cmp	r1, #10
 8015e9c:	d103      	bne.n	8015ea6 <__sfputc_r+0x1e>
 8015e9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015ea2:	f000 b935 	b.w	8016110 <__swbuf_r>
 8015ea6:	6813      	ldr	r3, [r2, #0]
 8015ea8:	1c58      	adds	r0, r3, #1
 8015eaa:	6010      	str	r0, [r2, #0]
 8015eac:	4608      	mov	r0, r1
 8015eae:	7019      	strb	r1, [r3, #0]
 8015eb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8015eb4:	4770      	bx	lr

08015eb6 <__sfputs_r>:
 8015eb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015eb8:	4606      	mov	r6, r0
 8015eba:	460f      	mov	r7, r1
 8015ebc:	4614      	mov	r4, r2
 8015ebe:	18d5      	adds	r5, r2, r3
 8015ec0:	42ac      	cmp	r4, r5
 8015ec2:	d101      	bne.n	8015ec8 <__sfputs_r+0x12>
 8015ec4:	2000      	movs	r0, #0
 8015ec6:	e007      	b.n	8015ed8 <__sfputs_r+0x22>
 8015ec8:	463a      	mov	r2, r7
 8015eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015ece:	4630      	mov	r0, r6
 8015ed0:	f7ff ffda 	bl	8015e88 <__sfputc_r>
 8015ed4:	1c43      	adds	r3, r0, #1
 8015ed6:	d1f3      	bne.n	8015ec0 <__sfputs_r+0xa>
 8015ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08015edc <_vfiprintf_r>:
 8015edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ee0:	460d      	mov	r5, r1
 8015ee2:	b09d      	sub	sp, #116	; 0x74
 8015ee4:	4614      	mov	r4, r2
 8015ee6:	4698      	mov	r8, r3
 8015ee8:	4606      	mov	r6, r0
 8015eea:	b118      	cbz	r0, 8015ef4 <_vfiprintf_r+0x18>
 8015eec:	6a03      	ldr	r3, [r0, #32]
 8015eee:	b90b      	cbnz	r3, 8015ef4 <_vfiprintf_r+0x18>
 8015ef0:	f7ff f8c2 	bl	8015078 <__sinit>
 8015ef4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015ef6:	07d9      	lsls	r1, r3, #31
 8015ef8:	d405      	bmi.n	8015f06 <_vfiprintf_r+0x2a>
 8015efa:	89ab      	ldrh	r3, [r5, #12]
 8015efc:	059a      	lsls	r2, r3, #22
 8015efe:	d402      	bmi.n	8015f06 <_vfiprintf_r+0x2a>
 8015f00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f02:	f7ff fa7d 	bl	8015400 <__retarget_lock_acquire_recursive>
 8015f06:	89ab      	ldrh	r3, [r5, #12]
 8015f08:	071b      	lsls	r3, r3, #28
 8015f0a:	d501      	bpl.n	8015f10 <_vfiprintf_r+0x34>
 8015f0c:	692b      	ldr	r3, [r5, #16]
 8015f0e:	b99b      	cbnz	r3, 8015f38 <_vfiprintf_r+0x5c>
 8015f10:	4629      	mov	r1, r5
 8015f12:	4630      	mov	r0, r6
 8015f14:	f000 f93a 	bl	801618c <__swsetup_r>
 8015f18:	b170      	cbz	r0, 8015f38 <_vfiprintf_r+0x5c>
 8015f1a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8015f1c:	07dc      	lsls	r4, r3, #31
 8015f1e:	d504      	bpl.n	8015f2a <_vfiprintf_r+0x4e>
 8015f20:	f04f 30ff 	mov.w	r0, #4294967295
 8015f24:	b01d      	add	sp, #116	; 0x74
 8015f26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f2a:	89ab      	ldrh	r3, [r5, #12]
 8015f2c:	0598      	lsls	r0, r3, #22
 8015f2e:	d4f7      	bmi.n	8015f20 <_vfiprintf_r+0x44>
 8015f30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8015f32:	f7ff fa66 	bl	8015402 <__retarget_lock_release_recursive>
 8015f36:	e7f3      	b.n	8015f20 <_vfiprintf_r+0x44>
 8015f38:	2300      	movs	r3, #0
 8015f3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8015f3e:	f04f 0901 	mov.w	r9, #1
 8015f42:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 80160fc <_vfiprintf_r+0x220>
 8015f46:	9309      	str	r3, [sp, #36]	; 0x24
 8015f48:	2320      	movs	r3, #32
 8015f4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8015f4e:	2330      	movs	r3, #48	; 0x30
 8015f50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8015f54:	4623      	mov	r3, r4
 8015f56:	469a      	mov	sl, r3
 8015f58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015f5c:	b10a      	cbz	r2, 8015f62 <_vfiprintf_r+0x86>
 8015f5e:	2a25      	cmp	r2, #37	; 0x25
 8015f60:	d1f9      	bne.n	8015f56 <_vfiprintf_r+0x7a>
 8015f62:	ebba 0b04 	subs.w	fp, sl, r4
 8015f66:	d00b      	beq.n	8015f80 <_vfiprintf_r+0xa4>
 8015f68:	465b      	mov	r3, fp
 8015f6a:	4622      	mov	r2, r4
 8015f6c:	4629      	mov	r1, r5
 8015f6e:	4630      	mov	r0, r6
 8015f70:	f7ff ffa1 	bl	8015eb6 <__sfputs_r>
 8015f74:	3001      	adds	r0, #1
 8015f76:	f000 80a9 	beq.w	80160cc <_vfiprintf_r+0x1f0>
 8015f7a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8015f7c:	445a      	add	r2, fp
 8015f7e:	9209      	str	r2, [sp, #36]	; 0x24
 8015f80:	f89a 3000 	ldrb.w	r3, [sl]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	f000 80a1 	beq.w	80160cc <_vfiprintf_r+0x1f0>
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8015f90:	f10a 0a01 	add.w	sl, sl, #1
 8015f94:	9304      	str	r3, [sp, #16]
 8015f96:	9307      	str	r3, [sp, #28]
 8015f98:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8015f9c:	931a      	str	r3, [sp, #104]	; 0x68
 8015f9e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015fa2:	4654      	mov	r4, sl
 8015fa4:	2205      	movs	r2, #5
 8015fa6:	4855      	ldr	r0, [pc, #340]	; (80160fc <_vfiprintf_r+0x220>)
 8015fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015fac:	f7ff ff28 	bl	8015e00 <memchr>
 8015fb0:	9a04      	ldr	r2, [sp, #16]
 8015fb2:	b9d8      	cbnz	r0, 8015fec <_vfiprintf_r+0x110>
 8015fb4:	06d1      	lsls	r1, r2, #27
 8015fb6:	bf44      	itt	mi
 8015fb8:	2320      	movmi	r3, #32
 8015fba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fbe:	0713      	lsls	r3, r2, #28
 8015fc0:	bf44      	itt	mi
 8015fc2:	232b      	movmi	r3, #43	; 0x2b
 8015fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015fc8:	f89a 3000 	ldrb.w	r3, [sl]
 8015fcc:	2b2a      	cmp	r3, #42	; 0x2a
 8015fce:	d015      	beq.n	8015ffc <_vfiprintf_r+0x120>
 8015fd0:	9a07      	ldr	r2, [sp, #28]
 8015fd2:	4654      	mov	r4, sl
 8015fd4:	2000      	movs	r0, #0
 8015fd6:	f04f 0c0a 	mov.w	ip, #10
 8015fda:	4621      	mov	r1, r4
 8015fdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8015fe0:	3b30      	subs	r3, #48	; 0x30
 8015fe2:	2b09      	cmp	r3, #9
 8015fe4:	d94d      	bls.n	8016082 <_vfiprintf_r+0x1a6>
 8015fe6:	b1b0      	cbz	r0, 8016016 <_vfiprintf_r+0x13a>
 8015fe8:	9207      	str	r2, [sp, #28]
 8015fea:	e014      	b.n	8016016 <_vfiprintf_r+0x13a>
 8015fec:	eba0 0308 	sub.w	r3, r0, r8
 8015ff0:	46a2      	mov	sl, r4
 8015ff2:	fa09 f303 	lsl.w	r3, r9, r3
 8015ff6:	4313      	orrs	r3, r2
 8015ff8:	9304      	str	r3, [sp, #16]
 8015ffa:	e7d2      	b.n	8015fa2 <_vfiprintf_r+0xc6>
 8015ffc:	9b03      	ldr	r3, [sp, #12]
 8015ffe:	1d19      	adds	r1, r3, #4
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	2b00      	cmp	r3, #0
 8016004:	9103      	str	r1, [sp, #12]
 8016006:	bfbb      	ittet	lt
 8016008:	425b      	neglt	r3, r3
 801600a:	f042 0202 	orrlt.w	r2, r2, #2
 801600e:	9307      	strge	r3, [sp, #28]
 8016010:	9307      	strlt	r3, [sp, #28]
 8016012:	bfb8      	it	lt
 8016014:	9204      	strlt	r2, [sp, #16]
 8016016:	7823      	ldrb	r3, [r4, #0]
 8016018:	2b2e      	cmp	r3, #46	; 0x2e
 801601a:	d10c      	bne.n	8016036 <_vfiprintf_r+0x15a>
 801601c:	7863      	ldrb	r3, [r4, #1]
 801601e:	2b2a      	cmp	r3, #42	; 0x2a
 8016020:	d134      	bne.n	801608c <_vfiprintf_r+0x1b0>
 8016022:	9b03      	ldr	r3, [sp, #12]
 8016024:	3402      	adds	r4, #2
 8016026:	1d1a      	adds	r2, r3, #4
 8016028:	681b      	ldr	r3, [r3, #0]
 801602a:	2b00      	cmp	r3, #0
 801602c:	9203      	str	r2, [sp, #12]
 801602e:	bfb8      	it	lt
 8016030:	f04f 33ff 	movlt.w	r3, #4294967295
 8016034:	9305      	str	r3, [sp, #20]
 8016036:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801610c <_vfiprintf_r+0x230>
 801603a:	2203      	movs	r2, #3
 801603c:	7821      	ldrb	r1, [r4, #0]
 801603e:	4650      	mov	r0, sl
 8016040:	f7ff fede 	bl	8015e00 <memchr>
 8016044:	b138      	cbz	r0, 8016056 <_vfiprintf_r+0x17a>
 8016046:	eba0 000a 	sub.w	r0, r0, sl
 801604a:	2240      	movs	r2, #64	; 0x40
 801604c:	9b04      	ldr	r3, [sp, #16]
 801604e:	3401      	adds	r4, #1
 8016050:	4082      	lsls	r2, r0
 8016052:	4313      	orrs	r3, r2
 8016054:	9304      	str	r3, [sp, #16]
 8016056:	f814 1b01 	ldrb.w	r1, [r4], #1
 801605a:	2206      	movs	r2, #6
 801605c:	4828      	ldr	r0, [pc, #160]	; (8016100 <_vfiprintf_r+0x224>)
 801605e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016062:	f7ff fecd 	bl	8015e00 <memchr>
 8016066:	2800      	cmp	r0, #0
 8016068:	d03f      	beq.n	80160ea <_vfiprintf_r+0x20e>
 801606a:	4b26      	ldr	r3, [pc, #152]	; (8016104 <_vfiprintf_r+0x228>)
 801606c:	bb1b      	cbnz	r3, 80160b6 <_vfiprintf_r+0x1da>
 801606e:	9b03      	ldr	r3, [sp, #12]
 8016070:	3307      	adds	r3, #7
 8016072:	f023 0307 	bic.w	r3, r3, #7
 8016076:	3308      	adds	r3, #8
 8016078:	9303      	str	r3, [sp, #12]
 801607a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801607c:	443b      	add	r3, r7
 801607e:	9309      	str	r3, [sp, #36]	; 0x24
 8016080:	e768      	b.n	8015f54 <_vfiprintf_r+0x78>
 8016082:	fb0c 3202 	mla	r2, ip, r2, r3
 8016086:	460c      	mov	r4, r1
 8016088:	2001      	movs	r0, #1
 801608a:	e7a6      	b.n	8015fda <_vfiprintf_r+0xfe>
 801608c:	2300      	movs	r3, #0
 801608e:	3401      	adds	r4, #1
 8016090:	f04f 0c0a 	mov.w	ip, #10
 8016094:	4619      	mov	r1, r3
 8016096:	9305      	str	r3, [sp, #20]
 8016098:	4620      	mov	r0, r4
 801609a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801609e:	3a30      	subs	r2, #48	; 0x30
 80160a0:	2a09      	cmp	r2, #9
 80160a2:	d903      	bls.n	80160ac <_vfiprintf_r+0x1d0>
 80160a4:	2b00      	cmp	r3, #0
 80160a6:	d0c6      	beq.n	8016036 <_vfiprintf_r+0x15a>
 80160a8:	9105      	str	r1, [sp, #20]
 80160aa:	e7c4      	b.n	8016036 <_vfiprintf_r+0x15a>
 80160ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80160b0:	4604      	mov	r4, r0
 80160b2:	2301      	movs	r3, #1
 80160b4:	e7f0      	b.n	8016098 <_vfiprintf_r+0x1bc>
 80160b6:	ab03      	add	r3, sp, #12
 80160b8:	462a      	mov	r2, r5
 80160ba:	a904      	add	r1, sp, #16
 80160bc:	4630      	mov	r0, r6
 80160be:	9300      	str	r3, [sp, #0]
 80160c0:	4b11      	ldr	r3, [pc, #68]	; (8016108 <_vfiprintf_r+0x22c>)
 80160c2:	f3af 8000 	nop.w
 80160c6:	4607      	mov	r7, r0
 80160c8:	1c78      	adds	r0, r7, #1
 80160ca:	d1d6      	bne.n	801607a <_vfiprintf_r+0x19e>
 80160cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80160ce:	07d9      	lsls	r1, r3, #31
 80160d0:	d405      	bmi.n	80160de <_vfiprintf_r+0x202>
 80160d2:	89ab      	ldrh	r3, [r5, #12]
 80160d4:	059a      	lsls	r2, r3, #22
 80160d6:	d402      	bmi.n	80160de <_vfiprintf_r+0x202>
 80160d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80160da:	f7ff f992 	bl	8015402 <__retarget_lock_release_recursive>
 80160de:	89ab      	ldrh	r3, [r5, #12]
 80160e0:	065b      	lsls	r3, r3, #25
 80160e2:	f53f af1d 	bmi.w	8015f20 <_vfiprintf_r+0x44>
 80160e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80160e8:	e71c      	b.n	8015f24 <_vfiprintf_r+0x48>
 80160ea:	ab03      	add	r3, sp, #12
 80160ec:	462a      	mov	r2, r5
 80160ee:	a904      	add	r1, sp, #16
 80160f0:	4630      	mov	r0, r6
 80160f2:	9300      	str	r3, [sp, #0]
 80160f4:	4b04      	ldr	r3, [pc, #16]	; (8016108 <_vfiprintf_r+0x22c>)
 80160f6:	f7ff fc7b 	bl	80159f0 <_printf_i>
 80160fa:	e7e4      	b.n	80160c6 <_vfiprintf_r+0x1ea>
 80160fc:	08016d32 	.word	0x08016d32
 8016100:	08016d3c 	.word	0x08016d3c
 8016104:	00000000 	.word	0x00000000
 8016108:	08015eb7 	.word	0x08015eb7
 801610c:	08016d38 	.word	0x08016d38

08016110 <__swbuf_r>:
 8016110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016112:	460e      	mov	r6, r1
 8016114:	4614      	mov	r4, r2
 8016116:	4605      	mov	r5, r0
 8016118:	b118      	cbz	r0, 8016122 <__swbuf_r+0x12>
 801611a:	6a03      	ldr	r3, [r0, #32]
 801611c:	b90b      	cbnz	r3, 8016122 <__swbuf_r+0x12>
 801611e:	f7fe ffab 	bl	8015078 <__sinit>
 8016122:	69a3      	ldr	r3, [r4, #24]
 8016124:	60a3      	str	r3, [r4, #8]
 8016126:	89a3      	ldrh	r3, [r4, #12]
 8016128:	071a      	lsls	r2, r3, #28
 801612a:	d525      	bpl.n	8016178 <__swbuf_r+0x68>
 801612c:	6923      	ldr	r3, [r4, #16]
 801612e:	b31b      	cbz	r3, 8016178 <__swbuf_r+0x68>
 8016130:	6823      	ldr	r3, [r4, #0]
 8016132:	b2f6      	uxtb	r6, r6
 8016134:	6922      	ldr	r2, [r4, #16]
 8016136:	4637      	mov	r7, r6
 8016138:	1a98      	subs	r0, r3, r2
 801613a:	6963      	ldr	r3, [r4, #20]
 801613c:	4283      	cmp	r3, r0
 801613e:	dc04      	bgt.n	801614a <__swbuf_r+0x3a>
 8016140:	4621      	mov	r1, r4
 8016142:	4628      	mov	r0, r5
 8016144:	f7ff fdf8 	bl	8015d38 <_fflush_r>
 8016148:	b9e0      	cbnz	r0, 8016184 <__swbuf_r+0x74>
 801614a:	68a3      	ldr	r3, [r4, #8]
 801614c:	3b01      	subs	r3, #1
 801614e:	60a3      	str	r3, [r4, #8]
 8016150:	6823      	ldr	r3, [r4, #0]
 8016152:	1c5a      	adds	r2, r3, #1
 8016154:	6022      	str	r2, [r4, #0]
 8016156:	701e      	strb	r6, [r3, #0]
 8016158:	1c43      	adds	r3, r0, #1
 801615a:	6962      	ldr	r2, [r4, #20]
 801615c:	429a      	cmp	r2, r3
 801615e:	d004      	beq.n	801616a <__swbuf_r+0x5a>
 8016160:	89a3      	ldrh	r3, [r4, #12]
 8016162:	07db      	lsls	r3, r3, #31
 8016164:	d506      	bpl.n	8016174 <__swbuf_r+0x64>
 8016166:	2e0a      	cmp	r6, #10
 8016168:	d104      	bne.n	8016174 <__swbuf_r+0x64>
 801616a:	4621      	mov	r1, r4
 801616c:	4628      	mov	r0, r5
 801616e:	f7ff fde3 	bl	8015d38 <_fflush_r>
 8016172:	b938      	cbnz	r0, 8016184 <__swbuf_r+0x74>
 8016174:	4638      	mov	r0, r7
 8016176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016178:	4621      	mov	r1, r4
 801617a:	4628      	mov	r0, r5
 801617c:	f000 f806 	bl	801618c <__swsetup_r>
 8016180:	2800      	cmp	r0, #0
 8016182:	d0d5      	beq.n	8016130 <__swbuf_r+0x20>
 8016184:	f04f 37ff 	mov.w	r7, #4294967295
 8016188:	e7f4      	b.n	8016174 <__swbuf_r+0x64>
	...

0801618c <__swsetup_r>:
 801618c:	b538      	push	{r3, r4, r5, lr}
 801618e:	4b2a      	ldr	r3, [pc, #168]	; (8016238 <__swsetup_r+0xac>)
 8016190:	4605      	mov	r5, r0
 8016192:	460c      	mov	r4, r1
 8016194:	6818      	ldr	r0, [r3, #0]
 8016196:	b118      	cbz	r0, 80161a0 <__swsetup_r+0x14>
 8016198:	6a03      	ldr	r3, [r0, #32]
 801619a:	b90b      	cbnz	r3, 80161a0 <__swsetup_r+0x14>
 801619c:	f7fe ff6c 	bl	8015078 <__sinit>
 80161a0:	89a3      	ldrh	r3, [r4, #12]
 80161a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80161a6:	0718      	lsls	r0, r3, #28
 80161a8:	d422      	bmi.n	80161f0 <__swsetup_r+0x64>
 80161aa:	06d9      	lsls	r1, r3, #27
 80161ac:	d407      	bmi.n	80161be <__swsetup_r+0x32>
 80161ae:	2309      	movs	r3, #9
 80161b0:	602b      	str	r3, [r5, #0]
 80161b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80161b6:	f04f 30ff 	mov.w	r0, #4294967295
 80161ba:	81a3      	strh	r3, [r4, #12]
 80161bc:	e034      	b.n	8016228 <__swsetup_r+0x9c>
 80161be:	0758      	lsls	r0, r3, #29
 80161c0:	d512      	bpl.n	80161e8 <__swsetup_r+0x5c>
 80161c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80161c4:	b141      	cbz	r1, 80161d8 <__swsetup_r+0x4c>
 80161c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80161ca:	4299      	cmp	r1, r3
 80161cc:	d002      	beq.n	80161d4 <__swsetup_r+0x48>
 80161ce:	4628      	mov	r0, r5
 80161d0:	f7ff f944 	bl	801545c <_free_r>
 80161d4:	2300      	movs	r3, #0
 80161d6:	6363      	str	r3, [r4, #52]	; 0x34
 80161d8:	89a3      	ldrh	r3, [r4, #12]
 80161da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80161de:	81a3      	strh	r3, [r4, #12]
 80161e0:	2300      	movs	r3, #0
 80161e2:	6063      	str	r3, [r4, #4]
 80161e4:	6923      	ldr	r3, [r4, #16]
 80161e6:	6023      	str	r3, [r4, #0]
 80161e8:	89a3      	ldrh	r3, [r4, #12]
 80161ea:	f043 0308 	orr.w	r3, r3, #8
 80161ee:	81a3      	strh	r3, [r4, #12]
 80161f0:	6923      	ldr	r3, [r4, #16]
 80161f2:	b94b      	cbnz	r3, 8016208 <__swsetup_r+0x7c>
 80161f4:	89a3      	ldrh	r3, [r4, #12]
 80161f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80161fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80161fe:	d003      	beq.n	8016208 <__swsetup_r+0x7c>
 8016200:	4621      	mov	r1, r4
 8016202:	4628      	mov	r0, r5
 8016204:	f000 f88b 	bl	801631e <__smakebuf_r>
 8016208:	89a0      	ldrh	r0, [r4, #12]
 801620a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801620e:	f010 0301 	ands.w	r3, r0, #1
 8016212:	d00a      	beq.n	801622a <__swsetup_r+0x9e>
 8016214:	2300      	movs	r3, #0
 8016216:	60a3      	str	r3, [r4, #8]
 8016218:	6963      	ldr	r3, [r4, #20]
 801621a:	425b      	negs	r3, r3
 801621c:	61a3      	str	r3, [r4, #24]
 801621e:	6923      	ldr	r3, [r4, #16]
 8016220:	b943      	cbnz	r3, 8016234 <__swsetup_r+0xa8>
 8016222:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016226:	d1c4      	bne.n	80161b2 <__swsetup_r+0x26>
 8016228:	bd38      	pop	{r3, r4, r5, pc}
 801622a:	0781      	lsls	r1, r0, #30
 801622c:	bf58      	it	pl
 801622e:	6963      	ldrpl	r3, [r4, #20]
 8016230:	60a3      	str	r3, [r4, #8]
 8016232:	e7f4      	b.n	801621e <__swsetup_r+0x92>
 8016234:	2000      	movs	r0, #0
 8016236:	e7f7      	b.n	8016228 <__swsetup_r+0x9c>
 8016238:	2001b708 	.word	0x2001b708

0801623c <_raise_r>:
 801623c:	291f      	cmp	r1, #31
 801623e:	b538      	push	{r3, r4, r5, lr}
 8016240:	4604      	mov	r4, r0
 8016242:	460d      	mov	r5, r1
 8016244:	d904      	bls.n	8016250 <_raise_r+0x14>
 8016246:	2316      	movs	r3, #22
 8016248:	6003      	str	r3, [r0, #0]
 801624a:	f04f 30ff 	mov.w	r0, #4294967295
 801624e:	bd38      	pop	{r3, r4, r5, pc}
 8016250:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8016252:	b112      	cbz	r2, 801625a <_raise_r+0x1e>
 8016254:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8016258:	b94b      	cbnz	r3, 801626e <_raise_r+0x32>
 801625a:	4620      	mov	r0, r4
 801625c:	f000 f830 	bl	80162c0 <_getpid_r>
 8016260:	462a      	mov	r2, r5
 8016262:	4601      	mov	r1, r0
 8016264:	4620      	mov	r0, r4
 8016266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801626a:	f000 b817 	b.w	801629c <_kill_r>
 801626e:	2b01      	cmp	r3, #1
 8016270:	d00a      	beq.n	8016288 <_raise_r+0x4c>
 8016272:	1c59      	adds	r1, r3, #1
 8016274:	d103      	bne.n	801627e <_raise_r+0x42>
 8016276:	2316      	movs	r3, #22
 8016278:	6003      	str	r3, [r0, #0]
 801627a:	2001      	movs	r0, #1
 801627c:	e7e7      	b.n	801624e <_raise_r+0x12>
 801627e:	2400      	movs	r4, #0
 8016280:	4628      	mov	r0, r5
 8016282:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8016286:	4798      	blx	r3
 8016288:	2000      	movs	r0, #0
 801628a:	e7e0      	b.n	801624e <_raise_r+0x12>

0801628c <raise>:
 801628c:	4b02      	ldr	r3, [pc, #8]	; (8016298 <raise+0xc>)
 801628e:	4601      	mov	r1, r0
 8016290:	6818      	ldr	r0, [r3, #0]
 8016292:	f7ff bfd3 	b.w	801623c <_raise_r>
 8016296:	bf00      	nop
 8016298:	2001b708 	.word	0x2001b708

0801629c <_kill_r>:
 801629c:	b538      	push	{r3, r4, r5, lr}
 801629e:	2300      	movs	r3, #0
 80162a0:	4d06      	ldr	r5, [pc, #24]	; (80162bc <_kill_r+0x20>)
 80162a2:	4604      	mov	r4, r0
 80162a4:	4608      	mov	r0, r1
 80162a6:	4611      	mov	r1, r2
 80162a8:	602b      	str	r3, [r5, #0]
 80162aa:	f7eb fd9b 	bl	8001de4 <_kill>
 80162ae:	1c43      	adds	r3, r0, #1
 80162b0:	d102      	bne.n	80162b8 <_kill_r+0x1c>
 80162b2:	682b      	ldr	r3, [r5, #0]
 80162b4:	b103      	cbz	r3, 80162b8 <_kill_r+0x1c>
 80162b6:	6023      	str	r3, [r4, #0]
 80162b8:	bd38      	pop	{r3, r4, r5, pc}
 80162ba:	bf00      	nop
 80162bc:	20025e58 	.word	0x20025e58

080162c0 <_getpid_r>:
 80162c0:	f7eb bd88 	b.w	8001dd4 <_getpid>

080162c4 <_malloc_usable_size_r>:
 80162c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80162c8:	1f18      	subs	r0, r3, #4
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	bfbc      	itt	lt
 80162ce:	580b      	ldrlt	r3, [r1, r0]
 80162d0:	18c0      	addlt	r0, r0, r3
 80162d2:	4770      	bx	lr

080162d4 <__swhatbuf_r>:
 80162d4:	b570      	push	{r4, r5, r6, lr}
 80162d6:	460c      	mov	r4, r1
 80162d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80162dc:	b096      	sub	sp, #88	; 0x58
 80162de:	4615      	mov	r5, r2
 80162e0:	2900      	cmp	r1, #0
 80162e2:	461e      	mov	r6, r3
 80162e4:	da0c      	bge.n	8016300 <__swhatbuf_r+0x2c>
 80162e6:	89a3      	ldrh	r3, [r4, #12]
 80162e8:	2100      	movs	r1, #0
 80162ea:	f013 0f80 	tst.w	r3, #128	; 0x80
 80162ee:	bf0c      	ite	eq
 80162f0:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80162f4:	2340      	movne	r3, #64	; 0x40
 80162f6:	2000      	movs	r0, #0
 80162f8:	6031      	str	r1, [r6, #0]
 80162fa:	602b      	str	r3, [r5, #0]
 80162fc:	b016      	add	sp, #88	; 0x58
 80162fe:	bd70      	pop	{r4, r5, r6, pc}
 8016300:	466a      	mov	r2, sp
 8016302:	f000 f849 	bl	8016398 <_fstat_r>
 8016306:	2800      	cmp	r0, #0
 8016308:	dbed      	blt.n	80162e6 <__swhatbuf_r+0x12>
 801630a:	9901      	ldr	r1, [sp, #4]
 801630c:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8016310:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8016314:	4259      	negs	r1, r3
 8016316:	4159      	adcs	r1, r3
 8016318:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801631c:	e7eb      	b.n	80162f6 <__swhatbuf_r+0x22>

0801631e <__smakebuf_r>:
 801631e:	898b      	ldrh	r3, [r1, #12]
 8016320:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016322:	079d      	lsls	r5, r3, #30
 8016324:	4606      	mov	r6, r0
 8016326:	460c      	mov	r4, r1
 8016328:	d507      	bpl.n	801633a <__smakebuf_r+0x1c>
 801632a:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801632e:	6023      	str	r3, [r4, #0]
 8016330:	6123      	str	r3, [r4, #16]
 8016332:	2301      	movs	r3, #1
 8016334:	6163      	str	r3, [r4, #20]
 8016336:	b002      	add	sp, #8
 8016338:	bd70      	pop	{r4, r5, r6, pc}
 801633a:	ab01      	add	r3, sp, #4
 801633c:	466a      	mov	r2, sp
 801633e:	f7ff ffc9 	bl	80162d4 <__swhatbuf_r>
 8016342:	9900      	ldr	r1, [sp, #0]
 8016344:	4605      	mov	r5, r0
 8016346:	4630      	mov	r0, r6
 8016348:	f7ff f8fc 	bl	8015544 <_malloc_r>
 801634c:	b948      	cbnz	r0, 8016362 <__smakebuf_r+0x44>
 801634e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016352:	059a      	lsls	r2, r3, #22
 8016354:	d4ef      	bmi.n	8016336 <__smakebuf_r+0x18>
 8016356:	f023 0303 	bic.w	r3, r3, #3
 801635a:	f043 0302 	orr.w	r3, r3, #2
 801635e:	81a3      	strh	r3, [r4, #12]
 8016360:	e7e3      	b.n	801632a <__smakebuf_r+0xc>
 8016362:	89a3      	ldrh	r3, [r4, #12]
 8016364:	6020      	str	r0, [r4, #0]
 8016366:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801636a:	6120      	str	r0, [r4, #16]
 801636c:	81a3      	strh	r3, [r4, #12]
 801636e:	9b00      	ldr	r3, [sp, #0]
 8016370:	6163      	str	r3, [r4, #20]
 8016372:	9b01      	ldr	r3, [sp, #4]
 8016374:	b15b      	cbz	r3, 801638e <__smakebuf_r+0x70>
 8016376:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801637a:	4630      	mov	r0, r6
 801637c:	f000 f81e 	bl	80163bc <_isatty_r>
 8016380:	b128      	cbz	r0, 801638e <__smakebuf_r+0x70>
 8016382:	89a3      	ldrh	r3, [r4, #12]
 8016384:	f023 0303 	bic.w	r3, r3, #3
 8016388:	f043 0301 	orr.w	r3, r3, #1
 801638c:	81a3      	strh	r3, [r4, #12]
 801638e:	89a3      	ldrh	r3, [r4, #12]
 8016390:	431d      	orrs	r5, r3
 8016392:	81a5      	strh	r5, [r4, #12]
 8016394:	e7cf      	b.n	8016336 <__smakebuf_r+0x18>
	...

08016398 <_fstat_r>:
 8016398:	b538      	push	{r3, r4, r5, lr}
 801639a:	2300      	movs	r3, #0
 801639c:	4d06      	ldr	r5, [pc, #24]	; (80163b8 <_fstat_r+0x20>)
 801639e:	4604      	mov	r4, r0
 80163a0:	4608      	mov	r0, r1
 80163a2:	4611      	mov	r1, r2
 80163a4:	602b      	str	r3, [r5, #0]
 80163a6:	f7eb fd7c 	bl	8001ea2 <_fstat>
 80163aa:	1c43      	adds	r3, r0, #1
 80163ac:	d102      	bne.n	80163b4 <_fstat_r+0x1c>
 80163ae:	682b      	ldr	r3, [r5, #0]
 80163b0:	b103      	cbz	r3, 80163b4 <_fstat_r+0x1c>
 80163b2:	6023      	str	r3, [r4, #0]
 80163b4:	bd38      	pop	{r3, r4, r5, pc}
 80163b6:	bf00      	nop
 80163b8:	20025e58 	.word	0x20025e58

080163bc <_isatty_r>:
 80163bc:	b538      	push	{r3, r4, r5, lr}
 80163be:	2300      	movs	r3, #0
 80163c0:	4d05      	ldr	r5, [pc, #20]	; (80163d8 <_isatty_r+0x1c>)
 80163c2:	4604      	mov	r4, r0
 80163c4:	4608      	mov	r0, r1
 80163c6:	602b      	str	r3, [r5, #0]
 80163c8:	f7eb fd7b 	bl	8001ec2 <_isatty>
 80163cc:	1c43      	adds	r3, r0, #1
 80163ce:	d102      	bne.n	80163d6 <_isatty_r+0x1a>
 80163d0:	682b      	ldr	r3, [r5, #0]
 80163d2:	b103      	cbz	r3, 80163d6 <_isatty_r+0x1a>
 80163d4:	6023      	str	r3, [r4, #0]
 80163d6:	bd38      	pop	{r3, r4, r5, pc}
 80163d8:	20025e58 	.word	0x20025e58

080163dc <_init>:
 80163dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163de:	bf00      	nop
 80163e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163e2:	bc08      	pop	{r3}
 80163e4:	469e      	mov	lr, r3
 80163e6:	4770      	bx	lr

080163e8 <_fini>:
 80163e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163ea:	bf00      	nop
 80163ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80163ee:	bc08      	pop	{r3}
 80163f0:	469e      	mov	lr, r3
 80163f2:	4770      	bx	lr
